[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Loop through the tuples and compare their elements\n    for element in test_tup1:\n        if element in test_tup2:\n            return element\n    # If no shared elements are found, return None\n    return None"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            if test_tup1[i] not in shared_elements:\n                shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Create sets for each list\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the sets back to lists\n    list_common_elements = list(common_elements)\n\n    return list_common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            if test_tup1[i] not in shared_elements:\n                shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through the first list\n    for element in test_tup1:\n        # If the element is present in the second list, append it to the common_elements list\n        if element in test_tup2:\n            common_elements.append(element)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the input tuples to sets to remove duplicates and find the intersection\n    shared_set = set(test_tup1) & set(test_tup2)\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    \n    # Iterate over the tuples and add the shared elements to the set\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_set.add(test_tup1[i])\n    \n    # Convert the set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns True if it is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if the number is not a prime number, otherwise it returns False.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return False\n    \n    # check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    hq.heapify(nums[:n])\n    # add the remaining numbers to the heap\n    for i in range(n, len(nums)):\n        hq.heappush(nums, nums[i])\n    # return the heap\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max heap to store the n largest numbers\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a min heap\n    hq.heapify(nums)\n    # extract the largest n numbers and convert them back to a list\n    result = [hq.heappop(nums) for _ in range(n)]\n    # reverse the order of the extracted numbers\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input, and returns the n largest integers in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n\n    max_heap = hq.nsmallest(n, nums)\n    # extract the n largest integers from the max heap and return them in descending order\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a max heap\n    max_heap = nums[:]\n    hq.heapify(max_heap)\n    \n    # Remove the smallest n elements from the heap and add them to a new list\n    result = []\n    while len(result) < n:\n        result.append(max_heap.pop())\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap using the nums list as the data\n    max_heap = hq.nsmallest(n, nums)\n    # initialize an empty result list\n    result = []\n    # add the largest n integers from the max heap to the result list\n    for _ in range(n):\n        result.append(max_heap[0])\n        # remove the maximum value from the max heap\n        hq.heappop(max_heap)\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min-heap with the first n elements of the list\n    max_heap = [nums[0]]\n    for i in range(1, n):\n        hq.heappushpop(max_heap, -nums[i])\n    # Extract the n largest elements from the heap and return them as a list\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Create a max heap from the given list\n    largest = []\n    for _ in range(n): # Get the first n elements from the heap\n        largest.append(hq.heappop(nums)) # Add the largest element to the output list\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list to heap using heappush() and heappop()\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    # Pop the n largest numbers from the heap\n    largest_nums = [hq.heappop(heap) for _ in range(n)]\n    \n    # Convert heap to list and return\n    return list(largest_nums)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        # if x is a power of 2, then it will have all 1's on its right side\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given numbers to binary representation\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    # Compare the lengths of the binary representations\n    if len(x_bin) == len(y_bin):\n        # Check if all the bits are the same in both binary representations\n        if x_bin == y_bin:\n            # If all the bits are the same, then the two numbers differ at one bit position only\n            return True\n    else:\n        # If the lengths of the binary representations are different, then the two numbers are not the same\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert the two numbers to binary strings\n    binary_str1 = bin(x)[2:]\n    binary_str2 = bin(x)[2:]\n    \n    # Check if the difference is only at one bit position\n    for i in range(len(binary_str1)):\n        if binary_str1[i]!= binary_str2[i]:\n            return True\n            \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # converting binary string to integer\n    x = int(bin(x)[2:], 2)\n\n    # checking if the difference between the two numbers is 1 or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: \n        x &= (x-1)\n    if x == 1: \n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Initialize the variable to store the count of set bits in the binary representation of the number\n    count = 0\n\n    # Convert the number to binary representation\n    bin_str = bin(x)[2:]\n\n    # Iterate over the binary string and check if the count of set bits is one\n    for bit in bin_str:\n        if bit == '1':\n            count += 1\n        else:\n            break\n\n    # If the count of set bits is one, then the two numbers differ at one bit position only\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of 2\n    if x > 0:\n        while x & 1 == 0:\n            x = x >> 1\n        if x == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(x)[2:]\n    # Check if the length of the binary string is odd or even\n    if len(binary_str) % 2 == 0:\n        # If the length is even, check if the last two digits are the same\n        return binary_str[-2:] == binary_str[-4:-2]\n    else:\n        # If the length is odd, check if the last digit and the second-to-last digit are the same\n        return binary_str[-1] == binary_str[-3]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x & (x-1) == 0:\n            # If x is a power of 2, then its binary representation contains only one bit set\n            return True\n        x >>= 1\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    # print the filtered words\n    print(filtered_words)\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern to match words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # use re.findall() method to find all the matches in the string\n    matches = re.findall(pattern, text)\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Print the result\n    print(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regex to match words that have at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use re.findall to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using the space as the delimiter\n    words = re.findall('\\w+', text)\n\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Find all words that are at least 4 characters long\n    char_long_words = [word for word in words if len(word) >= 4]\n\n    return char_long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create an empty list to store the squared numbers\n    squared_nums = []\n    \n    # loop through each element in the input list\n    for num in nums:\n        # square the current number and append it to the squared_nums list\n        squared_nums.append(num**2)\n    \n    # return the squared_nums list\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    count = 0\n    min_rotations = float('inf')\n\n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Reverse the current string and check if it is equal to the original string\n        if str[i:] == str[:i][::-1]:\n            # If so, increase the count and update the minimum rotations if necessary\n            count += 1\n            if count < min_rotations:\n                min_rotations = count\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Initialize the count and maximum count\n    count = 0\n    max_count = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Compare the two rotations\n            if str[:i] == str[len(str)-j:len(str)-i]:\n                # Update the count if the count is greater than the maximum count\n                count = max(count, j-i)\n                # Update the maximum count\n                max_count = max(max_count, j)\n                \n    # Return the minimum count\n    return max_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        # checking if the string can be formed by reversing the first i characters\n        # and then appending the first i characters\n        if str[:i] == str[i:][::-1] + str[:i]:\n            # calculating the minimum number of rotations required\n            # by counting the number of occurrences of the first i characters in the string\n            rotations = str.count(str[:i])\n            return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    else:\n        for i in range(1, len(str)):\n            if str[i]!= str[0]:\n                return i\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # Initialize variables to store the minimum number of rotations and the number of rotations required to get the same string\n    min_rot = 0\n    num_rot = 0\n\n    # Check for palindromes\n    for i in range(len(str)):\n        if str[i]!= str[-(i+1)]:\n            return \"The given string is not a palindrome\"\n\n    # Check for minimum number of rotations required to get the same string\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            if str[i] > str[i+1]:\n                min_rot += 1\n                temp = str[i]\n                str = str[:i] + str[i+1] + str[i] + temp + str[i+2:]\n                num_rot += 1\n            elif str[i] < str[i+1]:\n                min_rot += 1\n                temp = str[i]\n                str = str[:i+1] + str[i] + str[i+1] + temp + str[i+2:]\n                num_rot += 1\n\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Base case: if the string is empty, return 0 rotations\n    if len(str) == 0:\n        return 0\n\n    # Base case: if the string has only one character, return 0 rotations\n    if len(str) == 1:\n        return 0\n\n    # Recursive case: for each rotation, we need to make a recursive call with the string rotated by 1 character\n    min_rotations = float('inf')\n    for i in range(len(str)):\n        rotated_str = str[i:] + str[:i]\n        rotations = find_Rotations(rotated_str)\n        if rotations > 0:\n            min_rotations = min(min_rotations, rotations + 1)\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n\n    n = len(str)\n    min_rotations = float('inf')\n\n    for i in range(1, n):\n        j = i\n        while j < n and str[j] == str[i]:\n            j += 1\n\n        if j > i:\n            min_rotations = min(min_rotations, j - i)\n\n    return min_rotations + 1 if min_rotations!= 0 else 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function finds the minimum number of rotations (greater than 0) required to get the same string.\n    \n    Args:\n    str (str): The input string.\n    \n    Returns:\n    int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    \n    # Initialize the character frequency dictionary\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Initialize the minimum number of rotations\n    min_rotations = 0\n    \n    # Iterate over all possible rotations\n    for i in range(1, len(str)):\n        # Check if the rotation is valid\n        if char_freq[str[i]] == char_freq[str[0]] and char_freq[str[i-1]] > char_freq[str[0]]:\n            # If the rotation is valid, increment the minimum number of rotations\n            min_rotations += 1\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    dp = [[n] * (n+1) for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i:j] == s[j:]:\n                dp[i][j] = l - 1\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables\n    min_rotations = 0\n    current_str = str\n    # Loop until current string is the same as original string\n    while current_str!= str:\n        # Increment the minimum number of rotations\n        min_rotations += 1\n        # Rotate the string by one character\n        current_str = current_str[1:] + current_str[0]\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    return s[:len(s)-2] + s[-1] if s[-1] == ch else s[:len(s)-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index = s.find(ch)\n    if index!= -1:\n        s = s[:index] + s[index+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize pointers for first and last occurrence of the character\n    first = 0\n    last = len(s)-1\n\n    # loop through the string until the first and last occurrence of the character are found\n    while first < last:\n        # check if the current character is equal to the given character\n        if s[first] == ch:\n            # if it is, move the first pointer to the next character\n            first += 1\n        else:\n            # if it's not, move the first pointer to the current position\n            break\n\n    while first < last:\n        # check if the current character is equal to the given character\n        if s[last] == ch:\n            # if it is, move the last pointer to the previous character\n            last -= 1\n        else:\n            # if it's not, move the last pointer to the current position\n            break\n\n    # remove the first occurrence of the character from the string\n    s = s[:first] + s[first+1:]\n\n    # remove the last occurrence of the character from the string\n    s = s[:last] + s[last+1:]\n\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    if len(s) > 0:\n        return s[1:-1]\n    else:\n        return \"\""
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s[:s.find(ch)] + s[s.find(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = s.replace(ch, \"\")\n    return s[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # if character is first or last character in the string, return empty string\n    if s[0] == ch or s[-1] == ch:\n        return ''\n\n    # if character is neither first nor last character in the string, remove first and last occurrence of it\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[:i] + s[i+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initializing variables\n    pos = -1\n    found = False\n    \n    # iterating through the string\n    for i in range(len(s)):\n        # if the character matches, and it is the first occurrence\n        if s[i] == ch and found == False:\n            pos = i\n            found = True\n            continue\n        # if the character matches and it is not the first occurrence\n        if s[i] == ch and found == True:\n            # removing the first occurrence\n            if pos == -1:\n                s = s[i+1:]\n            else:\n                s = s[:pos] + s[i+1:]\n            # resetting the position of the first occurrence\n            pos = -1\n            found = False\n    \n    # removing the last occurrence\n    if pos == -1:\n        s = s[:-1]\n    else:\n        s = s[:pos-1]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the row\n        for j in range(len(M[i])):\n            # store the current element in a temporary variable\n            temp = M[i][j]\n            # loop through each element in the row after the current one\n            for k in range(j+1, len(M[i])):\n                # if the sum of the current element and the sum of the elements before it is smaller than the sum of the elements after it,\n                # swap the elements\n                if M[i][k] > (temp + M[i][j]):\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                    temp = M[i][j]\n                    j = k"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M[0])-1, j, -1):\n                if M[i][k] > M[i][j]:\n                    M[i][k], M[i][j] = M[i][j], M[i][k]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Traverse through each row of the matrix\n    for i in range(n):\n        # Traverse through each element of the row\n        for j in range(n-i-1):\n            # If the element is smaller than the element on its right, swap them\n            if M[j][i] > M[j+1][i]:\n                M[j][i], M[j+1][i] = M[j+1][i], M[j][i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get the number of rows and columns in the matrix\n    rows, cols = len(M), len(M[0])\n\n    # create a list to store the sum of each row\n    sums = [sum(row) for row in M]\n\n    # sort the matrix in ascending order based on the sums of the rows\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(rows):\n                if sums[i] > sums[k]:\n                    # swap the elements at positions i and k\n                    M[i][j], M[k][j] = M[k][j], M[i][j]\n                    # update the sum of the row at position i\n                    sums[i] = sum(M[i])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the dimensions of the matrix\n    rows, cols = len(M), len(M[0])\n    \n    # Sort the matrix in ascending order\n    for j in range(cols):\n        for i in range(rows):\n            # Calculate the sum of the current row and column\n            row_sum = sum(M[i])\n            col_sum = sum([M[k][j] for k in range(rows)])\n            # Compare the row sum with the column sum\n            if row_sum < col_sum:\n                # Swap the rows if they are not already swapped\n                if i!= rows-1 and M[i]!= M[i+1]:\n                    M[i], M[i+1] = M[i+1], M[i]\n                # Swap the columns if they are not already swapped\n                if j!= cols-1 and M[i][j]!= M[i][j+1]:\n                    M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    # Print the sorted matrix\n    print(\"Sorted Matrix:\")\n    for i in range(rows):\n        row = \" \".join(map(str, M[i]))\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        \n        # Find the sum of the current row\n        row_sum = sum(M[i])\n        \n        # Sort the current row in ascending order\n        M[i].sort()\n        \n        # Loop through each element of the current row and add it to the sum if it's not already there\n        for j in range(len(M[i])):\n            if M[i][j] not in M[i][:j] and M[i][j] not in M[i][j+1:]:\n                row_sum += M[i][j]\n        \n        # Divide the sum by the length of the current row to get the final sum of the matrix\n        M[i] = [row_sum/len(M[i])] + M[i][1:]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize a new list to store the sorted matrix\n    sorted_M = []\n    # Loop through each row of the matrix\n    for i in range(n):\n        # Initialize variables to keep track of the minimum and maximum values in the row\n        min_val = M[i][0]\n        max_val = M[i][0]\n        # Loop through each element in the row and update the minimum and maximum values\n        for j in range(1, n):\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n            elif M[i][j] > max_val:\n                max_val = M[i][j]\n        # Create a new list to store the elements in the row that fall within the minimum and maximum values\n        row_slice = [x for x in M[i] if x >= min_val and x <= max_val]\n        # Sort the row slice and append it to the sorted matrix\n        sorted_row = sorted(row_slice)\n        sorted_M.append(sorted_row)\n    # Combine all the sorted rows into a single sorted matrix\n    sorted_M = sorted(sorted_M, key=sum)\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a copy of the matrix to avoid modifying the original\n    M_sorted = [[0 for j in range(n)] for i in range(n)]\n    # loop through the rows of the matrix\n    for i in range(n):\n        # loop through the elements in each row, starting from the first element\n        for j in range(n):\n            # add up the elements in the row and add it to the sorted row\n            row_sum = sum(M[i][j:]) + M[i][j]\n            # add the row to the sorted matrix\n            M_sorted[i][j] = row_sum\n    return M_sorted"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    area = 0.5 * l * b\n    volume = area * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    V = l * b * h\n    \n    # return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate the volume using Heron's formula\n    volume = (1/3)*(l*b*h)\n    #return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Calculate the volume of the prism\n    V = l * b * h\n    \n    # Print the volume of the prism\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, width and height of a triangular prism as input parameters and returns its volume.\n    \"\"\"\n    # Calculate the volume of the triangular prism\n    volume = 0.5 * l * b * h\n\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=.*[a-z])[a-z]*_[a-z]*'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z][a-z0-9]*)_([a-z][a-z0-9]*)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?i)(?<=\\w)(?=[a-z])')\n    matches = pattern.finditer(text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    matches = re.findall(pattern, text.lower())\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!\\w)_(?=[a-z])'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+[_][a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'_+[a-z]+_'\n    return bool(re.search(underscore_pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define regular expression pattern for matching lowercase sequences with underscores\n    pattern = r'(?<![a-zA-Z])([a-z]+)_+(?=[a-zA-Z])'\n    \n    # Use re.search() method to search for pattern in input string\n    matches = re.search(pattern, text)\n    \n    # If pattern is found, return True\n    if matches:\n        return True\n    \n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_?[a-z]*')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, no_of_chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return result[:no_of_chars]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of characters\n    list_str = list(string)\n\n    # Create a list of characters to be removed from the first string\n    char_list = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n    # Remove characters from the first string which are present in the second string\n    for i in range(len(list_str)):\n        if list_str[i] in char_list:\n            list_str.pop(i)\n\n    # Convert the list of characters to a string and return it\n    return ''.join(list_str)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    char_set = set(string)\n    char_list = list(char_set)\n    sorted_char_list = sorted(char_list)\n\n    for i in range(len(char_list)):\n        if char_list[i] in sorted_char_list:\n            char_list.remove(char_list[i])\n\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    # create a list of the ASCII characters\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n\n    # create a list of characters that should be removed from the first string\n    remove_list = [c for c in string if c in char_list]\n\n    # remove the characters from the first string\n    result = [c for c in string if c not in remove_list]\n\n    # join the list of characters into a string\n    result = ''.join(result)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string2)\n    return ''.join([char for char in string1 if char not in char_set])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    # Create an empty list to store the characters.\n    result_list = []\n    # Loop through each character in the input string.\n    for char in string:\n        # If the character is not present in the NO_OF_CHARS list, append it to the result_list.\n        if char not in NO_OF_CHARS:\n            result_list.append(char)\n    return result_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string into a list of characters\n    char_list = list(string)\n\n    # Initialize an empty string to store the modified string\n    modified_string = \"\"\n\n    # Iterate through each character in the list\n    for char in char_list:\n\n        # If the character is not present in the second string, add it to the modified string\n        if char not in string:\n            modified_string += char\n\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string[string.find(char)+1:]:\n            string = string.replace(char, \"\", 1)\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Get the length of the character list\n    length = len(char_list)\n\n    # Create a new list to store the unique characters\n    unique_char_list = []\n\n    # Iterate through the character list\n    for i in range(length):\n        # If the current character is not in the second string, add it to the new list\n        if char_list[i] not in unique_char_list:\n            unique_char_list.append(char_list[i])\n\n    # Convert the new list of unique characters back to a string and return it\n    return ''.join(unique_char_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the occurrence of each number in the array\n    counts = {}\n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment the count by 1\n        if num in counts:\n            counts[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            counts[num] = 1\n    # Iterate through each number in the dictionary and check if its count is greater than 1\n    for num in counts:\n        if counts[num] > 1:\n            return True\n    # If no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store unique elements of the array\n    unique_dict = {}\n    \n    # iterate through the array and add unique elements to the dictionary\n    for num in arraynums:\n        if num not in unique_dict:\n            unique_dict[num] = True\n    \n    # check if there are any duplicate elements in the dictionary\n    if len(unique_dict)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements\n    unique_dict = {}\n\n    # loop through the array and add unique elements to the dictionary\n    for num in arraynums:\n        if num in unique_dict:\n            return True\n        else:\n            unique_dict[num] = True\n\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements\n    unique_nums = set()\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is not in the set, add it and return True\n        if num not in unique_nums:\n            unique_nums.add(num)\n            return True\n\n    # If we reach this point, the array does not contain any duplicate elements\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the element count for each number in the array\n    count = {}\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Check if any number in the dictionary has a count greater than 1\n    for num, count in count.items():\n        if count > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and (x % 10 == 4 or x % 10 == 7):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 0: \n        return 'The number is 0' \n    elif x % 2 == 0: \n        return 'The number is a woodball' \n    else: \n        return 'The number is not a woodball' "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0: \n        return False \n    elif x % 2 == 0: \n        for i in range(3, int(x**0.5)+1, 2): \n            if x % i == 0: \n                return False \n        return True \n    else: \n        return True "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 and x <= 200:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x in [3, 6, 9, 12, 15, 18, 21]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Define the set of valid woodball numbers\n    valid_woodalls = {1, 5, 10, 50, 100, 500, 1000}\n\n    # Check if the input is in the valid set\n    if x in valid_woodalls:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1000:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    return rev_num == (2 * rev_num + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    reverse = int(num_str[::-1])\n    \n    if reverse < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - 2 * reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*num == num + num\n\nnum = int(input(\"Enter a number: \"))\nif rev(num):\n    print(\"The number is one less than twice its reverse.\")\nelse:\n    print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num*10 + num % 10\n        num //= 10\n    if reversed_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return str(num) == str(int(num[::-1]) + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num + reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    \n    # convert the given number to integer and store it in rev_num\n    while(temp!= 0):\n        rem = temp % 10\n        rev_num = (rev_num * 10) + rem\n        temp = temp // 10\n    \n    # check if the reverse of the given number is one less than twice the reverse of the given number\n    if(abs(rev_num - num) < 2 * num):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    temp = num\n\n    # Reverse the number\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n\n    # Check if the original number is one less than twice its reverse\n    if num - 2 * rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == num**2 - 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(1, 10):\n        for j in arr:\n            if i <= j <= 9:\n                max_num = max(max_num, i*j)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sort the list in reverse order\n    max_num = 0 # Initialize the maximum number variable\n    for i in range(len(arr)) : # Loop through each digit in the list\n        max_num += (int(arr[i]) ** len(arr)) # Calculate the maximum number formed with that digit and the remaining digits in the list\n    return max_num # Return the maximum number"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # Convert the list of digits into an integer\n    num = int(''.join(map(str, arr)))\n    \n    # Convert the integer into a list of digits\n    arr_digits = []\n    while num > 0:\n        arr_digits.append(num % 10)\n        num //= 10\n    \n    # Initialize the maximum number formed with the digits\n    max_num = 0\n    \n    # Loop through all possible numbers and check if they can be formed with the given digits\n    for i in range(1, 10):\n        num = i\n        for j in range(len(arr_digits)):\n            num *= 10\n            num += arr_digits[j]\n        if num > max_num:\n            max_num = num\n            \n    # Return the maximum number formed with the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1):\n        max_num += int(arr[i])*int(arr[i+1])\n    max_num += int(arr[-1])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i]*(10**i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i, len(arr)):\n            temp = temp*10 + arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    power = 0\n    for i in range(len(arr)-1,-1,-1):\n        num = int(arr[i])\n        if num == 0:\n            continue\n        if num > max_num:\n            max_num = num\n            power = i+1\n    return max_num**(power)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(10):\n        for j in range(1, len(arr)):\n            if arr[j] == i:\n                max_num += arr[j]**j\n        if max_num > 9:\n            max_num -= 9\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the maximum possible number that can be formed by concatenating the digits.\n    '''\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = 0\n    for digit in arr:\n        max_num = max_num * 10 + digit # Multiply the current maximum number by 10 and add the current digit to it\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1,-1,-1) :\n        max_num += (2**i)*(arr[i]-1)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # If both numbers are positive, their signs will be opposite.\n    if x > 0 and y > 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is positive and other is negative, then their signs will be opposite.\n    elif x > 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is negative and other is positive, then their signs will be opposite.\n    elif x < 0 and y > 0:\n        return \"The two numbers have opposite signs\"\n\n    # If both numbers are negative, their signs will also be opposite.\n    elif x < 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is zero and other is positive or negative, then their signs will be opposite.\n    elif x == 0 and (y > 0 or y < 0):\n        return \"The two numbers have opposite signs\"\n\n    # If one number is zero and other is zero, then their signs will be equal.\n    elif x == 0 and y == 0:\n        return \"The two numbers have equal signs\"\n\n    # If one number is zero and other is negative, then their signs will be opposite.\n    elif x == 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is zero and other is positive, then their signs will be opposite.\n    elif x == 0 and y > 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is positive and other is zero, then their signs will be equal.\n    elif x > 0 and y == 0:\n        return \"The two numbers have equal signs\"\n\n    # If one number is negative and other is zero, then their signs will be equal.\n    elif x < 0 and y == 0:\n        return \"The two numbers have equal signs\"\n\n    # If none of the above conditions are met, then their signs are not opposite.\n    else:\n        return \"The two numbers have not opposite signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y<0) or (x>0 and y>0):\n        return \"The signs of both the numbers are opposite.\"\n    elif x<0 and y>0:\n        return \"The first number has negative sign and the second number has positive sign.\"\n    elif x>0 and y<0:\n        return \"The first number has positive sign and the second number has negative sign.\"\n    else:\n        return \"The signs of both the numbers are same.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if the signs of x and y are opposite\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function will check whether two integers have opposite sign or not.\n\n    :param x: first integer to be checked\n    :param y: second integer to be checked\n    :return: True if the two integers have opposite sign, else False.\n    \"\"\"\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return \"The given numbers have opposite signs.\"\n    else:\n        return \"The given numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # checking if x is greater than y\n    if x > y:\n        # swapping x and y\n        x, y = y, x\n    # checking if x is zero\n    if x == 0:\n        # return True if y is zero\n        return y == 0\n    # calculating the sign of y\n    y_sign = y / abs(y)\n    # checking if the sign of x is same as the sign of y\n    if x / abs(x) == y_sign:\n        # return True if x and y have opposite signs\n        return True\n    # otherwise return False\n    return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x == 0:\n        return \"Number 2 has opposite sign to number 1.\"\n    elif y == 0:\n        return \"Number 1 has opposite sign to number 2.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"Number 2 has opposite sign to number 1.\"\n    elif x > 0 and y < 0:\n        return \"Number 1 has opposite sign to number 2.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Find the largest prime factor of n\n    largest_prime = 2\n    while largest_prime**2 <= n:\n        largest_prime += 1\n\n    # Determine the number of times n divides the largest prime factor\n    divides = 0\n    for i in range(2, largest_prime):\n        if n % i == 0:\n            divides += 1\n\n    # Return the nth octagonal number\n    return n + divides"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Determine whether a given number is an octagonal number or not.\n    \"\"\"\n    if n < 1:\n        return False\n    for i in range(1, int(n**0.5) + 1):\n        if n % (i*i) == 0:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base case\n    if n == 1:\n        return 1\n\n    # Calculate the base 10 of n\n    base_ten = n // 10\n\n    # Calculate the octagonal number\n    octagonal = 10 * base_ten * (base_ten + 1) + 10 * n\n\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n    return a\n\noct_n = int(input(\"Enter the value of n: \"))\nresult = is_octagonal(oct_n)\nprint(\"The {}th octagonal number is: {}\".format(oct_n, result))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    for i in range(1, n + 1):\n        j = 1\n        while j <= 2 * i:\n            k = 2 * i - j\n            if j == k:\n                print(f\"{i} x {j} = {i * j}\")\n            elif j < k:\n                print(f\"{i} x {j} = {i * j}\")\n                j += 1\n            else:\n                print(f\"{i} x {j} = {i * j}\")\n                j += 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n - 1 + is_octagonal(n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 2) == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base of the octagonal number system\n    base = 12\n\n    # Initialize the count of the number of even numbers up to the base\n    count = 0\n\n    # Iterate through the numbers up to the nth octagonal number\n    for i in range(1, n+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            count += 1\n\n        # Check if the current number is an octagonal number\n        if count == base:\n            return i\n\n        # Check if the number is an octagonal number\n        if count == base - 1 and i!= n:\n            return i\n\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n    return a\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        a = (i*i*i)\n        if a == is_octagonal(i):\n            return a\n    return -1\n\nprint(nth_octagonal(10))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to the length of the substring\n    count_dict = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count_dict[substring] += 1\n\n    # Return the count of substrings with the sum of digits equal to the length of the substring\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    digit_count = defaultdict(int)\n    total_sum = 0\n    \n    # Count the total sum of digits in the string\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n        total_sum += s[i]\n    \n    # Iterate through all substrings and count their sum of digits\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function counts the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        if s[i] == '0':\n            dp[i] = 0\n        else:\n            for j in range(i):\n                if s[j] == '0' and s[i] == '9':\n                    dp[i] += dp[j]\n    \n    count = sum(dp)\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # loop through the string\n    for i in range(len(s)):\n        # initialize variables for current substring\n        current = s[i]\n        start = i\n        # loop through the rest of the string\n        while i < len(s) - 1:\n            # check if current substring ends with a digit\n            if s[i].isdigit():\n                # check if sum of digits is equal to length of substring\n                if sum([int(digit) for digit in s[i:i+current]]) == len(s[i:i+current]):\n                    # if yes, increment the count of substrings\n                    count_dict[current] += 1\n            # move the substring to the right\n            current = s[i+1]\n            i += 1\n\n    # return the dictionary containing the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a dictionary to store the count of substrings\n    counts = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Create a substring of the current character\n        substring = s[i:i+1]\n\n        # Get the sum of digits in the substring\n        sum_digits = sum(int(d) for d in substring)\n\n        # If the sum of digits is equal to the length of the substring, add 1 to the count\n        if sum_digits == len(substring):\n            counts[substring] += 1\n\n    # Return the count of substrings\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    def count_substrings(s):\n        n = len(s)\n        count = 0\n        dp = defaultdict(int)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(i+1, n+1):\n                if sum(int(digit) for digit in s[i:j]) == j-i:\n                    count += dp[j-i]\n        return count\n\n    return count_substrings(s)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_counts = defaultdict(int)\n    for char in s:\n        digit_counts[ord(char)] += 1\n    count = 0\n    for char in s:\n        for i in range(len(s)):\n            substr = s[i:i+len(char)]\n            if sum(ord(c) - ord('0') for c in substr) == len(substr):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] == '0':\n            continue\n        for j in range(i):\n            if s[i] == s[j] and abs(int(s[i]) - int(s[j])) == i - j:\n                dp[i] += dp[j]\n    return dp[n-1]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        count[i] = 1\n    for i in range(n-2):\n        count[i+1] += count[i]\n    for i in range(n-3):\n        count[i+2] += count[i]\n    for i in range(n-4):\n        count[i+3] += count[i]\n    count[n-1] += count[n-2]\n    count[n-2] += count[n-3]\n    count[n-3] += count[n-4]\n    count[n-4] += count[n-5]\n    count[n-5] += count[n-6]\n    count[n-6] += count[n-7]\n    count[n-7] += count[n-8]\n    count[n-8] += count[n-9]\n    count[n-9] += count[n-10]\n    count[n-10] += count[n-11]\n    count[n-11] += count[n-12]\n    count[n-12] += count[n-13]\n    count[n-13] += count[n-14]\n    count[n-14] += count[n-15]\n    count[n-15] += count[n-16]\n    count[n-16] += count[n-17]\n    count[n-17] += count[n-18]\n    count[n-18] += count[n-19]\n    count[n-19] += count[n-20]\n    count[n-20] += count[n-21]\n    count[n-21] += count[n-22]\n    count[n-22] += count[n-23]\n    count[n-23] += count[n-24]\n    count[n-24] += count[n-25]\n    count[n-25] += count[n-26]\n    count[n-26] += count[n-27]\n    count[n-27] += count[n-28]\n    count[n-28] += count[n-29]\n    count[n-29] += count[n-30]\n    count[n-30] += count[n-31]\n    count[n-31] += count[n-32]\n    count[n-32] += count[n-33]\n    count[n-33] += count[n-34]\n    count[n-34] += count[n-35]\n    count[n-35] += count[n-36]\n    count[n-36] += count[n-37]\n    count[n-37] += count[n-38]\n    count[n-38] += count[n-39]\n    count[n-39] += count[n-40]\n    count[n-40] += count[n-41]\n    count[n-41] += count[n-42]\n    count[n-42] += count[n-43]\n    count[n-43] += count[n-44]\n    count[n-44] += count[n-45]\n    count[n-45] += count[n-46]\n    count[n-46] += count[n-47]\n    count[n-47] += count[n-48]\n    count[n-48] += count[n-49]\n    count[n-49] += count[n-50]\n    count[n-50] += count[n-51]\n    count[n-51] += count[n-52]\n    count[n-52] += count[n-53]\n    count[n-53] += count[n-54]\n    count[n-54] += count[n-55]\n    count[n-55] += count[n-56]\n    count[n-56] += count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a defaultdict to store the count of substrings for each digit sum\n    digit_count = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n\n        # get the current character and its digit sum\n        current_char = s[i]\n        current_sum = int(current_char)\n\n        # loop through each possible substring with the current character\n        for j in range(i, len(s)):\n\n            # get the next character and its digit sum\n            next_char = s[j]\n            next_sum = int(next_char)\n\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if abs(current_sum - next_sum) == len(current_char):\n                digit_count[current_sum] += 1\n\n    # return the sum of the counts for each digit sum\n    return sum(digit_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n\n    if not xs:\n        raise ValueError(\"List cannot be empty.\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to the first number in the list\n    smallest = xs[0]\n    # loop through the remaining numbers in the list\n    for x in xs[1:]:\n        # if the current number is smaller than the smallest number, update the smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0] # assume smallest is first element of xs\n    for x in xs[1:]: # iterate over remaining elements\n        if x < smallest: # if current element is smaller\n            smallest = x # update smallest\n    return smallest # return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Iterate over the list of tuples and calculate the current difference\n    for i in range(len(test_list) - 1):\n        curr_diff = abs(test_list[i][0] - test_list[i+1][0])\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # Update the current difference if the new difference is greater\n            if diff > curr_diff:\n                curr_diff = diff\n                # Update the maximum difference if the current difference is greater\n                if curr_diff > max_diff:\n                    max_diff = curr_diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    n = len(test_list)\n    max_diff = float('-inf')  # initialize max_diff to negative infinity\n    \n    # iterate through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the difference between the elements and update max_diff if necessary\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize max difference to negative infinity\n    max_diff = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the tuples and update max_diff if necessary\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference to zero\n    max_diff = 0\n\n    # Loop through the list\n    for i in range(len(test_list)):\n        # If the difference between the current element and the next element is greater than the previous maximum difference, update the maximum difference\n        if test_list[i][1] - test_list[i][0] > max_diff:\n            max_diff = test_list[i][1] - test_list[i][0]\n\n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = abs(test_list[i][1]-test_list[j][1])\n            \n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list += recursive_list_sum(item)\n            else:\n                flat_list.append(item)\n        return sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element of the list to the sum of the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # recursive case: add first element and sum remaining elements\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                yield item\n\n    flattened_list = list(flatten(data_list))\n    sum_of_elements = sum(flattened_list)\n    return sum_of_elements"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    \"\"\"\n    Recursive function to flatten a list and sum all of its elements.\n    \"\"\"\n    if index < len(data_list):\n        if isinstance(data_list[index], list):\n            total = recursive_list_sum(data_list[index], 0, total)\n        else:\n            total += data_list[index]\n        return recursive_list_sum(data_list, index + 1, total)\n    else:\n        return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(nested_list):\n        if isinstance(nested_list, list):\n            flat_list = []\n            for item in nested_list:\n                if isinstance(item, list):\n                    flat_list.extend(flatten(item))\n                else:\n                    flat_list.append(item)\n            return flat_list\n        else:\n            return [nested_list]\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    # Flatten the list by converting each nested list into a single list\n    flattened_list = [num for sublist in data_list for num in sublist]\n    \n    # Sum all of the elements in the flattened list\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Add the first element to the result of flattening the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(input_list):\n        '''\n        Flatten a nested list.\n        '''\n        result = []\n        for item in input_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n < 0:\n        raise ValueError(\"Bell numbers cannot be negative.\")\n    elif n == 0:\n        return 1\n    else:\n        # calculate the number of ways to partition the first n Bell numbers\n        num_ways = 1\n        for i in range(1, n+1):\n            num_ways *= i\n        # multiply by the number of ways to partition the last n-1 Bell numbers\n        for i in range(1, n-1):\n            num_ways *= i\n        # return the final answer\n        return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1):\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # The number of ways to partition a set of Bell numbers is equal to the number of partitions of n into 2.\n    return n*(n-1)//2\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n-1))//2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1]  # the first two Bell numbers\n    ways = [1] * (n+1)  # initialize the ways list with 1's\n    \n    for i in range(2, n+1):\n        for j in range(1, i//2+1):\n            if j < bell[i-1]:\n                ways[i] += ways[j] + ways[i-j]\n                bell[i] = j\n        bell.append(i)\n        \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition the set to 0\n    ways_to_partition = 0\n\n    # Iterate over all possible values of n\n    for i in range(n+1):\n        # Check if the current value of n is a Bell number\n        if is_bell_number(i):\n            # Increment the number of ways to partition the set by 1\n            ways_to_partition += 1\n\n    return ways_to_partition\n\ndef is_bell_number(n):\n    \"\"\"\n    Check if a number is a Bell number.\n    \"\"\"\n    # Initialize the number of Bell numbers to 0\n    bell_count = 0\n\n    # Iterate over all possible values of n\n    for i in range(1, n+1):\n        # Check if the current value of n is a multiple of i\n        if n % i == 0:\n            # Increment the number of Bell numbers by 1\n            bell_count += 1\n\n    # Check if the number of Bell numbers is equal to n\n    if bell_count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Create a list of Bell numbers up to n\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0], bell_numbers[1] = 1, 1\n    # Loop through the list and calculate the number of ways to partition it\n    ways = 0\n    for i in range(2, n + 1):\n        ways += (i - 1) * bell_numbers[i]\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nprint(bell_number(5)) # Output: 15"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n*(n-1))//2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables to store the number of ways to partition and the number of 1's in each partition\n    ways = [0] * (n + 1)\n    ones = [0] * (n + 1)\n    # Fill in the variables as described in the problem statement\n    #...\n    return ways[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or not\n    if len(A) < 2:\n        return True\n\n    # Check if the array is monotonic or not\n    if A[0] <= A[1]:\n        if len(A) > 2:\n            for i in range(1, len(A)-1):\n                if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                    return False\n    else:\n        if len(A) > 2:\n            for i in range(1, len(A)-1):\n                if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                    return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    # check if the array is increasing or decreasing\n    if A[0] < A[n-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array A and returns True if the array is monotonic, \n    and False otherwise. A monotonic array is one where either all its elements \n    are in increasing order or all its elements are in decreasing order.\n\n    If all elements in the array A are in increasing order, the function returns True.\n    If all elements in the array A are in decreasing order, the function returns False.\n    If the array has a mix of both increasing and decreasing elements, the function \n    returns None.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return False\n    else:\n        return None"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether an array is monotonic or not.\n\n    Parameters:\n    A (list): List of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    \n    # Check if all elements are the same or increasing or decreasing\n    if A[0] <= A[-1] or A[0] >= A[-1]:\n        return True\n    \n    # Check if there are any decreasing elements\n    for i in range(1, len(A)-1):\n        if A[i] >= A[i-1] and A[i] <= A[i+1]:\n            return False\n    \n    # If we reach this point, all elements are either the same or increasing\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array A is monotonic or not.\n\n    Args:\n        A (list): The input array to be checked for monotonicity.\n\n    Returns:\n        bool: True if A is monotonic, False otherwise.\n    '''\n\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:]) and A[0] >= A[1]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Find the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n\n    # Check if the first element is less than the last element\n    if first >= last:\n        return True\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(A)-1):\n        # Check if the current element is less than the previous element\n        if A[i] <= A[i-1]:\n            return False\n\n    # If the array is monotonic, the last element should be greater than or equal to the first element\n    if A[-1] <= first:\n        return False\n    else:\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and checks whether the elements of the array are monotonic or not.\n    A monotonic array is a sequence in which any two adjacent elements are either in the same direction or in the opposite direction.\n\n    Examples:\n    Input:  [1, 2, 2, 3, 4, 5]\n    Output: True\n\n    Input:  [6, 5, 4, 3, 2, 1]\n    Output: False\n\n    Input:  [1, 2, 2, 1, 1]\n    Output: True\n\n    Input:  [1, 1, 1, 1, 1]\n    Output: True\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    for i in range(len(l)):\n        if l[i] in s and is_sublist(l[i:], s):\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0] not in l:\n        return False\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) >= len(s):\n        if l[:len(s)] == s:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    return j == len(s)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, else False.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the Input list\n    for tuple_1 in Input:\n        # Get the length of the tuple\n        len_1 = len(tuple_1)\n        # Loop through each tuple in the Input list\n        for tuple_2 in Input:\n            # If the length of the current tuple is not equal to the length of the other tuple, return False\n            if len_1!= len(tuple_2):\n                return False\n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return \"Input is not a list of tuples.\"\n    \n    # Check if all the tuples have equal length\n    for i in range(len(Input[0])):\n        if any(len(x)!= len(Input[0]) for x in Input):\n            return \"All tuples in the list have different lengths.\"\n\n    return \"All tuples in the list have equal lengths.\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            count += 1\n    if count == 0:\n        print(\"All tuples have equal length\")\n    else:\n        print(\"Not all tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            count += 1\n    if count == 0:\n        print(\"All the tuples have equal length\")\n    else:\n        print(\"Not all the tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n // 2\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = (gap * 10) // 13 # calculate new gap size\n\n        # Move the gap elements to the end of the list\n        for i in range(gap, n):\n            key = nums[i]\n            j = i - gap\n\n            while j >= 0 and key > nums[j]:\n                nums[j + gap] = nums[j]\n                j -= gap\n\n            nums[j + gap] = key\n\n        # Decrease the gap size until it becomes 1\n        gap //= 10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = gap // 10\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # initialize variables\n    n = len(nums)\n    max_iter = 10\n    swapped = True\n    \n    # loop until no more swaps\n    while swapped:\n        swapped = False\n        \n        # loop through each element\n        for i in range(max_iter):\n            \n            # calculate the gap size\n            gap = max_iter - i\n            \n            # check if the gap is too big\n            if gap > n//2:\n                gap = n\n            \n            # swap elements\n            for j in range(gap):\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                    swapped = True\n            \n            # exit loop if no more swaps were made\n            if not swapped:\n                break\n        \n        # decrease the maximum iteration count\n        max_iter = max(1, int(max_iter / 1.3))\n        \n        # exit loop if no more swaps were made\n        if not swapped:\n            break\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap = gap // 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if gap < 1:\n            gap = n\n        else:\n            gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = 10\n        i = 0\n\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n\n        if not swapped:\n            break\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = gap // 1.3  # reduce gap size by 1/3 every pass"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    \n    # initialize the swapped flag and the gap size\n    swapped = True\n    gap = len(nums) // 2\n    \n    # loop until no swaps are made\n    while swapped:\n        swapped = False\n        \n        # iterate over the list and compare adjacent elements\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        # decrease the gap size and continue iterating if swaps are made\n        gap //= 1\n        \n        # if the gap is too small, we can't continue iterating and must exit\n        if gap < 1:\n            break\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Take the square root of the number\n    sqrt_n = round(n ** 0.5)\n    \n    # Check if the difference of the squares is a square\n    if sqrt_n ** 2 == n - sqrt_n ** 2:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    # check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    # calculate the square of the given number\n    square = n ** 2\n    # calculate the difference between the square and its double\n    diff = square - (2 * n)\n    # check if the difference is a perfect square or not\n    for i in range(int(diff ** 0.5) + 1):\n        if diff % i == 0 and diff // i == i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # find the square of the number\n    square = n ** 0.5\n\n    # check if the square of the number is divisible by 2\n    if square % 2 == 0:\n        return False\n\n    # find the difference between the square and the number\n    diff = square - n\n\n    # check if the difference between the square and the number is divisible by 2\n    if diff % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # taking input from the user\n    num = int(input(\"Enter a number: \"))\n    \n    # checking whether the number is greater than 0 or not\n    if num <= 0:\n        print(\"The number should be greater than 0\")\n    else:\n        # finding the first square root of the number\n        first = int(num**(1/2))\n        \n        # finding the second square root of the number\n        second = int(num**(1/2))\n        \n        # checking whether the first and second square roots are equal or not\n        if first == second:\n            print(\"The number can be represented as the difference of two squares\")\n        else:\n            print(\"The number cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n/2)+1):\n        for j in range(1,int(n/2)+1):\n            if i*i+j*j == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0 and i**2 == n: \n            return True\n        elif n % i == 0 and i**2 > n: \n            return False\n        elif i**2 > n: \n            break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # find the length of the string\n    length = len(str_n)\n    # check if the length of the string is odd\n    if length % 2 == 1:\n        # if it is, then there is no difference of two squares\n        return False\n    # if the length is even, then there is a difference of two squares\n    for i in range(length // 2):\n        # check if the digits are the same\n        if int(str_n[i])!= int(str_n[-i-1]):\n            return False\n    # if we reach this point, then there is a difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_square(n):\n    \"\"\"\n    A helper function to check if a number is a square.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n <= 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if i * i == n or i * i == n - 1:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square of the given number\n    num_square = n**2\n\n    # Loop through all the numbers from 1 to the square of the given number\n    for i in range(1, num_square+1):\n\n        # Check if the difference between the square of the given number and the square of the current number is equal to the given number\n        if num_square - i == n:\n            return True\n\n    # If no such pair of squares exists, then return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n >= 0:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return \"not possible\"\n        for i in range(int(n**0.5)+1, int(n)+1):\n            if n % i == 0:\n                return \"not possible\"\n        return \"possible\"\n    else:\n        return \"not possible\"\n\nprint(dif_Square(25)) # Output: not possible\nprint(dif_Square(4)) # Output: possible\nprint(dif_Square(16)) # Output: not possible"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i] == patterns[i] and colors[i+1] == patterns[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    n = len(colors)\n    colors.sort()\n    patterns.sort()\n    match = True\n\n    # iterate through the patterns array and check if they match the colors array\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            match = False\n            break\n\n    # return the result\n    return match"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Convert patterns to list to handle strings\n    patterns = list(patterns)\n    n = len(colors)\n\n    # Initialize variables\n    count = 0\n    index = 0\n\n    # Loop through colors\n    for color in colors:\n        # Find the pattern that matches the current color\n        pattern = patterns[index]\n\n        # Check if the current pattern matches the current color\n        if pattern == color:\n            # Increment the count\n            count += 1\n\n            # Move to the next index\n            index = (index + 1) % n\n        else:\n            # Reset the index\n            index = 0\n\n    # Check if all patterns have been matched\n    if count == n:\n        # All patterns have been matched, so return True\n        return True\n    else:\n        # Not all patterns have been matched, so return False\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes in a list of colors and a list of patterns as input and returns True if the colors follow the patterns and False otherwise.\n    \"\"\"\n\n    # Initialize a variable to keep track of the current color index\n    current_color = 0\n\n    # Initialize a variable to keep track of the current pattern index\n    current_pattern = 0\n\n    # Loop through the patterns list and compare each color with the pattern at the current color index and pattern index.\n    for i in range(len(colors)):\n        if colors[i]!= patterns[current_color][current_pattern]:\n            # If there is a mismatch, return False\n            return False\n        else:\n            # If there is a match, move to the next color and pattern index\n            current_color += 1\n            current_pattern += 1\n\n    # If the loop completes without a mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Convert patterns to a list of sets for easier lookup\n    patterns_sets = [set(pattern) for pattern in patterns]\n\n    # Loop through each color in the colors array\n    for color in colors:\n        # Convert the color to a set for easier lookup\n        color_set = set(color)\n\n        # Check if the color is in any of the patterns sets\n        if not any(color_set in pattern_set for pattern_set in patterns_sets):\n            # If not, return False\n            return False\n\n    # If we made it this far, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes in two lists: colors and patterns. The colors list contains the colors that are to be used in the patterns.\n    The patterns list contains the sequence of colors to be used for each pattern.\n\n    The function checks whether it follows the sequence given in the patterns array by comparing the colors in the patterns list with the corresponding colors in the colors list.\n    If they are the same, the function moves to the next pattern and repeats the process until it reaches the end of the patterns list.\n    If it reaches the end of the patterns list without finding a match, the function returns False, indicating that the color patterns are not the same.\n    If it finds a match, the function returns True, indicating that the color patterns are the same.\n    '''\n\n    # Loop through the colors and patterns lists\n    for color in colors:\n        # Check if the current color is the same as the next color in the patterns list\n        if patterns[0] == color:\n            # If the current color is the same as the next color, move to the next pattern in the list and repeat the process\n            patterns = patterns[1:]\n            continue\n        # If the current color is not the same as the next color, return False\n        else:\n            return False\n    \n    # If the loop completes without finding a match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if all the colors in the colors list are present in the patterns array\n    for pattern in patterns:\n        for color in pattern:\n            if color not in colors:\n                return False\n    # If all the colors are present, check if the colors in the first pattern match the colors in the second pattern\n    if patterns[0] == patterns[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # initialize variables to keep track of the current pattern and the last color\n    current_pattern = patterns[0]\n    last_color = colors[0]\n    \n    # loop through the remaining colors\n    for color in colors[1:]:\n        # check if the current color matches the last color in the pattern\n        if color!= last_color and color not in current_pattern:\n            return False\n        \n        # update the last color and update the current pattern\n        last_color = color\n        current_pattern = patterns[current_pattern.index(color)]\n    \n    # if we reach here, it means we have checked all the colors and the pattern is valid\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                divisible_tuples.append((test_list[i], test_list[j]))\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    \n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        tuple_elements = [element for element in test_list[i]]\n        for j in range(len(tuple_elements)):\n            if tuple_elements[j] % K!= 0:\n                tuple_elements[j] = -1\n        if all(x!= -1 for x in tuple_elements):\n            result.append(tuple_elements)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_divisible_by_K = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            tuples_divisible_by_K.append(tup)\n    return tuples_divisible_by_K"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        found_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                found_divisible = False\n                break\n        if found_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            tuples_list.append(tuple_)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_count = sum(1 for i in tup if i % K == 0)\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    # create a dictionary to store the count of elements in the tuples\n    count_dict = {}\n    # iterate over the list of tuples\n    for tup in test_list:\n        # iterate over the elements of the tuple\n        for elem in tup:\n            # if the element is divisible by K, increment its count in the dictionary\n            if elem % K == 0:\n                count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # create a list to store the tuples with all elements divisible by K\n    result = []\n    # iterate over the count dictionary\n    for key, value in count_dict.items():\n        # if all elements are divisible by K, append the tuple to the result list\n        if value == len(test_list):\n            result.append(key)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n, 'is divisible by 11')\n    else:\n        print(n, 'is not divisible by 11')"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    elif n % 11!= 0:\n        return False\n    else:\n        return is_Diff(n // 11)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, otherwise False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split() # split the string into a list of words\n    for word in word_list:\n        if len(word) % 2 == 0: # if the length of the word is even, return False\n            return False\n    # if all words have odd length, return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # Split the string into a list of words\n    words = s.split()\n    \n    # Iterate over each word in the list\n    for word in words:\n        \n        # Get the length of the word\n        length = len(word)\n        \n        # Check whether the length is odd or even\n        if length % 2 == 0:\n            # If the length is even, print \"Even\"\n            print(\"Even\")\n        else:\n            # If the length is odd, print \"Odd\"\n            print(\"Odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 0:\n            return \"The length of the word is even\"\n        else:\n            return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] # split the string by space and take the first element as the word\n    if len(word) % 2 == 0:\n        print(word, \"is even.\")\n    else:\n        print(word, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 24\n    else:\n        return 42 + 42*n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    elif n == 1:\n        return 4\n    \n    elif n == 2:\n        return 10\n    \n    else:\n        return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    # Check if n is a non-negative integer\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    # Check if n is a valid tetrahedral number\n    if n > 2000000:\n        raise ValueError(\"n must be a valid tetrahedral number\")\n    \n    # Initialize variables\n    a = 0\n    b = 1\n    c = 0\n    d = 0\n    \n    # Calculate the nth tetrahedral number\n    for i in range(n):\n        a += 1\n        b += 2*a\n        c += 3*a + b\n        d += 4*a*b\n    \n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * tetrahedral_number(n - 1) + 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number\n    tetrahedral = 0\n    \n    # Loop through the numbers from 1 to n-1\n    for i in range(1, n):\n        # Add the i-th power of i to the tetrahedral number\n        tetrahedral += i**i\n    \n    # Return the tetrahedral number\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the sum of the first n numbers to 1\n    sum_n = 1\n\n    # Iterate through the first n-1 numbers\n    for i in range(1, n):\n        # Calculate the next term in the sequence\n        next_term = 4 * i * (i-1) // 3\n        # Add it to the sum\n        sum_n += next_term\n\n    # Return the final sum\n    return sum_n\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n - 1) * (n - 2) * (n - 3) // 6\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0]\n    for i in range(1, n+1):\n        tetrahedral_numbers.append(tetrahedral_numbers[i-1] + tetrahedral_numbers[i-2] + tetrahedral_numbers[i-3])\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    num = 1\n    count = 0\n\n    # Calculate the tetrahedral number\n    while count < n:\n        num += 4*count\n        count += 1\n\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return (4 * (n-1) * (n-2) // (n-3)) + tetrahedral_number(n-3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns the volume of the sphere.\n    \"\"\"\n    v = (4/3) * math.pi * (r**3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the character\n    char = \"\"\n\n    # loop through each character in the string\n    for char_in_str in strr:\n        # convert the character to ASCII value\n        ascii_val = ord(char_in_str)\n\n        # add the ASCII value modulo 26 to the current character\n        new_ascii_val = (ascii_val + 13) % 26\n\n        # convert the new ASCII value back to character and append to the character variable\n        new_char = chr(new_ascii_val)\n        char += new_char\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0  \n    char = \"\"  \n    for i in strr:  \n        ascii_value += ord(i)  \n        if ascii_value > 26:  \n            ascii_value -= 26  \n        char += chr(ascii_value)  \n    return char  "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return \"\"\n    else:\n        first_char = ord(strr[0])\n        rest_of_str = strr[1:]\n        first_sum = first_char % 26\n        rest_sum = sum([ord(ch) % 26 for ch in rest_of_str])\n        return chr(first_sum + rest_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize variables to store ASCII values of characters\n    ascii_values = [0] * 26\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char) - ord('a')\n        # Add the ASCII value of the character to the corresponding position in the list\n        ascii_values[ascii_value] += 1\n    # Find the character made by adding the ASCII values of all the characters modulo 26\n    char_sum = 0\n    for i in range(26):\n        if ascii_values[i] > 0:\n            char_sum += (i + ord('a')) * ascii_values[i]\n    # Convert the sum to its ASCII value and return it as a character\n    return chr((char_sum + ord('a')) % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char = chr((char_sum % 26) + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the result string\n    result = ''\n    # Traverse through each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value modulo 26 to the result string\n        result += chr(((ascii_val + 65) % 26) + 65)\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(n):\n        seq.append(3*seq[-1] - seq[-2])\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445]\n\n    if n < 1 or n > len(sequence):\n        return \"Invalid input. Please enter a number between 1 and 22.\"\n    else:\n        return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n\n    Args:\n    n (int): The index of the number to find.\n\n    Returns:\n    int: The nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(2 * sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        sequence_num = 1\n        for i in range(1, n):\n            sequence_num += sequence_num % 2\n        return sequence_num"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"The sequence of the newman conway sequence is:\")\nfor i in sequence(n):\n    print(i)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            b = [4, 2, 1]\n        else:\n            b = [2, 1, 4]\n        a.extend(b)\n    return a[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere using the formula\n    # surface area = 4*pi*r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area using the formula: 4 * pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n\nprint(surfacearea_sphere(1))   # Output: 50.26548245743669"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Finding the surface area using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    \n    # Returning the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    S = 4 * pi * r**2\n    return S"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n\n    Returns:\n    The nth centered hexagonal number.\n    '''\n    # Define the centered hexagonal sequence\n    chex_seq = [0, 1]\n\n    # Generate the centered hexagonal sequence up to n\n    for i in range(2, n+1):\n        # Calculate the next centered hexagonal number\n        chex = 3*chex_seq[i-1] - i\n\n        # Add the next centered hexagonal number to the sequence\n        chex_seq.append(chex)\n\n    # Return the nth centered hexagonal number\n    return chex_seq[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    if n == 1:\n        return 1\n\n    a = 1\n    b = 1\n\n    while n > 1:\n        a += 1\n        b += 1\n        n -= 1\n\n    return a - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hex = 0\n    if n < 0:\n        return \"Enter a positive integer\"\n    \n    for i in range(n):\n        centered_hex += 4 * i ** 2\n    \n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = 0\n    hexagonal_center = 0\n    count = 1\n    while count <= n:\n        hexagonal_num += 2*hexagonal_center + 1\n        hexagonal_center += 1\n        count += 1\n    return hexagonal_num - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function calculates the n-th centered hexagonal number using recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 3 * centered_hexagonal_number(n-1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (5*n*n - 3*n + 5) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        a = centered_hexagonal_number(n-1)\n        b = centered_hexagonal_number(n-2)\n        return a + b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    else:\n        return (5 * n * n - 3 * n + 2) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    # Inductive case\n    else:\n        # Calculate the sum of the centered hexagonal numbers\n        sum = (4 * n - 3) // 2\n        # Calculate the position of the center\n        center = (3 * n ** 2 + 1) // 2\n        # Calculate the sum of the first two centered hexagonal numbers\n        first_two = (center - 2) * (center + 1) // 6\n        # Return the sum of centered hexagonal numbers\n        return sum + first_two"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) * (1 - 6*n + n**2) / 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries\n    merged_dict = ct.ChainMap(dict1, dict2)\n\n    # Merge the result with the third dictionary\n    result_dict = ct.ChainMap(merged_dict, dict3)\n\n    return dict(result_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()  # Create a copy of dict1 to avoid modifying the original dict1\n    merged_dict.update(dict2)  # Update merged_dict with the values from dict2\n    merged_dict.update(dict3)  # Update merged_dict with the values from dict3\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    :param dict1: First dictionary.\n    :type dict1: dict\n    :param dict2: Second dictionary.\n    :type dict2: dict\n    :param dict3: Third dictionary.\n    :type dict3: dict\n    :return: Merged dictionary.\n    :rtype: dict\n    \"\"\"\n\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Return the frequency of each element in the list as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for elem in lst:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if element in freq:\n            freq[element] += 1\n        # otherwise, add the element with a frequency of 1\n        else:\n            freq[element] = 1\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    \"\"\"\n    count = collections.Counter(lst)\n    return dict(count)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    closest_num = min(num_list)\n    while closest_num > n:\n        closest_num = min(num_list, key=lambda x: abs(x - n))\n    print(\"The closest smaller number than\", n, \"is\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # Initialize variables\n    closest = N\n    diff = float('inf')\n    \n    # Loop through all numbers between 1 and N\n    for i in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        current_diff = abs(i - N)\n        \n        # Check if this difference is smaller than the current closest\n        if current_diff < diff:\n            # Update the closest number and the difference\n            closest = i\n            diff = current_diff\n    \n    # Return the closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    if N % 2 == 0:\n        N -= 1\n    while N % 2 == 0:\n        N -= 1\n\n    while True:\n        N += 1\n        if N % 2 == 1:\n            return N\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n < 0:\n            return n\n        if abs(n - N) < abs(N - (n - 1)):\n            return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('-inf')\n    \n    for i in range(N):\n        num = int(input(f\"Enter a number: \"))\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num > smallest and num < closest:\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = []\n    for i in range(1, N):\n        if N % i == 0:\n            numbers.append(i)\n    closest_num = min(numbers)\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    small_num = float('inf')\n    closest_num = float('-inf')\n\n    # loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # compare the current number with the smallest number seen so far\n        if num < small_num:\n            closest_num = small_num\n            small_num = num\n        # if the current number is closer to the smallest number seen so far, update the variables\n        elif abs(small_num - num) < abs(closest_num - small_num):\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num = 1\n    closest = num\n\n    while True:\n        num += 1\n        if num > N:\n            break\n        if abs(num - N) < abs(closest - N):\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    count = 0\n    diff = n\n    for i in range(1, n+1):\n        if i < n:\n            count += 1\n            diff = abs(i - n)\n        else:\n            break\n    return n + (diff // count)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return N\n    else:\n        return closest_num(N-1)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    max_len = 0\n    \n    for word in list1:\n        word_list.append(word)\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize a variable to store the length of the longest word\n    longest_word_len = 0\n\n    # loop through each word in the list\n    for word in list1:\n        # check if the length of the current word is greater than the current longest word\n        if len(word) > longest_word_len:\n            # update the longest word length\n            longest_word_len = len(word)\n\n    # return the length of the longest word\n    return longest_word_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables to keep track of the longest word length and the word itself\n    longest_length = 0\n    longest_word = ''\n\n    # Loop through each word in the list\n    for word in list1:\n        # If the length of the current word is greater than the longest word length, update the variables\n        if len(word) > longest_length:\n            longest_length = len(word)\n            longest_word = word\n\n    # Return the length of the longest word\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The substring is present in the given string.\")\n    else:\n        print(\"The substring is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if all elements of the list contain the substring\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        return any(sub_str in s for s in str1.split())\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the given list of string values to a set to remove duplicates\n    str_set = set(str1)\n    \n    # Check if the given substring is present in the set of string values\n    if sub_str in str_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if type(str1)!= list:\n        return \"The input is not a list\"\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(sub_str, str):\n        sub_list = [sub_str]\n    else:\n        sub_list = sub_str\n    for i in range(len(str1)-len(sub_list)+1):\n        if str1[i:i+len(sub_list)] in sub_list:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n - 1) and (n - 1) % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check if the number is odd\n    if n % 2 == 1:\n        # if the number is odd, check if it's divisible by 3\n        if n % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        # if the number is even, check if it's divisible by 2\n        if n % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n <= 0:\n        return \"The number must be positive.\"\n\n    is_undulating = True\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            is_undulating = False\n            break\n\n    return \"The number is\" + (\" undulating\" if is_undulating else \" not undulating\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check whether the number is divisible by 15\n    if n % 15 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return \"The given number is not an odd number.\"\n    else:\n        return \"The given number is an odd number.\"\n\nn = int(input(\"Enter a number: \"))\nresult = is_undulating(n)\nprint(result)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Checking whether the given number is odd or even\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Find the index of the minimum value in the sorted list\n    min_index = sorted_list.index(min(sorted_list, key=itemgetter(0)))\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # use the itemgetter() function from the operator module to extract the second value from each tuple\n    # and sort the list of tuples by that second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the first tuple in the sorted list\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of the tuples\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple in the list with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000 #initialize the minimum length to a large number\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = 1000000\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # find the length of the smallest list in the list\n    min_len = len(lst[0])\n\n    # loop through the list of lists and find the length of the smallest list\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the variable to store the minimum length\n    min_length = lst[0][0]\n    # Loop through each sublist in the list and find the minimum length\n    for sublist in lst:\n        for item in sublist:\n            if len(item) < min_length:\n                min_length = len(item)\n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize min_length to infinite\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    divisor_count = 0\n\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency\n    freq_dict = {}\n\n    # Iterate through the flattened list and count frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [num for sublist in list1 for num in sublist]\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the flattened list and count the frequency of each element\n    for num in flattened_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary to store the frequencies\n    freq = {}\n\n    # loop through each element in the flattened list\n    for item in list1:\n        # if the element is a string, convert it to a list of characters\n        if isinstance(item, str):\n            item = list(item)\n\n        # if the element is a list, recursively call the function on it\n        if isinstance(item, list):\n            subfreq = frequency_lists(item)\n            # iterate over the subdictionary to add its values to the main dictionary\n            for k, v in subfreq.items():\n                if k in freq:\n                    freq[k] += v\n                else:\n                    freq[k] = v\n        # if the element is not a list, increment its frequency in the main dictionary\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n\n    # return the final dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flattened = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element in the flattened list\n    freq = {}\n\n    # Loop through each element in the flattened list and update the frequency in the dictionary\n    for elem in flattened:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # Return the dictionary containing frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Convert the list of lists to a flattened list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # Flatten the list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # create an empty dictionary to store frequency\n    freq = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        \n        # if the element is already in the dictionary, increment its count\n        if element in freq:\n            freq[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq[element] = 1\n            \n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through the flattened list of lists\n    for item in list1:\n        # if the item is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(item, list):\n            freq_dict[item] = 1\n        # if the item is a list, recursively call the `frequency_lists` function on the list and add its frequency to the dictionary\n        else:\n            sub_freq_dict = frequency_lists(item)\n            for key, value in sub_freq_dict.items():\n                freq_dict[key] = value + (freq_dict.get(key, 0) if key in freq_dict else 0)\n\n    # return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq = {}\n\n    # loop through each element in the list\n    for element in list1:\n        # if the element is not in the dictionary, add it with a value of 1\n        if element not in freq:\n            freq[element] = 1\n        # if the element is already in the dictionary, increment its value by 1\n        else:\n            freq[element] += 1\n\n    # return the dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # divide by the length of the list\n    result = product / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # divide the product by the length of the list\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = ''\n    while n:\n        binary = str(n % 2) + binary\n        n //= 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # initialize an empty string to store the binary equivalent\n    binary_string = ''\n    \n    # iterate through each bit of the decimal number\n    for i in range(32): \n        \n        # extract the ith bit from the decimal number\n        bit = (n >> i) & 1\n        \n        # convert the bit to binary and add it to the binary string\n        binary_string += str(bit)\n        \n        # shift the decimal number to the right by one bit\n        n = n >> 1\n        \n        # if the binary string is not empty and the last digit is a 1, append a 0 to the binary string\n        if binary_string and binary_string[-1] == '1':\n            binary_string += '0'\n    \n    # return the binary string with no leading zeros\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to hold the binary equivalent of n\n    binary_str = ''\n    # iterate over the binary digits of n from right to left\n    while n > 0:\n        # get the rightmost digit of n\n        digit = n % 2\n        # add the digit to the beginning of binary_str\n        binary_str = str(digit) + binary_str\n        # divide n by 2 to remove the rightmost digit\n        n //= 2\n    # return the binary string with no leading zeros\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = ''\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Helper function to check if a number is palindrome or not.\n        \"\"\"\n        num_str = str(num)\n        return num_str == num_str[::-1]\n\n    def palindrome_to_int(palindrome):\n        \"\"\"\n        Helper function to convert a palindrome to an integer.\n        \"\"\"\n        return int(palindrome)\n\n    # Check if the input is a palindrome\n    if is_palindrome(num):\n        return palindrome_to_int(str(num + 1))\n\n    # If not, find the next smallest palindrome\n    i = 10**(num-1)\n    while True:\n        if is_palindrome(i):\n            return palindrome_to_int(str(i + 1))\n        i += 1\n\nif __name__ == \"__main__\":\n    # Test cases\n    print(next_smallest_palindrome(10)) # Output: 11\n    print(next_smallest_palindrome(12345)) # Output: 12351\n    print(next_smallest_palindrome(123456789)) # Output: 999999999"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_smallest_palindrome(num):\n        n = str(num)\n        if is_palindrome(int(n)):\n            return True\n        for i in range(1, len(n)):\n            for j in range(i+1, len(n)+1):\n                if n[:i] == n[i:j] + n[j:]:\n                    return True\n        return False\n\n    def is_smaller_palindrome(num):\n        n = str(num)\n        for i in range(1, len(n)):\n            for j in range(i+1, len(n)+1):\n                if n[:i] + n[j:] + n[:j] == n[i:j] + n[:i] + n[j:]:\n                    return True\n        return False\n\n    def find_next_smallest_palindrome(num):\n        n = str(num)\n        if is_smallest_palindrome(int(n)):\n            return int(n)\n\n        for i in range(len(n)):\n            for j in range(i+1, len(n)+1):\n                k = len(n) - len(n[:i] + n[j:]) - 1\n                if k < 0 or n[k] < n[i] or n[k] == n[i] and n[:i] + n[j:] > n[i:j]:\n                    return int(n[:i] + n[j:] + n[i])\n\n        return 0\n\n    if num < 10:\n        return num\n\n    return find_next_smallest_palindrome(num)\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter an integer: \"))\n    print(\"Next smallest palindrome of\", num, \":\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    for i in range(999, num, -1):\n        if is_palindrome(str(i)):\n            return i\n    return -1\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    if num < 10:\n        print(\"Invalid input: the input number must be greater than or equal to 10.\")\n        sys.exit(1)\n    print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert integer to string\n    num_str = str(num)\n    # reverse the string\n    rev_num_str = num_str[::-1]\n    # convert the reversed string to an integer\n    rev_num = int(rev_num_str)\n    # add 1 to the reversed integer to get the next smallest palindrome\n    next_palindrome = rev_num + 1\n    return next_palindrome\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Check if a number is a palindrome.\n        '''\n        return str(n) == str(n)[::-1]\n\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # initialize variables to track the current palindrome and the next smallest palindrome\n    current_palindrome = num\n    next_smallest_palindrome = None\n\n    # iterate through all possible palindromes starting from the current palindrome\n    for i in range(1, int(num**0.5)+1):\n        # if the current palindrome is even and divisible by i, append it to the list of palindromes\n        if (num % i == 0 and num % (i*2)!= 0) or (num % i!= 0 and num % (i*2) == 0):\n            current_palindrome = num // i\n            if next_smallest_palindrome is None or int(str(next_smallest_palindrome)[-1]) < current_palindrome:\n                next_smallest_palindrome = current_palindrome\n\n    # if there are no more palindromes, return None\n    if next_smallest_palindrome is None:\n        return None\n\n    # otherwise, return the next smallest palindrome\n    else:\n        return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    num_str_rev = num_str[::-1]\n    # Convert the reversed string back to an integer\n    num_str_rev = int(num_str_rev)\n    # Check if the reversed integer is greater than the input integer\n    if num_str_rev > num:\n        # If it is, return the reversed integer\n        return num_str_rev\n    # Check if the reversed integer is less than or equal to the input integer\n    elif num_str_rev <= num:\n        # If it is not, iterate through the reversed integer until it is greater than the input integer\n        while num_str_rev <= num:\n            # Increment the last character in the reversed integer\n            num_str_rev += 1\n            # Convert the reversed integer back to a string\n            num_str_rev_str = str(num_str_rev)\n            # Check if the reversed integer is greater than the input integer\n            if num_str_rev_str > num:\n                # If it is, return the reversed integer\n                return num_str_rev\n            # Check if the reversed integer is less than or equal to the input integer\n            elif num_str_rev_str <= num:\n                # If it is not, continue iterating through the reversed integer\n                continue"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Check whether a number is a palindrome or not.\n        \"\"\"\n        if num < 0:\n            num = abs(num)\n        elif num == 0:\n            return True\n        reverse_num = 0\n        while num > 0:\n            digit = num % 10\n            reverse_num = reverse_num * 10 + digit\n            num //= 10\n        return num == reverse_num\n\n    def is_prime(num):\n        \"\"\"\n        Check whether a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        Find the next prime number after a specified number.\n        \"\"\"\n        for i in range(num + 1, sys.maxsize):\n            if is_prime(i):\n                return i\n\n    def next_smallest_palindrome_helper(num):\n        \"\"\"\n        The main helper function to find the next smallest palindrome.\n        \"\"\"\n        if not is_palindrome(num):\n            # If the number is not a palindrome, we need to find the next smallest palindrome.\n            next_prime_num = next_prime(num)\n            if is_palindrome(next_prime_num):\n                return next_prime_num\n            else:\n                return next_smallest_palindrome_helper(next_prime_num)\n        else:\n            # If the number is already a palindrome, we need to find the next smaller odd number.\n            for i in range(num + 1, 2 * num, 2):\n                if is_prime(i):\n                    return i\n            return None\n\n    # Call the helper function to find the next smallest palindrome.\n    return next_smallest_palindrome_helper(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Create a string representation of the integer\n    int_str = str(num)\n\n    # Convert the string to a list of characters\n    chars = list(int_str)\n\n    # Loop through the characters and swap them if necessary\n    for i in range(len(chars) // 2):\n        if chars[i]!= chars[-i - 1]:\n            chars[i], chars[-i - 1] = chars[-i - 1], chars[i]\n\n    # Convert the list of characters back to a string and compare it with the original string\n    new_str = ''.join(chars)\n    if int(new_str) > int(int_str):\n        return int(new_str)\n    else:\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Find the kth element (k-1)th index from the end of the sorted array\n    return arr[n-k]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError('Index out of range')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, n\n        while left < right:\n            mid = (left + right) // 2\n            if mid > k:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    left = 1\n    right = len(arr)\n\n    # Iterate until the two pointers meet in the middle\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the kth element is in the left half of the array\n        if k == mid:\n            return arr[k-1]\n\n        # If the kth element is in the right half of the array\n        elif k < mid:\n            right = mid - 1\n\n        # If the kth element is in the left half of the array\n        else:\n            left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Case 1: k is in the left half of the array\n        if k == mid:\n            return arr[k-1]\n        \n        # Case 2: k is in the right half of the array\n        elif k > mid:\n            left = mid + 1\n        \n        # Case 3: k is in the left half of the array\n        else:\n            right = mid - 1\n            \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and the kth element as arguments. It returns the kth element in the array.\n    The indexing of Python starts from 0, so we need to add 1 to the kth element to get the correct index.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char.isupper():\n            if result:\n                result += '_'\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    # convert all underscores to camel case\n    result = []\n    for i, c in enumerate(word):\n        if c == '_':\n            if i == 0 or word[i-1] == '_':\n                # add an uppercase letter if the underscore is preceded by another underscore\n                result.append(c.upper())\n            else:\n                # add a lowercase letter if the underscore is not preceded by another underscore\n                result.append(c)\n        else:\n            result.append(c)\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char =''\n    for char in word:\n        if char == '_':\n            camel_case += prev_char.upper()\n            prev_char = ''\n        else:\n            camel_case += char\n            prev_char = char\n    camel_case += prev_char.upper()\n    return camel_case.lstrip()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            if word[i].isupper():\n                camel_case += \"_\" + word[i].lower()\n            else:\n                camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_word += '_'\n        camel_word += char.lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n    word (str): The input string in snake case.\n\n    Returns:\n    str: The converted camel case string.\n\n    Examples:\n    >>> snake_to_camel(\"snake_case\")\n   'snakeCase'\n    >>> snake_to_camel(\"camel_case\")\n    'camelCase'\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    first_word = words[0].lower()\n    \n    # Convert the rest of the words to camel case\n    rest_of_words = [word.capitalize() for word in words[1:]]\n    \n    # Join the words and return\n    return first_word + ''.join(rest_of_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a string\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    :param word: The input word in snake case.\n    :type word: str\n    :return: The converted camel case string.\n    :rtype: str\n    \"\"\"\n    return ''.join(map(str.capitalize, word.split('_')))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].capitalize()\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    A = [[1 for j in range(m+1)] for i in range(n+1)]\n    B = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrices A and B\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                A[i][j] = 1\n                B[i][j] = 0\n            elif i == 1 or j == 1:\n                A[i][j] = 0\n                B[i][j] = 1\n            elif i + j == n:\n                A[i][j] = 0\n                B[i][j] = 1\n            elif i + j == m + n - 1:\n                A[i][j] = 0\n                B[i][j] = 1\n            else:\n                A[i][j] = 1\n                B[i][j] = 1\n\n    # Calculate the Eulerian number\n    E = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            E[i][j] = A[i][j] - B[i-1][j-1]\n\n    # Return the Eulerian number\n    return E"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n: int\n        The number of rows in the square grid.\n    m: int\n        The number of columns in the square grid.\n\n    Returns:\n    int\n        The value of the Eulerian number a(n, m).\n    \"\"\"\n    if n < 1 or m < 1:\n        raise ValueError(\"n and m must be positive integers.\")\n\n    # Create the grid\n    grid = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill the grid with 1s\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            grid[i][j] = 1\n\n    # Starting from the bottom-right corner, fill the grid with 0s\n    i, j = n, m\n    while i >= 1 and j >= 1:\n        grid[i][j] = 0\n        i -= 1\n        j -= 1\n\n    # Calculate the sum of the grid\n    total = sum(sum(row) for row in grid)\n\n    return total"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to calculate the Eulerian number a(n, m)\n    def eulerian_num_helper(n, m, count):\n        if count >= n*m:\n            return 1\n        if is_prime(count):\n            return 0\n        return (eulerian_num_helper(n, m, count+1) + eulerian_num_helper(n, m, count+2)) % (n*m)\n\n    # Call the function to calculate the Eulerian number a(n, m)\n    a = eulerian_num_helper(n, m, 0)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first term of the series\n    a = 0\n\n    # Initialize the second term of the series\n    b = 0\n\n    # Initialize the third term of the series\n    c = 0\n\n    # Initialize the fourth term of the series\n    d = 1\n\n    # Calculate the first term of the series\n    a = (d * (n * m)) // 2\n\n    # Calculate the second term of the series\n    b = (d * (n + m)) // 2\n\n    # Calculate the third term of the series\n    c = (d * (2 * n * m + m * m)) // 2\n\n    # Calculate the fourth term of the series\n    d = (d * (2 * n * m + n * n)) // 2\n\n    # Calculate the sum of the first four terms\n    return a + b + c + d"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_number(n, m):\n        if n == 1 and m == 1:\n            return 1\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif m == 0:\n            return 1\n        else:\n            return (eulerian_number(n-1, m) + eulerian_number(n, m-1))%1000000007\n\n    return eulerian_number(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m * (m - 1) // 2\n    elif n == 2:\n        return (m + 1) * (m + 3) // 2\n    else:\n        return (n - 1) * eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Generate all possible paths\n    paths = []\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                paths.append(['A'])\n            elif i == 0:\n                paths.append(['A', 'B'])\n            elif j == 0:\n                paths.append(['A', 'C'])\n            elif i == j:\n                paths.append(['A', 'B', 'C'])\n            else:\n                paths.append(['A', 'B', 'C', 'D'])\n\n    # Calculate Eulerian path\n    for path in paths:\n        if 'A' in path and 'B' in path and 'C' in path:\n            euler_path = path\n            break\n\n    # Calculate a(n, m)\n    a = 0\n    for i in range(n):\n        for j in range(m):\n            a += 1 if i == j else 0\n\n    # Calculate the number of edges in the Eulerian path\n    edges = len(euler_path) - 1\n\n    # Return a(n, m)\n    return a * edges"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n):\n        a = a * i\n    for i in range(1, m):\n        b = b * i\n    return a * b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column of the matrix to 1\n    a[1][1] = 1\n\n    # Fill the rest of the matrix using the recurrence relation\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            a[i][j] = a[i - 1][j] + a[i][j - 1]\n\n    # Return the value of the last cell of the matrix\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and first column with 1\n    a = [1] * (m + 1)\n    a[0] = 0\n\n    # Fill the rest of the matrix with the Eulerian path\n    for i in range(1, n + 1):\n        # Initialize the current row\n        current_row = [0] * (m + 1)\n        # Fill the first column of the current row with 1\n        current_row[0] = 1\n        # Fill the rest of the current row with the sum of the previous row and the previous column\n        for j in range(1, m + 1):\n            current_row[j] = a[j] + a[j-1]\n        # Set the current row as the new row for the next iteration\n        a = current_row\n\n    # Return the last element of the last row of the matrix\n    return a[m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n\n        # Sort the sublist in ascending order using the built-in sort() function\n        sublist.sort()\n\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i, sublist in enumerate(input_list):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist alphabetically using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n\n    # Return the sorted list of lists\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, bool) and elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = tuple(test_list)\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and the tuples\n    new_list = test_list + test_tup\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new tuple and add the list to it.\n    new_tup = (test_tup[0], test_tup[1], *test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the lists and tuples\n    total_list = list(test_list) + list(test_tup)\n    # Convert the combined list to a tuple\n    total_tup = tuple(total_list)\n    return total_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_list:\n        test_tup = test_tup + (element,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup += (item,)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    merged_list = []\n    \n    # Add the first two elements to the heap\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    \n    # Add the third element to the heap\n    heapq.heappush(heap, num3)\n    \n    # Merge the heaps and add the elements to the merged list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three lists into a single sorted list.\n    '''\n    # create a new list to store the merged sorted list\n    merged_list = []\n\n    # create a min heap to store the smaller elements of the three lists\n    min_heap = []\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n\n    # merge the lists until one of them is empty\n    while min_heap:\n        # add the smallest element of the three lists to the merged list\n        merged_list.append(heapq.heappop(min_heap))\n\n        # add the next smaller element to the min heap\n        if min_heap:\n            heapq.heappush(min_heap, heapq.heappop(min_heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # concatenate the three lists\n    total = num1 + num2 + num3\n    # create a min heap with the first element of each list\n    min_heap = [heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heapify(total[i:j]), total[j]), total[i]), total[i+1]) for i in range(0, len(total), 2) for j in range(i+2, len(total), 2)]\n    # concatenate the elements of the min heap\n    merged = []\n    while min_heap:\n        merged.append(heapq.heappop(min_heap))\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # sort the three lists\n    sorted_list = []\n    for i in num1:\n        heapq.heappush(sorted_list, i)\n    for i in num2:\n        heapq.heappush(sorted_list, i)\n    for i in num3:\n        heapq.heappush(sorted_list, i)\n    # convert the sorted list to a list\n    sorted_list = [heapq.heappop(sorted_list) for i in range(len(sorted_list))]\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # merge three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # use heapq to sort the merged list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create a list of all three lists\n    merged_list = num1 + num2 + num3\n\n    # use heapq to merge the lists\n    heapq.heapify(merged_list)\n\n    # return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge three lists into a single sorted list using heapq\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    \n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # convert lists to sets to ensure unique elements only\n    unique_num1 = set(num1)\n    unique_num2 = set(num2)\n    unique_num3 = set(num3)\n\n    # concatenate sets and convert to list\n    merged_list = list(unique_num1 | unique_num2 | unique_num3)\n\n    # sort list\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # initialize an empty list to store the merged sorted list\n    merged_list = []\n    # merge the three lists into one single sorted list using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n    # append any remaining elements from the lists to the merged list\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Combine all three lists into one\n    combined_list = num1 + num2 + num3\n\n    # Use heapq to sort the combined list\n    sorted_list = heapq.merge(num1, num2, num3)\n\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n\n    # Initialize an empty list to store the odd numbers\n    odd_nums = []\n\n    # Loop through the given number of rotations\n    for i in range(n):\n\n        # Initialize two pointers, one at the beginning and the other at the end of the list\n        left = 0\n        right = len(digits) - 1\n\n        # Swap the first and last digits, then the second and second-to-last digits, and so on until the entire list is rotated n times\n        while left < right:\n            digits[left], digits[right] = digits[right], digits[left]\n            left += 1\n            right -= 1\n\n        # Add the odd digits to the odd_nums list\n        for d in digits:\n            if d % 2!= 0:\n                odd_nums.append(d)\n\n    # Return the number of odd digits in the rotated binary string\n    return len(odd_nums)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of binary digits\n    binary_digits = list(map(str, bin(int(s))[2:]))\n\n    # Find the length of the binary string\n    length = len(binary_digits)\n\n    # Rotate the binary string the given number of times\n    for i in range(n):\n        binary_digits.append(binary_digits.pop(0))\n\n    # Find the number of odd values in the rotated binary string\n    count = 0\n    for digit in binary_digits:\n        if int(digit) % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert string to list\n    s = list(s)\n    # count the number of 1's in the list\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n    # if the count is odd, divide the count by 2 to get the number of odd numbers\n    if count % 2 == 1:\n        return count // 2\n    # if the count is even, return 0\n    else:\n        return 0"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of binary digits\n    binary_digits = [int(digit) for digit in s]\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Append the first digit to the end of the list\n        binary_digits.append(binary_digits[0])\n\n        # Remove the first digit from the beginning of the list\n        del binary_digits[0]\n\n        # Check if the binary digits list contains odd numbers\n        for digit in binary_digits:\n            if digit % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of digits\n    binary_list = list(s)\n\n    # Calculate the total number of digits in the binary string\n    total_digits = len(binary_list)\n\n    # Check if the length of the binary string is odd\n    if total_digits % 2 == 1:\n        # If it is odd, add a 0 to the beginning of the list to make it even\n        binary_list = [0] + binary_list\n\n    # Rotate the list of digits n times\n    for i in range(n):\n        temp = binary_list[-1]\n        for j in range(total_digits-1):\n            binary_list[j] = binary_list[j+1]\n        binary_list[-1] = temp\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for i in range(total_digits):\n        if binary_list[i] % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize variables for the count and current rotation count\n    count = 0\n    rot_count = 0\n\n    # Loop through the string n times\n    for i in range(n):\n        # Loop through each character in the string\n        for j in range(len(s)):\n            # If the character is odd, increment the count\n            if int(s[j]) % 2!= 0:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    s = list(s) \n    for i in range(n): \n        if len(s) % 2 == 0: \n            temp = s[0] \n            for j in range(len(s)//2): \n                s[j], s[len(s)//2+j] = s[len(s)//2+j], temp \n        else: \n            temp = s[-1] \n            for j in range(len(s)//2, len(s)): \n                s[j], s[len(s)//2-1-j] = s[len(s)//2-1-j], temp \n    return sum(1 for i in s if i % 2 == 1)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n    # Create a new list with the rotated binary string\n    rotated_list = binary_list[n:] + binary_list[:n]\n    # Count the number of odd values in the rotated list\n    count = sum(bit for bit in rotated_list if bit%2!=0)\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # convert string to list of digits\n    s_list = list(s)\n\n    # rotate the list n times\n    for _ in range(n):\n        s_list = s_list[1:] + [s_list[0]]\n\n    # count the number of odd digits\n    count = sum(1 for digit in s_list if digit % 2 == 1)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables\n    count = 0\n    last_digit = ord(s[0]) % 2\n    first_digit = ord(s[-1]) % 2\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        # Rotate the first digit\n        first_digit = (first_digit + 1) % 2\n        # Add the count of the new first digit to the count\n        count += first_digit\n    \n    # Check if the count of the last digit is odd or even\n    if count % 2 == 0:\n        odd_count = 0\n    else:\n        odd_count = 1\n    \n    # Add the count of the last digit to the count\n    count += odd_count\n    \n    # Return the count of the last digit\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common = set()\n    # iterate through the nested lists\n    for i in nestedlist:\n        # iterate through the inner lists\n        for j in i:\n            # check if the element is already in the set\n            if j not in common:\n                # add it to the set\n                common.add(j)\n    # return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use a set to store the common elements\n    common_set = set()\n\n    # Iterate through each element in the nested list\n    for elem in nestedlist:\n        # If the element is a list, recursively check for common elements\n        if isinstance(elem, list):\n            common_set.update(common_in_nested_lists(elem))\n        # If the element is not a list, add it to the set\n        else:\n            common_set.add(elem)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Iterate through each nested list\n    for lst in nestedlist:\n        # Iterate through each element in the nested list\n        for elem in lst:\n            # Check if the element is already in the common set\n            if elem in common:\n                # If it is, increment the count for that element\n                common[elem] += 1\n            else:\n                # Otherwise, add the element to the set with a count of 1\n                common.add(elem)\n    \n    # Return the common set\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Loop through each list in the nested list\n    for i in nestedlist:\n        # Loop through each element in the current list\n        for j in i:\n            # If the element is already in the common_list, add it to the result_list\n            if j not in common_list:\n                common_list.append(j)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for lst in nestedlist:\n        if lst not in common_list:\n            common_list.append(lst)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through the nested list\n    for item in nestedlist:\n        # Loop through the elements in the current list\n        for element in item:\n            # If the element is already in the common dictionary, add it to the current item's list\n            if element in common_dict:\n                common_dict[element].append(item)\n            # Otherwise, add the element as a key with a single item list as the value\n            else:\n                common_dict[element] = [item]\n\n    # Create a set of common elements from the dictionary\n    common_set = set(common_dict.keys())\n\n    # Return a list of common elements\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(sublist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Check if the element is already in the set\n            if element in common:\n                # If it is, append the sublist to a set of sublists that have common elements\n                common.add(sublist)\n                break\n            # If the element is not in the set, add it to the set\n            else:\n                common.add(element)\n    \n    # Return the set of common elements\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list\n    nums_list = list(nums)\n    # initialize integer variable\n    result = 0\n    # iterate through list and add each element to result\n    for num in nums_list:\n        result += num\n    # return result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_num = 0\n    for num in nums:\n        int_num = int_num * 10 + num\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the concatenated integers\n    result = \"\"\n    \n    # Iterate through each integer in the tuple\n    for num in nums:\n        # Convert the integer to a string and add it to the result string\n        result += str(num)\n        \n    # Convert the concatenated string of integers back to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    # Convert the tuple to a list to be able to perform a single pass over the list\n    nums = list(nums)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the list and add each element to the sum\n    for num in nums:\n        sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty string to store the integer value\n    num_str = \"\"\n    \n    # iterate through the tuple of integers\n    for num in nums:\n        # convert the integer to a string and append it to the num_str variable\n        num_str += str(num)\n        \n    # convert the num_str variable to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_num = 0\n    for num in nums:\n        int_num *= 10\n        int_num += num\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty list to store the sum of integers in the tuple\n    sum_list = []\n    # iterate over each integer in the tuple\n    for num in nums:\n        # add the integer to the sum_list\n        sum_list.append(num)\n    # convert the sum_list to a single integer using the built-in sum() function\n    return sum(sum_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty integer to hold the sum of the elements in the tuple\n    int_sum = 0\n    \n    # iterate through each element in the tuple\n    for num in nums:\n        # check if the element is a positive integer\n        if num > 0:\n            # add the positive integer to the sum\n            int_sum += num\n        # otherwise, raise an error\n        else:\n            raise ValueError(\"All elements in the tuple must be positive.\")\n    \n    # return the sum of the positive integers in the tuple\n    return int_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                float_list.append(float(element))\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for col in row:\n            if isinstance(col, str):\n                try:\n                    float(col)\n                    col = float(col)\n                except ValueError:\n                    pass\n            elif isinstance(col, list):\n                col = list_to_float(col)\n            if isinstance(col, (int, float)):\n                pass\n            else:\n                col = float(str(col))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) or isinstance(test_list[i][j], int):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                element = float(element)\n                test_list[sublist.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for element in item:\n            try:\n                float(element)\n            except ValueError:\n                print(f\"Element {element} cannot be converted to float\")\n                continue\n            else:\n                item.remove(element)\n                item.append(float(element))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n\n    Parameters:\n    test_list (list of lists): A list of lists containing elements that can be converted to floats.\n\n    Returns:\n    list of floats: A list of floats containing the converted elements.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass  # do nothing for non-convertible elements\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character\n    words = string.split()\n    # return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize two pointers to the start and end of the array\n    start = 0\n    end = len(arr) - 1\n\n    # while the start pointer is less than the end pointer\n    while start < end:\n        # check if the current element is the same as the element at the start pointer\n        if arr[start] == arr[end]:\n            # if the element is found, move the start pointer to the right\n            start += 1\n            # if the element is not found, move the end pointer to the left\n            if start == end:\n                return arr[start]\n        # if the current element is not the same as the element at the start pointer,\n        # move the start pointer to the right\n        else:\n            start += 1\n\n    # if the loop completes, it means the element is not found and we return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the first and last elements of the array\n    first = arr[0]\n    last = arr[-1]\n\n    # Check if the first element is the same as the last element\n    if first == last:\n        return first\n\n    # Initialize the count of elements to 0\n    count = 0\n\n    # Initialize the index of the last occurrence of the first element\n    last_occurrence_index = -1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is the first occurrence of the first element, update the count and index\n        if arr[i] == first:\n            count += 1\n            last_occurrence_index = i\n\n        # If the count reaches 1 and the current element is not the last occurrence of the first element, return the first element\n        if count == 1 and arr[i]!= first:\n            return first\n\n    # If the loop completes without finding a second occurrence of the first element, return the last element\n    return last"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return search(arr[1:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 1\n    while i < n:\n        if arr[i] == arr[i-1]:\n            i += 1\n        else:\n            break\n    return arr[i-1]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == element:\n            count += 1\n        else:\n            count = 1\n            element = arr[i]\n    if count == 1:\n        return element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # Find the element that appears only once in the array\n    for key, value in count_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in lst:\n        if num < 0:\n            current_product *= -1\n        else:\n            current_product *= num\n        \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0] * list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            current_product = abs(list1[i][0] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][0]), abs(list1[i][1] * list1[j][1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(product, max_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    amicable_sum = 0\n    i = 2\n\n    # loop through all numbers from 1 to limit (inclusive)\n    while i <= limit:\n        # check if i is an amicable number\n        if i in [2, 3] or (limit // i) * i == limit:\n            # check if i is a multiple of any prime number between 2 and i-1\n            for j in range(2, i):\n                if limit % j == 0:\n                    break\n            else:\n                # if i is amicable, add it to the sum\n                amicable_sum += i\n\n        # increment i\n        i += 1\n\n    # return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of two numbers as a key and the sum itself as a value\n    amicable_dict = {}\n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable to any other number in the range\n        for other_num in range(1, limit + 1):\n            if (num!= other_num) and (num % other_num == 0) and (other_num % num == 0):\n                if num + other_num in amicable_dict:\n                    amicable_dict[num + other_num] += num\n                else:\n                    amicable_dict[num + other_num] = num\n    # Calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_dict.values())\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_prime(num):\n            is_sum = True\n            for divisor in range(1, num):\n                if num % divisor == 0:\n                    is_sum = False\n                    break\n            if is_sum:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum([j for j in range(1, limit+1) if i % j == 0]):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if num!= sum and num % sum == 0:\n            sum += num\n        if sum >= limit:\n            break\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum(range(1, num)):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if i!= sum_of_proper_divisors(i):\n            # If it is, append it to the list of amicable numbers\n            amicable_numbers.append(i)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    # Initialize the sum of proper divisors to 0\n    sum_proper_divisors = 0\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(n ** 0.5) + 1):\n        # Check if the number is a proper divisor of n\n        if n % i == 0:\n            # If it is, add it to the sum of proper divisors\n            sum_proper_divisors += i\n            # Also add all the other factors of n that are not divisors of i\n            sum_proper_divisors += n // i\n\n    # Return the sum of proper divisors\n    return sum_proper_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        num1 = i\n        num2 = 28 - num1\n        if num1 == num2:\n            amicable_numbers.append(num1)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i!= 1 and i!= limit:\n            if i in amicable_numbers:\n                continue\n            for j in range(1, limit + 1):\n                if j!= i and i + j == limit:\n                    amicable_numbers.append(i + j)\n                    break\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # List of all prime numbers between 2 and limit\n    primes = [2]\n    i = 3\n    while i * i <= limit:\n        if i in primes:\n            primes.append(i * i)\n        i += 2\n\n    # Initialize a dictionary to store the sum of all amicable pairs\n    amicable_pairs = {}\n\n    # Iterate through all prime numbers less than the limit\n    for p in primes:\n        # Check if p is an amicable pair\n        if (p + 1) in primes:\n            if p + 1 == p:\n                # If p is a perfect square, check if p is also an amicable pair\n                for k in range(p, int(p ** 0.5) + 1, p):\n                    if p + k == p:\n                        amicable_pairs[p] = (p + k)\n            else:\n                amicable_pairs[p] = p + 1\n\n    # Calculate the sum of all amicable pairs\n    amicable_sum = sum(amicable_pairs.values())\n\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in radians.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n\n    # Return the angle as a floating-point value in degrees\n    return float(angle.real)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function calculates the angle of a complex number a+bi.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real = a.real\n    imag = a.imag\n    angle = cmath.phase(complex(real, imag))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the complex number from the real and imaginary parts\n    complex_number = a + b*1j\n\n    # Calculate the angle in radians\n    angle_rad = cmath.phase(complex_number)\n\n    # Convert the angle to degrees\n    angle_deg = angle_rad * 180 / cmath.pi\n\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the argument of the complex number\n    arg = cmath.phase(mag+1j*b)\n    \n    # Convert the argument from radians to degrees\n    arg = arg * 180 / cmath.pi\n    \n    # Return the angle as a floating-point number\n    return float(arg)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_zeros = count_ones = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            if count_zeros == count_ones:\n                diff = count_zeros - count_ones\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count_0 = count_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    # convert the string to a list of binary digits\n    binary_list = [int(digit) for digit in string]\n\n    # initialize variables to keep track of the count of 0s and 1s in the string\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n\n    # iterate through each substring of the binary string\n    for i in range(len(binary_list)):\n        # iterate through each character in the current substring\n        for j in range(len(binary_list[i])):\n            # increment the count of 0s and 1s in the current character\n            if binary_list[i][j] == 0:\n                count_0s += 1\n            else:\n                count_1s += 1\n\n            # check if the difference between the count of 0s and 1s is greater than the current maximum difference\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        count_0s = 0\n        count_1s = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n\n            diff = abs(count_0s - count_1s)\n\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_num_zeros = 0\n    prev_num_ones = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            num_zeros = 0\n            num_ones = 1\n        else:\n            num_zeros = 1\n            num_ones = 0\n        \n        if i > 0 and string[i] == string[i-1]:\n            if string[i] == '0':\n                prev_num_zeros += 1\n            else:\n                prev_num_ones += 1\n            \n            if string[i] == '0':\n                num_zeros = prev_num_zeros + 1\n            else:\n                num_ones = prev_num_ones + 1\n                \n        if num_zeros - num_ones > max_diff:\n            max_diff = num_zeros - num_ones\n        \n        prev_num_zeros = num_zeros\n        prev_num_ones = num_ones\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_zeroes = 0\n    count_ones = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n            if count_zeroes > 0 and count_ones > 0:\n                max_diff = max(max_diff, count_zeroes - count_ones)\n                count_zeroes = 0\n                count_ones = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            diff = abs(count0 - count1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # create an empty dictionary to store the count of 0s and 1s\n    counts = {}\n    \n    # iterate through each character in the string\n    for char in string:\n        # if the character is a 0, increment the count of 0s\n        if char == '0':\n            counts['0'] = counts.get('0', 0) + 1\n        # if the character is a 1, increment the count of 1s\n        elif char == '1':\n            counts['1'] = counts.get('1', 0) + 1\n    \n    # find the maximum difference between the number of 0s and 1s in any sub-string of the string\n    max_diff = max(counts['0'] - counts['1'], counts['1'] - counts['0'])\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    # Loop through all possible substrings of length n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            \n            # Count the number of 0s and 1s in each substring\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 0\n                elif string[k] == '1':\n                    diff += 1\n            \n            # Update the maximum difference if the current substring has a greater difference\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\nprint(sum_common_divisors(15, 25))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get the set of common divisors between a and b\n    common_divisors = set(divisors(a) & divisors(b))\n\n    # Calculate the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of the common divisors of two numbers using the Euclidean algorithm.\n    \"\"\"\n\n    # Find the GCD of the two numbers using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n\n    # Calculate the sum of the divisors of a and b\n    divisors = [i for i in range(1, a+1) if a % i == 0 and b % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # calculate the GCD of two numbers\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # calculate the LCM of two numbers\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    # find the LCM and sum of common divisors\n    lcm_ab = lcm(a, b)\n    sum_cd = sum(lcm_ab, a) + sum(lcm_ab, b)\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize sum to zero\n    total = 0\n    # iterate through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the total sum\n            total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n\n    # Find the set of prime numbers up to the maximum number in the range\n    max_num = max(a, b)\n    primes = [True] * (max_num + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(max_num**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, max_num + 1, i):\n                primes[j] = False\n\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(2, max_num + 1):\n        if primes[i] and i in (a, b):\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    common_divisor_sum = 0\n    for num in common_divisors:\n        common_divisor_sum += num\n\n    return common_divisor_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n\n    Args:\n        a (int): First number\n        b (int): Second number\n\n    Returns:\n        int: Sum of common divisors of the two numbers\n    \"\"\"\n\n    def common_divisor(a, b):\n        \"\"\"\n        This function takes two numbers as input and returns their common divisor.\n\n        Args:\n            a (int): First number\n            b (int): Second number\n\n        Returns:\n            int: Common divisor of the two numbers\n        \"\"\"\n\n        # Check if a is divisible by b\n        while b!= 0:\n            temp = a % b\n            a = b\n            b = temp\n\n        return a\n\n    # Find the common divisor of the two numbers\n    common = common_divisor(a, b)\n\n    # Calculate the sum of common divisors\n    sum_common = 0\n    for i in range(1, common + 1):\n        if a % i == 0 and b % i == 0:\n            sum_common += i\n\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns the sum of their common divisors.\n    \"\"\"\n    # Get the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # finding the greatest common divisor of a and b\n    gcd = max(a,b)\n    while(gcd%a!=0 and gcd%b!=0):\n        if gcd%a>0:\n            a=a-gcd\n        else:\n            b=b-gcd\n        gcd=max(a,b)\n    \n    # calculating the sum of common divisors\n    sum_cd=0\n    for i in range(1,gcd+1):\n        if(gcd%i==0 and a%i==0 and b%i==0):\n            sum_cd+=i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisors(a, b):\n        \"\"\"\n        Write a function to find the common divisors of two numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_of_common_divisors(divisors):\n        \"\"\"\n        Write a function to find the sum of common divisors.\n        \"\"\"\n        sum_cd = 0\n        for divisor in divisors:\n            sum_cd += divisor\n        return sum_cd\n\n    div1 = common_divisors(a, b)\n    div2 = common_divisors(b, a)\n    sum_cd1 = sum_of_common_divisors(div1)\n    sum_cd2 = sum_of_common_divisors(div2)\n    return sum_cd1 + sum_cd2"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The result of multiplication of\", x, \"and\", y, \"is:\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    while y!= 0:\n        # Get the last digit of x and y\n        x_last_digit = x % 10\n        y_last_digit = y % 10\n\n        # Calculate the product of x and y\n        product = x_last_digit * y_last_digit + carry\n\n        # Update the result and carry\n        result = result + product\n        carry = product // 10\n\n        # Update x and y\n        x = x // 10\n        y = y // 10\n\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    result = [] # empty list to store the long words\n    for word in words:\n        if len(word) > n: # if the length of the word is greater than n\n            result.append(word) # add the word to the result list\n    return result # return the result list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in a list of words and a maximum number of characters n and returns a list of words longer than n characters.\n\n    Args:\n    n (int): The maximum number of characters a word can have to be included in the returned list.\n    words (list): A list of words to filter.\n\n    Returns:\n    list: A list of words longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if the matrix has the same number of rows and columns\n    if rows!= cols:\n        return False\n\n    # create a list of tuples representing the rows of the magic square\n    magic_rows = [(i, j) for i in range(rows) for j in range(cols)]\n\n    # sort the rows and columns of the magic square\n    sorted_magic_rows = sorted(magic_rows, key=lambda x: (x[0], x[1]))\n\n    # check if the magic square has the same elements in the sorted order\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[sorted_magic_rows[i][0]][sorted_magic_rows[j][1]]!= i+1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Check that the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check that all elements in the matrix are unique\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n\n    # Check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(len(my_matrix)))\n        if my_matrix[i][i]!= row_sum or my_matrix[i][i]!= col_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_of_row = 0\n    sum_of_col = 0\n    sum_of_box = 0\n    \n    # check rows\n    for i in range(n):\n        for j in range(n):\n            sum_of_row += my_matrix[i][j]\n        if sum_of_row!= sum_of_n * n:\n            return False\n        sum_of_row = 0\n        \n    # check cols\n    for j in range(n):\n        for i in range(n):\n            sum_of_col += my_matrix[i][j]\n        if sum_of_col!= sum_of_n * n:\n            return False\n        sum_of_col = 0\n        \n    # check boxes\n    for i in range(n):\n        box_i = i // 3\n        box_j = j // 3\n        sum_of_box += my_matrix[box_i*3+i%3][box_j*3+j%3]\n    if sum_of_box!= sum_of_n * n:\n        return False\n    sum_of_box = 0\n    \n    # all tests passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Define a function to check if a number is a magic square number\n    def is_magic_square(matrix, row, col):\n        # Check if the number in the current cell is equal to the sum of its row and column values\n        if matrix[row][col] == matrix[row][0] + matrix[0][col]:\n            # Check if the number in the next cell to the right is equal to the sum of its row and column values\n            if matrix[row][col] == matrix[row][1] + matrix[1][col] and matrix[row][1] + matrix[1][col] == matrix[row][2] + matrix[2][col]:\n                return True\n            # Check if the number in the next cell to the left is equal to the sum of its row and column values\n            elif matrix[row][col] == matrix[row][2] + matrix[2][col] and matrix[row][2] + matrix[2][col] == matrix[row][0] + matrix[0][col]:\n                return True\n        # If the number in the current cell is not equal to the sum of its row and column values, return False\n        return False\n    \n    # Define a function to check if the matrix is a magic square\n    def is_magic_square_matrix(matrix):\n        # Initialize a variable to keep track of the number of rows\n        row_count = len(matrix)\n        \n        # Loop through each row in the matrix\n        for row in range(row_count):\n            # Loop through each column in the matrix\n            for col in range(row_count):\n                # If the number in the current cell is not a magic square number, return False\n                if not is_magic_square(matrix, row, col):\n                    return False\n        # If we make it through the entire matrix without returning False, return True\n        return True\n    \n    # Check if the matrix is a magic square\n    if is_magic_square_matrix(my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of the diagonal elements\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n    \n    # check if the sum of the diagonal elements is equal to 15 (the magic number)\n    if diagonal_sum!= 15:\n        return False\n    \n    # check if the matrix is the identity matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i!= j and my_matrix[i][j]!= 1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check the rows and columns for each element\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= sum(my_matrix[i]) - sum(my_matrix[j]) + my_matrix[i][j]:\n                return False\n            if my_matrix[i][j]!= sum(my_matrix[j]) - sum(my_matrix[i]) + my_matrix[j][i]:\n                return False\n\n    # Check the main diagonals for each element\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= sum(my_matrix[i]) - sum(my_matrix[:i]) + my_matrix[i][i]:\n            return False\n        if my_matrix[i][i]!= sum(my_matrix[i]) - sum(my_matrix[i+1:]) + my_matrix[i][i]:\n            return False\n\n    # Check the secondary diagonals for each element\n    for i in range(len(my_matrix)):\n        if my_matrix[i][-i-1]!= sum(my_matrix[i]) - sum(my_matrix[:i]) + my_matrix[i][-i-1]:\n            return False\n        if my_matrix[i][-i-1]!= sum(my_matrix[i]) - sum(my_matrix[i+1:]) + my_matrix[i][-i-1]:\n            return False\n\n    # If we make it through all the checks, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if all elements in the matrix are unique\n    if len(set(sum(my_matrix, [])))!= rows*cols:\n        return False\n    \n    # Check for symmetry in each row\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[rows-1-i][i]:\n            return False\n    \n    # Check for symmetry in each column\n    for i in range(cols):\n        col = [row[i] for row in my_matrix]\n        if col == col[::-1]:\n            return False\n    \n    # Check for symmetry in the main diagonal\n    diag1 = [my_matrix[i][i] for i in range(rows)]\n    if diag1 == diag1[::-1]:\n        return False\n    \n    # Check for symmetry in the secondary diagonal\n    diag2 = [my_matrix[i][rows-1-i] for i in range(rows)]\n    if diag2 == diag2[::-1]:\n        return False\n    \n    # All tests passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_col = [sum(row) for row in my_matrix]\n    sum_row = [sum(row) for row in zip(*my_matrix)]\n    sum_square = sum(row for row in my_matrix for col in row)\n    if all(i == j for i in sum_col) and all(i == k for i in sum_row) and all(i == l for i in sum_square):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # check if the element is in the matrix\n            if my_matrix[i][j] == 0:\n                return False\n            # check if the element is repeated in the row\n            if i > 0 and my_matrix[i][j] == my_matrix[i-1][j]:\n                return False\n            # check if the element is repeated in the column\n            if j > 0 and my_matrix[i][j] == my_matrix[i][j-1]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the dimensions of the matrix\n    rows, cols = len(my_matrix), len(my_matrix[0])\n\n    # check if the matrix is a square matrix\n    if rows!= cols:\n        return False\n    \n    # check if the matrix contains only positive integers\n    for i in range(rows):\n        for j in range(cols):\n            if not isinstance(my_matrix[i][j], int) or my_matrix[i][j] < 1:\n                return False\n\n    # check if the matrix can be transformed into a magic square by reflecting its diagonals\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[rows-i-1][rows-i-1]:\n            return False\n\n    for j in range(cols):\n        if my_matrix[j][j]!= my_matrix[j][rows-j-1]:\n            return False\n\n    # the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = max(freq, key=freq.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    return max(freq, key=lambda x: freq[x] == max_freq)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    for num in nums:\n        freq[num] += 1\n        if max_num is None or freq[num] > freq[max_num]:\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Increment the frequency of the current number in the dictionary\n        freq_dict[num] += 1\n\n    # Initialize the maximum frequency and the item with maximum frequency\n    max_freq = 0\n    max_item = None\n\n    # Iterate through the dictionary to find the item with maximum frequency\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    \n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency and return it\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with\n    the maximum frequency in the list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_count = 0\n    max_num = None\n    \n    for num, count in freq_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with the maximum frequency\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    vowels_index = []\n\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowels_index.append(i)\n\n    for i in range(len(vowels_index)-1, -1, -1):\n        str1.pop(vowels_index[i])\n\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    result = []\n    for i in vowel_indices:\n        result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    i = 0\n    j = len(str1_list) - 1\n    while i < j:\n        if str1_list[i] not in vowels and str1_list[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1_list[i] in vowels:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            i += 1\n            j -= 1\n        elif str1_list[j] in vowels:\n            j -= 1\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            reversed_str = str1[i] + reversed_str\n        else:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    s = str(tup1)\n    # Remove the parentheses and square brackets from the string\n    s = s.replace('(', '').replace(')', '').replace('[', '').replace(']', '')\n    # Return the modified string\n    return s"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # define a string variable to store the tuple as a string\n    tup_str = ''\n    # loop through the tuple and add each element to the string variable\n    for i in tup1:\n        tup_str += str(i)\n    # return the string variable\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives_sum = 0\n    for num in nums:\n        if num < 0:\n            negatives_sum += num\n    return negatives_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Error: n must be a positive integer.\"\n    hexagonal = n * (2 * n - 1) // 2\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num += i * (i * 2 - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n * (n+1)) + (5 * n**2) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = a + b\n    count = 1\n\n    while count < n:\n        print(c, end=' ')\n        d = 6 * a + b\n        a = b\n        b = c\n        c = d\n        count += 1\n\n    print()\n    return c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case for n = 0\n    if n == 0:\n        return 0\n    # Base case for n = 1\n    elif n == 1:\n        return 1\n    # Base case for n = 2\n    elif n == 2:\n        return 6\n    # Base case for n = 3\n    elif n == 3:\n        return 15\n    # Recursive case\n    else:\n        return (2 * hexagonal_num(n-1)) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 5\n    for i in range(1, n+1):\n        print(a, end=' ')\n        a += b\n        b += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2*n-1))\n\nn = int(input(\"Enter a number: \"))\n\nprint(\"The {}th hexagonal number is: {}\".format(n, hexagonal_num(n)))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = (n * (2 * n - 1)) // 2\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it iterable\n    nums = list(nums)\n    # Count the number of non-zeroes and zeroes\n    non_zeros = len([num for num in nums if num!= 0])\n    zeros = len([num for num in nums if num == 0])\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = non_zeros / zeros if zeros > 0 else 0\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    non_zero_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    zero_ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zero_count.itemset(0, zero_count[0] + 1)\n    non_zero_count = len(nums) - zero_count[0]\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a standard Python list\n    nums_list = list(nums)\n\n    # Count the number of zeroes and non-zeroes\n    zeros = 0\n    non_zeros = 0\n    for num in nums_list:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zeros == 0:\n        return 0.0\n    else:\n        return float(zeros) / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n\n    # Calculate the total number of elements in the array\n    n = len(arr)\n\n    # Initialize variables to keep track of non-zero and zero elements\n    non_zero_count = 0\n    zero_count = 0\n\n    # Loop through the array and count non-zero and zero elements\n    for i in range(n):\n        if arr[i]!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    # Calculate the ratio of non-zero to zero elements\n    ratio = non_zero_count / zero_count if non_zero_count!= 0 else 0\n\n    # Return the ratio of non-zero to zero elements\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    non_zeroes = float(non_zeroes)\n    zeroes = float(zeroes)\n    ratio = zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums)) #initialize an array of zeros of the same length as the input array\n    for num in nums:\n        count[num] += 1 #increment the count of the corresponding index in the array\n    non_zero_count = sum(count) #calculate the total count of non-zeroes in the array\n    zero_count = sum(count) - non_zero_count #calculate the total count of zeroes in the array\n    return (zero_count/non_zero_count)*100 #return the ratio of zeroes to non-zeroes as a percentage"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        count.append(num)\n    zero_count = count.count(0)\n    non_zero_count = len(count) - zero_count\n    if zero_count == 0:\n        ratio = 0\n    else:\n        ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    non_zeros = zeros.count(0)\n    zeros_ratio = non_zeros / len(nums)\n    return zeros_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it easier to iterate over\n    num_list = list(nums)\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate over the list and count the number of zeroes and non-zeroes\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio and return it as a float\n    if non_zero_count == 0:\n        return 0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    power = 1\n    while n > 0:\n        count += 1\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        power <<= 1\n    return count == power - 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Find the number of 1's in the binary representation of n\n    count = sum([1 for digit in bin(n)[2:] if digit == '1'])\n\n    # If the count is 1, then there exists at least one power of 2 in n\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is already a power of 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n - 1) == 0:\n        return is_Sum_Of_Powers_Of_Two(n & (n - 1))\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        return is_Sum_Of_Powers_Of_Two(n//2) + is_Sum_Of_Powers_Of_Two(n//2)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the input number is greater than 0\n    if n <= 0:\n        return False\n    # Iterate over all the powers of 2 between 1 and n and check if the number can be represented as sum of non-zero powers of 2 or not\n    for i in range(1, n+1):\n        if n % i == 0 and is_Sum_Of_Powers_Of_Two(i) or n == i:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check for base cases\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    \n    # loop through all bits of the number\n    for i in range(1, n+1):\n        \n        # if the current bit is 1, check if the next bit is also 1\n        if (n & i) == i:\n            \n            # if the next bit is 1, check if the next bit is also 1\n            if (n & (i << 1)) == (i << 1):\n                return True\n    \n    # if no bits in the number match 1 and the next bit is also 1, it is not a power of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as sum of non-zero powers of 2,\n    else it returns False.\n    \"\"\"\n    if n == 0:\n        return True\n    \n    # initialize variables to keep track of the number of powers of 2 and the remainder\n    count = 0\n    remainder = n\n    \n    # loop until the remainder is less than or equal to 1\n    while remainder <= 1:\n        # if the remainder is equal to 0, return True since we have reached a power of 2\n        if remainder == 0:\n            return True\n        \n        # increment the count and divide the remainder by 2\n        count += 1\n        remainder = remainder // 2\n    \n    # if the remainder is greater than 1, we need to check for the non-zero powers of 2 in the remainder\n    # loop through the non-zero powers of 2 from 2 to the square root of the remainder\n    for i in range(2, int(remainder**0.5)+1):\n        # if the remainder is divisible by i, decrement the count and divide the remainder by i\n        if remainder % i == 0:\n            count -= 1\n            remainder //= i\n    \n    # if the count is still greater than 0, it means there were non-zero powers of 2 in the remainder\n    return count > 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Function to check whether a number is a power of 2\n    def is_power_of_2(num):\n        return num == (1 << num).bit_length()\n\n    # Function to check whether the given number can be represented as sum of non-zero powers of 2 or not\n    def can_represent(num):\n        # Check if the given number is divisible by 2\n        if num % 2 == 0:\n            return False\n\n        # Check if the given number is a power of 2\n        if not is_power_of_2(num):\n            return False\n\n        # Check if the given number is representable as sum of non-zero powers of 2\n        # Calculate the number of bits required to represent the given number\n        bits_required = 0\n        while num > 1:\n            num //= 2\n            bits_required += 1\n\n        # Check if the given number can be represented as sum of non-zero powers of 2\n        num = 1 << bits_required\n        while num <= n:\n            if (num * (num + 1)) // 2 == n:\n                return True\n            num += 1\n\n        return False\n\n    # Check if the given number is representable as sum of non-zero powers of 2 or not\n    if can_represent(n):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        # If it is a power of 2, check if the sum of powers of 2 is equal to n\n        return (n & (n - 1)) == 0\n    else:\n        # If n is not a power of 2, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n\n    # check if the given number is a power of 2\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n\n    if power_of_two == n:\n        # check if the given number can be represented as sum of non-zero powers of 2\n        power_of_two = 1\n        while power_of_two < n:\n            if n % power_of_two == 0:\n                # check if the remainder of n divided by power_of_two is 0\n                if (n // power_of_two) % 2 == 0:\n                    return False\n            power_of_two <<= 1\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n\nprint(circle_circumference(5))"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846\n    return 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(f\"The circumference of a circle with radius {r} is {circumference:.2f} units.\")"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sub_list in test_list:\n        singly_list.extend(sub_list)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    # The length of the input list\n    n = len(nums)\n\n    # Create a boolean list indicating whether each element is in its sorted position\n    sorted = [True] * n\n\n    # Keep track of the largest index of an unsorted element\n    max_index = 0\n\n    # Iterate over the input list from the last element to the first\n    for i in range(n-2, -1, -1):\n        # If the element is not sorted, find its largest unsorted neighbor\n        if not sorted[i]:\n            max_index = i\n            for j in range(i+1, n):\n                if not sorted[j]:\n                    if nums[j] > nums[max_index]:\n                        max_index = j\n            # Swap the elements at the current index with the maximum unsorted neighbor\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            # Mark the two elements as sorted\n            sorted[i], sorted[max_index] = True, True\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # initialize the largest element as the last element\n    largest = nums[n-1]\n    # initialize the index of the largest element as the last index\n    idx = n-1\n    # loop until the largest element is reached\n    while largest > 0:\n        # loop through the array from the largest element to the second largest element\n        for i in range(n-2, -1, -1):\n            # if the current element is greater than the largest element, swap it with the largest element\n            if nums[i] > largest:\n                nums[i], nums[idx] = nums[idx], nums[i]\n                # update the largest element and its index\n                largest = nums[idx]\n                idx = i\n                # if the largest element is not the second largest element, break the loop\n                if largest!= nums[n-2]:\n                    break\n        # if the largest element is not the second largest element, break the loop\n        if largest!= nums[n-2]:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Create a helper list to store indices of elements that are already sorted\n    helper = [0] * n\n\n    # One by one move boundary of unsorted subarray of size n-1\n    for start in range(n-1):\n        # Find the maximum element in unsorted array starting from start\n        max_idx = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_idx]:\n                max_idx = end\n\n        # Swap the maximum element with the first element of the unsorted subarray\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # Update the index of the last element that is sorted\n        helper[start] = max_idx\n\n    # Print the sorted array\n    for i in range(n-1, -1, -1):\n        print(nums[i], end=\" \")\n\n    # Print the indices of elements that are already sorted\n    print(\"\\nSorted indices: \", end=\"\")\n    for i in range(n-1, -1, -1):\n        print(helper[i], end=\" \")"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def sort(arr, n):\n        if n == 1:\n            return\n        \n        # find the largest element in the first n-1 elements\n        max_idx = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n        \n        # swap the largest element with the first element\n        arr[0], arr[max_idx] = arr[max_idx], arr[0]\n        \n        # recursively sort the remaining n-1 elements\n        sort(arr, n-1)\n    \n    # sort the list in ascending order\n    sort(nums, len(nums))\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start with a pancake of size n-1\n    for i in range(n-1, 0, -1):\n        # Find the index of the smallest element in the remaining pancake\n        smallest = i\n        for j in range(i):\n            if nums[j] > nums[smallest]:\n                smallest = j\n        # Swap the smallest element with the element at the end of the pancake\n        nums[i], nums[smallest] = nums[smallest], nums[i]\n        # Reverse the pancake so it starts at the next smallest element\n        reverse_pancake(nums, 0, i-1)\n    # Reverse the final sorted pancake to get the final sorted array\n    reverse_pancake(nums, 0, n-1)\n\n\ndef reverse_pancake(nums, start, end):\n    '''\n    Helper function to reverse a subarray of the given array.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n    # Use a loop to generate a sequence of pancakes of length n\n    for i in range(1, n+1):\n        # Sort the first i elements of the list\n        nums[:i] = sorted(nums[:i])\n        # Reverse the i-th element and the i-1 element\n        nums[i], nums[i-1] = nums[i-1], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of length n where each element is False\n    is_sorted = [False] * n\n    # create a list of length n where each element is the index of the pancake that is being sorted\n    pancake_indices = [None] * n\n    # initialize pancake_indices to 0\n    for i in range(n):\n        pancake_indices[i] = i\n    # main loop\n    while True:\n        # find the index of the largest unsorted element\n        max_index = -1\n        max_value = -1\n        for i in range(n):\n            if not is_sorted[i] and nums[i] > max_value:\n                max_index = i\n                max_value = nums[i]\n        if max_index == -1:\n            # all elements are sorted\n            break\n        # swap the largest unsorted element with the element at pancake_indices[max_index]\n        nums[max_index], nums[pancake_indices[max_index]] = nums[pancake_indices[max_index]], nums[max_index]\n        # mark the pancake as sorted\n        is_sorted[max_index] = True\n        is_sorted[pancake_indices[max_index]] = True\n        # find the next unsorted element and its pancake index\n        next_max_index = -1\n        next_max_value = -1\n        next_max_pancake_index = -1\n        for i in range(n):\n            if not is_sorted[i] and nums[i] > next_max_value:\n                next_max_index = i\n                next_max_value = nums[i]\n                next_max_pancake_index = i\n        # move the pancake to the next unsorted element\n        pancake_indices[max_index] = next_max_pancake_index\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # start with a single pancake and move it to the end\n    for i in range(n):\n        # choose the pancake with the smallest value to swap with the last element\n        index = i\n        min_index = i\n        for j in range(i, n):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        # print the sorted list at each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # find the maximum element in the list\n    max_num = max(nums)\n    # perform the pancake sort\n    while True:\n        swapped = False\n        for i in range(n-1):\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is a sorting algorithm that works by starting with a box containing the elements of the list. \n    The algorithm then selects the largest element from the box and places it at the end of the box. \n    The algorithm then selects the second largest element from the box and places it one position to the left of the selected element. \n    The algorithm repeats this process for the remaining elements in the box until the box is sorted.\n\n    This algorithm has a time complexity of O(n^2) in the worst case, but can be made more efficient using a stable sorting algorithm like heapsort or quicksort.\n    '''\n\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n    heap_sort(nums)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list1)):\n                if list1[i] == list3[j]:\n                    count += 1\n                    break\n            break\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if type(i) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Initialize two variables to hold the maximum absolute difference and its index\n    max_diff = 0\n    max_index = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Calculate the absolute difference between the current element and the maximum element\n        diff = abs(arr[i] - max_element)\n\n        # If the absolute difference is greater than the maximum absolute difference found so far, update the variables\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n\n    # Return the maximum absolute difference and its index\n    return max_diff, max_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            max_diff = max(diff, max_diff)\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize two variables to keep track of the current minimum and maximum values\n    current_min = arr[0]\n    current_max = arr[0]\n    # Iterate through the array and update the minimum and maximum values accordingly\n    for num in arr:\n        if num < current_min:\n            current_min = num\n        elif num > current_max:\n            current_max = num\n    # Return the maximum absolute difference between any two elements in the array\n    return abs(current_max - current_min)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # find the values of x and y that satisfy ax + by = n\n    x1 = (-b + n**0.5) / a\n    x2 = (-b - n**0.5) / a\n    \n    # check if there is only one solution\n    if x1 == x2:\n        return (x1, x1)\n    \n    # if there are two solutions, return them as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize two variables to keep track of the solutions\n    x1 = 0\n    y1 = 0\n\n    # loop over all possible values of x\n    for x in range(-n, n+1):\n        # loop over all possible values of y\n        for y in range(-n, n+1):\n            # check if the solution satisfies ax + by = n\n            if a * x + b * y == n:\n                # if it does, return the solution as a tuple\n                return (x, y)\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extended_euclidean_algorithm(a, b):\n    '''\n    Returns a tuple containing the two integers x and y such that ax + by = gcd(a, b), where gcd(a, b) is the greatest common divisor of a and b.\n    '''\n    if b == 0:\n        return (a, 1)\n    d, x, y = extended_euclidean_algorithm(b, a % b)\n    return (y, x - (a // b) * y)\n\n\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    gcd = extended_euclidean_algorithm(a, b)\n    if gcd[0] == 0:\n        return None\n    x = (n // gcd[0]) * gcd[1]\n    y = n % gcd[0]\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize variables\n    x = 0\n    y = 0\n    is_solvable = False\n\n    # iterate until a solution is found or no more solutions can be found\n    while not is_solvable:\n\n        # try to find a solution with x + b = n\n        if n - a * x - b * y == 0:\n            is_solvable = True\n\n        # if no solution can be found, try a new value for x\n        elif n - a * (x + 1) - b * y == 0:\n            x += 1\n            is_solvable = True\n\n        # if no solution can be found, try a new value for y\n        elif n - a * x - b * (y + 1) == 0:\n            y += 1\n            is_solvable = True\n\n        # if no solution can be found, return None\n        else:\n            return None\n\n    # return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    if a == 0:\n        return None\n\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # check if the discriminant is positive\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (int(x1), int(x2))\n\n    # if the discriminant is negative, check if x1 or x2 have the correct sign\n    elif discriminant < 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        if x1**2 + x2**2 == n:\n            return (int(x1), int(x2))\n        elif x1**2 + x2**2 > n:\n            return (int(x1), int(x2))\n        else:\n            return None\n\n    # if the discriminant is zero, return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize the variables\n    x = 0\n    y = 0\n    mod = 0\n\n    # check if a is not equal to zero\n    if a == 0:\n        return None\n\n    # check if b is not equal to zero\n    if b == 0:\n        return None\n\n    # calculate the value of mod (modulus)\n    mod = b**2 - 4*a*n\n\n    # check if mod is negative\n    if mod < 0:\n        return None\n\n    # calculate the values of x and y such that ax + by = n\n    x1 = (-b + mod**0.5) / (2*a)\n    x2 = (-b - mod**0.5) / (2*a)\n    y1 = (a*x1**2) + (b*x1) + n\n    y2 = (a*x2**2) + (b*x2) + n\n\n    # check if there is a solution\n    if (y1 == 0 and y2 == 0) or (y1!= 0 and y2!= 0):\n        return None\n\n    # return the tuple of x and y\n    return (x1, x2, y1, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if a * i + b * (n - i) == n:\n            return i, n - i\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:  # ax + by = n cannot be true\n        return None\n    x_1 = -b / a  # x1 = -b/a\n    y_1 = n / a - x_1 * b  # y1 = n/a - x1b\n    return (x_1, y_1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b, n are integers\n    if not all(isinstance(x, int) and isinstance(y, int) and isinstance(n, int) for x in [a, b, n]):\n        return None\n    \n    # Check if a, b, n have different signs\n    if a * b > 0:\n        return None\n    \n    # Initialize variables\n    x = None\n    y = None\n    \n    # Iterate through all possible solutions\n    for i in range(-n, n+1):\n        if a * i + b * j == n:\n            x = i\n            y = j\n            break\n        elif a * i + b * j < n:\n            x = i\n            y = j\n    \n    # Check if a solution was found\n    if x is None:\n        return None\n    \n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both positive\n    if a <= 0 or b <= 0:\n        return None\n\n    # initialize x and y\n    x = 0\n    y = 0\n\n    # iterate until n is 0 or we have found a solution\n    while n > 0:\n        # divide n by a and y by b, and find the remainder\n        x_remainder = n % a\n        y_remainder = n // b\n\n        # check if x_remainder is positive and y_remainder is positive\n        if x_remainder > 0 and y_remainder > 0:\n            return (x, y)\n\n        # update x and y\n        x += x_remainder\n        y += y_remainder\n\n        # check if n is divisible by a or b\n        n = (n // a) + (n % a // b)\n\n    # return None if no solution was found\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the first list and remove all the elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create an empty list to store the elements from list1 that are not present in list2\n    result = []\n    \n    # iterate through list1\n    for item in list1:\n        # check if item is not present in list2\n        if item not in list2:\n            # add item to result list\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list to store the result\n    result = []\n    \n    # Loop through each element in the first list\n    for item in list1:\n        # Check if the element is not present in the second list\n        if item not in list2:\n            # If it is not, add it to the result list\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Use a set to store all elements in list1 and set to store elements in list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Use a set intersection to get the elements in set1 that are not in set2\n    result = set1.intersection(set2)\n\n    # Convert the result set to a list and return it\n    return list(result)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize the sum to zero\n    sum = 0\n    \n    # loop through all the numbers from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum and add it to the running total\n        sum += n - 2 * i\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([(n - 2*i) for i in range(n // 2)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum_val = 0\n        for i in range(n // 2):\n            sum_val += n - 2*i\n        return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        x = n - n // 2\n        return x + sum_series(n - x)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    i = 0\n    while n - 2 * i >= 0:\n        result += n - 2 * i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    i = 0\n    while n - 2*i >= 0:\n        i += 1\n\n    sum_val = 0\n    while i >= 0:\n        sum_val += n - 2*i\n        i -= 1\n\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2 * i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (l * math.sin(math.pi / l))) / (4 * math.tan(math.pi / l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Calculate the base and height of the polygon\n    base = s * tan(pi / l)\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l * (s + l)) / 4\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of each side of the polygon\n    side_length = s / l\n\n    # Calculate the area of each side using Heron's formula\n    area_list = []\n    for i in range(l):\n        area_list.append(0.5 * s * tan((i * pi) / l))\n\n    # Calculate the area of the polygon as the sum of its individual areas\n    area = sum(area_list)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # convert the length and sides to radian\n    angle = 2 * pi / l\n    # calculate the area of the polygon\n    area = s * (tan(angle / 2)**2)\n    # return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (1 + tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the value of the semi-perimeter using the formula s = (n-2)*a\n    semi_perimeter = (l - 2 * s) / s\n\n    # Calculate the value of the area using the formula area = 1/2 * s * (1 + tan(pi/n)^2)\n    area = 0.5 * s * (1 + tan(pi / l) ** 2)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*s)/(4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n\n    div_sum = sum(set(range(1, n+1)) & set(map(int, str(n))))\n\n    # calculate the sum of the divisors of n using math.prod\n    math_div_sum = math.prod(range(1, n+1))\n\n    return div_sum == math_div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # function to find the divisors of a number\n    def find_divisors(num):\n        divs = []\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                divs.append(i)\n                if i!= num // i:\n                    divs.append(num // i)\n        return divs\n    \n    # find the divisors of n and m\n    div_n = find_divisors(n)\n    div_m = find_divisors(m)\n    \n    # find the sum of the divisors of n and m\n    n_div_sum = sum(div_n)\n    m_div_sum = sum(div_m)\n    \n    # check if the sum of the divisors of n and m is the same\n    if n_div_sum == m_div_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set(set(range(1, int(math.sqrt(n))+1)) - set(range(int(math.sqrt(n))+1, n+1)))\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def factors(n):\n        '''\n        Generates a list of factors of n.\n        '''\n        factors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n    \n    def sum_factors(factors):\n        '''\n        Calculates the sum of the factors of a number.\n        '''\n        return sum(factors)\n    \n    def gcd(a, b):\n        '''\n        Returns the greatest common divisor of a and b.\n        '''\n        return math.gcd(a, b)\n    \n    def lcm(a, b):\n        '''\n        Returns the least common multiple of a and b.\n        '''\n        return a * b // gcd(a, b)\n    \n    def is_lcm(a, b):\n        '''\n        Checks if a and b have the same least common multiple.\n        '''\n        return lcm(a, b) == a * b\n    \n    divisors = factors(n)\n    sum_divisors = sum_factors(divisors)\n    \n    return is_lcm(sum_divisors, lcm(n, 1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0: \n        return \"Invalid input\"\n    div_list = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            div_list.append(i) \n    div_sum = sum(div_list) \n    return div_sum == sum(set(div_list))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_divisors(num):\n        \"\"\"\n        A helper function to calculate the sum of the divisors of a number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    div1, div2 = 0, 0\n    while div1 < n:\n        div1 += 1\n        if is_prime(div1):\n            div2 = sum_divisors(div1)\n            if div2 == n:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if n // i!= i:\n                divisor_sum += n // i\n    return divisor_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_sum += i + n // i\n\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    divisor_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Calculate the sum of the divisors of (n-1)\n    divisor_sum_minus_one = sum([i for i in range(1, int(math.sqrt(n))+1) if n-1 % i == 0])\n\n    # Check if the sum of the divisors of n and n-1 is the same\n    if divisor_sum == divisor_sum_minus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the integer is the same, False otherwise.\n    The function uses the formula to determine the sum of the divisors: S = 1 + 2 + 3 +... + n.\n    '''\n    \n    # initialize the sum of the divisors to 1\n    sum_of_divisors = 1\n    \n    # loop through the numbers from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n)) + 1): \n        \n        # if the input number is divisible by the current number, add it to the sum of the divisors\n        if n % i == 0: \n            sum_of_divisors += i\n            \n    # check if the sum of the divisors is equal to the input number\n    if sum_of_divisors == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # iterate over each character in the string\n    for i in range(len(str1)):\n        # get the current character\n        current_char = str1[i]\n\n        # check if the current character is a letter\n        if current_char.isalpha():\n            # get the position of the current character in the alphabet (converted to lowercase)\n            position = (ord(current_char) - ord('a')) % 26\n\n            # increment the count for the current position if it already exists in the dictionary\n            if position in char_count:\n                char_count[position] += 1\n            # otherwise, add the current position to the dictionary with a count of 1\n            else:\n                char_count[position] = 1\n\n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in english_alphabet:\n        if str1.lower().count(char) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create an empty dictionary to store the character frequencies\n    char_freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, update its frequency in the dictionary\n        if char.isalpha():\n            char = char.lower()\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n    # Loop through the English alphabet (case insensitive)\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        # If the character is in the dictionary, increment the count\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # Count the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive)\n    same_position_count = sum([char_freq[char] for char in char_freq if char_freq[char] in char_freq])\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # convert all characters in the string to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store the count of characters at each position in the English alphabet\n    char_counts = {}\n    # loop through each character in the string\n    for i in range(26):\n        # add the current character to the dictionary with a count of 0\n        char_counts[chr(i+97)] = 0\n    # loop through each character in the string again and count the number of occurrences at each position\n    for char in str1:\n        # convert the current character to its index in the English alphabet (97 is the ASCII value of 'a')\n        index = ord(char) - 97\n        # if the current character has a count of 0, increment its count in the dictionary\n        if char_counts[chr(index+97)] == 0:\n            char_counts[chr(index+97)] = 1\n        # otherwise, increment the count for the character at the current index in the dictionary\n        else:\n            char_counts[chr(index+97)] += 1\n    # return the dictionary with the count of characters at each position in the English alphabet\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    for char in str1:\n        if char in alphabet:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Create an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is a lowercase letter in the English alphabet\n        if 'a' <= char <= 'z':\n            # If the character is a lowercase letter, add it to the dictionary with a count of 1\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of each character in the English alphabet\n    count_dict = {chr(i): 0 for i in range(97, 123)}\n\n    # loop through the characters in the string\n    for char in str1:\n        # if the character is present in the dictionary, increment the count\n        if char in count_dict:\n            count_dict[char] += 1\n\n    # return the count of each character in the English alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for char in str1:\n        if char.lower() in count:\n            count[char.lower()] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    # Initialize a dictionary to store the counts of characters in str1\n    char_counts = {}\n    for i in range(ord('a'), ord('z')+1):\n        char_counts[chr(i)] = 0\n        \n    # Iterate through str1 and update the counts of characters in the alphabet\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n            \n    # Return the counts of characters in the alphabet\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through the string\n    for char in str1:\n        # Check if the character is a vowel\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            # If it is, check if it has a corresponding letter in the English alphabet\n            if char.upper() in char_count:\n                # If it does, add 1 to the count for that letter in the dictionary\n                char_count[char.upper()] += 1\n            else:\n                # If it doesn't, add the character to the dictionary with a count of 1\n                char_count[char.upper()] = 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the next power of 2 greater than or equal to the input.\n    \"\"\"\n    # If n is already a power of 2, return it.\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the next power of 2 using binary search.\n    left, right = 1, 2**31 - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid >= n:\n            right = mid\n        else:\n            left = mid + 1\n    \n    # Return the next power of 2.\n    return left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1  # Convert n to the power of 2 that it is already equal to\n    n |= (n >> 1)  # Add 1 to the binary representation of n\n    n |= (n >> 2)  # Add 2 to the binary representation of n\n    n |= (n >> 4)  # Add 4 to the binary representation of n\n    n |= (n >> 8)  # Add 8 to the binary representation of n\n    n |= (n >> 16)  # Add 16 to the binary representation of n\n    n += 1  # Convert the binary representation back to an integer\n    n = 1 << n  # Convert the integer back to a power of 2\n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the binary representation of n\n    binary = bin(n)[2:]\n    \n    # convert the binary representation to an integer\n    integer = int(binary, 2)\n    \n    # find the next power of 2 using integer exponentiation\n    next_power = 1\n    for i in range(1, 32):\n        if integer & (1 << i):\n            next_power <<= 1\n        else:\n            break\n    \n    # convert the next power to a binary representation and return it as an integer\n    return int(''.join([str(next_power >> i & 1) for i in range(32)]), 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    # Convert n to an integer\n    n = int(n)\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n    # Find the number of bits set to 1 in the binary representation\n    count = binary.count('1')\n    # Calculate the next power of 2\n    result = 1\n    for i in range(count):\n        result <<= 1\n    # Convert the result to an integer\n    result = int(result)\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use binary search to find the smallest power of 2 greater than or equal to n\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid == n:\n            high = mid\n        elif mid < n:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Convert n to binary and count the number of 1's in the binary representation\n    count = sum(1 for bit in bin(n)[2:] if bit == '1')\n    \n    # Calculate the power of 2 to the count minus 1\n    power_of_2 = 1 << count - 1\n    \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the next power of 2\n    next_power = 1\n    \n    # Loop while the next power is less than or equal to n\n    while next_power <= n:\n        # Increment the next power of 2 by 1\n        next_power <<= 1\n    \n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the largest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power <<= 1\n    \n    # return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize power of 2 to 2 (base case)\n    power = 2\n    \n    # loop until power is greater than or equal to n\n    while power >= n:\n        power *= 2\n    \n    # return power of 2\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n\n    # initialize variables to store the sum and the current index\n    sum_val = 0\n    index = m\n\n    # iterate through the list from the given index to the last index\n    while index <= n:\n        sum_val += list1[index]\n        index += 1\n\n    # return the sum\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize variables\n    sum_val = 0\n    \n    # loop through the list from the starting index to the ending index\n    for i in range(m, n+1):\n        # add each number to the sum\n        sum_val += list1[i]\n    \n    # return the sum value\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        print(\"Invalid indices. Please enter valid indices.\")\n        return None\n    \n    # Calculate the sum of numbers within the specified range\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n        \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n + 1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Calculate the length of the list\n    length = len(list1)\n\n    # Check if the indices are within range\n    if m < 0 or m >= length or n < 0 or n >= length:\n        return \"Error: Invalid index range\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the range of indices\n    for i in range(m, n+1):\n        # Check if the index is within range\n        if i < 0 or i >= length:\n            return \"Error: Invalid index range\"\n        # Add the value at the current index to the sum\n        sum += list1[i]\n\n    # Return the sum of the specified indices\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Loop through each element in the list starting from the first index to the second index (inclusive)\n    for i in range(m, n+1):\n        # Check if the current element is within the list range\n        if i <= len(list1) and i >= 0:\n            # Add the current element to the sum variable\n            total += list1[i-1]\n    \n    # Return the sum of the elements within the specified range\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Convert the side length to radians\n    angle = math.radians(120)\n    # Use the Pythagorean theorem to calculate the perimeter\n    return 5 * a * math.sin(angle)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the semi-perimeter of the pentagon using the law of cosines\n    b = (a**2 + a**2) ** 0.5\n\n    # calculate the perimeter of the pentagon using the formula for a regular pentagon\n    perimeter = 5 * a * b\n\n    # return the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon using the formula\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon\n    area = math.sqrt(5) * a * a / 2\n\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n\nprint(perimeter_pentagon(5)) # output: 30.0"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for word in s.split():\n        if word.lower() =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = s.find('std')\n    while start!= -1:\n        count += 1\n        start = s.find('std', start+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        first_element = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= first_element:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = set([type(x) for x in test_tuple])\n    if len(types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n\n    # If we reach this point, all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    return all(t == types[0] for t in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the length of the tuple is 0\n    if len(test_tuple) == 0:\n        return False\n    \n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n    \n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element has the same data type as the first element\n        if type(element)!= first_element:\n            return False\n    \n    # if the loop completes without returning False, then all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n\n    if all(t == data_types[0] for t in data_types):\n        print(\"All elements in the tuple have same data type.\")\n    else:\n        print(\"Some elements in the tuple have different data types.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    # Initialize a counter and a boolean variable to keep track of whether the element is the majority\n    count = 0\n    is_majority = False\n    \n    # Loop through the array and count the occurrences of the element x\n    for num in arr:\n        if num == x:\n            count += 1\n            \n    # If the count is greater than n/2, the element is the majority\n    if count > n // 2:\n        is_majority = True\n        \n    return is_majority"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize a counter for the element x\n    count = 0\n    \n    # Iterate through the array and check if the current element matches x\n    for num in arr:\n        if num == x:\n            count += 1\n            \n    # If the count is greater than n/2, return True\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n / 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    # Convert n to binary representation\n    bin_n = bin(n)[2:]\n    # Initialize count variable to 0\n    count = 0\n    # Loop through each binary digit in the binary representation\n    for digit in bin_n:\n        # If the binary digit is a 1, increment the count\n        if digit == '1':\n            count += 1\n    # Return the count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n > 0: \n        # Get the rightmost set bit \n        n &= (n - 1) \n\n        # If there is a set bit, increment the count \n        if n & 1: \n            count += 1\n\n        # Remove the rightmost set bit \n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a new string which will hold the odd index values of the given string\n    odd_index_str = \"\"\n    # iterate through each character of the given string\n    for char in str:\n        # if the index of the current character is odd, add it to the new string\n        if str.index(char) % 2!= 0:\n            odd_index_str += char\n    # return the new string which has all the odd index values of the given string\n    return odd_index_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    \n    # loop through each character in the input string\n    for char in str:\n        # check if the index of the character is odd\n        if str.index(char) % 2!= 0:\n            # if the character is odd, add it to the result string\n            result += char\n    \n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Iterate over the list of characters and remove the odd index characters\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    # create a new string to store the odd characters\n    new_str = \"\"\n    # iterate through the characters of the input string\n    for i in range(len(str)):\n        # if the index value is odd, add it to the new string\n        if i % 2 == 1:\n            new_str += str[i]\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i in range(len(str)) if i % 2 == 1]\n    return ''.join([str[i] for i in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    return ''.join([chr(ord(c) - 1) if (ord(c) - 1) % 2 == 1 else c for c in str])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as inputs and returns the minimum of the three.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    all_unset = True\n    for i in range(l, r + 1):\n        if bin(n & (1 << i))[2:].count('1')!= 0:\n            all_unset = False\n            break\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n\n    # Check if all bits are unset in the given range\n    for i in range(l, r+1):\n        if bin_str[i] == '0':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a boolean variable to keep track of whether all bits are set in the given range or not\n    all_set = True\n    # Iterate through each bit of the given number\n    for i in range(l, r+1):\n        # Check if the i-th bit is unset or set\n        if n & (1 << i) == 0:\n            # If the i-th bit is unset, check if any of the subsequent bits are unset\n            for j in range(l, i-1, -1):\n                if n & (1 << j) == 0:\n                    # If any of the subsequent bits are unset, the entire range is not set\n                    all_set = False\n                    break\n        else:\n            # If the i-th bit is set, check if any of the subsequent bits are set\n            for j in range(i+1, r+1):\n                if n & (1 << j) == 0:\n                    # If any of the subsequent bits are set, the entire range is not set\n                    all_set = False\n                    break\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): The integer value to be checked.\n        l (int): The lower limit of the range.\n        r (int): The upper limit of the range.\n\n    Returns:\n        bool: True if all the bits are unset in the given range, otherwise False.\n    \"\"\"\n\n    # Iterate through each bit position in the integer\n    for i in range(l, r+1):\n\n        # If the bit position is unset, the integer is not all set\n        if (n >> i) & 1:\n            return False\n\n    # If the loop completes without finding an unset bit, the integer is all set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & i).count('1')!= 32:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the variable to keep track of the count of unset bits\n    unset_bits = 0\n\n    # Loop through the bits of the number\n    while n!= 0:\n        # Check if the least significant bit is 1\n        if n & 1 == 1:\n            # Increment the count of unset bits\n            unset_bits += 1\n\n        # Shift the number to the right by 1 bit\n        n = n >> 1\n\n    # Calculate the difference between the range and the number of unset bits\n    difference = r - l - unset_bits\n\n    # Check if the difference is 0\n    if difference == 0:\n        # All the bits are set in the given range\n        return True\n    else:\n        # All the bits are unset in the given range\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize a boolean variable to check if all the bits are unset\n    all_unset = True\n\n    # iterate through all the bits in the given range (inclusive)\n    for i in range(l, r + 1):\n        # if the current bit is set, return False\n        if n & (1 << i):\n            return False\n        # if the current bit is unset, check the next bit\n        else:\n            all_unset = False\n\n    # if all the bits are unset, return True\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l > r:\n        return True\n\n    for i in range(l,r+1):\n        if bin(n & i).count('1')!= bin(i).count('1'):\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a mask with all bits set to 1\n    mask = (1 << (r - l + 1)) - 1\n\n    # Initialize a variable to store the number of unset bits\n    unset_bits = 0\n\n    # Iterate over the bits in the binary representation of n\n    for i in range(l, r + 1):\n        # Check if the ith bit is set in n\n        if (n & (1 << i))!= 0:\n            # If the ith bit is set, increment the unset_bits variable\n            unset_bits += 1\n\n    # Check if all the unset bits are set\n    if unset_bits == mask:\n        # If all the unset bits are set, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if n == 0:\n        return True\n    else:\n        if l & (1 << (n - 1)):\n            return False\n        else:\n            return all_Bits_Set_In_The_Given_Range(n - 1, l, r)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[n] = arr[n], arr[i]\n            n -= 1\n        i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store the negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the array and append each element to the appropriate list\n    for element in arr:\n        if element < 0:\n            neg_list.append(element)\n        else:\n            pos_list.append(element)\n    \n    # Sort the negative list in descending order\n    neg_list.sort(reverse=True)\n    \n    # Sort the positive list in ascending order\n    pos_list.sort()\n    \n    # Loop through the array again, re-arranging the elements as required\n    i = 0\n    for element in arr:\n        if i < n:\n            if element < 0:\n                arr[i] = neg_list.pop(0)\n            else:\n                arr[i] = pos_list.pop(0)\n        else:\n            if element < 0:\n                arr[i] = neg_list.pop()\n            else:\n                arr[i] = pos_list.pop()\n        i += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers: left_ptr and right_ptr\n    left_ptr = 0\n    right_ptr = n - 1\n\n    # loop until the left pointer is less than the right pointer\n    while left_ptr < right_ptr:\n        # if the element at the left pointer is negative, move the left pointer to the right\n        if arr[left_ptr] < 0:\n            left_ptr += 1\n        # if the element at the right pointer is positive or 0, move the right pointer to the left\n        elif arr[right_ptr] > 0 or arr[right_ptr] == 0:\n            right_ptr -= 1\n        # if the element at the right pointer is negative, swap the elements at the left and right pointers and move both pointers to the right\n        else:\n            arr[left_ptr], arr[right_ptr] = arr[right_ptr], arr[left_ptr]\n            left_ptr += 1\n            right_ptr -= 1\n\n    # print the re-arranged array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array\n    so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in arr:\n        if i < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    if n > neg_count:\n        n = neg_count\n    if n > pos_count:\n        n = pos_count\n    arr = [arr[i] for i in range(n)]\n    arr = arr + [i for i in arr if i < 0]\n    arr = arr + [i for i in arr if i > 0]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_count += 1\n        elif arr[i] > 0:\n            pos_count += 1\n    \n    # swap negative and positive elements until the count of negative elements is equal to the count of positive elements\n    while neg_count!= pos_count:\n        if neg_count < pos_count:\n            arr.append(arr.pop(0))\n            neg_count += 1\n        else:\n            arr.insert(0, arr.pop())\n            pos_count += 1\n    \n    # swap negative elements with the last elements of the array\n    for i in range(n):\n        arr[i], arr[-1] = arr[-1], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate the negative and positive elements in two separate lists\n    neg_arr = [num for num in arr if num < 0]\n    pos_arr = [num for num in arr if num >= 0]\n\n    # If n is greater than the length of the positive array, swap them and continue\n    if n > len(pos_arr):\n        pos_arr, neg_arr = neg_arr, pos_arr\n        n = n - len(pos_arr)\n\n    # Shuffle the negative and positive elements\n    neg_arr.extend(pos_arr[:n])\n    pos_arr = pos_arr[n:]\n    random.shuffle(neg_arr)\n\n    # Combine the negative and positive elements and shuffle them again\n    final_arr = neg_arr + pos_arr\n    random.shuffle(final_arr)\n\n    return final_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    \n    negative.sort(reverse=True)\n    positive.sort()\n    \n    result = negative + positive\n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize three variables to keep track of negative, positive and zero counts\n    neg_count = 0\n    pos_count = 0\n    zero_count = 0\n    \n    # Iterate through the array and count the number of negative, positive and zero elements\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        elif num > 0:\n            pos_count += 1\n        else:\n            zero_count += 1\n    \n    # If the number of negative and zero elements is less than or equal to the number of positive elements, return the original array as it is\n    if neg_count <= zero_count and pos_count <= zero_count:\n        return arr\n    \n    # Sort the negative elements in ascending order and the zero elements in descending order\n    neg_arr = sorted(arr[:n])\n    zero_arr = sorted(arr[n:], reverse=True)\n    \n    # Concatenate the negative, positive and zero arrays and return the final array\n    result = neg_arr + [0] * zero_count + pos_arr\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Loop through the array and append the positive and negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Loop through the array again and add the negative elements to the end of the positive list\n    for i in range(n, len(arr)):\n        positive.append(arr[i])\n\n    # Return the final list of elements after re-arranging\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, remove all negative numbers from the array\n    positive_arr = [num for num in arr if num > 0]\n    negative_arr = [num for num in arr if num < 0]\n\n    # Next, sort the positive array in descending order\n    positive_arr.sort(reverse=True)\n\n    # Finally, concatenate the two sorted arrays and return the result\n    return positive_arr + negative_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Split the string into individual words\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Replace any blank spaces in the word with the character\n        words[i] = words[i].replace(\" \",char)\n    # Join the words back together into a string\n    new_str = \" \".join(words)\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace all blank spaces with the given character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    \n    # Add the first n items from the list to the min heap\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n        \n    # Add the remaining items from the list to the min heap\n    for i in range(n, len(list1)):\n        heapq.heappushpop(min_heap, list1[i])\n        \n    # Return the n largest items from the min heap\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # converting the list into a heap\n    heap = list1\n    heapq.heapify(heap)\n    # finding the n largest items from the heap\n    for i in range(n):\n        heapq.heappop(heap)\n    # converting the heap back into a list and returning it\n    return [x for x in heapq.nsmallest(n, heap)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heapq.nlargest(n, heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to store the top n largest items\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    # Return the top n largest items as a list\n    return [-x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use heapify to convert the list into a max heap\n    heapq.heapify(list1)\n    \n    # Remove the largest n items from the heap and add them to a new list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(list1))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Sort the list in descending order using the built-in `sorted` function\n    lst = sorted(lst, reverse=True)\n\n    # Return the top n elements of the sorted list\n    return lst[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * r * h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2\n    surface_area = 2 * area * h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Using the formula for a circle:\n    # A = \u03c0r^2\n    # Since we want the surface area, we need to take the area of the cylinder.\n    # A = 2\u03c0r^2\n    # Since r^2 = h^2, we get r = sqrt(h^2)\n    # A = \u03c0h^2\n    # Therefore, the lateral surface area of the cylinder is \u03c0h^2.\n    # Now, we need to multiply this value by the height of the cylinder to get the total surface area.\n    # S = A*h\n    surface_area = 2*3.14159*r**2*h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    \n    return 2*pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    lateral_area = 2 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3  # cube of length l\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new number with all bits set to 1\n    new_number = 0\n    # Loop through each bit in the original number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, set its value to 1\n        if int(bit) % 2 == 0:\n            new_number += 1\n    # Return the new number with all even bits set to 1\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n >> 1\n    \n    for i in range(count):\n        n = n | (1 << i)\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits of n\n    even_bits = []\n    \n    # iterate over the bits of n\n    for i in range(32):\n        # check if the i-th bit of n is 1\n        if (n >> i) & 1 == 1:\n            # add the i-th bit to the even_bits list\n            even_bits.append(i)\n    \n    # convert the even_bits list to an integer\n    even_bits_int = int(''.join([str(i) for i in even_bits]), 2)\n    \n    # return the result\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits\n    even_bits = []\n    \n    # loop through each bit of the given number\n    for i in range(32):\n        # check if the current bit is even\n        if n & (1 << i):\n            # if it is, append it to the even_bits list\n            even_bits.append(n & (1 << i))\n    \n    # convert the even_bits list to an integer and return it\n    return int(''.join(str(x) for x in even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n_copy = n\n    count = 0\n    while count < 64:\n        if n_copy & 1 == 0:\n            n_copy |= 1 << count\n        count += 1\n    return n_copy"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    return n | (n - 1) & ~(n & 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the given number to a binary string\n    binary_string = bin(n)[2:]\n    # Initialize an empty string to store the new binary number\n    new_binary_string = ''\n    # Iterate over the binary string from right to left\n    for bit in binary_string[::-1]:\n        # If the bit is even, add a 1 to the new binary string\n        if int(bit) == 0:\n            new_binary_string += '0'\n        else:\n            new_binary_string += '1'\n    # Convert the new binary string to an integer and return it\n    return int(new_binary_string, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty string to store the number with even bits set\n    result = \"\"\n\n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append \"1\" to the result string\n        if bit == \"1\":\n            result += \"1\"\n        # If the current bit is odd, append \"0\" to the result string\n        else:\n            result += \"0\"\n\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store even bits\n    even_bits = []\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append it to the even_bits list\n        if bit == '1':\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n    # Combine the even bits into a single number and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the even_bit variable to 0\n    even_bit = 0\n\n    # loop through each bit of the given number\n    for i in range(32):\n        # get the bit value at index i\n        bit_value = (n >> i) & 1\n\n        # if the bit value is even (i.e., 0), set the even_bit variable to 1\n        if bit_value == 0:\n            even_bit = 1\n            # break out of the loop if we find an even bit\n            break\n\n    # return the new value of the even_bit variable\n    return even_bit"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each tuple\n    count_dict = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the counts dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # Otherwise, increment the count for that tuple\n        else:\n            counts[tup] += 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    \n    # Count the occurrences of each unique tuple using Counter\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= \"\":\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the count of non-empty substrings of the string.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Initialize left and right indices to current index\n        left = i\n        right = i\n\n        # While left index is within the string and current character is not a space\n        while left >= 0 and str[left]!='':\n            # Increment left index\n            left -= 1\n\n        # While right index is within the string and current character is not a space\n        while right < len(str) and str[right]!='':\n            # Increment right index\n            right += 1\n\n        # If the length of the substring between left and right is greater than 0, increment count\n        if right - left > 0:\n            count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 1 or n < 1:\n        return 0\n\n    def helper(length, index, count, curr_seq):\n        if length == n:\n            count[0] += 1\n        else:\n            if index < len(curr_seq):\n                for i in range(index + 1, len(curr_seq)):\n                    if curr_seq[i] >= 2 * curr_seq[i - 1] < m:\n                        helper(length + 1, i, count, curr_seq)\n            else:\n                for i in range(index + 1, len(curr_seq) + 1):\n                    if i >= 2 * index + 2:\n                        helper(length + 1, i, count, curr_seq)\n\n    count = [0]\n    helper(0, 0, count, [1])\n    return count[0]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base case: if n == 1, the only possible sequence is m\n    if n == 1:\n        return m\n    # Base case: if n == 0, there are no sequences\n    elif n == 0:\n        return 0\n    \n    # Initialize two variables to keep track of the previous two elements\n    prev_prev = 0\n    prev = m\n    \n    # Calculate the number of possible sequences by using dynamic programming\n    # The number of sequences is equal to the sum of the number of sequences for previous and previous previous elements\n    num_sequences = prev_prev + prev\n    \n    # Check if the current element is within the allowed range\n    if prev <= 2*m:\n        num_sequences += get_total_number_of_sequences(prev, n-1)\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n): \n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    \n    total = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j >= 2 * i <= m:\n                total += 1\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = []\n    for i in range(n):\n        sequence.append(2*i+1)\n    total_sequences = 1\n    for i in range(1,m):\n        count = 0\n        for j in range(i,m):\n            if j%2 == 0 and j >= 2*i and j <= m:\n                count += 1\n        total_sequences *= count\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = []\n    sequences_count = 0\n    \n    for i in range(n):\n        sequence.append(i + 1)\n    \n    prev_element = 0\n    \n    while sequence[-1] < m:\n        if sequence[-1] >= 2 * prev_element and sequence[-1] <= m:\n            sequences_count += 1\n        prev_element = sequence[-1]\n        sequence.append(prev_element + 1)\n    \n    return sequences_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m+1, n+1):\n        count += i*(i-2)//2\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total = 0\n    prev_num = 0\n    for i in range(n):\n        if i == 0:\n            current_num = 2\n            total += 1\n        elif prev_num + 1 <= m:\n            current_num = prev_num + 1\n            total += 1\n        else:\n            current_num = prev_num + 2\n            total += 1\n        prev_num = current_num\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize the number of possible sequences to 0\n    total_sequences = 0\n\n    # initialize an array to store the previous element\n    prev_elements = [0] * n\n\n    # iterate through the length of the sequence\n    for i in range(2, n+1):\n        # check if each element satisfies the given conditions\n        for j in range(n-i+2):\n            # calculate the current element\n            current_element = j + 1\n\n            # check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            if current_element >= 2*prev_elements[j] and current_element <= m:\n                # if the current element satisfies the conditions, update the number of possible sequences\n                total_sequences += 1\n\n        # update the previous element\n        prev_elements[i-1] = current_element\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the count variable\n    count = 0\n\n    # loop through all possible sequence lengths from 1 to n\n    for i in range(1, n + 1):\n        # loop through all possible previous numbers less than or equal to twice the current number\n        for j in range(2 * i, min(m, 2 * i) + 1, 2 * i):\n            # if the current number is greater than or equal to the previous number and less than or equal to m, increment the count\n            if j <= m and i <= j:\n                count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize a list to store the sequence\n    sequence = []\n\n    # Initialize a counter for the number of sequences found\n    count = 0\n\n    # Loop through all the possible values of the first element of the sequence\n    for i in range(2,m+1):\n        \n        # Check if the current element is less than or equal to twice the previous element\n        if i <= 2*i-1:\n            \n            # Add the current element to the sequence and increment the count\n            sequence.append(i)\n            count += 1\n            \n            # If the current element is greater than or equal to twice the previous element, then check if the remaining elements of the sequence satisfy the given conditions\n            for j in range(1,n):\n                if sequence[j-1]+sequence[j] > m:\n                    break\n                if sequence[j-1]+sequence[j] >= 2*sequence[j-1]+1:\n                    sequence.append(sequence[j-1]+sequence[j])\n                    count += 1\n            \n            # Remove the last element of the sequence since we have already added it to the count\n            sequence.pop()\n        \n        # If the current element is greater than twice the previous element, then check if the remaining elements of the sequence satisfy the given conditions\n        elif i > 2*i-1:\n            \n            # Add the current element to the sequence and increment the count\n            sequence.append(i)\n            count += 1\n            \n            # If the current element is less than or equal to twice the previous element, then check if the remaining elements of the sequence satisfy the given conditions\n            for j in range(1,n):\n                if sequence[j-1]+sequence[j] > m:\n                    break\n                if sequence[j-1]+sequence[j] >= 2*sequence[j-1]+1:\n                    sequence.append(sequence[j-1]+sequence[j])\n                    count += 1\n            \n            # Remove the last element of the sequence since we have already added it to the count\n            sequence.pop()\n    \n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n\n    # loop through the first list from the end to the first element\n    for i in range(length-1, -1, -1):\n        # add the elements of the second list to the first list\n        for j in range(len(list2)):\n            list1[i] = list1[i] + list2[j]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_elem = list1[-1]\n    list1[-1] = []\n    for elem in list2:\n        list1.append(elem)\n    list1[-1] = last_elem\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == len(list2):\n        list1[-1] = list2\n    else:\n        print(\"The two lists must have the same length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    total = 0\n    for char in str1:\n        total += 1\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Convert sqrt_N to an integer\n    sqrt_N = int(sqrt_N)\n    # Square the square root\n    sqrt_N = sqrt_N ** 2\n    # Add 1 to sqrt_N\n    sqrt_N += 1\n    # Return the square root\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function takes in a number N and returns the next perfect square greater than N.\n\n    Steps:\n    1. Convert N to a float and store in the variable num.\n    2. Calculate the square root of num using math.sqrt() and store it in the variable root.\n    3. Calculate the next perfect square by multiplying root by itself and rounding down to the nearest integer using math.floor().\n    4. Return the next perfect square.\n\n    Complexity: O(1)\n    '''\n    num = float(N)\n    root = math.sqrt(num)\n    next_perfect_square = math.floor(root) * root\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        N += 1\n        if is_perfect_square(N):\n            return N\n\ndef is_perfect_square(num):\n    \"\"\"\n    Checks if a given number is a perfect square.\n    \"\"\"\n    return int(math.sqrt(num)) ** 2 == num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 0\n    while i*i <= N:\n        i += 1\n    return i*i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert the given number to a float and round it to the nearest integer\n    num = round(float(N))\n    # Use the math.sqrt() function to find the square root of the given number\n    sqrt_num = math.sqrt(num)\n    # Use the ceil() function to round up the square root to the nearest integer\n    sqrt_num = ceil(sqrt_num)\n    # Use the math.isqrt() function to find the integer part of the square root\n    sqrt_num_int = math.isqrt(sqrt_num)\n    # Multiply the integer part of the square root with the integer part of the original number to get the next perfect square\n    next_num = sqrt_num_int * num\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N and returns the next perfect square greater than N.\n    \"\"\"\n    # If N is already a perfect square, return N+1\n    if math.sqrt(N) % 1 == 0:\n        return N+1\n\n    # If N is not a perfect square, find the next highest perfect square greater than N\n    square = math.sqrt(N)\n    i = 1\n    while square**i <= N:\n        i += 1\n\n    # Return the square greater than N that is a perfect square\n    return int(square**(i-1)) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize variables\n    sqrt_N = int(math.sqrt(N))\n    root_square = sqrt_N * sqrt_N\n    if root_square == N:\n        return root_square + 1\n    else:\n        return root_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    x = N\n    while True:\n        x += 1\n        if math.isqrt(x) ** 2 == x:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # Initialize a variable to keep track of the next perfect square greater than N\n    next_square = N + 1\n    # Initialize a variable to keep track of the number of iterations of the algorithm\n    iterations = 0\n    # Loop until the square root of the next perfect square greater than N is greater than 1\n    while math.sqrt(next_square) <= 1:\n        # Increase the number of iterations by 1\n        iterations += 1\n        # Calculate the next perfect square greater than N by adding 1 to the square root of the current perfect square\n        next_square = math.ceil(math.sqrt(next_square)) + 1\n    # Print the number of iterations taken to find the next perfect square greater than N\n    print(f'Number of iterations required: {iterations}')\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # The initial number is sqrt(N) rounded up to the nearest integer.\n    initial_square = math.ceil(math.sqrt(N))\n\n    # Initialize the next square to be the square root of the initial square.\n    next_square = int(math.sqrt(initial_square))\n\n    # Keep checking the next square until it is greater than the initial square.\n    while next_square > initial_square:\n        # Check if the next square is a perfect square.\n        if is_perfect_square(next_square):\n            # If it is, return it.\n            return next_square\n        # If it is not, increment the square and try again.\n        next_square += 1\n\n    # If there are no more perfect squares, return None.\n    return None\n\ndef is_perfect_square(n):\n    '''\n    Check if a number is a perfect square.\n    '''\n    # Use the math library to check if n is a perfect square.\n    return math.isqrt(n) == math.floor(math.sqrt(n))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    prev_val = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > prev_val:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        prev_val = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # check if the array is increasing or decreasing\n    increasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing = False\n            break\n\n    # if the array is increasing, find the maximum subsequence sum\n    if increasing:\n        if n % 2 == 0:\n            max_sum = arr[n//2] - arr[n//2 - 1]\n        else:\n            max_sum = arr[n//2]\n        for i in range(n//2 - 1, -1, -1):\n            max_sum = max(max_sum, arr[i] + arr[i+1])\n        return max_sum\n\n    # if the array is decreasing, find the maximum subsequence sum\n    else:\n        max_sum = arr[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # initialize variables\n    prev_sum = float('-inf')\n    curr_sum = 0\n    max_sum = float('-inf')\n    \n    for i in range(len(arr)):\n        # check if current element is increasing\n        if arr[i] >= arr[i-1]:\n            # if increasing, add to current sum\n            curr_sum += arr[i]\n        else:\n            # if decreasing, update max_sum if curr_sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            # reset curr_sum and prev_sum\n            curr_sum = 0\n            prev_sum = arr[i]\n    \n    # check if curr_sum is greater than max_sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize two variables to store the maximum sum of increasing subsequence and maximum sum of decreasing subsequence\n    inc_max = float('-inf')\n    dec_max = float('-inf')\n    \n    # Initialize two variables to store the sum of increasing subsequence and sum of decreasing subsequence\n    inc_sum = 0\n    dec_sum = 0\n    \n    # Loop through the array\n    for num in arr:\n        # If the current number is greater than the previous number, then add the current number to the sum of increasing subsequence and update the maximum sum of increasing subsequence if necessary\n        if num > arr[inc_sum]:\n            inc_sum += 1\n            inc_max = max(inc_max, inc_sum)\n        # If the current number is less than the previous number, then add the current number to the sum of decreasing subsequence and update the maximum sum of decreasing subsequence if necessary\n        elif num < arr[dec_sum]:\n            dec_sum += 1\n            dec_max = max(dec_max, dec_sum)\n            \n    # Return the maximum sum of increasing subsequence or maximum sum of decreasing subsequence\n    return inc_max if inc_max > dec_max else dec_max"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_sum_before = max(arr[0], arr[1])\n        max_sum_after = max(arr[-1], arr[-2])\n        max_sum_middle = 0\n        for i in range(2, n-1):\n            max_sum_middle = max(max_sum_middle, arr[i-1], arr[i])\n        return max(max_sum_before, max_sum_after, max_sum_middle)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    is_increasing = True\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # check if the current element is increasing or decreasing\n        if arr[i] > arr[i+1]:\n            if is_increasing:\n                # if the current element is increasing and we are already in increasing mode, update the maximum sum\n                current_sum += arr[i]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n            else:\n                # if the current element is decreasing and we are already in decreasing mode, update the maximum sum and start a new increasing mode\n                current_sum = arr[i]\n                is_increasing = True\n        else:\n            if is_increasing:\n                # if the current element is decreasing and we are already in increasing mode, update the maximum sum and start a new decreasing mode\n                current_sum += arr[i]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                is_increasing = False\n            else:\n                # if the current element is increasing and we are already in decreasing mode, update the maximum sum\n                current_sum = arr[i]\n                \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Initialize two pointers, left and right, to start of the array\n    left = 0\n    right = n - 1\n    # Initialize two variables to store the maximum sum of increasing subsequences and decreasing subsequences\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n    # Initialize two variables to store the maximum sum of increasing and decreasing subsequences\n    max_sum = float('-inf')\n    # Initialize a variable to store the current sum of increasing and decreasing subsequences\n    current_sum = 0\n    # Loop through the array using the pointers\n    while left < right:\n        # If the left pointer is less than the right pointer, the current subsequence is increasing\n        if arr[left] <= arr[right]:\n            # Add the current element to the current sum of increasing subsequences\n            current_sum += arr[left]\n            # Update the maximum sum of increasing subsequences if the current sum is greater than the current maximum\n            if current_sum > max_sum_increasing:\n                max_sum_increasing = current_sum\n            # Move the left pointer one position to the right\n            left += 1\n        else:\n            # If the left pointer is greater than the right pointer, the current subsequence is decreasing\n            # Add the current element to the current sum of decreasing subsequences\n            current_sum -= arr[right]\n            # Update the maximum sum of decreasing subsequences if the current sum is greater than the current maximum\n            if current_sum > max_sum_decreasing:\n                max_sum_decreasing = current_sum\n            # Move the right pointer one position to the left\n            right -= 1\n    # Update the maximum sum if the array is bitonic\n    if max_sum_increasing <= max_sum_decreasing:\n        max_sum = max_sum_increasing\n    else:\n        max_sum = max_sum_decreasing\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    # Initialize variables for maximum sum and current sum\n    max_so_far = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n        # If the number is increasing, add it to the current sum\n        if num < arr[current_sum]:\n            current_sum += 1\n\n        # If the current sum is greater than the maximum so far, update the maximum\n        if current_sum > 0 and current_sum > max_so_far:\n            max_so_far = current_sum\n\n        # If the number is decreasing, subtract it from the current sum\n        if num > arr[current_sum]:\n            current_sum -= 1\n\n    # If the last number in the array is increasing, add it to the current sum\n    if current_sum < len(arr) and arr[current_sum] < arr[len(arr) - 1]:\n        current_sum += 1\n\n    # If the current sum is greater than the maximum so far, update the maximum\n    if current_sum > max_so_far:\n        max_so_far = current_sum\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables\n    n = len(arr)\n    prev_sum = 0\n    max_sum = float('-inf')\n    # loop through the array\n    for i in range(n):\n        # if the current element is increasing, update the prev_sum\n        if arr[i] > arr[i-1]:\n            prev_sum += arr[i]\n        # if the current element is decreasing, update the max_sum if it's greater than the prev_sum\n        elif arr[i] < arr[i-1]:\n            max_sum = max(max_sum, prev_sum)\n            prev_sum = arr[i]\n        # if the current element is neither increasing nor decreasing, update the max_sum if it's greater than the prev_sum\n        else:\n            max_sum = max(max_sum, prev_sum)\n            prev_sum = 0\n    # update max_sum with the final prev_sum\n    max_sum = max(max_sum, prev_sum)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * (2 * n - 1)\n\n    # Fill up the dp array using the properties of bitonic subsequences\n    for i in range(1, 2 * n - 1):\n        if i % 2 == 0:\n            dp[i] = arr[i // 2]\n        else:\n            dp[i] = max(dp[i - 1], arr[i // 2])\n\n    # Find the maximum subarray sum\n    max_sum = dp[0]\n    for i in range(1, 2 * n - 1, 2):\n        max_sum = max(max_sum, dp[i] + dp[i - 1])\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1.0\n    while guess * guess > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a given number using the Babylonian method.\n    '''\n    # Initialize variables for the iteration count and current approximation of the square root\n    i = 0\n    guess = 1.0\n    \n    # While the current approximation is within a certain tolerance of the desired square root\n    while abs(guess*guess - number) >= 0.0001:\n        i += 1\n        guess = (guess + number/guess) / 2.0\n        \n    # Return the final approximation of the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 0.5 * number\n    y = number / x\n\n    i = 0\n    while abs(y - x) > 0.000001:\n        x = x - y / x\n        y = number / x\n        i += 1\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = number // 2\n    prev_guess = guess\n    count = 0\n    while guess**2 > number:\n        count += 1\n        prev_guess = guess\n        guess = (number / guess + guess) // 2\n    print(f\"The square root of {number} is approximately {guess} with {count} iterations.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number / 2.0\n    y = 1.0\n    n = 1\n    while x >= y:\n        y = (y + number / y) / 2.0\n        x = 2.0 * y - x\n        n += 1\n    return n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower = 0\n    upper = number\n    result = (lower + upper) / 2\n    \n    while True:\n        if result**2 == number:\n            return result\n        \n        if result**2 > number:\n            upper = result\n        else:\n            lower = result\n            \n        result = (lower + upper) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001 # Used to check if a number is close to zero\n    guess = number / 2 # Set initial guess as half of the number\n    while True: # Loop until the guess is close enough to the square root\n        if abs(guess*guess - number) <= epsilon:\n            return guess # If the guess is close enough, return it\n        guess = (guess + number / guess) / 2 # Update guess using babylonian method"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt_count = 0\n    guess = number / 2\n    while guess * guess > number:\n        sqrt_count += 1\n        guess = (number / guess + guess) / 2\n    return guess, sqrt_count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number\n    x1 = x0\n    x2 = 0.5 * x0 * x0\n    for i in range(3):\n        x3 = x1 - ((x1 * x1 - x0) / (2 * x1))\n        if abs(x3 - x2) < 1e-6:\n            break\n        x2 = x1\n        x1 = x3\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # Start with an initial guess of the square root\n    while True:  # Loop until the guess is good enough\n        next_guess = (guess + number / guess) / 2  # Compute the next guess\n        if abs(guess - next_guess) < 0.00001:  # Check if we've converged to within 0.00001 of the correct guess\n            break  # If we've converged, stop the loop\n        guess = next_guess  # Update our guess to the next iteration\n    return guess  # Return the final guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize a dictionary to store lengths of longest palindromic subsequences of all prefixes of the string\n    dp = {}\n    \n    # Initialize the longest palindromic subsequence length to zero\n    max_length = 0\n    \n    # Iterate through all prefixes of the string\n    for i in range(len(str)):\n        \n        # Initialize variables to keep track of the longest palindromic subsequence ending at the current prefix\n        max_left = 0\n        max_right = 0\n        \n        # Iterate through all prefixes of the string up to the current prefix\n        for j in range(i):\n            \n            # If the characters at the current and previous prefixes are the same, add 1 to the longest palindromic subsequence ending at the previous prefix\n            if str[j] == str[i]:\n                dp[(j, i)] = dp.get((j, i-1), 0) + 2\n                \n                # Update the longest palindromic subsequence ending at the current prefix\n                if dp[(j, i)] > max_left:\n                    max_left = dp[(j, i)]\n                    max_right = i\n        \n        # Update the longest palindromic subsequence length if the current prefix is the longest palindromic subsequence ending at any prefix\n        if max_left > max_length:\n            max_length = max_left\n    \n    # Return the longest palindromic subsequence length\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position in the string\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # Initialize the table with 1's\n    for i in range(1, len(str) + 1):\n        table[i][i] = 1\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    # Initialize two pointers, left and right, to 0\n    left = 0\n    right = 0\n\n    # Initialize a variable to store the length of the longest palindromic subsequence found so far\n    max_length = 1\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # If the character at the right pointer is same as the character at the left pointer,\n        # then we can expand our current palindromic subsequence by one character.\n        if string[i] == string[right]:\n            # Update the right pointer and check if the updated subsequence is longer than the previous longest palindromic subsequence\n            right += 1\n            current_length = right - left + \n            if current_length > max_length:\n                max_length = current_length\n\n        # If the character at the right pointer is different from the character at the left pointer,\n        # then we can either move the right pointer to the right or move the left pointer to the right until we find a match\n        else:\n            # Move the left pointer to the right until we find a match\n            while string[i]!= string[left]:\n                # If the left pointer has reached the beginning of the string, then there is no match\n                if left == 0:\n                    return 1\n                # Move the left pointer to the right\n                left += 1\n\n            # Move the right pointer to the right until we find a match\n            while string[i] == string[left]:\n                # If the right pointer has reached the end of the string, then the current subsequence is longer\n                if right == len(string) - 1:\n                    current_length = right - left + \n                    if current_length > max_length:\n                        max_length = current_length\n                # Move the right pointer to the right\n                right += 1\n                current_length = right - left + \n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [[0] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(1, n):\n            if str[i] == str[i-1]:\n                dp[i][i] = 2\n                start = i\n            else:\n                dp[i][i] = 1\n                while i - dp[i-1][dp[i-1].index(max(dp[i-1]))] >= 0 and str[i] == str[i-1-dp[i-1][dp[i-1].index(max(dp[i-1]))]]:\n                    dp[i][i] += 1\n                    i -= 1\n            if dp[i][i] > max_len:\n                max_len = dp[i][i]\n        return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    # Create a 2D array to store LPS values for all prefixes of the string\n    n = len(str)\n    L = [[0]*n for i in range(n)]\n\n    # Initialize LPS values for all prefixes\n    L[0][0] = 0\n\n    # Fill LPS values using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n-i):\n            if str[j] == str[j+i]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return L[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    dp = [1] * n\n    prev = 0\n    \n    for i in range(1, n):\n        if s[i] == s[prev]:\n            dp[i] = dp[prev] + 1\n            prev += 1\n        elif i - prev > 1 and s[i] == s[i - prev - 1]:\n            dp[i] = dp[i - prev] + 2\n            prev = i - prev\n        else:\n            dp[i] = 1\n    \n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    n = len(str)\n    # create a 2D array to store the length of longest palindromic subsequence ending at each index\n    lps_table = [[0] * n for _ in range(n)]\n    # initialize the first row and column of the array\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # fill the rest of the array using dynamic programming approach\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return lps_table[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n    # create a 2D array to store length of longest palindromic subsequence ending at each index\n    lps_matrix = [[0] * n for _ in range(n)]\n\n    # length of longest palindromic subsequence ending at index 0 is 0\n    for i in range(n):\n        lps_matrix[i][i] = 0\n\n    # calculate length of longest palindromic subsequence ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                lps_matrix[i][j] = lps_matrix[j][i-1] + 2\n            else:\n                lps_matrix[i][j] = max(lps_matrix[i][j-1], lps_matrix[j][i])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return lps_matrix[n-1][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    if n <= 1:\n        return n\n\n    # create a 2D table to store the lengths of longest palindromic subsequences ending at each position\n    dp = [[0] * n for _ in range(n)]\n\n    # base cases\n    dp[0][0] = 1\n    dp[0][1] = 1 if str[0] == str[1] else 0\n\n    # fill the table using dynamic programming\n    for i in range(2, n):\n        if str[i] == str[i-1]:\n            dp[i][i-1] = 2 + dp[i-2][i-2]\n        else:\n            dp[i][i-1] = max(dp[i-1][i-2], dp[i-2][i-1])\n\n    # return the length of the longest palindromic subsequence ending at the last position\n    return dp[n-1][n-2]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a 2D table to store the length of longest palindromic subsequence for all prefixes of the string\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # base case: all characters are palindromic subsequences of length 1\n    for i in range(1, len(str) + 1):\n        table[i][i] = 1\n\n    # check all prefixes of the string\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i-1] == str[j-1]:\n                # check for palindromic subsequences of length 2\n                if i == j:\n                    table[i][j] = 2\n                # check for palindromic subsequences of length greater than 2\n                else:\n                    table[i][j] = table[i-1][j-1] + 1\n\n    # return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Check if n is odd\n    if n % 2 == 1:\n        # Calculate the harmonic sum of (n-1)/2\n        harmonic_sum_of_n1 = (n-1)//2\n        # Multiply the harmonic sum of n-1 with (n-1)\n        harmonic_sum_of_n = harmonic_sum_of_n1 * n\n    else:\n        # Calculate the harmonic sum of n/2\n        harmonic_sum_of_n1 = n//2\n        # Multiply the harmonic sum of n-1 with n\n        harmonic_sum_of_n = harmonic_sum_of_n1 * (n-1)\n    return harmonic_sum_of_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The harmonic sum of\", n, \"is\", harmonic_sum(n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += 1 / i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 1/2\n    else:\n        return (2 * harmonic_sum(n-1) - harmonic_sum(n-2)) / (1 - (2*n-2)/n)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # create a set to store the unique elements in array_nums2\n    unique_elements = set(array_nums2)\n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n    # loop through each element in array_nums1\n    for num in array_nums1:\n        # check if the element is in unique_elements\n        if num in unique_elements:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n            # remove the element from unique_elements\n            unique_elements.remove(num)\n    # return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two sets to store the unique elements of both arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and store it in a new set\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection of the two arrays\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two sets to store unique elements from the two arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the unique elements of the first array\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection\n    intersection = []\n    # Loop through the second array\n    for num in array_nums2:\n        # If the number is in the set of the first array, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n            # Remove the number from the set to avoid duplicates\n            set_nums1.remove(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # convert the arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # find the intersection of the sets\n    intersection_set = set_nums1.intersection(set_nums2)\n\n    # convert the set back to a list and return it\n    return list(intersection_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in the second array\n    frequency_dict = {}\n    for num in array_nums2:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Iterate through the first array and check if each element is present in the dictionary\n    intersection = []\n    for num in array_nums1:\n        if num in frequency_dict and frequency_dict[num] > 0:\n            intersection.append(num)\n            frequency_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Use a set to remove duplicates from array_nums2\n    unique_nums2 = set(array_nums2)\n\n    # Iterate through array_nums1 and check if the current element is in unique_nums2\n    intersection = []\n    for num in array_nums1:\n        if num in unique_nums2:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # iterate over the list\n    for i in range(len(list)):\n        # insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n\n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n\n        # calculate the phase of the complex number\n        phase = cmath.phase(num)\n\n        # convert the magnitude and phase to degrees\n        magnitude = cmath.degrees(magnitude)\n        phase = cmath.degrees(phase)\n\n        # print the polar coordinates\n        print(f\"Polar coordinates: {real} + {imag}j or {magnitude} degrees with an angle of {phase} degrees.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        # Convert to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n\n        # Display result\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = abs(real**2 + imag**2)\n        theta = cmath.phase(number)\n        polar_list.append((modulus, theta))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        if imag == 0:\n            # If imaginary part is 0, then we can assume that the number is real.\n            polar_num = (abs(real), 0)\n        else:\n            # If imaginary part is not 0, then we can use the formula for polar coordinates:\n            # r = sqrt(real^2 + imag^2)\n            # theta = atan(imag/real)\n            polar_num = (abs(real*cmath.exp(1j*imag)), (cmath.atan(imag/real)).real)\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each number in the list\n    for num in numbers:\n        # Convert the number to complex number\n        c = complex(num)\n        # Calculate the magnitude and phase of the complex number\n        mag = abs(c)\n        phase = cmath.phase(c)\n        # Print the polar coordinates\n        print(\"Magnitude:\", mag, \"Phase:\", phase, \"in Polar Coordinates\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            # convert complex number to polar coordinates\n            r = cmath.sqrt(number.real**2 + number.imag**2)\n            theta = cmath.phase(number)\n            # print the polar coordinates\n            print(f\"({r:.2f}, {theta:.2f})\")\n        else:\n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath  \n  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        angle = cmath.phase(num)\n        r = cmath.rect(real, imag)\n        print(r, angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        # Split the number into real and imaginary parts\n        real, imag = num.split('+')\n        real, imag = float(real), float(imag)\n\n        # Calculate the magnitude and angle of the number\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(num)\n\n        # Add the polar coordinate to the result list\n        result.append((magnitude, angle))\n\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        temp = tuple(l[i:i+n])\n        if temp not in result:\n            result.append(temp)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations (with repetition) of the elements of the list\n    combinations = list(combinations_with_replacement(l, n))\n\n    # Convert the combinations list to a list of tuples\n    combinations_list = [(c,) for c in combinations]\n\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l)-n+1):\n        yield tuple(l[i:i+n])"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    comb = []\n    for i in range(len(l)):\n        comb.append((l[i], colors[i]))\n    return list(combinations_with_replacement(comb, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combinations.append(tuple(sorted(l[i:j])))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    i = 2\n    while i <= n:\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n        i += 1\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a boolean array \"prime[0..n]\" and\n    # \"prime[i] = true\" if i is prime, else false.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # count the number of prime numbers less than n\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize a list to store the prime numbers\n    prime_list = []\n    # iterate through all numbers less than n\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, add it to the prime_list\n        if is_prime:\n            prime_list.append(i)\n    # return the number of prime numbers found in the list\n    return len(prime_list)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    prime_count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    # initialize a boolean array \"prime[0..n]\" and\n    # \"prime[i] = true\" if i is prime, else false.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # count the number of prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if (prime[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return\n\n    # Initialize variables for the maximum values\n    max1 = max2 = float('-inf')\n\n    # Iterate over the tuples and compare each value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n\n    # Return the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize the max values to the first tuple\n    max_tup1 = test_tup1\n    max_tup2 = test_tup2\n\n    # Iterate over the tuples to find the maximum values\n    for i in range(len1):\n        for j in range(len2):\n            # If the current value in the first tuple is greater than the current value in the second tuple, update max_tup1\n            if test_tup1[i] > test_tup2[j]:\n                max_tup1 = (test_tup1[i], test_tup1[j])\n\n            # If the current value in the second tuple is greater than the current value in the first tuple, update max_tup2\n            elif test_tup2[j] > test_tup1[i]:\n                max_tup2 = (test_tup2[j], test_tup2[i])\n\n    # Return the maximum values in a tuple\n    return max_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define a function to compare two tuples\n    def compare_tuples(tup1, tup2):\n        # Loop through each element in the tuples\n        for i in range(len(tup1)):\n            # Compare the elements and return the result\n            if tup1[i] > tup2[i]:\n                return tup1\n            elif tup1[i] < tup2[i]:\n                return tup2\n            else:\n                continue\n        # If all elements are equal, return the first tuple\n        return tup1\n    \n    # Call the compare_tuples function to get the max tuple\n    max_tuple = compare_tuples(test_tup1, test_tup2)\n    \n    # Print the max tuple\n    print(max_tuple)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Ensure that both tuples have the same length\n    if len1!= len2:\n        print(\"Both tuples must have the same length.\")\n        return None\n\n    # Initialize two variables to store the maximum value and index\n    max_val = test_tup1[0]\n    max_index = 0\n\n    # Loop through each element in the tuple\n    for i in range(len1):\n        # If the current element is greater than the max value, update the max value and index\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n            max_index = i\n\n        # If the current element is greater than the second max value, update the second max value and index\n        if test_tup2[i] > test_tup1[max_index] and i!= max_index:\n            max_val = test_tup2[i]\n            max_index = i\n\n    # Return the maximum value and index\n    return (max_val, max_index)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    is_prime = True\n    for i in range(2, n+1):\n        if is_prime:\n            count += 1\n            if count == n:\n                return i\n            is_prime = False\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize two variables to track the count of primes and the maximum prime\n    count = 0\n    max_prime = 2\n    \n    # Iterate from 3 to n-1\n    for i in range(3, n):\n        # If i is a newman prime, increment the count and update max_prime if necessary\n        if is_newman_prime(i):\n            count += 1\n            if i > max_prime:\n                max_prime = i\n    \n    # If n is a newman prime, the count will be n-1\n    if is_newman_prime(n):\n        count += 1\n    \n    # Return the maximum prime found and the count of primes found\n    return max_prime, count\n\n\ndef is_newman_prime(n):\n    \"\"\"\n    Check if a number is a newman prime or not.\n    \"\"\"\n    # Check if n is divisible by any odd integer less than or equal to n/2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    # If we reach this point, n is a newman prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the sequence of primes up to 10\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Initialize the sequence of prime numbers\n    prime_nums = []\n\n    # Loop through each prime in the sequence\n    for prime in primes:\n        # Check if the prime divides n\n        if n % prime == 0:\n            # If it does, add the prime to the list of prime numbers\n            prime_nums.append(prime)\n\n            # If the prime divides n exactly, it's not a newman\u2013shanks\u2013williams prime number\n            if n == prime:\n                return prime_nums\n\n    # If the loop completes without finding a newman\u2013shanks\u2013williams prime number, return the list of prime numbers\n    return prime_nums"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 1\n    num = 2\n    prime = False\n\n    # Check if the number is prime\n    while count < n:\n        if num % 2 == 0:\n            num += 1\n        else:\n            count += 1\n            num += 2\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    if prime:\n        return num\n    else:\n        return \"Invalid input. Please enter a positive integer.\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the first two newman-shanks-williams primes\n    a = 1\n    b = 2\n    \n    # Initialize the counter\n    count = 0\n    \n    # Initialize the largest prime found so far\n    largest_prime = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Compute the next newman-shanks-williams prime\n        c = a + b\n        \n        # Check if it's prime\n        if is_prime(c):\n            # If it is, check if it's larger than the largest prime found so far\n            if c > largest_prime:\n                # If it is, update the largest prime found so far\n                largest_prime = c\n                count = 1\n            elif c == largest_prime:\n                # If it's the same as the largest prime found so far, increment the count\n                count += 1\n        \n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n        \n    # Return the largest prime found\n    return largest_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the algorithm\n    p = 2  # Initialize the first prime number\n    count = 1  # Initialize the count of primes\n    \n    # Loop until the count reaches n\n    while count < n: \n        # Check if p is a newman-shanks-williams prime\n        if is_prime(p) and is_newman_prime(p):\n            count += 1  # Increment the count of primes\n        \n        # Find the next prime number\n        p += 1\n        \n    return p  # Return the nth newman-shanks-williams prime number\n\ndef is_prime(n): \n    '''\n    Determine if a number is prime using trial division.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef is_newman_prime(n): \n    '''\n    Determine if a number is a newman-shanks-williams prime.\n    '''\n    if n < 7:\n        return False\n    \n    # Check for prime factors up to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    # Check if the number is a newman-shanks-williams prime\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    newman_prime = 2\n\n    # check if newman_prime is prime\n    while newman_prime!= 1:\n        if newman_prime % 2 == 0:\n            newman_prime += 1\n        else:\n            for i in range(3, int(newman_prime**0.5)+1, 2):\n                if newman_prime % i == 0:\n                    break\n            else:\n                count += 1\n                if count == n:\n                    return newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list of prime numbers up to 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the list and find the nth prime number\n    for i in range(n):\n        if is_prime(primes[i]):\n            pass\n        else:\n            # If the nth prime number is not prime, find the next prime number\n            while not is_prime(primes[i]):\n                primes.append(find_next_prime(primes[i]))\n\n    return primes[n-1]\n\ndef is_prime(num): \n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if num < 2: \n        return False \n    for i in range(2, int(num**0.5)+1): \n        if num % i == 0: \n            return False \n    return True\n\ndef find_next_prime(num): \n    '''\n    Finds the next prime number after the given number.\n    '''\n    # Initialize the next prime number to the given number plus 2\n    next_prime = num + 2\n\n    # Keep incrementing the next prime number until it is found to be prime\n    while not is_prime(next_prime):\n        next_prime += 2\n\n    return next_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the nth newman prime number\n    current_num = 1\n    nth_newman_prime = 0\n    while nth_newman_prime < n:\n        if is_prime(current_num):\n            nth_newman_prime += 1\n        current_num += 1\n\n    return nth_newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    p = 2\n\n    # Check if p is prime\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n\n    # If n is prime, return p\n    if count == n:\n        return p\n    else:\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise division and assign the result to the corresponding element in the second tuple\n        test_tup2[i] = test_tup1[i] / test_tup2[i]\n    return test_tup2"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples are not equal.\")\n        return\n    # Create a new tuple with the element-wise division of the two tuples\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += (num1 / num2,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same number of elements\")\n    \n    # Perform element-wise division operation\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise division\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length.\")\n        return\n\n    # Perform element-wise division operation\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # Perform element-wise division using zip() and map()\n    result = list(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    # Check if L is an integer and is greater than 0\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n\n    # Calculate the number of parts needed to split the list\n    n = len(lst) // L\n\n    # Split the list into two parts\n    part1 = lst[:L * n]\n    part2 = lst[L * n:]\n\n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: List must have at least L elements\")\n        return\n    \n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_len = len(list1)\n    mid = list_len // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_len = len(list1)\n    if list1_len < L:\n        raise ValueError(\"The length of the list is less than L.\")\n    mid = list1_len // 2\n    list1_part1 = list1[:mid]\n    list1_part2 = list1[mid:]\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of the list, return the list as is\n    if L > len(list1):\n        return (list1,)\n    \n    # Otherwise, split the list into two parts where the length of the first part is L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts such that the length of the first part is L.\n    \"\"\"\n    if len(lst) <= L:\n        raise ValueError(\"List must have at least 2 elements to split into two parts\")\n\n    n = len(lst)\n    mid = n // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    elif L % 2 == 0:\n        mid = L // 2\n        return (list1[:mid], list1[mid:])\n    else:\n        mid = L // 2 + 1\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    This function takes the height in inches as an input and returns the dog's age in dog's years.\n    \"\"\"\n    # calculate the dog's age in years\n    dog_age = h_age / 30\n    # return the dog's age in years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age // 7)\n    if h_age % 7!= 0:\n        dog_years += 1\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n        h_age (float): The height of the dog in inches.\n\n    Returns:\n        float: The age of the dog in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    years = 7 * h_age / 12  # assume 7 years for a male dog and 6.5 years for a female dog\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's years based on his/her height in inches\n    dog_years = h_age * 0.44095881368158\n\n    # Convert the dog's years to whole and fractional parts\n    whole_years = int(dog_years)\n    fractional_years = dog_years - whole_years\n\n    # Print the result\n    print(f\"Dog's age in dog's years is: {whole_years}.{fractional_years:.2f}\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age # multiply by 7 to convert from human years to dog's years\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 12\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    breed = input(\"Enter the breed of your dog: \")\n    years = input(\"Enter the years of your dog: \")\n    dog_age = int(years) - int(h_age)\n    if breed == \"Golden Retriever\":\n        dog_age *= 2\n    elif breed == \"Labrador Retriever\":\n        dog_age *= 1.5\n    elif breed == \"Bernese Mountain Dog\":\n        dog_age *= 1.2\n    elif breed == \"Saint Bernard\":\n        dog_age *= 1.1\n    elif breed == \"Poodle\":\n        dog_age *= 0.9\n    elif breed == \"Doberman\":\n        dog_age *= 0.8\n    elif breed == \"German Shepherd\":\n        dog_age *= 1.1\n    elif breed == \"Miniature Pinscher\":\n        dog_age *= 1.2\n    elif breed == \"Golden Retriever\":\n        dog_age *= 2\n    else:\n        dog_age = 0\n    print(\"Your dog's age in dog's years is:\", dog_age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 11\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    # Split the list into sublists\n    sublists = [S[i:i+n] for i in range(0, len(S), n)]\n    return sublists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n    n = len(S)\n    if step > n:\n        raise ValueError(\"Step must be less than or equal to the length of the list\")\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # use a for loop to iterate through the input list\n    for i in range(0, len(S), step):\n        # slice the list to get the sublist starting at index i and ending at index i+step-1\n        sublist = S[i:i+step]\n        # append the sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    n = len(S)\n    n_lists = n // step\n    if n % step!= 0:\n        n_lists += 1\n    lists = []\n    i = 0\n    while i < n:\n        lists.append(S[i:i+step])\n        i += step\n    return lists"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (12 * l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n    \n    # return the final sum of the squares of the odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 2\n        i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current odd natural number to the sum variable\n        sum += i*i\n    # Return the final sum value\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n+1, 2, -2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0  \n    for i in range(n):  \n        if i % 2 == 0:  \n            sum_squares += i**2  \n    return sum_squares  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize the counter to 1\n    count = 1\n    # Loop through the first n odd natural numbers\n    while count <= n:\n        # Add the square of the current number to the sum\n        sum += (count * count)\n        # Increment the counter\n        count += 2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            star_num += 2**(n-i)\n        else:\n            star_num += 2**(i-1)\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # loop through each number from 1 to n\n    for i in range(1, n+1): \n        # print the current number followed by a star\n        print(i, \"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    #initialize variables\n    current_num = 1\n    count = 1\n\n    #iterate untiln'th number is found\n    while count < n:\n        #calculate the next number\n        current_num = 1 + 3 * current_num\n        count += 1\n\n    #return then'th number\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the length of the star sequence\n    length = 10\n\n    # Initialize the star number as 0\n    star_num = 0\n\n    # Iterate through the sequence of stars\n    for i in range(length):\n        # If the current number is equal to n, add 1 to the star number\n        if i == n:\n            star_num += 1\n    \n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    result = 1\n    while count < n:\n        result *= 2\n        count += 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 0:\n        return \"Error: n must be a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        return n * (2*n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find then'th star number.\n    \"\"\"\n    # initialize the first two numbers\n    num1 = 2\n    num2 = 3\n\n    # loop n-1 times to calculate the nth number\n    for i in range(n-1):\n        # calculate the new number by adding num2 and dividing by 2\n        num3 = (num1 + num2) // 2\n        # swap num1 and num3 to calculate the next pair of numbers\n        num1 = num2\n        num2 = num3\n\n    return num1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    a = 1\n    b = 2\n\n    # loop through n to find then'th star number\n    for i in range(1, n+1):\n        # print the current star number\n        print('*', end='')\n\n        # update the values of a and b\n        a = b\n        b = a + b\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to 1\n    count = 1\n    # loop n times\n    for i in range(n):\n        # print the current count value\n        print(count)\n        # increment the count value by 1\n        count += 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_table = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122\n    }\n    return ascii_table.get(k.upper())"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize the sum of even numbers at even positions to 0\n    even_sum = 0\n    \n    # loop through the list and check if each number is even\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            # if the number is even, add it to the sum of even numbers at even positions\n            even_sum += arr[i]\n            \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize variables to store sum and even index\n    sum = 0\n    even_index = 0\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # Check if the current element is at even position\n            if i % 2 == 0:\n                # Add the current element to sum\n                sum += arr[i]\n                # Update even_index to the current index\n                even_index = i\n\n    # Return the sum of even numbers at even positions of the list\n    return sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n                \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n\n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if even_index == -1 or i % 2 == 0:\n                even_index = i\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_index += arr[i]\n\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # initialize sum variable to 0\n    total_sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the raised to the fifth power of each even natural number\n        power = 0\n        while power < 5:\n            power += 1\n            result = i**power\n            # check if the result is even\n            if result % 2 == 0:\n                # add the result to the total sum\n                total_sum += result\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is\", result)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(2, n+1, 2):\n        sum_of_evens += i ** 5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the sum of the i^5\n        total += i**5\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): # loop through even numbers\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # Initialize an empty list to hold the rear elements\n    rear_elements = []\n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # Append the rear element of the tuple to the rear_elements list\n        rear_elements.append(tuple[-1])\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        rear = tup[-1]\n        result_list.append(rear)\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup[-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result = []\n    for item in test_list:\n        rear = item[1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Loop through both tuples simultaneously\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding elements and store the result in a new tuple\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(sum(i - j for i in test_tup1) for j in test_tup2)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if i >= len(test_tup2):\n            print(f\"The second tuple has fewer elements than the first tuple. Skipping index {i}.\")\n            continue\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            result.append(test_tup1[i] - test_tup2[test_tup2.index(i)])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            coeff = math.comb(n, i)\n            sum_even_binomial += coeff\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_even_binomial += math.comb(n, i)\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    \"\"\"\n\n    # Use the formula (n choose k) * (n choose (n-k)) to calculate the even index binomial coefficients\n    # where n is the given integer and k is the even index.\n    # Example:\n    # n = 6, k = 4\n    # (6 choose 4) * (6 choose (6-4)) = 150\n    # (n choose k) * (n choose (n-k)) = 150\n\n    # Initialize the sum of even index binomial coefficients to zero\n    even_sum = 0\n\n    # Loop through all possible values of k (even indices) up to the given integer n\n    for k in range(n+1):\n        # Calculate the even index binomial coefficient using the formula (n choose k) * (n choose (n-k))\n        coeff = math.comb(n, k) * math.comb(n, n-k)\n\n        # If the even index is even, add the coefficient to the sum\n        if k % 2 == 0:\n            even_sum += coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # define the range of even indices\n    start_index = 0\n    end_index = 2*n - 2\n    \n    # initialize the sum of even index binomial coefficients to zero\n    even_sum = 0\n    \n    # loop over the range of even indices\n    for i in range(start_index, end_index, 2):\n        # calculate the value of the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # check if the binomial coefficient is even\n        if i % 2 == 0:\n            even_sum += coeff\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize a variable to store the sum of even index binomial coefficients\n    sum_even_index = 0\n\n    # Loop through the even indices of the binomial coefficient array\n    for i in range(2, n+1, 2):\n        # Calculate the current even index binomial coefficient\n        coeff = math.comb(n, i)\n\n        # Add the current even index binomial coefficient to the sum\n        sum_even_index += coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        for j in range(1, i+1):\n            result += math.comb(i, j)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print(\"Invalid input: n must be a positive integer\")\n    elif n == 1:\n        print(\"Sum of even index binomial coefficients: 2\")\n    else:\n        sum_even = 0\n        for i in range(2, n+1, 2):\n            sum_even += math.comb(n, i-1)\n        print(\"Sum of even index binomial coefficients: \", sum_even)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff(n, k):\n        return math.comb(n, k)\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i * binomial_coeff(n, i-2)\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Use math.comb function to find the even index binomial coefficients.\n    even_binomial_coeffs = [math.comb(n, i) for i in range(0, n+1, 2)]\n    return sum(even_binomial_coeffs)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3)*3.14159*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14/4)*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14159 * r**2  # Formula for area of a circle\n    volume = area * h  # Formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \n    :param r: float, the radius of the cylinder\n    :param h: float, the height of the cylinder\n    :return: float, the volume of the cylinder\n    '''\n    \n    volume = 3.14159 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for calculating the volume of a cylinder\n    V = (3/4) * 3.14159 * r * r * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= test_tup.index(test_tup[i]):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i]!= test_tup[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 13\n    else: \n        return 13*(n-1) + 6*(n-1)*(n-2) + 12*(n-1)*(n-2)*(n-3)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a variable to store the decagonal number\n    decagonal = 0\n    \n    # Loop through each digit in the decimal representation of n\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Add the integer times the power of the decagonal number to the decagonal variable\n        decagonal += digit_int * ((2 * (digit_int - 1)) ** (2 * digit_int))\n    \n    # Return the decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number, False otherwise.\n    A decagonal number is a number such that the sum of its two diagonals is equal to n.\n    For example, 15 is a decagonal number because 1 + 12 = 15.\n    '''\n\n    # To check if a number is a decagonal number, we need to find its two diagonals.\n    # We can calculate the sum of the two diagonals using the formula:\n    #\n    #   (n * (n-1)) / 2\n    #\n    # which gives us the sum of the first n numbers.\n\n    # Calculate the sum of the first n numbers.\n    n_sum = (n * (n-1)) / 2\n\n    # Check if the sum is equal to n.\n    if n_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the first and second row of the decagonal matrix\n    first_row = [1]\n    second_row = [1, 2]\n    \n    # Initialize the result variable\n    result = 1\n    \n    # Iterate over the rows of the matrix\n    for i in range(2, n+1):\n        # Calculate the current row by appending the sum of the previous two rows\n        current_row = [1]\n        for j in range(1, i):\n            current_row.append(second_row[j-1] + first_row[j-1])\n        # Update the result variable with the current row and the first row of the next iteration\n        result = current_row\n        first_row = second_row\n        # Update the second row of the next iteration\n        second_row = current_row\n    \n    # Return the result variable as the nth decagonal number\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_nums = [0]\n    for i in range(1, n+1):\n        decagonal_nums.append(sum(int(j)**2 for j in str(i*5)))\n    return decagonal_nums"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return 10*n**2 + 5*n\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num += i*i\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (i + 1) // 2\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        print(\"The list contains unique elements.\")\n    else:\n        print(\"The list contains duplicate elements.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_set = set(test_list)\n    return len(test_list) == len(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must be of equal length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x - y for x,y in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"The lists are not of equal length.\")\n        return result\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts the corresponding elements of two lists element-wise.\n\n    Args:\n    nums1: list, the first list to be subtracted from\n    nums2: list, the second list to be subtracted from\n\n    Returns:\n    list, the resulting list of differences between the two input lists\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # Loop through each digit in the integer and update its frequency in the dictionary\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    # Loop through each digit in the integer and check if its frequency is greater than or equal to itself\n    for digit in str(n):\n        if digit_freq[digit] < digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # check if the number is positive\n    if n <= 0:\n        return False\n\n    # convert the number into a list of digits\n    digits = list(str(n))\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate through each digit in the number\n    for digit in digits:\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # iterate through each digit in the number\n    for digit in digits:\n        # check if the frequency of the digit is greater than the digit itself\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    for d in freq:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a dictionary to store the frequency of digits\n    freq = {}\n    # Iterate through the string and update the frequency of digits\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # Iterate through the dictionary and check if the frequency of each digit is less than or equal to its digit itself\n    for digit, freq_digit in freq.items():\n        if freq_digit > int(digit):\n            return False\n    # If no digit has a frequency greater than its digit, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # function to check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    # use a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # iterate through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n\n    # if all the digits have a frequency less than or equal to the digit itself, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Initialize the frequency dictionary\n    freq = {}\n    \n    # Count the frequency of each digit\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # If all the digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq_dict = {}\n\n    # Count the frequency of each digit in the integer\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    count = {}\n    for digit in str(n):\n        count[int(digit)] = count.get(int(digit), 0) + 1\n    for key, value in count.items():\n        if value > key:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    def digit_frequency(n): \n        '''\n        Helper function to count the frequency of each digit in the integer.\n        '''\n        freq = [0] * 10\n        while n: \n            freq[n % 10] += 1\n            n //= 10\n        return freq\n\n    freq = digit_frequency(n)\n    for i in range(10): \n        if freq[i] > 1: \n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in lst are equal to elem.\n    \"\"\"\n    if len(lst) == 0:\n        return True  # empty list is always true\n\n    first = lst[0]\n    for x in lst:\n        if x!= first:\n            return False\n\n    return True  # all elements are equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns True if all the elements in the list are equal to the given element, otherwise False.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list `lst` and an element `elem` and returns True if all the elements in `lst` are equal to `elem`, and False otherwise.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif len(list) == 1:\n        return list[0] == element\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*(b){2,3}')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[^b]*b{2,3})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]*b[b]?b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB]*')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=\\w*b)(?=.*b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize max_sum and max_end to negative infinity\n    max_sum = float('-inf')\n    max_end = -1\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Find the sum of the array\n        array_sum = sum(a)\n        \n        # If the array sum is greater than max_sum, update max_sum and max_end\n        if array_sum > max_sum:\n            max_sum = array_sum\n            max_end = i\n        \n        # Remove the first element of the array\n        a.pop(0)\n        \n        # Recalculate the sum of the array\n        array_sum = sum(a)\n        \n        # If the array sum is greater than max_sum, update max_sum and max_end\n        if array_sum > max_sum:\n            max_sum = array_sum\n            max_end = i\n    \n    # Return the largest sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum and max sum variables\n    sum = max_sum = 0\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Add the first element to the sum\n        sum += a[0]\n        \n        # Calculate the maximum sum using the sum so far\n        max_sum = max(max_sum, sum)\n        \n        # Move the left pointer to the right\n        for j in range(1, n):\n            # Subtract the left element from the sum\n            sum -= a[j-1]\n            \n            # Calculate the maximum sum using the updated sum\n            max_sum = max(max_sum, sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a copy of the array to store the modified array\n    modified_arr = a.copy()\n\n    # Repeat the array k times to create the modified array\n    for _ in range(k):\n        modified_arr = [a[0]] + modified_arr + [a[-1]]\n\n    # Initialize the maximum subarray sum and its index\n    max_sum = max_sum_index = float('-inf')\n\n    # Iterate through the modified array and find the maximum subarray sum\n    for i in range(n):\n        subarray_sum = sum(modified_arr[i:i+n])\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_sum_index = i\n\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    count = 0\n\n    # Iterate through the array and count the number of occurrences of each element\n    for i in range(n):\n        if a[i] not in counts:\n            counts[a[i]] = 0\n        counts[a[i]] += 1\n\n    # Iterate through the array k times\n    for i in range(k):\n        # Add the original element to the current sum\n        current_sum += a[0]\n\n        # Iterate through the array and update the current sum based on the counts\n        for j in range(n):\n            current_sum += (a[j] * counts[a[j]]) - (a[j] * counts[a[j]] - a[j]) * counts[a[j]]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize a variable to store the maximum sum of a contiguous subarray\n    max_sum = float('-inf')\n\n    # Initialize a variable to store the current sum of a contiguous subarray\n    curr_sum = 0\n\n    # Loop through the array k times\n    for i in range(k):\n        # Add the first element to the current sum\n        curr_sum += a[0]\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Move the window by one element\n        a = a[1:]\n\n    # Loop through the remaining elements of the array\n    for i in range(n - k):\n        # Add the next element to the current sum\n        curr_sum = max(curr_sum - a[i], a[i])\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    k_sum = sum(a[:k])\n\n    # Iterate over the array\n    for i in range(n-k+1):\n        # Update current sum\n        curr_sum += a[i+k-1]\n\n        # Check if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Check if the current sum is greater than the sum of the current k elements\n        if curr_sum > k_sum:\n            # Update the maximum sum to be the current sum and add the k-th element to the sum\n            max_sum = curr_sum + a[i+k-1]\n            k_sum += sum(a[i+k:])\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize the maximum sum to be the first element of the array\n    max_sum = a[0]\n\n    # Initialize the current sum to be the first element of the array\n    current_sum = a[0]\n\n    # Repeat the given array k times and compute the sum for each repetition\n    for i in range(k):\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    arr = a * k\n    for i in range(n):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the sum of the modified array\n    sum_modified = a[0] * k\n    \n    # Loop through the array and calculate the sum of each subarray formed by repeating the given array k times\n    for i in range(1, n):\n        sum_modified += a[i] * k\n        sum_modified -= a[i-1] * k\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # calculate the sum of the original array\n    sum_original = sum(a)\n\n    # create a list to store the sums of the modified array\n    sum_modified = []\n\n    # loop through all possible lengths of the modified array\n    for i in range(1, k+1):\n        # calculate the sum of the modified array\n        sum_modified_i = sum([a[j] for j in range(n) if j % i == 0])\n\n        # add the sum to the list\n        sum_modified.append(sum_modified_i)\n\n    # find the maximum sum of the modified array\n    max_sum = max(sum_modified)\n\n    # calculate the difference between the maximum sum and the original sum\n    diff = max_sum - sum_original\n\n    # return the difference\n    return diff"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    i = 2\n    while i <= n:\n        total += i**2\n        i += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        count += 1\n        sum_of_squares += count ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n        if i*i % 2 == 0:\n            break\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            total_sum += count ** 2\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = [x for x in range(2, n+1, 2)]\n    return sum([x**2 for x in even_numbers])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            even_sum += i**2\n        i += 1\n    return even_sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists and returns a list containing the maximum length of each sublist.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(sublist)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize a variable to store the maximum length\n    max_length = 0\n    # iterate through each element in the list\n    for lst in list1:\n        # check if the length of the current list is greater than the maximum length\n        if len(lst) > max_length:\n            # update the maximum length\n            max_length = len(lst)\n    # return the list of maximum length\n    return [x for x in list1 if len(x) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # Loop through each sub-list in the list of lists\n    for sublist in list1:\n        # Find the maximum length of the sub-list\n        max_length = max([len(x) for x in sublist])\n        # Append the maximum length to the list of maximum lengths\n        max_lengths.append(max_length)\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize the maximum length to 0\n    max_len = 0\n    # Iterate over each list in the input list\n    for lst in list1:\n        # Calculate the length of the current list\n        current_len = len(lst)\n        # Update the maximum length if the current list is longer\n        if current_len > max_len:\n            max_len = current_len\n    # Return the list of maximum length\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # Loop through each sublist in the outer list\n    for sublist in list1:\n        # Initialize an empty list to store the lengths of each sublist\n        lengths = []\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # Append the length of the element to the lengths list\n            lengths.append(len(str(element)))\n            \n        # Find the maximum length of the sublist by finding the maximum value in the lengths list\n        max_length = max(lengths)\n        \n        # Append the maximum length to the max_lengths list\n        max_lengths.append(max_length)\n    \n    # Find the maximum length in the max_lengths list\n    max_length_list = max(max_lengths)\n    \n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a table to store the number of ways for each combination of colors\n    table = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the base cases for the table\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or j == 1:\n                table[i][j] = 1\n            else:\n                table[i][j] = table[i-1][j] + table[i][j-1]\n\n    # Return the total number of ways\n    return table[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a dictionary to store the count of ways\n    ways = {0: 1}\n\n    # Loop through all possible ways of having the first post painted\n    for i in range(1, n+1):\n        ways[i] = 0\n        for j in range(1, k+1):\n            if i >= j:\n                ways[i] += ways[i-j]\n\n    # Return the count of ways\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k+1)\n\nn = 5\nk = 3\n\nprint(\"Number of ways to paint the fence: \", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # base cases\n    for i in range(n+1):\n        dp[i][0] = 1\n    for j in range(k+1):\n        dp[0][j] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if dp[i-1][j] == 1 and dp[i][j-1] == 1:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            elif dp[i-1][j] == 1:\n                dp[i][j] = dp[i-1][j]\n            elif dp[i][j-1] == 1:\n                dp[i][j] = dp[i][j-1]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a matrix to store the count of ways of painting the fence with at most 2 adjacent posts having the same color\n    count_matrix = [[0] * (k+1) for _ in range(n+1)]\n    # Initialize the count of ways of painting the fence with 0 adjacent posts having the same color\n    count_matrix[0][0] = 1\n\n    # Fill the count_matrix with the count of ways of painting the fence with different adjacent posts having the same color\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i <= 2:\n                # If the i-th post has the same color as the (i-1)-th and (i-2)-th posts, then the count of ways of painting the fence with at most 2 adjacent posts having the same color is k\n                count_matrix[i][j] = j\n            else:\n                # Otherwise, the count of ways of painting the fence with at most 2 adjacent posts having the same color is the sum of the count of ways of painting the fence with at most (i-3)-th adjacent posts having the same color and the count of ways of painting the fence with at most (i-2)-th and (i-1)-th adjacent posts having the same color\n                count_matrix[i][j] = count_matrix[i-3][j] + count_matrix[i-2][j] + count_matrix[i-1][j]\n\n    # Return the count of ways of painting the fence with at most 2 adjacent posts having the same color\n    return count_matrix[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a boolean matrix to store whether each post can be painted with each color\n    color_matrix = [[False] * k for _ in range(n)]\n    # Initialize the first post as black\n    color_matrix[0][0] = True\n    # Initialize the number of ways as 1\n    count = 1\n\n    # Loop through all the possible colors\n    for color in range(1, k):\n        # Loop through all the possible adjacent post pairs\n        for i in range(n):\n            for j in range(i+1, n):\n                # If the adjacent posts have the same color, mark them as painted in the color matrix and increment the count\n                if color_matrix[i][color] and color_matrix[j][color]:\n                    color_matrix[i][color] = color_matrix[j][color] = True\n                    count += 1\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an array to store the number of ways for each number of colors\n    ways = [0] * (k + 1)\n\n    # Base case: the fence must have at least two colors\n    ways[2] = 1\n\n    # Base case: if the fence has exactly one color, there is only one way\n    if n == 1:\n        return ways[1]\n\n    # Iterate over all numbers of colors from 2 to k\n    for i in range(2, k + 1):\n        # Calculate the number of ways for the previous number of colors\n        ways_prev = ways[i]\n\n        # If the current color is the same as the previous color, we can paint the fence with only one color\n        if i == k:\n            ways[i] = ways_prev\n        else:\n            # Otherwise, we can paint the fence with at most one of the previous colors\n            ways[i] = ways_prev + ways[i - 1]\n\n    # Return the total number of ways for the given number of colors\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(i, j, k):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return 0\n        \n        if i == 0 and j == 0:\n            return 1\n        \n        if dp[i][j]!= -1:\n            return dp[i][j]\n        \n        if arr[i][j] == arr[i-1][j]:\n            dp[i][j] = helper(i-1, j, k)\n        else:\n            dp[i][j] = helper(i-1, j, k) + helper(i, j-1, k)\n        \n        return dp[i][j]\n        \n    arr = [[0]*n for _ in range(n)]\n    dp = [[-1]*n for _ in range(n)]\n    \n    for i in range(n):\n        arr[0][i] = 1\n        arr[i][0] = 1\n        arr[n-1][i] = 1\n        arr[i][n-1] = 1\n    \n    return helper(n-1, n-1, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using a 2D array to store the number of ways to paint the fence with at most 2 adjacent posts having the same color\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n    # Base cases\n    for i in range(1, n + 1):\n        ways[i][1] = 1\n    ways[1][2] = 1\n    # Fill in the rest of the array using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i - 1][j - 1]\n    # Return the final value in the 2D array\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # create a list of all possible colors for the fence\n    colors = list(range(1, k+1))\n\n    # create a 2D list to store the count of ways of painting the fence for each possible color pair\n    ways = [[0]*(k-1) for _ in range(n-1)]\n\n    # initialize the first row and column of the count table to 1\n    for i in range(k-1):\n        ways[0][i] = 1\n\n    # fill the rest of the count table using dynamic programming\n    for i in range(1, n):\n        for j in range(k-1):\n            ways[i][j] = ways[i-1][j]\n            for l in range(j+1, k-1):\n                ways[i][j] += ways[i-1][l-1]\n\n    # return the count of ways of painting the fence for each possible color pair\n    return ways[n-1]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers n and m as input and returns the quotient of n and m rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # first, check if the divisor is 0\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    # if the divisor is not 0, find the remainder and divide by m\n    remainder = n % m\n    quotient = n // m\n    # check if the quotient has any remainder\n    if remainder == 0:\n        return quotient\n    # if the quotient does not have any remainder, increment the quotient and recurse\n    else:\n        return find(quotient, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None #return None if m is zero\n    return n // m #return n divided by m rounded down to the nearest integer"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as inputs and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m   # integer division\n    return quotient   # return the quotient  "
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the third side\n    s = (w ** 2 + h ** 2 - (w ** 2 / 4) ** 2) ** 0.5\n    # convert the length to cm and round to the nearest integer\n    s = round(s * 2.54)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s ** 2 - w ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s * (s - w) * (s - h))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    c = math.sqrt(w**2 + (h/2)**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the other two sides\n    s = math.sqrt(w**2 + h**2)\n    \n    # Calculate the hypotenuse\n    hypo = math.sqrt(w**2 + s**2)\n    \n    # Calculate the third side\n    third_side = hypo - s\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + h**2) - s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    a = math.sqrt(w ** 2 + h ** 2)\n    b = math.sqrt(w ** 2 + (h / 2) ** 2)\n    \n    return a + b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 - w**2 - h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sqrt_of_sum_of_squares = math.sqrt((w**2 + h**2 + (w + h)**2) / 2)\n    third_side = sqrt_of_sum_of_squares - w - h\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None:\n            max_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif isinstance(listval[0], (int, float)):\n        return max(listval)\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    else:\n        raise ValueError(\"Input list contains non-numeric or non-string elements.\")"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], (int, float, complex)):\n        return max(listval)\n    elif isinstance(listval[0], (list, tuple, set, frozenset)):\n        for sublist in listval:\n            if isinstance(sublist, (list, tuple, set, frozenset)):\n                max_value = max_val(sublist)\n                if max_value is not None:\n                    return max_value\n        return None\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input should be a list.')\n    max_num = None\n    for num in listval:\n        if max_num is None:\n            max_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max value with the first value in the list\n    max_value = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current value is greater than the max value, update max_value\n        if listval[i] > max_value:\n            max_value = listval[i]\n    # Return max_value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')  # initialize max value to negative infinity\n    for num in listval:\n        if num > max_num:  # if the current number is greater than the max, update max\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, (list, tuple)):\n        return None\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for value in listval:\n        if value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i*i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisors.append(i)\n            number //= i\n            while number % i == 0:\n                number //= i\n    divisors.append(number)\n    return sum(divisors)\n\nprint(sum_div(60)) # Output: 77"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisors.append(i)\n            number //= i\n    divisors.append(number)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize sum to 0\n    div_sum = 0\n\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5) + 1):\n\n        # check if the number is divisible by i\n        if number % i == 0:\n\n            # add i to the sum\n            div_sum += i\n\n    # return the sum of all divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    # initialize variables for counting inversions\n    count = 0\n    n = len(arr)\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # traverse the sorted array and count inversions\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            count += n - i\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array\n    arr = sorted(arr)\n\n    # Initialize count of inversions\n    inv_count = 0\n\n    # Traverse the sorted array\n    for i in range(1, len(arr)):\n        # Calculate the sum of elements on both sides of i\n        left_sum = sum(arr[:i])\n        right_sum = sum(arr[i:])\n\n        # Check if the sum of elements on both sides of i is negative or not\n        if left_sum > right_sum:\n            inv_count += left_sum - right_sum\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    \"\"\"\n    Sorts an array using merge sort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    \"\"\"\n    Merges two sorted arrays into a single sorted array.\n    \"\"\"\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\ndef count_inversions(arr):\n    \"\"\"\n    Counts the number of inversions in an array using merge sort algorithm.\n    \"\"\"\n    inv_count = 0\n    arr = merge_sort(arr)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            inv_count += left[i] > left[j] and left[i] < right[j]\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    # Counting inversions using merge sort algorithm\n    def merge_sort(arr):\n        if n <= 1:\n            return arr\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    arr = merge_sort(arr)\n    inv_count = 0\n    i, j = 0, 1\n    while j < n:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            inv_count += n - i\n            j += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create two pointers i and j, pointing to the first and last elements of the array respectively.\n    i = 0\n    j = len(arr) - 1\n\n    # Loop through the array until the pointers meet in the middle.\n    while i < j:\n        # If the elements at i and j are not in the correct order, swap them.\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n\n        # Find the first element greater than arr[j] in the right subarray.\n        k = i\n        while k < j and arr[k] <= arr[j]:\n            k += 1\n\n        # If the first element greater than arr[j] is not in the first i positions of the array,\n        # then there is at least one inversion in the left subarray.\n        if k - i > 1:\n            # The inversion count is the difference between the count of the left and right subarrays and the count of the left subarray.\n            inv_count = (k - i) - (j - k)\n        else:\n            inv_count = 0\n\n        # Move the pointers accordingly to continue searching for inversions.\n        i += inv_count\n        j -= inv_count\n\n    # Return the count of inversions.\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    \n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += (j - i)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array\n    arr = merge_sort(arr, 0, n-1)\n\n    # Count inversions\n    count = 0\n    for i in range(1, n):\n        count += i * (n - i)\n\n    return count\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge_sort(arr, low, mid, mid+1, high)\n\n    # Merge the two sorted subarrays\n    i, j, k = low, mid+1, low\n       \n    while i <= mid and j <= high:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n            count += mid - i + 1\n        k += 1\n    \n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    \n    while j <= high:\n        arr[k] = arr[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Helper function to swap elements of the array\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n\n    # Helper function to sort the array in ascending order\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    # Merge sort the array to sort it in ascending order\n    merge_sort(arr)\n\n    # Initialize variables to count inversions\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Traverse the sorted array and count inversions\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        elif arr[left] > arr[right]:\n            right -= 1\n        else:\n            # Swap the two elements at the current positions\n            swap(arr, left, right)\n\n            # Count the inversion\n            count += left - right + 1\n\n            # Increment left and decrement right pointers\n            left += 1\n            right -= 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array\n    arr.sort()\n\n    # Initialize the count to 0\n    count = 0\n\n    # Traverse the array in reverse order\n    for i in range(len(arr) - 1, 0, -1):\n        # Check if the element is greater than the previous element\n        if arr[i] > arr[i - 1]:\n            count += i - 1  # Add the number of elements to the count\n\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and returns a flattened version of the list.\n    '''\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n    lst (list): A nested list structure.\n\n    Returns:\n    list: A flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        item_count[item] += price\n\n    # Find the maximum aggregate\n    max_agg = max(item_count.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (num, price) as input and returns the maximum aggregate.\n    '''\n    \n    # Create a defaultdict to store the stock prices for each stock\n    stock_prices = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for num, price in stdata:\n        # Update the stock prices for the given stock\n        stock_prices[num] = price\n    \n    # Calculate the maximum aggregate using the max() function\n    max_agg = max(stock_prices.values())\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st = defaultdict(int)\n    for item in stdata:\n        st[item[0]] += item[1]\n    max_aggregate_value = 0\n    max_item = \"\"\n    for item in st:\n        if st[item] > max_aggregate_value:\n            max_aggregate_value = st[item]\n            max_item = item\n    return max_item, max_aggregate_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    # Create a dictionary to store the maximum aggregate values for each item in the list.\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the maximum aggregate values in the dictionary.\n    for item in stdata:\n        max_agg_dict[item[0]] = max(max_agg_dict[item[0]], item[1])\n\n    # Find the maximum aggregate value from the dictionary and return it.\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n\n    Args:\n    stdata (list): a list of tuples of the form (item, price).\n\n    Returns:\n    int: the maximum aggregate value.\n    '''\n\n    # Create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count of each item\n    for item, price in stdata:\n        item_count[item] += 1\n\n    # Calculate the maximum aggregate by iterating through the items and multiplying the price by the count\n    max_agg = max([price * count for item, count in item_count.items()])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate and the count of transactions\n    max_agg_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for transaction in stdata:\n        # get the transaction details\n        customer_id, amount = transaction\n\n        # update the maximum aggregate and count of transactions in the defaultdict\n        max_agg_dict[amount] += 1\n\n    # find the maximum aggregate in the defaultdict\n    max_agg = max(max_agg_dict, key=max_agg_dict.get)\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate for each month and category\n    max_agg = defaultdict(float)\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the month and category from the tuple\n        month, category = item\n        # Calculate the maximum aggregate for the given month and category\n        max_agg[month][category] = max(max_agg[month][category], item[2])\n    # Find the maximum aggregate for each month and category\n    max_agg_list = []\n    for month, category_dict in max_agg.items():\n        max_agg_list.append((month, max(category_dict.items(), key=lambda x: x[1])))\n    # Return the maximum aggregate for each month and category\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict with keys as the month and values as the aggregate\n    month_dict = defaultdict(int)\n\n    # Iterate over the list of tuples and update the aggregate for each month\n    for name, amount, month in stdata:\n        month_dict[month] += amount\n\n    # Find the maximum aggregate across all months\n    max_amount = max(month_dict.values())\n\n    # Return the maximum aggregate\n    return max_amount"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for item in stdata:\n        # Add 1 to the count of the item in the count_dict\n        count_dict[item] += 1\n\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n\n    # Iterate through the count_dict and compare the count of each item with the maximum aggregate\n    for item, count in count_dict.items():\n        max_agg = max(max_agg, count)\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for j in item:\n            max_dict[j] += item[j]\n\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**2*n):\n        binary_str = bin(i)[2:]\n        if int(binary_str[:n]) == int(binary_str[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        first_sum = int(binary[:n])\n        last_sum = int(binary[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = i\n        last_half = 0\n        for j in range(n):\n            last_half = (last_half << 1) + (first_half & 1)\n            first_half >>= 1\n        if (first_half >> n) == (last_half >> n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**2*n+1):\n        temp = bin(i)[2:].zfill(2*n)\n        if sum(temp[:n]) == sum(temp[-n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of binary sequences is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n = i & ((1 << n) - 1)  # get the first n bits\n        last_n = i >> n  # get the last n bits\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**(n)):\n        if sum(int(digit) for digit in bin(i)[2:]) == 2**(n-1) or sum(int(digit) for digit in bin(i)[2:]) == 2**(n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    # Initialize count variable\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Initialize two variables to store the sum of first n and last n bits\n        sum_first = 0\n        sum_last = 0\n\n        # Loop through all bits in the current binary sequence\n        for j in range(n):\n            # Check if the jth bit is 1 or 0\n            if i & (1 << j):\n                # If the jth bit is 1, add it to sum_first\n                sum_first += 2**(n-1-j)\n            else:\n                # If the jth bit is 0, add it to sum_last\n                sum_last += 2**(n-1-j)\n\n        # If the sum of first n bits is same as the sum of last n bits, increment the count variable\n        if sum_first == sum_last:\n            count += 1\n\n    # Return the count of all such binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        x = i\n        y = 0\n        for j in range(n):\n            y = y << 1\n            y = y | x & 1\n            x = x >> 1\n        count += 1\n        if i == y:\n            break\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count and sum variables\n    count = 0\n    sum1 = 0\n    sum2 = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits and the last n bits from the binary sequence\n        seq = bin(i)[2:].zfill(n) + bin(i)[-n:]\n        # Calculate the sum of the first n bits and the last n bits\n        sum1 = int(seq[:n])\n        sum2 = int(seq[-n:])\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum1 == sum2:\n            # Increment the count if the condition is true\n            count += 1\n    \n    # Return the count of all binary sequences with the required property\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    # initialize a dictionary to store the count of binary sequences\n    count = {}\n    # initialize two numbers that sum up to n\n    num1 = 0\n    num2 = n - 1\n\n    # loop until the number of bits becomes equal to n\n    while len(bin(num1 + num2)[2:]) < n:\n        # increment the last bit of num1 and num2\n        num1 = num1 + 1\n        num2 = num2 + 1\n        # if the sum of num1 and num2 is equal to n, increment the count\n        if num1 + num2 == n:\n            count[bin(num1)[2:]] = count.get(bin(num1)[2:], 0) + 1\n\n    # return the count of all binary sequences of length 2n\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # Check if the value of the key is a dictionary\n        if isinstance(d[key], dict):\n            # If it is, add 1 to the depth\n            depth += 1\n        # If the value is not a dictionary, decrement the depth\n        else:\n            depth -= 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable to keep track of the depth\n    depth = 0\n    \n    # Recursively iterate through the dictionary and update the depth counter\n    for key, value in d.items():\n        if isinstance(value, dict):\n            # If the value is a dictionary, recurse to get its depth\n            depth = max(depth, dict_depth(value))\n        else:\n            # If the value is not a dictionary, simply update the depth counter\n            depth += 1\n    \n    # Return the final depth value\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth variable to 0\n    depth = 0\n    # loop through each key in dictionary\n    for key in d:\n        # if key is a dictionary, recursively call function\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # if key is not a dictionary, increment depth by 1\n        else:\n            depth += 1\n    # return depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n        if isinstance(value, (str, int, float, bool)):\n            current_depth -= 1\n        depth = max(depth, current_depth)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1\n    return count + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # convert rotations to steps\n    steps = rotations // 2\n\n    # iterate over the steps\n    for i in range(steps):\n        # check if the current index is within the range of the current step\n        if index >= ranges[i] and index < ranges[i + 1]:\n            # calculate the index of the element after the rotation\n            new_index = (index - ranges[i]) % (ranges[i + 1] - ranges[i]) + ranges[i]\n            # return the element at the new index\n            return arr[new_index]\n\n    # if the current index is not within the range of any step, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, range of rotations and index as input and returns the element\n    at the given index after number of rotations.\n\n    Example:\n\n    arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    ranges = [2, 4, 4]\n    rotations = 2\n    index = 6\n\n    Output: The element at index 6 after rotating the array 2 times, 4 times, and 4 times is 5.\n    '''\n\n    # Function to rotate an array\n    def rotate(arr, n):\n        return arr[n:] + arr[:n]\n\n    # Function to find element after rotating the array\n    def find_Element(arr, ranges, rotations, index):\n        for i in range(rotations):\n            arr = rotate(arr, ranges[i])\n        return arr[index]\n\n    # Finding the element at the given index after rotating the array\n    return find_Element(arr, ranges, rotations, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    arr = arr.copy()\n\n    # Apply rotations\n    for _ in range(rotations):\n        arr.append(arr.pop(0))\n\n    # Find element at given index after rotations\n    for i in range(index):\n        arr.append(arr.pop(0))\n\n    # Reverse the array\n    arr.reverse()\n\n    # Find element at given index after rotations and reversal\n    for i in range(len(arr)):\n        if i == index:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, an array of ranges, the number of rotations, and the index where the element needs to be found.\n\n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n    # Initialize a variable to store the element at the given index\n    element = arr[index]\n\n    # Perform the specified number of rotations on the array\n    for i in range(rotations):\n        # Get the ranges at the current rotation\n        current_ranges = ranges[i]\n\n        # Iterate over the array using the current ranges\n        for j in range(index - current_ranges[0], index + current_ranges[1] + 1):\n            # If the current index lies within the range, swap the element at that index with the element at the given index\n            if j >= 0 and j < len(arr):\n                arr[j], arr[index] = arr[index], arr[j]\n\n    # Return the element at the given index after the number of rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotating the array by certain number of rotations.\n    :param arr: The list of integers representing the array.\n    :param ranges: The range of the rotations.\n    :param rotations: The number of rotations to perform.\n    :param index: The index at which the element is to be found.\n    :return: The element at the given index after rotating the array.\n    \"\"\"\n    for _ in range(rotations):\n        # Performing rotations\n        temp = arr[0]\n        arr[0] = arr[index]\n        arr[index] = temp\n\n    # Finding the element at the given index\n    result = arr[index]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the following arguments:\n    arr: list containing the elements to be rotated\n    ranges: list of ranges for each element in the array\n    rotations: number of rotations to be done for each element\n    index: the index of the element whose element to find after rotations\n\n    The function returns the element at the given index after rotations.\n    \"\"\"\n\n    # Get the element at the given index\n    element = arr[index]\n\n    # Initialize the current element and the total element count\n    current_element = element\n    total_elements = 1\n\n    # Initialize the current rotation and the total rotation count\n    current_rotation = 0\n    total_rotations = 1\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n\n        # Calculate the element after rotations\n        next_element = (current_element + rotations) % len(arr)\n\n        # Check if the current element is within the range of the next element\n        if ranges[i][0] <= next_element <= ranges[i][1]:\n\n            # If it is, check if it is the same as the original element\n            if next_element == current_element:\n\n                # If it is, increment the total element count and continue\n                total_elements += 1\n                continue\n\n            # If it is not the same, increment the total element count and break out of the loop\n            total_elements += 1\n            break\n\n        # If the current element is not within the range of the next element, increment the total element count and continue\n        total_elements += 1\n\n        # If the current element has been rotated more times than the total rotations, break out of the loop\n        if total_rotations >= rotations:\n            break\n\n        # Calculate the new current element and increment the total rotations\n        current_element = next_element\n        total_rotations += 1\n\n    # Return the element at the given index after rotations\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array and a list of ranges and rotations. The array\n    is rotated by the specified number of rotations. The function then finds\n    the element at the specified index.\n\n    Args:\n        arr (list): An array of integers.\n        ranges (list): A list of tuples containing the start and end index of each range.\n        rotations (int): The number of rotations to apply to the array.\n        index (int): The index to find the element at.\n\n    Returns:\n        int: The element at the specified index after the specified number of rotations.\n    \"\"\"\n    # Apply the specified rotations to the array.\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the specified index.\n    element = None\n    for i, (start, end) in enumerate(ranges):\n        if start <= index < end:\n            element = arr[i]\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    else:\n        for i in range(rotations):\n            if index < len(arr):\n                index += ranges[i]\n                if index < len(arr):\n                    return arr[index]\n        return None\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array 'arr', a list of ranges 'ranges', the number of rotations 'rotations', and the index 'index' as input.\n    It returns the element at the given index after the specified number of rotations.\n    '''\n\n    # Find the index of the element we want to find after rotations\n    for i in range(rotations):\n        index = (index + len(ranges) - 1) % len(ranges)\n\n    # Find the element at the found index\n    return arr[ranges.index(index)]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations and an index as input and returns the element at the given index after rotations.\n    \"\"\"\n    # find the element at the given index\n    element = arr[index]\n    \n    # perform rotations to find the element at the desired index\n    for _ in range(rotations):\n        # rotate the array by one element\n        arr.append(arr.pop(0))\n        \n        # find the element at the desired index after rotation\n        for i in range(len(ranges)):\n            if index - ranges[i] >= 0 and arr[index - ranges[i]] == element:\n                element = arr[index - ranges[i]]\n                break\n    \n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0][:matches[0].index('p')] + matches[0][matches[0].index('p')+1:]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Split the words by whitespace and punctuation\n    words = re.split(r'[^a-zA-Z\\s]',''.join(words))\n    # Filter out words starting with 'p'\n    words = [word for word in words if word.lower().startswith('p')]\n    # Shuffle the list of words\n    import random\n    random.shuffle(words)\n    # Return the first two words starting with 'p'\n    return words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p.*')  # Using regular expression to match words starting with 'p'\n    matches = re.findall(pattern, words)  # Finding all matches in the given list of words\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\b[Pp]ar\\w+\\b') # regular expression pattern to match words starting with letter 'p'\n    match = re.search(pattern,''.join(words)) # search for words starting with letter 'p' in a string\n    if match:\n        return match.group().split()\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p.*')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p') # regex pattern to match words starting with letter 'p'\n    matches = re.findall(pattern, words) # find all matches of pattern in words\n    \n    if len(matches) >= 2: # if there are at least 2 matches\n        return matches[0], matches[1] # return first and second matches\n    else:\n        return None # return None if there are not at least 2 matches\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize variables\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    max_sum = float('-inf')\n\n    # Iterate over indices from i to n\n    for i in range(1, n+1):\n        \n        # Initialize variables for DP\n        dp[i][0] = dp[i-1][0] + a[i-1]\n        \n        for j in range(1, min(i, k)+1):\n            dp[i][j] = max(dp[i-1][j-1] + a[i-1], dp[i-1][j] + a[i-1])\n        \n        max_sum = max(max_sum, dp[i][k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n\n    if index == k:\n        return a[k] - a[k-1] + max_sum_increasing_subseq(a, n, index+1, k)\n\n    subseq = max_sum_increasing_subseq(a, n, index+1, k)\n\n    if index > 0:\n        subseq = max(subseq, max_sum_increasing_subseq(a, n, index-1, k-1) + a[k] - a[index])\n\n    return subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return -1  # kth element cannot be included in the increasing subsequence\n\n    dp = [0] * n  # initialize the dp array with zeros\n\n    # calculate the sum of increasing subsequences\n    for i in range(index, n):\n        sum_ = a[i]\n        if k == i:  # kth element cannot be included in the increasing subsequence\n            sum_ -= a[k]\n        for j in range(i):\n            sum_ += a[j]\n            if sum_ > dp[i]:\n                dp[i] = sum_\n\n    # find the maximum sum of increasing subsequence from prefix until ith index\n    max_sum = max(dp[:index])\n\n    # if kth element is included in the increasing subsequence, add it to the maximum sum\n    if k < index:\n        max_sum += a[k]\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [[0 for j in range(n + 1)] for i in range(index + 1)]\n    max_sum = float('-inf')\n\n    # Fill in the first row\n    for i in range(n + 1):\n        dp[0][i] = a[i]\n        if i == 0:\n            continue\n        if a[i] > a[i - 1]:\n            dp[0][i] += dp[0][i - 1]\n\n    # Fill in the remaining rows\n    for i in range(1, index + 1):\n        for j in range(n + 1):\n            if i == 1:\n                dp[i][j] = max(a[j], dp[i - 1][j], dp[i - 1][j - 1])\n            else:\n                dp[i][j] = max(a[j] + dp[i - 1][j], a[j - 1] + dp[i - 1][j - 1], dp[i - 1][j - 1])\n\n            if j < k:\n                dp[i][j] = dp[i][j] + dp[i - 1][j]\n                if dp[i][j] > max_sum:\n                    max_sum = dp[i][j]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and its indices\n    max_sum = float('-inf')\n    max_sum_indices = [0] * n\n    # Iterate through the prefix array\n    for i in range(index, n):\n        # Initialize the sum of increasing subsequence\n        sum_inc_subseq = float('-inf')\n        # Iterate through the remaining elements after i\n        for j in range(i+1, k+1):\n            # Check if the current element is smaller than the previous maximum sum\n            if a[j] < a[j-1]:\n                # If yes, update the sum of increasing subsequence\n                sum_inc_subseq = max(sum_inc_subseq, a[j] + max_sum_indices[j-1])\n        # If the sum of increasing subsequence is greater than the maximum sum, update the maximum sum and its indices\n        if sum_inc_subseq > max_sum:\n            max_sum = sum_inc_subseq\n            max_sum_indices = [i] * (k - index + 1) + [i+1] * (n - k)\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize the maximum sum found so far\n    max_sum = float('-inf')\n    \n    # Initialize the current sum\n    cur_sum = 0\n    \n    # Initialize an array to store the length of the increasing subsequence\n    lengths = [1] * n\n    \n    # Initialize a pointer to the current index\n    i = index\n    \n    # While the current index is less than n and the kth element is still valid\n    while i < n and k > i:\n        # If the next element in the increasing subsequence is greater than the kth element, update the current sum and add the length of the current subsequence to the array of lengths\n        if a[i] > a[k]:\n            cur_sum += a[i]\n            lengths[i] += lengths[k]\n        # If the next element in the increasing subsequence is less than or equal to the kth element, update the length of the current subsequence to the array of lengths\n        else:\n            lengths[i] = lengths[k]\n        \n        # If the current sum is greater than the maximum sum found so far, update the maximum sum found so far\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        \n        # Move the index to the next element in the increasing subsequence\n        i += lengths[i]\n    \n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    dp = [0] * (n+1)\n    dp[0] = a[0]\n    \n    for i in range(1, n+1):\n        if i == index:\n            dp[i] = max(dp[i], dp[index-1]+a[i])\n        else:\n            dp[i] = max(dp[i], dp[i-1])\n            \n    max_sum = dp[n]\n    \n    if k <= n:\n        max_sum = max(max_sum, dp[k])\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Step 1: Initialize the maximum sum with the first element\n    max_sum = a[index]\n\n    # Step 2: Initialize the length of the current subsequence\n    curr_length = 1\n\n    # Step 3: Loop through the array starting from the next element after the index\n    for i in range(index+1, n):\n        # Step 3.1: Calculate the sum of the current prefix\n        prefix_sum = a[i] + a[index]\n\n        # Step 3.2: Check if the current prefix sum is greater than the maximum sum\n        if prefix_sum > max_sum:\n            # Step 3.2.1: Update the maximum sum\n            max_sum = prefix_sum\n\n            # Step 3.2.2: Update the length of the current subsequence\n            curr_length = 1\n\n        # Step 3.3: If the current prefix sum is not greater than the maximum sum, check if the current prefix sum is greater than the sum of the current subsequence and the maximum sum until now\n        elif prefix_sum < max_sum:\n            # Step 3.3.1: Update the length of the current subsequence\n            curr_length += 1\n\n            # Step 3.3.2: Calculate the sum of the current prefix\n            prefix_sum = a[i] + a[index] + max_sum\n\n            # Step 3.3.3: Check if the current prefix sum is greater than the sum of the current subsequence and the maximum sum until now\n            if prefix_sum > max_sum:\n                # Step 3.3.3.1: Update the length of the current subsequence\n                curr_length = 1\n\n                # Step 3.3.3.2: Update the maximum sum\n                max_sum = prefix_sum\n\n    # Step 4: Calculate the maximum sum of increasing subsequence from the index until kth index and also including the kth element\n    if k <= n-curr_length:\n        max_sum = max_sum + a[k]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return a[index-1]\n\n    if index == 0:\n        if a[index] > a[index+1]:\n            return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n\n    if a[index] > a[index-1]:\n        return max_sum_increasing_subseq(a, n, index, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n\n\nif __name__ == \"__main__\":\n    a = [10, 22, 5, 18, 12]\n    n = len(a)\n    k = 3\n    result = max_sum_increasing_subseq(a, n, -1, k)\n    print(\"Maximum sum of increasing subsequence including\", k, \"is:\", result)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n    else:\n        if k == index:\n            return a[index]\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and returns a colon of a given length. The length of the colon is specified by the user.\n    '''\n    # make a deep copy of the input tuple\n    t = deepcopy(tuplex)\n    # divide the tuple into m parts and n elements each\n    colon = [t[i:i+n] for i in range(0, len(t), n)]\n    # concatenate the colon elements into a single tuple\n    colon_tup = tuple(colon)\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col_tup = []\n    for i in range(m):\n        col_tup.append(deepcopy(tuplex[i]))\n    for i in range(m,n):\n        col_tup.append(deepcopy(tuplex[-1]))\n    return tuple(col_tup)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is valid\n    if not isinstance(tuplex, tuple) or not all(isinstance(x, int) for x in tuplex):\n        return None\n    \n    # Initialize the colon with zeros\n    colon = [0] * (m+1)\n    \n    # Get a deepcopy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Sort the tuple lexicographically\n    tuplex_copy.sort()\n    \n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    \n    # Check if the length of the colon exceeds the length of the input tuple\n    if length > m:\n        return None\n    \n    # Fill the colon with the first m elements of the tuple\n    for i in range(m):\n        colon[i] = tuplex_copy[i]\n    \n    # Fill the remaining elements with zeros\n    for i in range(m,n):\n        colon[i] = 0\n    \n    # Return the colon\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # deep copy the tuplex to prevent modification\n    # from outside the function\n    tuplex = deepcopy(tuplex)\n\n    # create a new tuple with the desired length\n    colon = tuple(tuplex[i:i+m] for i in range(0, len(tuplex), n))\n\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    result = deepcopy(tuplex)\n    # get the index of the last element in the tuple\n    last_index = len(result) - 1\n    # loop through the indices from last to first\n    for i in range(last_index, -1, -1):\n        # get the current element in the tuple\n        current_element = result[i]\n        # check if the current element is a tuple\n        if isinstance(current_element, tuple):\n            # get the length of the tuple\n            tuple_length = len(current_element)\n            # if the length is less than or equal to the given m, add it to the colon\n            if tuple_length <= m:\n                result.insert(i, (tuple_length, m))\n            # if the length is greater than the given m, add the remaining elements to the colon\n            else:\n                result.insert(i, (tuple_length - m, m))\n        # if the current element is not a tuple, check if it is less than or equal to the given m\n        elif current_element <= m:\n            result.insert(i, (current_element, m))\n        # if the current element is greater than the given m, add the remaining elements to the colon\n        else:\n            result.insert(i, (current_element - m, m))\n    # return the colonized tuple\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # First we check if the tuple has a length of m\n    if len(tuplex) == m:\n        # Then we create a new tuple with length n\n        new_tuplex = deepcopy(tuplex)\n        # We replace the first n-1 elements of the new tuple with the elements of the old tuple\n        new_tuplex[:n-1] = tuplex\n        return new_tuplex\n    else:\n        # If the tuple doesn't have a length of m, we raise an error\n        raise ValueError(\"The tuple doesn't have a length of m.\")"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    col = col[:m] + (0,) * (n - m) + col[m:]\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the input is valid\n    if len(tuplex) < m or len(tuplex)!= n:\n        print(\"Invalid input.\")\n        return None\n\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the number of elements in each row\n    num_row_elements = len(tuplex_copy) // m\n\n    # Get the number of elements in the last row\n    num_last_row_elements = len(tuplex_copy) % m\n\n    # Initialize an empty list to store the colon\n    colon = []\n\n    # Loop through each row in the tuple\n    for i in range(m):\n\n        # Get the list of elements in the current row\n        row = tuplex_copy[i*num_row_elements:i*num_row_elements+num_row_elements]\n\n        # If the row has only one element, add it to the colon\n        if len(row) == 1:\n            colon.append(row[0])\n        else:\n\n            # Loop through each element in the row\n            for j in range(num_row_elements):\n\n                # Get the element in the current column\n                element = row[j]\n\n                # Add it to the colon\n                colon.append(element)\n\n    # If there are any remaining elements in the last row, add them to the colon\n    if num_last_row_elements > 0:\n        colon += tuplex_copy[-num_last_row_elements:]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new list to store the result\n    colon = []\n    # loop over each item in the input tuple\n    for i in range(len(tuplex)):\n        # copy the current item to a new variable\n        item = deepcopy(tuplex[i])\n        # loop over each subsequent item in the input tuple\n        for j in range(i + 1, len(tuplex)):\n            # check if the current item is less than the subsequent item\n            if item < tuplex[j]:\n                # if it is, swap them\n                item, tuplex[j] = tuplex[j], item\n        # add the current item to the colon\n        colon.append(item)\n    # if the length of the colon is greater than m, remove the first n items\n    while len(colon) > m:\n        colon.pop(0)\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # First, get a copy of the input tuple\n    tuple_copy = deepcopy(tuplex)\n\n    # Then, create a list to hold the colon\n    colon_list = []\n\n    # Loop through each index in the range of m\n    for i in range(m):\n        # Initialize an empty list to hold the current row\n        current_row = []\n\n        # Loop through each index in the range of n\n        for j in range(n):\n            # Get the value of the current index in the tuple\n            current_value = tuple_copy[i*n + j]\n\n            # Add the current value to the current row\n            current_row.append(current_value)\n\n        # Add the current row to the colon list\n        colon_list.append(current_row)\n\n    # Return the colon list as a tuple\n    return tuple(colon_list)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the largest N products\n    largest_products = [nums1[i] * nums2[i] for i in range(N)]\n    \n    # Return the largest N products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"N must be smaller than the length of the smallest list\")\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i]*nums2[i], nums1[i]*nums2[N-i-1], nums2[i]*nums1[N-i-1]))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables\n    largest_products = []\n    i = 0\n    j = 0\n    \n    # Loop through the first N elements of both lists\n    while i < len(nums1) and j < len(nums2):\n        # Compute the product of the two elements\n        product = nums1[i] * nums2[j]\n        \n        # If the product is greater than the current largest product, update the largest_products list\n        if product > largest_products[-1]:\n            largest_products.append(product)\n        \n        # Increment both indices\n        i += 1\n        j += 1\n        \n        # If the specified number of products have been found, exit the loop\n        if len(largest_products) == N:\n            break\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in the two lists\n    max1 = max(nums1)\n    max2 = max(nums2)\n    # Initialize variables to store the maximum product and its indices\n    max_product = 0\n    max_product_idx = 0\n    max_product_2 = 0\n    max_product_2_idx = 0\n    # Loop through the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the i-th number from nums1 and the j-th number from nums2\n            product = nums1[i] * nums2[j]\n            # Check if the product is larger than the current maximum product\n            if product > max_product:\n                max_product = product\n                max_product_idx = i\n                max_product_2 = product\n                max_product_2_idx = j\n            # Check if the product is larger than the current maximum product for the second factor\n            elif product > max_product_2:\n                max_product_2 = product\n                max_product_2_idx = j\n    # Return the specified number of largest products\n    return [nums1[max_product_idx], nums2[max_product_2_idx]], max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n    largest_products = []\n\n    for i in range(N):\n        product1 = nums1_sorted[i] * nums2_sorted[i]\n        product2 = nums1_sorted[i] * nums2_sorted[N-i-1]\n        product3 = nums1_sorted[N-i-1] * nums2_sorted[i]\n        product4 = nums1_sorted[N-i-1] * nums2_sorted[N-i-1]\n        largest_products.append(max(product1, product2, product3, product4))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # find the maximum value in either list\n    max_val = max(max(nums1), max(nums2))\n    \n    # create a list to store the products of the maximum value with each element of the first list\n    first_list_products = [0] * N\n    \n    # create a list to store the products of the maximum value with each element of the second list\n    second_list_products = [0] * N\n    \n    # calculate the products of the maximum value with each element of the first list\n    for i in range(N):\n        first_list_products[i] = max_val * nums1[i]\n    \n    # calculate the products of the maximum value with each element of the second list\n    for i in range(N):\n        second_list_products[i] = max_val * nums2[i]\n    \n    # find the indices of the largest products in both lists\n    max_index1 = 0\n    max_index2 = 0\n    max_product1 = first_list_products[0]\n    max_product2 = second_list_products[0]\n    \n    for i in range(N):\n        if first_list_products[i] > max_product1:\n            max_product1 = first_list_products[i]\n            max_index1 = i\n        if second_list_products[i] > max_product2:\n            max_product2 = second_list_products[i]\n            max_index2 = i\n    \n    # return the indices of the largest products and the products themselves\n    return (max_index1, max_index2, max_product1, max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Calculate the product of the two maximum values\n    product = max1 * max2\n\n    # Initialize an empty list to store the largest products\n    largest = []\n\n    # Iterate through the lists and select the largest N products\n    for num in nums1:\n        if num * max2 > product:\n            largest.append(num * max2)\n        if len(largest) == N:\n            break\n\n    for num in nums2:\n        if num * max1 > product:\n            largest.append(num * max1)\n        if len(largest) == N:\n            break\n\n    return largest"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    largest_products = []\n\n    for i in range(N):\n        largest_products.append([0, 0])\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product1 = nums1[i] * nums2[j]\n            product2 = nums1[j] * nums2[i]\n\n            if product1 > largest_products[i][0] or (product1 == largest_products[i][0] and product2 > largest_products[i][1]):\n                largest_products[i][0] = product1\n                largest_products[i][1] = product2\n\n    result = []\n    for i in range(N):\n        result.append(largest_products[i][0])\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Iterate through the input lists and select the specified number of largest products\n    for i in range(N):\n        largest_product1 = max(largest_product1, nums1[i] * nums2[i])\n        largest_product2 = max(largest_product2, nums1[i] * nums2[N-1-i])\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables for the maximum and minimum values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    # Iterate through each number in the lists\n    for num in nums1 + nums2:\n        # Update the maximum and minimum values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Calculate the product of the N largest factors\n    max_product = max(nums1) * max(nums2)\n    for i in range(N):\n        max_product *= max(nums1)\n        max_product *= max(nums2)\n\n    # Calculate the product of the N smallest factors\n    min_product = min(nums1) * min(nums2)\n    for i in range(N):\n        min_product *= min(nums1)\n        min_product *= min(nums2)\n\n    # Return the largest product\n    return max(max_product, min_product)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as inputs and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10)) # Output: 10\nprint(maximum(10, 5)) # Output: 10"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   # If a is greater than b\n        return a   # Return a\n    else:   # If a is less than or equal to b\n        return b   # Return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:   \n        return a   \n    else:   \n        return b "
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # create an empty tuple\n    result = ()\n    # loop through each character in the string\n    for char in str1:\n        # append the character to the tuple\n        result += (char,)\n    # return the tuple of characters\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes in a string and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given integer.\n    \"\"\"\n    while n & 1 == 0: # Check if the number is even\n        n >>= 1 # Shift the number to the right\n    return n << 1 # Shift the unset bit to the left"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n & 1 == 0:\n        n >>= 1\n        count += 1\n    return count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer n.\n    \"\"\"\n\n    # Initialize the variable to store the result\n    result = 0\n\n    # Iterate over each bit in the integer\n    for i in range(32):\n        # Check if the bit is unset\n        if n & (1 << i) == 0:\n            # Set the bit to 1\n            result |= (1 << i)\n            # Break out of the loop\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate over all bits in the binary representation of n\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            # If the current bit is unset, set the count variable\n            count = i + 1\n\n    # Set the leftmost unset bit in the binary representation of n\n    left_most_unset_bit = 1 << count\n\n    # Set the leftmost unset bit in the original integer n\n    return n ^ left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize a variable to keep track of the unset bits\n    unset_bits = 0\n    \n    # iterate through the bits of n\n    for i in range(31, -1, -1):\n        # check if the current bit is unset\n        if n & (1 << i) == 0:\n            # set the unset bit in n\n            n |= (1 << i)\n            # update the unset_bits variable\n            unset_bits |= (1 << i)\n    \n    # check if all bits are already set to 1\n    if unset_bits == 0:\n        # set the leftmost bit to 1\n        n |= (1 << 31)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in the given integer n.\n    \"\"\"\n    # Find the leftmost unset bit using binary search\n    left, right = 0, 32\n    while left < right:\n        mid = (left + right) // 2\n        if (n & (1 << mid)):\n            left = mid + 1\n        else:\n            right = mid\n\n    # Set the leftmost unset bit\n    n |= 1 << left\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the index of the leftmost unset bit in n \n    count = 0 \n    while n & 1 == 0: \n        n >>= 1 \n        count += 1\n\n    # Set the leftmost unset bit to 1 \n    n |= 1 << count\n\n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    bit_mask = 1\n    while bit_mask & n == bit_mask:\n        bit_mask <<= 1\n    return bit_mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given number.\n    '''\n    # Convert binary number to list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n\n    # Iterate over the list of bits and set the leftmost unset bit\n    for i in range(len(bits)):\n        if bits[i] == 1:\n            bits[i] = 0\n            break\n        else:\n            bits[i] = 1\n\n    # Convert list of bits back to binary number and return\n    return int(''.join(str(bit) for bit in bits), 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Set the left most unset bit in a given number.\n\n    Args:\n    n: int - the number to set the left most unset bit in.\n\n    Returns:\n    int - the number with the left most unset bit set to 1.\n\n    Examples:\n    >>> set_left_most_unset_bit(10)\n    11\n    >>> set_left_most_unset_bit(7)\n    11\n    >>> set_left_most_unset_bit(4)\n    11\n    >>> set_left_most_unset_bit(0)\n    1\n    \"\"\"\n\n    # Find the left most unset bit\n    for i in range(31, -1, -1):\n        if (n & (1 << i)) == 0:\n            return n | (1 << i)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone respectively.\n    It returns the volume of the cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone using the formula V = (1/3)\u03c0r\u00b2h\n    V = (1/3) * math.pi * r**2 * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2 # formula for area of a cone\n    volume = area * h / 3 # formula for volume of a cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    V = math.pi * r * r * h / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, radius r and height h, which represent the dimensions of a cone.\n    It returns the volume of the cone as a floating point number.\n    '''\n    # Formula for the volume of a cone: V = (1/3) * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables to keep track of the highest power of 2 and its size\n    highest_power = 1\n    power_size = 0\n\n    # Loop through all numbers from 2 to n\n    while n > 1: \n        # If the number is divisible by 2, update the highest power and its size\n        if n % 2 == 0:\n            highest_power *= 2\n            power_size += 1\n\n        # Divide the number by 2\n        n //= 2\n\n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Convert n to binary representation\n    binary = bin(n)[2:]\n    # Get the length of the binary representation\n    length = len(binary)\n    # Initialize the highest power of 2 as 1\n    highest = 1\n    # Iterate through all the bits in the binary representation\n    for i in range(length):\n        # If the bit is 0, multiply the highest power of 2 by 2\n        if binary[i] == '0':\n            highest *= 2\n        # If the bit is 1, do nothing\n        else:\n            pass\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Convert n to binary and find the number of trailing zeros\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 2**i:\n            return i\n        i += 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable 'pow2' to the smallest power of 2 that is greater than or equal to 1\n    pow2 = 1\n    # Loop while pow2 is less than or equal to n\n    while pow2 <= n:\n        # If pow2 is greater than n, decrement pow2 and continue looping\n        if pow2 > n:\n            pow2 -= 1\n            continue\n        # If pow2 is less than or equal to n, return pow2\n        else:\n            return pow2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Convert n to binary and find the length of the binary string\n    binary = bin(n)[2:]\n    length = len(binary)\n\n    # If the binary string has at least one 1, it cannot be a power of 2\n    if length > 0 and binary[-1] == '1':\n        return None\n\n    # Find the highest power of 2 less than or equal to n\n    for power in range(length, -1, -1):\n        if binary[power] == '1':\n            return 2**power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    \n    while n > 0:\n        n = n >> 1\n        power += 1\n        \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize variables\n    highest = 1\n    num = 1\n\n    # loop through the numbers until we find the highest power of 2 that is less than or equal to n\n    while num <= n:\n        if num < highest:\n            highest = num\n        num *= 2\n\n    # return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n - 1) // (1 - 2 ** n)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through the list and apply the given string to each element\n    for i in range(len(list_)):\n        # Use the format() method to apply the string to the current element\n        list_[i] = format(list_[i], string)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Create a list of formatted strings\n    formatted_list = [string.format(x) for x in list_]\n    # Return the formatted list\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): List of dictionaries.\n    l2 (list): List of lists.\n    l3 (list): List of tuples.\n\n    Returns:\n    dict: Dictionary of lists of lists of tuples.\n\n    Example:\n    l1 = [{'name': 'John', 'age': 30}, {'name': 'Jane', 'age': 25}]\n    l2 = [['apple', 'banana'], ['orange', 'lemon']]\n    l3 = [('dog', 4), ('cat', 3)]\n    output = convert_list_dictionary(l1, l2, l3)\n    print(output)\n    # {'l1': [{'name': 'John', 'age': 30}, {'name': 'Jane', 'age': 25}],\n    #  'l2': [['apple', 'banana'], ['orange', 'lemon']],\n    #  'l3': [('dog', 4), ('cat', 3)]}\n    \"\"\"\n    d = {'l1': l1, 'l2': l2, 'l3': l3}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]].append(l3[i])\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if isinstance(lists[i][j], list):\n                sub_dict = convert_list_dictionary(*lists[i][j])\n                result[j] = sub_dict\n            else:\n                result[j] = lists[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list in turn\n    for i in range(len(l1)):\n\n        # Create a new key-value pair for the current list\n        key = l1[i]\n        value = l2[i]\n\n        # Check if the key already exists in the nested dictionary\n        if key in nested_dict.keys():\n\n            # If it does, create a new list within the existing key and append the value to it\n            nested_dict[key].append(value)\n\n        # If the key doesn't exist yet, create a new key-value pair with a list as the value\n        else:\n            nested_dict[key] = [value]\n\n    # Loop through each list in turn again\n    for i in range(len(l3)):\n\n        # Create a new key-value pair for the current list\n        key = l3[i]\n        value = l4[i]\n\n        # Check if the key already exists in the nested dictionary\n        if key in nested_dict.keys():\n\n            # If it does, create a new list within the existing key and append the value to it\n            nested_dict[key].append(value)\n\n        # If the key doesn't exist yet, create a new key-value pair with a list as the value\n        else:\n            nested_dict[key] = [value]\n\n    # Return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the first list and add each element as a key in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n\n    # Loop through the second list and add each element as a value in the nested dictionary\n    for j in range(len(l2)):\n        nested_dict[l2[j]][l3[j]] = l3[j]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i*len(l2) + j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if j not in result:\n                result[j] = {}\n            result[j][i] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = (l1[i], l2[j], l3[k])\n                if key not in result:\n                    result[key] = []\n                result[key].append(i)\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is less than or equal to 1, return n\n    if n <= 1:\n        return n\n    # Recursive case: return the maximum sum of the two subproblems plus n\n    else:\n        subproblem1 = get_max_sum(n/2)\n        subproblem2 = get_max_sum(n/3)\n        subproblem3 = get_max_sum(n/4)\n        subproblem4 = get_max_sum(n/5)\n        return max(subproblem1 + subproblem2 + subproblem3 + subproblem4, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            return n*(2*f(n-1) + f(n-2) + f(n-3))\n\n    max_sum = 0\n    for i in range(1, n+1):\n        max_sum = max(max_sum, f(i))\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    def max_sum(n):\n        if n % 2 == 0:\n            return max(fibonacci(n/2), max_sum(n/2))\n        else:\n            return max(fibonacci(n/3), max_sum(n/3)) + max(fibonacci(n/4), max_sum(n/4)) + max(fibonacci(n/5), max_sum(n/5)) + n\n\n    return max_sum(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        max1 = get_max_sum(n//2)\n        max2 = get_max_sum(n//3)\n        max3 = get_max_sum(n//4)\n        max4 = get_max_sum(n//5)\n        return max(max1 + max2 + max3 + max4, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return 1\n\n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * (n+1) // 2\n    elif n == 3:\n        return n * (n+1) // 3\n    elif n == 4:\n        return n * (n+1) // 4\n    elif n == 5:\n        return n * (n+1) // 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nprint(get_max_sum(10))  # Output: 66"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n\n    elif n == 2:\n        return 3\n\n    elif n == 3:\n        return 9\n\n    elif n == 4:\n        return 25\n\n    elif n == 5:\n        return 81\n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 15\n    \n    def find_max_sum(f, n):\n        if n == 1:\n            return f(1)\n        elif n == 2:\n            return f(1) + f(2)\n        elif n == 3:\n            return f(1) + f(2) + f(3)\n        elif n == 4:\n            return f(1) + f(2) + f(3) + f(4)\n        elif n == 5:\n            return f(1) + f(2) + f(3) + f(4) + f(5)\n    \n    max_sum = find_max_sum(f, n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    # Find the length of the first element of the list\n    length = len(input_list[0])\n    \n    # Loop through the rest of the list\n    for element in input_list[1:]:\n        # Update the length if the current element has a longer length\n        if len(element) > length:\n            length = len(element)\n    \n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    \n    # Check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the tuple contains duplicates or not\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = set(test_tup)\n    return len(test_tup) == len(unique)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character by iterating over the dictionary and looking for the first\n    # character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no character has a count of 1, there's no non-repeating character\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in that string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with count of 1 in the dictionary\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no character has count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the dictionary and return the first key with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment its count by 1\n            char_count[char] += 1\n        # if the character is not already in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # find the first character with a count of 1 in the dictionary\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return \"None\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there is no non-repeating character in the string, then the function will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    non_repeating_char = None\n    for char, count in char_count.items():\n        if count == 1:\n            non_repeating_char = char\n            break\n\n    return non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already present in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not present in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # iterate through each character in the string again and find the first non-repeating character\n    for char in str1:\n        # if the character has a count of 1, return it as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"All characters are repeated.\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # check if the string starts and ends with the same character\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string)!= None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Check if the three numbers are in ascending order\n    if sorted_numbers == [a, b, c]:\n        # If they are in ascending order, return the median\n        return (a + b + c) / 3\n    else:\n        # If they are not in ascending order, return the middle number\n        return sorted_numbers[1]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # calculate the length of the list\n    length = len(numbers)\n\n    # if the length of the list is odd, the median is the middle number\n    if length % 2 == 1:\n        median = numbers[length // 2]\n    # if the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import random\n\ndef quickselect(arr, k):\n    \"\"\"\n    QuickSelect algorithm to find the kth smallest element in the array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers using the QuickSelect algorithm.\n    \"\"\"\n    arr = [a, b, c]\n    arr.sort()\n\n    if len(arr) % 2 == 1:\n        return quickselect(arr, len(arr) // 2)\n    else:\n        return (quickselect(arr, len(arr) // 2 - 1), quickselect(arr, len(arr) // 2))"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import random\n\ndef quickselect(arr, k):\n    \"\"\"\n    Quickselect algorithm to find kth smallest element in an array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    pivot = random.choice(arr)\n    lows = [x for x in arr if x < pivot]\n    highs = [x for x in arr if x > pivot]\n    pivots = [x for x in arr if x == pivot]\n\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers using the quickselect algorithm.\n    \"\"\"\n    arr = [a, b, c]\n    arr.sort()\n    k = len(arr) // 2\n    median = quickselect(arr, k)\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    middle = len(num_list) // 2\n    \n    if len(num_list) % 2 == 0:\n        median = (num_list[middle-1] + num_list[middle])/2\n    else:\n        median = num_list[middle]\n        \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    middle_number = len(sorted_numbers)//2\n    if len(sorted_numbers)%2 == 0:\n        return (sorted_numbers[middle_number-1] + sorted_numbers[middle_number])/2\n    else:\n        return sorted_numbers[middle_number]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle numbers\n    mid1 = sorted_numbers[1]\n    mid2 = sorted_numbers[2]\n\n    # Calculate the median\n    median = (mid1 + mid2) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the index of the middle number\n    mid = len(sorted_nums) // 2\n\n    # Check if the number of elements is odd or even\n    if len(sorted_nums) % 2 == 0:\n        # Return the average of the two middle numbers\n        return (sorted_nums[mid - 1] + sorted_nums[mid]) / 2\n    else:\n        # Return the middle number itself\n        return sorted_nums[mid]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = [0] * 10\n    for num in nums:\n        for digit in str(num):\n            digits[int(digit)] += 1\n    return sum(digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        sum_list.append(sum_num)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # Convert the number to string and convert all characters to digits using the map function\n        digits = list(map(int, str(num)))\n        # Add up the digits using a for loop\n        for digit in digits:\n            digit_sum += digit\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits of each number\n    result = []\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of characters\n        digits = [int(digit) for digit in str(num)]\n        # compute the sum of the digits and append it to the result list\n        result.append(sum(digits))\n    # return the result list\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        digit_sum += sum(digits)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_num = 0\n        while num > 0:\n            digit = num % 10\n            sum_num += digit\n            num //= 10\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of equal length\")\n        return\n\n    # Perform the mathematical bitwise xor operation across the tuples\n    xor_result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n\n    # Return the result\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    # loop through each element of the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i]\n        xor_result = xor_result ^ test_tup2[i]\n        \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the length of the tuples\n    length = len(test_tup1)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each index in the tuples\n    for i in range(length):\n        # Get the values at the current index\n        val1 = test_tup1[i]\n        val2 = test_tup2[i]\n        \n        # Perform the mathematical bitwise xor operation on the values\n        xor_result = val1 ^ val2\n        \n        # Append the result to the result list\n        result.append(xor_result)\n        \n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # Loop through the tuples and perform bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = (0,) * len(test_tup1)\n    # Loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Loop through the tuples and perform bitwise xor on each pair\n    for i in range(len(test_tup1)):\n        test_tup1[i] ^= test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple([x^y for x, y in zip(test_tup1, test_tup2)])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Define a function to perform bitwise xor operation\n    def bitwise_xor_func(num1, num2):\n        return num1 ^ num2\n    \n    # Call the function to perform bitwise xor operation\n    xor_result = bitwise_xor_func(test_tup1[0], test_tup2[0])\n    for i in range(1, len(test_tup1)):\n        xor_result = bitwise_xor_func(xor_result, test_tup1[i])\n        xor_result = bitwise_xor_func(xor_result, test_tup2[i])\n    \n    # Return the result\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Convert the set to a list to get the tuple representation\n    unique_list = list(unique_set)\n    # Return the length of the list\n    return len(unique_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    for item in test_list:\n        if tuple(item) in unique_freq:\n            unique_freq[tuple(item)] += 1\n        else:\n            unique_freq[tuple(item)] = 1\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each tuple\n    freq = {}\n    # Loop through the list and count the frequency of each tuple\n    for item in test_list:\n        if tuple(item) in freq:\n            freq[tuple(item)] += 1\n        else:\n            freq[tuple(item)] = 1\n    # Return the total number of unique tuples\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Iterate over the elements in the list\n    for elem in test_list:\n        # Check if the tuple exists in the dictionary\n        if elem in freq_dict:\n            # Increment the frequency of the tuple\n            freq_dict[elem] += 1\n        else:\n            # Add the tuple to the dictionary with a frequency of 1\n            freq_dict[elem] = 1\n    \n    # Return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if tuple(sorted(item)) in freq_dict:\n            freq_dict[tuple(sorted(item))]['count'] += 1\n        else:\n            freq_dict[tuple(sorted(item))] = {'count': 1}\n    return freq_dict"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tup = []\n        for j in range(len(test_tup1[i])):\n            new_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i] + test_tup2[i][j])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(row)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple with all zeros\n    result_tup = (0,)*len(test_tup1[0])\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[0])):\n            # add the corresponding elements of the tuples and store the result in the result tuple\n            result_tup[j] += test_tup1[i][j] + test_tup2[i][j]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = ()\n        for j in range(len(test_tup1[i])):\n            new_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result.append(new_tuple)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check if both tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same number of elements\")\n        return\n    \n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # check if the element is a tuple\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            # recursively call the function to perform index wise addition of tuple elements\n            temp = add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            # if the element is not a tuple, add it to the result list\n            temp = test_tup1[i] + test_tup2[i]\n        # add the element to the result list\n        result.append(temp)\n        \n    # return the final result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # First, check if the length of the two input tuples are equal or not.\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of input tuples should be equal.\")\n        return\n    \n    # If the length of the two input tuples are equal, add the elements of the two tuples element by element.\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    \n    # Return the modified tuple.\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(\"The minimum number is\",a)\n    else:\n        print(\"The minimum number is\",b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a <= b else b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in the tuple.\") \n    else: \n        print(f\"{tuplex} does not exist in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in a tuple and a tuple of elements to search for.\n    It returns True if the element exists in the tuple, otherwise it returns False.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in two arguments - tuplex (a tuple) and tuple1 (another tuple). \n    The function checks whether the element exists in the second tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists in the tuple.\")\n    else:\n        print(f\"{tuple1} does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n    while x!= 0:\n        if x % 2 == 0:\n            parity += 1\n        x //= 2\n    return parity % 2 == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: #if the number is even\n        return \"Even number\"\n    else: #if the number is odd\n        return \"Odd number\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity of the number is odd, False otherwise.\n    '''\n    if x%2 == 0: \n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a positive integer x as input and returns True if the parity of x is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Get the parity of the given number\n    parity = x % 2\n    \n    # Check if the parity is odd or even\n    if parity == 0:\n        # If parity is even, return True\n        return True\n    else:\n        # If parity is odd, return False\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The number is even\")\n    else: \n        print(\"The number is odd\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    n_str = str(n)\n    \n    # check if the given number is already the maximum number\n    if int(n_str) == 9 * 10 ** 9:\n        return int(n_str)\n    \n    # convert the given number to a list of digits\n    n_list = [int(d) for d in n_str]\n    \n    # loop through each digit and compare its value with the next digit\n    for i in range(len(n_list)):\n        # if the current digit is less than the next digit, swap the values\n        if n_list[i] < n_list[i+1]:\n            n_list[i], n_list[i+1] = n_list[i+1], n_list[i]\n    \n    # convert the list of digits back to a string and convert it back to an integer\n    next_bigger = int(''.join(map(str, n_list)))\n    \n    # increment the next bigger number by 1\n    next_bigger += 1\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes an integer as input and rearrange the digits of the number in such a way that the next bigger number can be obtained.\n    \"\"\"\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    \n    # Find the index of the largest digit\n    largest_index = max(range(len(num_list)), key=lambda i: num_list[i])\n    \n    # Rearrange the digits of the number so that the largest digit is placed at the end of the list\n    num_list[largest_index], num_list[-1] = num_list[-1], num_list[largest_index]\n    \n    # Convert the list of digits back to an integer\n    next_bigger_num = int(''.join(num_list))\n    \n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    # Rearrange the digits in descending order\n    digits.sort(reverse=True)\n    # Convert the sorted digits back to an integer\n    result = int(''.join(digits))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # split the number into digits\n    digits = [int(digit) for digit in str(n)]\n    # reverse the digits\n    digits.reverse()\n    # check if the reversed digits are all 9s\n    if all(digit == 9 for digit in digits):\n        # if all digits are 9s, return 10\n        return 10\n    # find the first index where the digit is 0\n    first_zero_index = next((i for i, digit in enumerate(digits) if digit == 0), None)\n    # if the first index is None, return None\n    if first_zero_index is None:\n        return None\n    # rearrange the digits such that the first index is at the end\n    digits[first_zero_index], digits[-1] = digits[-1], digits[first_zero_index]\n    # join the digits back into a string and convert it to an integer\n    rearranged_number = int(''.join(str(digit) for digit in digits))\n    # check if the rearranged number is equal to the original number plus 1\n    if rearranged_number == n + 1:\n        # if it is, return the rearranged number\n        return rearranged_number\n    # if not, return the original number\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the current number\n    current = n\n\n    # Convert the number to a string\n    current_str = str(current)\n\n    # Initialize a list to store the digits of the current number\n    digits = []\n\n    # Loop through each digit in the current number string\n    for digit in current_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Append the integer to the list of digits\n        digits.append(digit_int)\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Combine the digits in a new number string\n    new_digits_str = \"\"\n    for digit_int in digits:\n        # Convert the integer back to a string\n        new_digit_str = str(digit_int)\n        # Append the string to the new digits string\n        new_digits_str += new_digit_str\n\n    # Convert the new digits string to an integer\n    new_number = int(new_digits_str)\n\n    # Return the next bigger number\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Convert the given number to a string\n    s = str(n)\n\n    # Initialize the digits list\n    digits = list(map(int, s))\n\n    # Reverse the order of the digits\n    digits.reverse()\n\n    # Find the index of the smallest digit\n    smallest_digit = min(digits)\n\n    # Find the index of the smallest digit in the digits list\n    index = digits.index(smallest_digit)\n\n    # Replace the smallest digit with its next smaller digit\n    if smallest_digit < 9:\n        digits[index] = smallest_digit + 1\n    else:\n        digits[index] = 0\n\n    # Convert the list of digits back to a string\n    next_bigger = ''.join(map(str, digits))\n\n    # Convert the next bigger number to an integer\n    next_bigger = int(next_bigger)\n\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num = str(n)\n    # Initialize the next bigger number\n    next_bigger = 0\n    \n    # Loop through each digit of the number\n    for digit in num:\n        # Get the value of the digit\n        value = int(digit)\n        # Calculate the next bigger digit value\n        next_value = value + 1\n        # Convert the next bigger digit value to a string and append it to the next bigger number string\n        next_bigger_string = str(next_value)\n        next_bigger = int(next_bigger_string)\n    \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Helper function to swap digits at indices i and j in a string\n    def swap(s, i, j):\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        return ''.join(s)\n\n    # Iterate through each digit in the number and try to find the next bigger one\n    for i in range(len(str(n))):\n        # Find the digit that has the largest value that is smaller than the current digit\n        next_digit = n % 10\n        for j in range(10):\n            if j > next_digit:\n                # Swap the digits to get the next bigger one\n                n = int(swap(str(n), i, j))\n                break\n\n    # Return the next bigger number\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize variables\n    num_str = str(n)\n    length = len(num_str)\n    max_num = 0\n\n    # check each digit of the number\n    for i in range(length):\n        # check if the digit is 9\n        if int(num_str[i]) == 9:\n            # create a new number with the same digits except for the digit at index i\n            new_num = rearrange_digit(int(num_str[i]), i)\n            # check if the new number is greater than the current maximum\n            if int(new_num) > max_num:\n                max_num = int(new_num)\n\n    # return the maximum number\n    return max_num\n\n\ndef rearrange_digit(digit, index):\n    '''\n    Write a function to rearrange the digits of a given number except for the digit at the given index.\n    '''\n    # initialize variables\n    num_str = str(digit)\n    length = len(num_str)\n    new_num = 0\n    # set the digit at the given index to 9\n    num_str[index] = '9'\n\n    # check each digit of the number\n    for i in range(length):\n        # check if the digit is not the digit at the given index\n        if i!= index:\n            # check if the digit is 9\n            if int(num_str[i]) == 9:\n                # create a new number with the same digits except for the digit at index i\n                new_num = int(num_str[i]) * 10 ** (length - i - 1) + int(num_str[i + 1]) * 10 ** (length - i - 2) + int(num_str[i + 2]) * 10 ** (length - i - 3) + int(num_str[i + 3]) * 10 ** (length - i - 4) + int(num_str[i + 4]) * 10 ** (length - i - 5) + int(num_str[i + 5]) * 10 ** (length - i - 6) + int(num_str[i + 6]) * 10 ** (length - i - 7) + int(num_str[i + 7]) * 10 ** (length - i - 8) + int(num_str[i + 8]) * 10 ** (length - i - 9) + int(num_str[i + 9]) * 10 ** (length - i - 10)\n                # check if the new number is greater than the current maximum\n                if new_num > max_num:\n                    max_num = new_num\n\n    # return the maximum number\n    return str(new_num)\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n    \n    # Create a dictionary to store the frequency of each element in the first array\n    freq = {}\n    for num in nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the second array and add the smallest element to the min heap if it exists in the dictionary\n    for num in nums2:\n        if num in freq and freq[num] > 0:\n            freq[num] -= 1\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num, freq[num]))\n            else:\n                heapq.heappushpop(min_heap, (num, freq[num]))\n    \n    # Initialize a list to store the pairs\n    pairs = []\n    \n    # Iterate through the min heap and add the pairs to the list\n    while len(min_heap) > 0:\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n    \n    # Reverse the list to get the k largest pairs\n    return pairs[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Use a min-heap to keep track of the smallest k elements\n    min_heap = []\n\n    # Loop through the first array and add the smallest element to the heap\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n\n        # If the heap size exceeds k, remove the smallest element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Initialize a list to store the result pairs\n    result = []\n\n    # Loop through the second array and add the smallest elements from the heap to the result list\n    for num in nums2:\n        if len(min_heap) > 0 and min_heap[0] > num:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, num)\n        if len(min_heap) == k:\n            result.append((min_heap[0], min_heap[-1]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n\n    # Iterate through the first array and for each element, create a tuple (second element, index) and add it to the min heap\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (nums1[i], i))\n\n        # If the size of the min heap is greater than k, remove the smallest element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Iterate through the second array and for each element, create a tuple (first element, index) and add it to the min heap\n    for i in range(len(nums2)):\n        heapq.heappush(min_heap, (nums2[i], i))\n\n        # If the size of the min heap is greater than k, remove the smallest element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Initialize a result list\n    result = []\n\n    # Iterate through the min heap and add the elements to the result list\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (-num1*num2, (num1, num2)))\n            \n            if len(heap) > k:\n                heapq.heappop(heap)\n            \n            if len(result) == k:\n                return result\n            \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n    # Iterate through the arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the pair to the heap if the size of the heap is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # If the size of the heap is greater than or equal to k, compare the current pair with the smallest pair in the heap\n            else:\n                if (num1 + num2) < heapq.heappop(min_heap)[0]:\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n    \n    # Return the k smallest pairs\n    return [(pair[1][0], pair[1][1]) for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the input lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Find the intersection of the sets and convert it back to a list\n    intersection = list(nums1.intersection(nums2))\n\n    # Sort the intersection list in ascending order\n    heapq.heapify(intersection)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the intersection list until k elements are found\n    for i in range(k):\n        # Extract the first element of the heap and add it to the result\n        result.append(heapq.heappop(intersection))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate over the first array\n    for num1 in nums1:\n        # Iterate over the second array\n        for num2 in nums2:\n            # Add the pair to the min heap if the size of the heap is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # If the size of the heap is equal to k, compare the first element of the pair with the smallest element in the heap\n            elif len(min_heap) == k:\n                if num1 + num2 < heapq.heappop(min_heap)[0]:\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n    # Extract the k smallest pairs from the heap\n    pairs = []\n    while len(min_heap) > 0:\n        pairs.append(heapq.heappop(min_heap)[1])\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the first array in ascending order\n    nums1.sort()\n    \n    # Initialize a heap with the first element of the second array\n    heapq.heappush(nums2, 0)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate k times\n    for i in range(k):\n        # Find the pair with the smallest sum from the heap\n        smallest = -heapq.heappop(nums2)\n        \n        # Add the pair to the result list\n        result.append((nums1[-1], smallest))\n        \n        # Add the second element of the first array to the heap\n        heapq.heappush(nums2, smallest + nums1[-1])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize a min-heap to store the smallest k pairs\n    min_heap = []\n\n    # Loop through the first array\n    for num1 in nums1:\n        # Create a tuple containing the number from the first array and the number from the second array\n        pair = (num1, -1)\n\n        # If the length of the min-heap is less than k, add the pair to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, pair)\n        # Otherwise, if the length of the min-heap is equal to k, check if the first element of the pair is smaller than the smallest element in the heap\n        elif pair[0] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, pair)\n        # Otherwise, do nothing\n\n    # Initialize a list to store the result\n    result = []\n\n    # Loop through the second array\n    for num2 in nums2:\n        # If the length of the min-heap is less than k, do nothing\n        if len(min_heap) < k:\n            continue\n        # Otherwise, pop the smallest pair from the heap and add it to the result list\n        else:\n            pair = heapq.heappop(min_heap)\n            result.append(pair)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Add the first element of each array to the heap\n    heapq.heappush(min_heap, (nums1[0], nums2[0]))\n\n    # Initialize the result array\n    result = []\n\n    # Iterate through the remaining elements in both arrays\n    i = 0\n    j = 0\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        # If the smallest pair in the heap is greater than the current elements of the arrays, remove it and add the next pair\n        if heapq.heappop(min_heap) > (nums1[i], nums2[j]):\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            k -= 1\n        # If the smallest pair in the heap is smaller than the current elements of the arrays, increment the index of the current array\n        elif heapq.heappop(min_heap) < (nums1[i], nums2[j]):\n            j += 1\n        # If the smallest pair in the heap is equal to the current elements of the arrays, increment the indices of both arrays and decrement k\n        else:\n            i += 1\n            j += 1\n            k -= 1\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize minimum product to be infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it's less than the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    result = []\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n                result = [list1[i], list1[j]]\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize the minimum product and the minimum tuple to be the first tuple in the list\n    min_product = list1[0][0] * list1[0][1]\n    min_tuple = (list1[0][0], list1[0][1])\n    \n    # Loop through the rest of the list and find the minimum product and minimum tuple\n    for i in range(1, len(list1)):\n        product = list1[i][0] * list1[i][1]\n        if product < min_product:\n            min_product = product\n            min_tuple = (list1[i][0], list1[i][1])\n    \n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product of pairs of tuples in a given list.\n\n    Parameters:\n    lst (list): a list of tuples of any length\n\n    Returns:\n    float: the minimum product of pairs of tuples in the list\n    \"\"\"\n    if len(lst) == 0:\n        return 1.0\n\n    min_product = 1.0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            min_product = min(min_product, lst[i][0] * lst[j][1])\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Find the minimum value in the list\n    min_value = min(list1)\n\n    # Initialize the minimum product to be the maximum possible value\n    min_product = float('inf')\n\n    # Loop through all the tuples in the list\n    for i in range(len(list1)):\n        # Loop through all the tuples in the list\n        for j in range(len(list1)):\n            # Check if the current tuple is within the range of the minimum value\n            if (i!= j) and (list1[i][0] * list1[j][0]) < min_value * min_value:\n                # Update the minimum product if the current tuple is within the range\n                min_product = min(min_product, list1[i][0] * list1[j][0])\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n    # Initialize the list of tuples\n    pairs = []\n    # Iterate through each element in the list\n    for i in range(len(list1)):\n        # Iterate through each remaining element in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two elements and append the tuple to the list\n            pair = (list1[i], list1[j])\n            pairs.append(pair)\n            # Update the minimum product if the current product is smaller\n            if pair[0] * pair[1] < min_product:\n                min_product = pair[0] * pair[1]\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create a variable to hold the minimum value\n    min_val = None\n\n    # loop through the list and find the minimum value\n    for i in listval:\n        if min_val is None or i < min_val:\n            min_val = i\n\n    # return the minimum value\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return \"Empty list\"\n    \n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for val in listval[1:]:\n            if val < minval:\n                minval = val\n        return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for item in listval:\n        if item < min_value:\n            min_value = item\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]  # initialize minimum value as first value in list\n    for num in listval:\n        if num < min_num:  # if current value is smaller than minimum, update minimum\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces\n    word = re.sub('_','', word)\n    # Capitalize the first letter of each word\n    word = word.capitalize()\n    # Convert the word to camel case\n    camel_case_word = ''\n    for letter in word:\n        if letter.islower():\n            camel_case_word += letter\n        else:\n            camel_case_word += letter.capitalize()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    pattern = re.compile(r'_(.?)(?=_)')\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces\n    word = re.sub('_','', word)\n    # Split the word into a list of words\n    words = word.split()\n    # Capitalize the first letter of each word except the first one\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    # Join the words back together\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into individual words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # convert the words to camel case\n    camel_case = ''.join(word.capitalize() for word in words)\n    # return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Capitalize the first letter of each word except for the first word\n    capitalized_words = []\n    for i, word in enumerate(words):\n        if i == 0:\n            capitalized_words.append(word)\n        else:\n            capitalized_words.append(word.capitalize())\n    \n    # Join the capitalized words back into a string\n    return ''.join(capitalized_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase\n    first_letter = words[0][0].upper()\n    # Convert the rest of the letters to lowercase\n    rest_of_letters = ''.join([letter.lower() for letter in words[0][1:]])\n    # Concatenate the first letter, rest of letters and the rest of the words\n    camel_case_word = first_letter + rest_of_letters + ''.join([word[len(first_letter):].capitalize() for word in words[1:]])\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert snake case to camel case\n    words = re.findall(r'\\w+', word)\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(.?)(?=[A-Z])'\n    capitalize_next = True\n    result = \"\"\n\n    for char in word:\n        if char.isupper():\n            if capitalize_next:\n                result += char.upper()\n                capitalize_next = False\n            else:\n                result += char\n        elif char == '_':\n            capitalize_next = True\n        else:\n            result += char\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase and split it into words\n    words = word.lower().split('_')\n    # Initialize an empty string to store the camel cased version of the word\n    camel_cased = ''\n    # Iterate over the words and append the first letter of each word to the camel cased string\n    for i in range(len(words)):\n        if i == 0:\n            camel_cased += words[i]\n        else:\n            camel_cased += words[i][0].upper() + words[i][1:]\n    # Return the camel cased version of the word\n    return camel_cased"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words by underscore\n    words = re.findall(r'([A-Za-z0-9]+)', word)\n    # Convert each word to camel case\n    camel_case = ''.join([word.title() for word in words])\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # initialize an empty list to store the even numbers\n    even_list = []\n    # loop through the list\n    for num in l:\n        # if the number is even, append it to the even_list\n        if num % 2 == 0:\n            even_list.append(num)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n    # Loop through each element in the input list\n    for num in l:\n        # If the number is odd, add it to the even_numbers list\n        if num % 2 == 1:\n            even_numbers.append(num)\n    # Return the even_numbers list containing only even numbers\n    return even_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a given list.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        A new list with all odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"The list is too short to extract the nth element.\")\n    else:\n        for i in range(len(list1)):\n            if i == n-1:\n                print(list1[i])\n            elif i == n:\n                break"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(list1) or n <= 0:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        raise ValueError(\"The length of the list should be greater than or equal to the value of n.\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i]\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        # checking if the input list is a list of tuples\n        if type(list1[0]) == tuple:\n            # checking if the input n is a valid integer\n            if type(n) == int:\n                # checking if the index n is within range of the list\n                if n >= 0 and n <= len(list1)-1:\n                    # extracting the nth element from the list\n                    return list1[n]\n                else:\n                    # if n is not within range of the list, raise an error\n                    raise ValueError(\"Index out of range.\")\n            else:\n                # if n is not an integer, raise an error\n                raise TypeError(\"n must be an integer.\")\n        else:\n            # if the input list is not a list of tuples, raise an error\n            raise TypeError(\"Input list must be a list of tuples.\")\n    except ValueError as ve:\n        # if there is an error with the input, print the error message\n        print(ve)\n    except TypeError as te:\n        # if there is an error with the input, print the error message\n        print(te)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        return \"Error: Input should be a list\"\n    if type(n)!= int:\n        return \"Error: Input should be an integer\"\n    if n < 1 or n > len(list1):\n        return \"Error: n should be between 1 and length of list\"\n\n    return list1[n-1][0]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in the first list that exists in the second list.\n    '''\n\n    # Loop through each value in the first list\n    for i in list1:\n        # If the value is in the second list, return True immediately\n        if i in list2:\n            return True\n\n    # If we make it through the entire loop without finding any overlap, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        temp = list2\n        list2 = list1\n        list1 = temp\n\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # check if both lists are empty or not\n    if not list1 or not list2:\n        return False\n    \n    # convert the lists to sets for faster search\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # check if any value in set1 is also present in set2\n    for value in set1:\n        if value in set2:\n            return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a Python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Loop through the list1 and check if any value exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    \n    # If no values in list1 exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a Python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the product of the first element and the largest element in the array\n    product1 = arr[0] * arr[1]\n\n    # Find the product of the second element and the second largest element in the array\n    product2 = arr[1] * arr[2]\n\n    # Return the pair with the highest product\n    return (product1, product2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    # Initialize max and min product and their indices\n    max_product = float('-inf')\n    max_product_index = 0\n    min_product = float('inf')\n    min_product_index = 0\n    \n    # Iterate through the array and calculate the max and min products\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_index = i\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_product_index = i\n    \n    # Return the indices of the max and min products\n    return max_product_index, min_product_index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        temp_product = arr[i] * min_product\n        if temp_product > max_product:\n            max_product = temp_product\n            min_product = arr[i]\n        elif temp_product < min_product:\n            min_product = temp_product\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the pair with highest product\n    return arr[0], arr[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least 2 elements.\"\n\n    max_product = float('-inf')\n    max_pair = (-float('inf'), -float('inf'))\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair of integers with the highest product.\n    If there are multiple pairs with the same highest product, the function will return the pair with the smallest index.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    min_product = float('inf')\n    min_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            if product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_pair[0] * max_pair[1]:\n                max_pair = (arr[i] * arr[j], arr[i] * max(arr[j], max_pair[1]))\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize the maximum product to be the first element of the array\n    max_product = arr[0]\n\n    # Initialize the index of the minimum element\n    min_index = 0\n\n    # Loop through the array from the second element\n    for i in range(1, len(arr)):\n\n        # Update the maximum product if the current element multiplied with the previous maximum product is greater\n        if arr[i] * max_product > max_product:\n            max_product = arr[i]\n            min_index = i\n\n        # Update the minimum element if the current element is smaller than the current minimum element\n        elif arr[i] < arr[min_index]:\n            min_index = i\n\n    # Return the pair with the maximum product\n    return arr[min_index], max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Sort the array in decreasing order\n    arr.sort(reverse=True)\n    # Initialize variables\n    max_product = arr[0] * arr[1]\n    second_max_product = arr[0] * arr[1]\n    # Find the pair with highest product\n    for i in range(len(arr)-2):\n        third_max = max(arr[i], arr[i+1], arr[i+2])\n        if third_max * arr[i+3] > max_product:\n            second_max_product = max_product\n            max_product = third_max * arr[i+3]\n        elif third_max * arr[i+3] > second_max_product:\n            second_max_product = third_max * arr[i+3]\n    # Return the pair with the highest product\n    return max_product, second_max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # Initialize max_product and current_max to negative infinity\n    max_product = float('-inf')\n    current_max = float('-inf')\n\n    # Iterate over the array and update max_product and current_max as needed\n    for num in arr:\n        # Update max_product if the product of current_max and num is greater\n        if current_max * num > max_product:\n            max_product = current_max * num\n\n        # Update current_max if the current_max is less than num\n        if current_max < num:\n            current_max = num\n\n    # Return the maximum of max_product and current_max\n    return max(max_product, current_max)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store common elements\n    common_elements = {}\n\n    # Loop through the list of tuples\n    for tup in Input:\n        # Get the first element from the tuple\n        first_element = tup[0]\n\n        # If the element is not already in the dictionary, add it with a value of 1\n        if first_element not in common_elements:\n            common_elements[first_element] = 1\n        # If the element is already in the dictionary, increment its value by 1\n        else:\n            common_elements[first_element] += 1\n\n    # Find the element with the highest value in the dictionary\n    max_element = max(common_elements, key=common_elements.get)\n\n    # Return the element with the highest value\n    return max_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n\n    for tuple_ in Input:\n        first_element = tuple_[0]\n\n        if common_first_element is None:\n            common_first_element = first_element\n        else:\n            if first_element == common_first_element:\n                pass\n            else:\n                common_first_element = None\n                break\n\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    This function will take a list of tuples as input and will return a dictionary with keys being the first element of each tuple and values being a list of tuples containing that element.\n    The function will also return a dictionary with keys being the common first element of each tuple and values being a list of tuples containing all tuples that share that element as their first element.\n    '''\n    common_elements = {}\n    common_tuples = {}\n    \n    # Loop through the input list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n        \n        # Check if the first element is already in the common_elements dictionary\n        if first_element in common_elements:\n            # If it is, add the tuple to the corresponding list of tuples\n            common_elements[first_element].append(tup)\n        else:\n            # If not, add the tuple to a new list of tuples for the first element and add it to the dictionary\n            common_elements[first_element] = [tup]\n        \n        # Check if the first element is already in the common_tuples dictionary\n        if first_element in common_tuples:\n            # If it is, add the tuple to the corresponding list of tuples\n            common_tuples[first_element].append(tup)\n        else:\n            # If not, add the tuple to a new list of tuples for the first element and add it to the dictionary\n            common_tuples[first_element] = [tup]\n            \n    return common_elements, common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for tuple_ in Input:\n        if common_first is None or tuple_[0] < common_first:\n            common_first = tuple_[0]\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples and returns a dictionary with keys as common first element and values as their corresponding list of tuples.\n    '''\n    first_dict = {}\n    for i in range(len(Input)):\n        if not Input[i][0] in first_dict:\n            first_dict[Input[i][0]] = [Input[i]]\n        else:\n            first_dict[Input[i][0]].append(Input[i])\n    return first_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_list = []\n    for tup in Input:\n        first = tup[0]\n        if first not in common_list:\n            common_list.append(first)\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Function to find common elements in list\n    def find_common_elements(lst):\n        common_elements = []\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i][0] == lst[j][0]:\n                    common_elements.append((lst[i][0], lst[i][1]))\n        return common_elements\n\n    # Find common elements in list\n    common_elements = find_common_elements(Input)\n\n    # Group tuples with common first element\n    grouped_tuples = []\n    for tup in Input:\n        if tup[0] in [x[0] for x in common_elements]:\n            grouped_tuples.append(tup)\n\n    return grouped_tuples\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input: \n        if len(set(tup[1:])) == 1:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_element is None:\n                    common_element = Input[i][0]\n                else:\n                    common_element = common_element, Input[i][0]\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize variables to store maximum length and its element\n    max_len = 0\n    max_element = None\n\n    # Iterate through the list and update the maximum length and its element\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n\n    # Return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None \n    for element in lst: \n        if len(element) > max_len: \n            max_len = len(element) \n            max_element = element \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = \"\"\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(s) for s in lst)\n    for s in lst:\n        if len(s) == max_len:\n            print(s)\n    return None"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Rounding the numbers\n    list1 = [round(i) for i in list1]\n    \n    # Calculating the total sum\n    total_sum = sum(list1)\n    \n    # Multiplying the total sum by the length of the list\n    result = total_sum * len(list1)\n    \n    # Printing the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the total sum\n    total_sum = sum(list1)\n\n    # Round the numbers in the list\n    rounded_list = [round(num) for num in list1]\n\n    # Print the total sum multiplied by the length of the list\n    print(total_sum * len(rounded_list))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num)\n    print(\"The total sum is\", total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(\"The total sum of rounded numbers is:\", total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    total = 0\n    i = 0\n    while i < n:\n        total += i ** 3\n        i += 2\n    return total\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to keep track of the cube sum\n    cube_sum = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # If it is, cube it and add it to the cube sum\n            cube_sum += i ** 3\n    \n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        cube_num = i**3\n        sum += cube_num\n        count += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    return \" \".join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate each element of the tuple by the delimiter\n    concatenated_str = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_list = []\n    for item in test_tup:\n        concatenated_list.append(item + delimiter)\n    return concatenated_list"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initializing the sum and count of cubes to zero\n    sum_of_cubes = 0\n    count_of_cubes = 0\n\n    # Looping through first n natural numbers\n    for i in range(n):\n        # Finding the cube of the current natural number\n        cube = i ** 3\n\n        # Adding the cube to the sum of cubes\n        sum_of_cubes += cube\n\n        # Incrementing the count of cubes by 1\n        count_of_cubes += 1\n\n    # Calculating the average of cubes\n    average_of_cubes = sum_of_cubes / count_of_cubes\n\n    # Returning the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n\n    # Initialize variables\n    sum = 0\n    count = 0\n\n    # Calculate cubes of first n natural numbers\n    for i in range(1, n+1):\n        cube = i*i*i\n        sum += cube\n        count += 1\n\n    # Find the average of cubes\n    average = sum / count\n\n    # Print the result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i**3\n    \n    average = cubes / (n**3)\n    \n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total += i ** 3\n        count += 1\n\n    return total / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cube = sum_cubes/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # calculate cubes of first n natural numbers and store them in a list\n    cubes = [i**3 for i in range(1,n+1)]\n\n    # iterate over the list and add up the cubes\n    for cube in cubes:\n        sum_of_cubes += cube\n        count += 1\n\n    # find the average of the cubes\n    average = sum_of_cubes/count\n\n    # print the average of the cubes\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([x[-1] for x in test_tuple])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for i, string in enumerate(test_tuple):\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, val in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_list.append(val)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = []\n    for i in range(len(test_tuple)):\n        rear_index_tuple.append(test_tuple[i][-1])\n    return rear_index_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for item in test_tuple:\n        rear_tuple.append(item[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for item in test_tuple:\n        rear_index_elements.append(item[-1])\n    return rear_index_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    \n    for sublist in list1: \n        if x in sublist: \n            count += 1\n            \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, elem):\n    '''\n    This function takes a list and an element as input and returns the number of sublists in the list\n    that contain the given element.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if elem in lst[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of integers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    \n    # use re.sub() method to replace the matched pattern with the new format\n    return re.sub(pattern, r\"\\3-\\2-\\1\", dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(?<![\\d])-(?!-)'\n    return re.sub(pattern, '-', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # replace matches with desired format\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the date format regex pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # search for matches in the date string\n    match = re.search(pattern, dt)\n    \n    # check if a match was found\n    if match:\n        # split the date string into components\n        year, month, day = match.groups()\n        \n        # convert the components to the desired date format\n        new_date = day + '-' + month + '-' + year\n        \n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define regex pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of pattern in the input string\n    matches = re.findall(pattern, dt)\n\n    # Convert first matched group from yyyy-mm-dd to dd-mm-yyyy format\n    if matches:\n        return '{}-{}-{}'.format(matches[0][2], matches[0][1], matches[0][0])\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year, month, and day from the input string\n    year, month, day = map(int, dt.split('-'))\n    \n    # Convert the year to the format yyyy to start with\n    year_str = str(year)\n    \n    # Pad the month and day with leading zeros if necessary\n    month_str = str(month).zfill(2)\n    day_str = str(day).zfill(2)\n    \n    # Combine the year, month, and day into the desired format\n    new_dt = year_str + '-' + month_str + '-' + day_str\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.match() function to find the first match in the input string\n    match = re.match(pattern, dt)\n\n    # If a match is found, convert the date to dd-mm-yyyy format and return it\n    if match:\n        year = int(match.group(1))\n        month = int(match.group(2))\n        day = int(match.group(3))\n        return f'{day}-{month:02d}-{year:04d}'\n\n    # If no match is found, return the original input string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    \n    # Use the re.search() method to search for the date pattern in the string\n    match = re.search(pattern, dt)\n    \n    # If the date pattern is found, use the datetime module to convert it to dd-mm-yyyy format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the input string matches the date format\n    if re.match(pattern, dt):\n        # Split the input string into year, month, and day components\n        year, month, day = map(int, dt.split('-'))\n        # Convert the day, month, and year components to the desired format\n        new_dt = f'{day:02d}-{month:02d}-{year:04d}'\n        return new_dt\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n    new_dt = re.sub('(\\d{4})-(\\d{2})-(\\d{2})', '\\g<3>-\\g<2>-\\g<1>', dt)\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # We calculate the increments for each gap\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # We compare the current element with the previous one\n            # We swap them if they are in the wrong order\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # We halve the gap for the next iteration\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # set gap size\n    gap = n // 2\n    \n    while gap > 0:\n        # traverse array using gap size\n        for i in range(gap, n):\n            # calculate sub-array to be sorted\n            sub_array = my_list[i-gap:i+1]\n            # compare and swap elements if necessary\n            j = i\n            while j >= gap and sub_array[j-gap] > sub_array[j]:\n                my_list[j] = sub_array[j-gap]\n                j -= gap\n            my_list[j] = sub_array[j-gap]\n            \n        # decrease gap size\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Find the largest power of 2 <= n\n    power = 1\n    while power < n:\n        power *= 3\n    # Do gaps of power size 1, 4, 13, 40, 121, 362,...\n    while power >= 1:\n        # Last gap is n/2, so only gap of n/2 size needed\n        for i in range(power):\n            # Insertion sort for each gap size\n            for j in range(i, n, power):\n                # Swap if current element is greater than the next element\n                while j >= power and my_list[j] > my_list[j - power]:\n                    my_list[j], my_list[j - power] = my_list[j - power], my_list[j]\n        power //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the maximum gap between elements\n    n = len(my_list)\n    max_gap = n // 2\n    \n    while max_gap > 0:\n        # Insertion sort\n        for i in range(max_gap, n):\n            key = my_list[i]\n            j = i\n            while j >= max_gap and key < my_list[j - max_gap]:\n                my_list[j] = my_list[j - max_gap]\n                j -= max_gap\n            my_list[j] = key\n        \n        max_gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    \n    # Calculate the number of increments to use in each step of the sort\n    gap = n // 2\n    \n    # Iterate over the increments\n    while gap > 0:\n        \n        # Iterate over the gap elements in each step of the sort\n        for i in range(gap, n):\n            \n            # Swap elements if they are in the wrong order\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n        \n        # Decrease the gap by a factor of two\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2  # initial gap size\n\n    while gap > 0:\n        # insert sort for every gap size\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # reduce gap size\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must have the same length.')\n    # Check if all the elements in the tuples are of the same type\n    if not all(isinstance(tup, tuple) for tup in (test_tup1, test_tup2)):\n        raise TypeError('All the elements in the input tuples must be tuples.')\n    # Extract the elementwise and tuples from the input tuples\n    and_tup = tuple(tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    # Return the extracted and_tuple\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[tuple(i) for i in zip(test_tup1, test_tup2) if i[0] and i[1]]))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same number of elements\")\n    # initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n    # iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # check if the element is both True and False\n        if test_tup1[i] and test_tup2[i]:\n            and_tuples_list.append(True)\n        else:\n            and_tuples_list.append(False)\n    # return the list of elementwise and tuples\n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Create an empty list to store the and tuples\n    and_list = []\n    # Loop over the elements of the two tuples and add the element-wise and tuple to the list\n    for i in range(len(test_tup1)):\n        and_list.append((test_tup1[i] & test_tup2[i]))\n    # Return the and list as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = tuple([0] * len(test_tup1))\n\n    # Iterate through each element in the result tuple\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from the input tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n\n        # Perform the elementwise and operation on the corresponding elements and store the result in the result tuple\n        result_tup[i] = tup1_elem & tup2_elem\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of those tuples.\n    '''\n    result_tup = tuple(zip(test_tup1, test_tup2))\n    result_tup = tuple(map(lambda x: x[0] & x[1], result_tup))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The input tuples are not of equal length.\")\n        return None\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n\n    # Loop through the input tuples and calculate the elementwise and tuple\n    for i in range(len(test_tup1)):\n        and_tup = (test_tup1[i] & test_tup2[i])\n        and_list.append(and_tup)\n\n    # Return the elementwise and tuples\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # initialize a list to store the elementwise and tuples\n    result_list = []\n\n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements from the two tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # perform the elementwise and operation on the elements\n        and_elem = tup1_elem & tup2_elem\n        # add the result to the result list\n        result_list.append(and_elem)\n\n    # return the result list\n    return result_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the parabola has real roots\n    if disc > 0:\n        # Calculate the real roots and find the directrix\n        real_root1 = (-b + disc**0.5)/(2*a)\n        real_root2 = (-b - disc**0.5)/(2*a)\n\n        # Return the directrix as the average of the two roots\n        return (real_root1 + real_root2)/2\n\n    # If the parabola has no real roots\n    elif disc == 0:\n        return -b/(2*a)\n\n    # If the parabola has two complex roots\n    else:\n        return \"The parabola has two complex roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola given its coefficients a, b, and c.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        directrix = (-b + discriminant**(1/2)) / (2*a)\n    elif discriminant == 0:\n        directrix = -b / (2*a)\n    else:\n        directrix = \"The parabola has no real solutions.\"\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        return (-b + discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return \"There is no real root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    discriminant = b**2 - 4*a*c\n    \n    if discriminant >= 0:\n        return (-b + discriminant**0.5) / (2*a)\n    else:\n        return (-b - discriminant**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"No real roots\")\n    elif delta == 0:\n        print(\"One real root\")\n        x = (-b) / (2*a)\n        print(\"The directrix is x =\", x)\n    else:\n        print(\"Two real roots\")\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        print(\"The directrix is x1 =\", x1, \"and x2 =\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    if a**2 + b**2!= 4*c**2:\n        print(\"The equation of the parabola is not quadratic.\")\n        return\n\n    directrix = -0.5 * (b**2 - 4*a*c) / (2*a)\n\n    print(\"The directrix of the parabola is:\", directrix)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # If discriminant is positive, there exists a real root\n    if discriminant > 0:\n        return (-b + discriminant ** 0.5) / (2 * a)\n\n    # If discriminant is negative, there exists a real root\n    elif discriminant < 0:\n        return (-b - discriminant ** 0.5) / (2 * a)\n\n    # If discriminant is zero, there does not exist a root\n    else:\n        return \"There does not exist a real root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        x1 = (-b)/(2*a)\n        x2 = x1\n    else:\n        print(\"No real roots.\")\n        return\n    \n    print(\"The directrix of the parabola is:\", x1)\n    print(\"The second directrix of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        return ((-b + delta**0.5)/(2*a))\n    elif delta == 0:\n        return ((-b)/2*a)\n    else:\n        return \"No directrix exists\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is between roots\", root1, \"and\", root2)\n    # Check if the discriminant is zero\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix of the parabola is at\", root)\n    # Check if the discriminant is negative\n    else:\n        print(\"The parabola has no real roots\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element, otherwise False.\n    '''\n    # convert the lists to sets to remove duplicates and use set intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2 and not common:\n            common = True\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Initialize a set to store the common elements\n    common_elements = set()\n\n    # Iterate through the first list and check if each element is in the second list\n    for element in list1:\n        if element in list2:\n            # If an element is found in both lists, add it to the set of common elements\n            common_elements.add(element)\n\n    # Return True if at least one common element was found, False otherwise\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # converting the lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    # finding the intersection of the two sets\n    common = set1.intersection(set2)\n    # checking if the length of the intersection is greater than 0\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    # Initialize an empty list to store common elements\n    common_elements = []\n    # Loop through the first list and check if each element is in the second list\n    for element in list1:\n        if element in list2:\n            # If an element is found in both lists, add it to the common elements list\n            common_elements.append(element)\n    # If the common elements list is not empty, return True\n    if common_elements:\n        return True\n    # If the common elements list is empty, return False\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    common = []\n    for element in list1:\n        if element in list2:\n            common.append(element)\n    return len(common) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of each half of the trapezium\n    half1 = base1 * height\n    half2 = base2 * height\n\n    # calculate the total length of the trapezium\n    total = half1 + half2\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the area of the half of the trapezium that is above the base\n    area_above = 0.5 * base2 * (height - 0.5 * base2)\n\n    # calculate the area of the half of the trapezium that is below the base\n    area_below = 0.5 * base1 * (height - 0.5 * base1)\n\n    # calculate the difference between the area of the trapezium and the sum of the areas of its halves\n    area_difference = area - (0.5 * half1 + 0.5 * half2)\n\n    # calculate the median of the trapezium by averaging the area of the two halves that are above the base\n    median = 0.5 * area_above - area_difference / total\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Base of the trapezium\n    base = base1 + base2\n    \n    # Calculate the height of the trapezium\n    trapezium_height = height\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * (base * height)\n    \n    # Calculate the lengths of the bases and the top of the trapezium\n    top_base_length = 0.5 * (base1 + base2)\n    top_trapezium_length = base1 + base2 + height\n    \n    # Calculate the lengths of the sides of the trapezium\n    left_side_length = 0.5 * base1\n    right_side_length = 0.5 * (base2 + base1)\n    \n    # Calculate the area of the left side\n    left_side_area = (base1 * height)\n    # Calculate the area of the right side\n    right_side_area = (base2 * height)\n    \n    # Calculate the area of the trapezium\n    trapezium_area = (left_side_area + right_side_area)\n    \n    # Calculate the areas of the other two trapeziums\n    smaller_trapezium_area = trapezium_area - trapezium_height\n    smaller_trapezium_height = trapezium_height\n    \n    # Calculate the lengths of the smaller trapeziums\n    left_smaller_trapezium_length = 0.5 * base1\n    right_smaller_trapezium_length = 0.5 * (base2 + base1)\n    \n    # Calculate the area of the smaller trapezium\n    smaller_trapezium_area = (left_smaller_trapezium_length + right_smaller_trapezium_length)\n    \n    # Calculate the areas of the other two trapeziums\n    larger_trapezium_area = (area - trapezium_area)\n    \n    # Calculate the area of the larger trapezium\n    larger_trapezium_length = 0.5 * (height + smaller_trapezium_height)\n    larger_trapezium_area = (larger_trapezium_length * larger_trapezium_length)\n    \n    # Calculate the area of the median trapezium\n    median_area = (smaller_trapezium_area + larger_trapezium_area)\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (trapezium_height + larger_trapezium_length)\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    length = 0.5 * base1 + 0.5 * base2 + height\n\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the midpoints of the trapezium\n    midpoint1 = 0.5 * base1\n    midpoint2 = 0.5 * base1 + height\n\n    # Calculate the distances of the midpoints from the vertical\n    distance1 = abs(midpoint1 - height/2)\n    distance2 = abs(midpoint2 - height/2)\n\n    # Find the median length of the trapezium\n    median = max(distance1, distance2)\n\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Input:\n    base1, base2 - Lengths of the two bases of the trapezium\n    height - Height of the trapezium\n\n    Output:\n    The median length of the trapezium\n    '''\n\n    # Compute the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Compute the semi-perimeter of the trapezium\n    s_perimeter = 0.5 * (base1 + base2) * height\n\n    # Find the length of the hypotenuse\n    hypotenuse = (s_perimeter**2 - area)**0.5\n\n    # Compute the distance between the midpoints of the bases\n    distance = 0.5 * (base1 + base2)\n\n    # Compute the difference between the midpoint of the bases and the hypotenuse\n    diff = abs(distance - hypotenuse)\n\n    # Compute the number of points required to reach the midpoint of the bases\n    num_points = 2\n\n    # Compute the distance between the midpoints of the bases\n    distance = 0.5 * (base1 + base2)\n\n    # Check which side of the bases the midpoint falls on\n    if distance > hypotenuse:\n        num_points = 1\n\n    # Compute the distance between the midpoint of the bases and the hypotenuse on the opposite side\n    if distance > hypotenuse:\n        distance = abs(distance - hypotenuse)\n\n    # Compute the area of a triangle whose perimeter is equal to the hypotenuse\n    triangle_area = 0.5 * base1 * base2 * distance\n\n    # Compute the ratio of the area of the triangle to the area of the trapezium\n    triangle_ratio = triangle_area / area\n\n    # Compute the length of the smaller base\n    smaller_base = (base1 + base2) * triangle_ratio\n\n    # Compute the length of the larger base\n    larger_base = base1 * triangle_ratio\n\n    # Find the median length of the trapezium\n    median_length = min(smaller_base,larger_base)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the given base and height\n    trapezium_length = (base1 + base2) / 2 * height\n\n    # Sort the three sides of the trapezium\n    sides = sorted([base1, base2, trapezium_length])\n\n    # Calculate the median of the three sides\n    median = (sides[1] + sides[2]) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the base of the trapezium that is greater than the length of the other base\n    long_base = min(base1, base2)\n\n    # Calculate the length of the other base of the trapezium\n    short_base = max(base1, base2)\n\n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = (long_base + short_base) / 2\n\n    # Calculate the length of the perimeter of the trapezium\n    perimeter_trapezium = 2 * (long_base + short_base)\n\n    # Calculate the ratio of the trapezium's area to its perimeter\n    ratio = area / perimeter\n\n    # Calculate the length of the base that has the same ratio as the other base\n    same_ratio_base = perimeter_trapezium / (2 * ratio)\n\n    # Calculate the distance between the two bases and the hypotenuse\n    distance = abs(same_ratio_base - hypotenuse)\n\n    # Calculate the length of the middle part of the trapezium that is less than the length of the other base\n    middle_part = 2 * same_ratio_base\n\n    # Calculate the length of the middle part of the trapezium that is greater than the length of the other base\n    middle_part_longer = 2 * (same_ratio_base + same_ratio_base - hypotenuse)\n\n    # Calculate the length of the middle part of the trapezium that is equal to the length of the other base\n    middle_part_equal = 2 * same_ratio_base\n\n    # Sort the lengths of the middle parts in ascending order\n    middle_parts = sorted([middle_part, middle_part_longer, middle_part_equal])\n\n    # Calculate the median of the middle parts\n    median = middle_parts[1]\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Args:\n        base1 (float): The length of the first base of the trapezium.\n        base2 (float): The length of the second base of the trapezium.\n        height (float): The height of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n    '''\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n\n    # Calculate the median of the two base lengths\n    median1 = base1 + base2\n    median2 = perimeter - base1 - base2\n\n    # Calculate the median of the two area values\n    median3 = 0.5 * (area + median1)\n\n    # Return the median value of the trapezium\n    return max(median1, median2, median3)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area1 = 0.5 * base1 * half_height\n    area2 = 0.5 * base2 * half_height\n    area_sum = area1 + area2\n    \n    # Calculate the trapezoid area\n    area_trapezoid = (base1 + base2) * half_height\n    \n    # Calculate the areas of the trapezoids\n    areas = (area_trapezoid, area_sum - area_trapezoid)\n    \n    # Sort the areas and find the median\n    areas.sort()\n    median = (areas[1] + areas[2]) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    This function takes in the base lengths of two parallel sides of a trapezium and the height of the trapezium.\n    It calculates the length of the trapezium and then returns the median length of the trapezium using the trapezium's area formula:\n    \n    median = (base1 + base2 + height) / 2\n    area = (base1 + base2) * height / 2\n    \n    Therefore, the median length of the trapezium is:\n    \n    median_length = sqrt(area * (base1 + base2) / 2)\n    \n    '''\n    \n    # Calculate the length of the trapezium\n    trapezium_length = base1 + base2 + height\n    \n    # Calculate the area of the trapezium using the formula: area = (base1 + base2) * height / 2\n    area = base1 + base2 + height\n    \n    # Calculate the square root of the area\n    sqrt_area = area ** 0.5\n    \n    # Calculate the median length of the trapezium using the formula: median_length = sqrt(area * (base1 + base2) / 2)\n    median_length = sqrt_area * (base1 + base2) / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    base = 0.5 * (base1 + base2)\n    return 0.5 * height * (area - base)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            print(f\"{num} is greater than {number}.\")\n            break\n        else:\n            continue"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in arr:\n        if i > number:\n            print(\"Yes\")\n            return\n    print(\"No\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", arr.index(i))\n            break\n    else:\n        print(\"The number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'[ab]+') # matches a string with an a followed by one or more b's\n    return pattern.search(text) # returns the match object if a match is found, otherwise None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_match_one(text):\n    pattern = r'a\\w+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba[bB]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to string\n    num_str = str(n)\n    # find the length of the string\n    len_str = len(num_str)\n    # find the last index of the string\n    last_idx = len_str - 1\n    # find the last character of the string\n    last_char = num_str[last_idx]\n    # convert the last character to integer\n    last_int = int(last_char)\n    # return the last integer digit of the number\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # checking if the input is a positive integer\n    if type(n)!= int or n < 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    # converting the input number to a string\n    n = str(n)\n    \n    # finding the length of the string\n    length = len(n)\n    \n    # finding the last digit of the string\n    last_digit = int(n[length-1])\n    \n    # returning the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store the negative numbers\n    negative_numbers = []\n    \n    # Iterate through the list and add negative numbers to the new list\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    \n    # Return the new list with negative numbers\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a list of negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store negative numbers\n    neg_list = []\n\n    # Loop through each element in the list\n    for num in list1:\n        # If the element is negative, add it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n\n    # Return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_chars += char\n    return odd_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the new string\n    new_str = \"\"\n    # Iterate over each character in the string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, append it to the new string\n            new_str += char\n    # Return the new string with odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha():\n                result += char\n            elif char.isdigit():\n                result += str(char)\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if c.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1] or (test_list[j][0], test_list[i][0]) in test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n    \n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Create a dictionary to store the frequency of each tuple\n    freq = {}\n\n    # Loop through the test list and count the frequency of each tuple\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # Count the number of bidirectional tuple pairs\n    count = 0\n    for item in freq:\n        for j in range(1, len(item) + 1):\n            left, right = item[:j], item[j:]\n            if left in freq and right in freq:\n                count += freq[left] * freq[right]\n\n    # Return the count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all the integers\n    total = 0\n    \n    # Loop through each integer in the list\n    for i in L:\n        # If the integer is less than 10, add it to the total\n        if i < 10:\n            total += i\n        # If the integer is greater than or equal to 10, add 0 to the total and add the remaining digits of the integer to the total\n        else:\n            total += 0\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the list of integers\n    for num in L:\n        # Check if the integer is a multiple of 3\n        if num % 3 == 0:\n            # If it is, add it to the result\n            result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the single integer to 0\n    single = 0\n    # Iterate through the list of integers\n    for i in L:\n        # Check if the integer is divisible by 10\n        if i % 10 == 0:\n            # If it is, add the integer to the single integer\n            single += i\n    # Return the single integer\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n    # loop over the list of integers\n    for num in L:\n        # if the current number is zero, skip it and move on to the next one\n        if num == 0:\n            continue\n        # add the current number to the result\n        result += num\n    # return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(\\w+)(\\b|\\s+)(\\w+)(\\b|\\s+)(adverb|adv|adv\\.)\\b'\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n    # If no matches are found, return None\n    if not matches:\n        return None\n    # Otherwise, return the first match as a dictionary with keys 'adverb' and 'positions'\n    else:\n        first_match = matches[0]\n        adverb = first_match[1]\n        positions = [first_match.start(1), first_match.start(3), first_match.start(5)]\n        return {'adverb': adverb, 'positions': positions}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    pattern = r'\\b(?:[A-Z][a-z]+|Adverb)\\b'\n    \n    # Find all the occurrences of adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n    \n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n    \n    # Find the positions of the adverbs in the sentence\n    positions = []\n    for i in range(len(text)):\n        if any(adv in text[i] for adv in adverbs):\n            positions.append(i)\n    \n    # Return a list of tuples containing the adverbs and their positions\n    return [(adv, pos) for pos, adv in zip(positions, adverbs)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find all instances of adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # Initialize a list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Iterate through all the adverbs found and add their positions to the list\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((i, text[text.index(adverb):].index(adverb) + len(adverb)))\n    \n    # If no adverbs were found, return None\n    if not adverbs:\n        return None\n    \n    # Sort the adverb positions by their positions in the sentence\n    adverb_positions.sort()\n    \n    # Return the first adverb and its position(s)\n    return adverbs[0], adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for identifying adverbs\n    pattern = r'\\b(\\w+)(?:ing|ed|er|est|ly|lys|rly|sly|urly|ally|ant|ary|ate|edly|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|ently|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b([a-z]+)\\s+adverb\\b')\n\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # Initialize empty dictionary to store adverbs and their positions\n    adverbs = {}\n\n    # Loop through all matches and add adverbs to the dictionary\n    for i, match in enumerate(matches):\n        adverbs[match[0]] = i + 1\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define a regular expression pattern for adverbs\n    pattern = r'\\b(?:before|after|during|at|near|over|under|behind|around|through|underneath|beside|overtop|beside|around|behind|above|below|ahead|behind|behind|behind)\\b'\n\n    # use re.findall to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # create a dictionary to store the positions of the adverbs\n    adverb_positions = {}\n\n    # loop through the matches and add the positions to the dictionary\n    for match in matches:\n        adverb_positions[match] = text.index(match)\n\n    # return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for adverbs\n    pattern = r\"\\b(really|just|also|also|well|so|well|really)\\b\"\n\n    # Use the re.findall() method to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Loop through each adverb and store its position in the list\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((i+1, adverb))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all the words in the sentence\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop through each word in the sentence\n    for i in range(len(words)):\n\n        # Check if the current word is an adverb\n        if words[i].lower() in ['very', 'little','much', 'quite', 'too','very', 'a', 'an', 'the']:\n\n            # If the current word is an adverb, append its position to the list\n            adverbs.append(i)\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern for finding adverbs\n    pattern = r'\\b(?:before|after|behind|between|but|except|for|if|in|into|like|near|not|of|off|on|out|over|since|than|through|to|under|up|upon|with|without)\\b'\n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb and its positions\n    adverbs_list = []\n    # Loop through each match and append the adverb and its position to the list\n    for match in matches:\n        adverb = match.strip()\n        position = text.index(match)\n        adverbs_list.append((adverb, position))\n    return adverbs_list"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Compile regex pattern to match adverbs\n    pattern = re.compile(r'\\b\\w*ing\\b')\n\n    # Find all the adverbs in the sentence\n    matches = re.findall(pattern, text)\n\n    # Check if there are any adverbs in the sentence\n    if matches:\n        # Sort the adverbs by their positions in the sentence\n        matches.sort(key=lambda x: text.find(x))\n\n        # Print the adverbs and their positions\n        print(\"Adverbs in the sentence:\", matches)\n        print(\"Positions of adverbs in the sentence:\")\n        for i, match in enumerate(matches):\n            print(i+1, match)\n\n    else:\n        print(\"No adverbs in the sentence.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2  # calculate the area of the cube\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a single argument, l, which is the length of the cube.\n    It then calculates and returns the surface area of a cube with side length l.\n    \n    The formula for the surface area of a cube is:\n    S = 2 * (l * w * h) + 2 * (l * d * h) + 2 * (w * d * h)\n    \n    where S is the surface area, l is the length of the cube, w is its width, and h is its height.\n    \n    The function first calculates the volume of the cube and stores it in the variable v.\n    It then calculates the surface area of each face of the cube and adds them up to get the total surface area.\n    \n    Finally, the function returns the total surface area of the cube.\n    '''\n    \n    v = l * l * l\n    sa = 2 * (l * l * l) + 2 * (l * l * l) + 2 * (l * l * l)\n    \n    return sa"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = (2*l)**2\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    s = 6 * l ** 2\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using the formula A = 6 x (l x h x w)\n    A = 6 * l * l * l\n    return A"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize an array of zeros to store the counts of positive numbers\n    pos_counts = array('i', [0] * len(nums))\n    \n    # loop through the array and increment the count of positive numbers\n    for num in nums:\n        if num > 0:\n            pos_counts[nums.index(num)] += 1\n    \n    # loop through the array again and divide the count of each positive number by the total number of elements\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_counts[i] /= len(nums)\n    \n    # loop through the array again and find the ration of positive numbers\n    total_pos = 0\n    for count in pos_counts:\n        total_pos += count\n    \n    for i in range(len(pos_counts)):\n        pos_counts[i] /= total_pos\n    \n    # return the ration of positive numbers\n    return pos_counts"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to a mutable array\n    arr = array('i', nums)\n\n    # Count the number of positive elements in the array\n    pos_count = sum(arr)\n\n    # Count the number of negative elements in the array\n    neg_count = sum(1 for num in arr if num < 0)\n\n    # Calculate the ratio of positive and negative elements\n    ratio = pos_count / (pos_count + neg_count)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    Args:\n    nums (list): a list of integers\n\n    Returns:\n    float: the ration of positive numbers in the array\n    \"\"\"\n\n    # Convert the list to an array of integers\n    arr = array('i', nums)\n\n    # Count the number of positive integers in the array\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n\n    # Calculate the ration of positive integers\n    pos_ratio = pos_count / len(arr)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert array to list and count positive numbers\n    count = nums.count(1)\n    \n    # Calculate ration of positive numbers\n    positive_ratio = count / len(nums)\n    \n    # Print ration of positive numbers\n    print(positive_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    negative_sum = 0\n    for num in nums:\n        if num > 0:\n            positive_sum += 1\n        else:\n            negative_sum += 1\n    return positive_sum / negative_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    # create an empty array to store the positive numbers\n    positive_nums = array('i')\n    # iterate over the input array\n    for num in nums:\n        # check if the number is positive and add it to the positive_nums array\n        if num > 0:\n            positive_nums.append(num)\n    # calculate the ration of positive numbers\n    total_num = len(nums)\n    positive_num = len(positive_nums)\n    ration = positive_num / total_num\n    # return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize variables\n    pos_count = 0\n    neg_count = 0\n\n    # loop through array\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # calculate and return ration of positive to total numbers\n    return pos_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i')\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    positive_sum = 0\n    for pos in pos_arr:\n        positive_sum += pos\n    return positive_sum / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf')  # initialize the largest number to negative infinity\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # Initialize variables to keep track of the largest negative number and its index\n    largest_neg_num = None\n    largest_neg_index = None\n\n    # Loop through the list and find the largest negative number\n    for index, num in enumerate(list1):\n        if num < 0 and (largest_neg_num is None or num > largest_neg_num):\n            largest_neg_num = num\n            largest_neg_index = index\n\n    # Return the index of the largest negative number\n    return largest_neg_index"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    neg_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    neg = None\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n    return neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store the trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Create a new list with the first k elements of the tuple and the remaining elements\n        trimmed_tup = tup[:K] + tup[K:]\n        # Append the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed_tup)\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:-K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j+K > len(test_list[i])-1:\n                break\n            else:\n                test_list[i] = tuple(test_list[i][:j+K]+test_list[i][j+K+1:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j == len(test_list[i])-1:\n                test_list[i] = test_list[i][:j]\n                break\n            else:\n                test_list[i] = test_list[i][:j+1]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate through each tuple in the list\n    for i, t in enumerate(test_list):\n        # trim each tuple by k elements\n        test_list[i] = tuple(t[:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the result tuple with the same length as the first tuple\n    result_tup = (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2])\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple length mismatch\")\n        return\n\n    # Initialize a new tuple with same length as the input tuples\n    new_tup = [0] * len(test_tup1)\n\n    # Perform index multiplication of the elements in the input tuples\n    for i in range(len(test_tup1)):\n        new_tup[i] = test_tup1[i] * test_tup2[i]\n\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # create a new empty tuple to store the result\n    result_tup = ()\n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the two tuples\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    # return the new tuple of index-wise multiplications\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n            test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)\n    count_list = []\n    for key, value in count_dict.items():\n        count_list.append((key, value))\n\n    count_tuple = tuple(count_list)\n    return count_tuple"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = tuple(count_dict.keys())\n    count_lst = list(count_dict.values())\n    count_dict = Counter(count_tup)\n    result = [count_dict[i] for i in tup]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where each key is an element in the tuple and each value is the number of times that element appears in the list.\n    '''\n    count = Counter(tup)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function counts the number of occurrences of all elements of lst in tup.\n\n    :param tup: tuple to be searched\n    :param lst: list to be searched in tup\n    :return: dictionary containing the count of each element in lst in tup\n    '''\n    count = Counter(lst)\n    return {k: count[k] for k in tup}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert list to set to remove duplicates\n    set_lst = set(lst)\n\n    # count occurrence of each element in the tuple using Counter module\n    count_dict = Counter(tup)\n\n    # create a new list to store the count of each element\n    count_lst = []\n\n    # loop through the count dictionary and append the count of each element to the new list\n    for key, value in count_dict.items():\n        count_lst.append(value)\n\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and counts the occurrence of all elements of the list in the tuple.\n    The function returns a dictionary where the keys are the elements of the list and the values are the count of that element in the tuple.\n    '''\n    count_dict = Counter(lst)\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    result = [] \n    for key, value in count.items(): \n        if key in tup: \n            result.append((key, value)) \n\n    return result \n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n    # create a dictionary to store the count of each element in the list\n    list_count = Counter(lst)\n    # create a new dictionary to store the count of each element in the tuple and list\n    result = {}\n    # iterate through the list of elements in the tuple and count the occurrence in the list\n    for key, value in count_dict.items():\n        result[key] = count_dict[key] + list_count[key]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return count_dict[lst[0]]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Create an empty list to store the cubes of nums\n    cubes = []\n    # Loop through each number in the list\n    for num in nums:\n        # Calculate the cube of the current number and append it to the cubes list\n        cubes.append(num**3)\n    # Return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # initialize an empty list to store cubes\n    cubes = []\n    \n    # loop through each element in the list\n    for num in nums:\n        # find the cube of the current element\n        cube = num ** 3\n        # append the cube to the cubes list\n        cubes.append(cube)\n    \n    # return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    total = 0\n    for i in range(1, n + 1):\n        total += perrin\n        perrin = (3 * perrin) - 1\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number\n        perrin_num = (2 * i) - 1\n        # Add the perrin number to the sum\n        sum += perrin_num\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 2\n    s = 0\n    for i in range(n):\n        s += p\n        p += 2\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [10, 7, 13, 4, 9, 14, 6, 15, 8, 11, 12]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum variable to 0\n    total = 0\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # check if number is a perrin number\n        if i % 3 == 0 and i % 5 == 0:\n            # add number to sum variable\n            total += i\n    # return the sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    while p <= n:\n        sum += p\n        p += p\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        print(\"Invalid input!\")\n        return\n    sum = 0\n    for i in range(n+1):\n        sum += (1/(i+1))**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i*i\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts the specified size of strings from a list of strings.\n    '''\n    return [str for str in str_list[:l]]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(lst, size):\n    '''\n    Extracts strings of specified size from a list of strings.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer as input. It extracts the specified size of strings from the list and returns a new list containing those strings.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function takes a list of strings and a length as input.\n    It returns a new list containing all the strings of the specified length.\n    '''\n    new_list = []\n    for string in str_list:\n        if len(string) == length:\n            new_list.append(string)\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts a specified size of strings from a list of string values.\n\n    Args:\n        str_list (list of str): a list of string values\n        l (int): the length of the desired string values\n\n    Returns:\n        list of str: a list of string values of length l\n\n    Example:\n        str_list = ['hello', 'world', 'python']\n        l = 2\n        extract_string(str_list, l) # returns ['hello', 'world']\n    '''\n\n    return [str_list[i:i+l] for i in range(0, len(str_list), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == l:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of extracted strings of specified size.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for string in l:\n        if len(string) >= l[0]:\n            extracted_strings.append(string)\n            if len(extracted_strings) == l[1]:\n                break\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts the specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and returns the same string with all \n    whitespaces removed.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Convert the string to lowercase\n    text1 = text1.lower()\n    # Remove all the whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use the re.sub() method to replace all occurrences of whitespace with an empty string\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # Check if the given amount has loss or not.\n    if sale_amount <= actual_cost: \n        return 0 \n\n    # If the given amount has loss, calculate the loss amount.\n    else: \n        loss = sale_amount - actual_cost \n        return loss "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        loss = sale_amount - actual_cost \n        return loss\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    even_factors = []\n    i = 2\n    \n    while i*i <= n:\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n        i += 1\n    \n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n%2 == 0:\n            sum += i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of even factors of\", n, \"is\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of all even factors of the number.\n    '''\n    total_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of the input number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumOfEvenFactors(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of even factors of n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n\n    # create a list of numbers from 2 to n\n    numbers = list(range(2, n+1))\n\n    # create a list of prime numbers\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n\n    # Sieve of Eratosthenes algorithm to find primes\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # sum of even factors\n    sum = 0\n    for prime in primes:\n        if prime and prime % 2 == 0 and prime <= n:\n            sum += prime\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n%i == 0: \n            if i%2 == 0: \n                even_factors += i \n    return even_factors "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    sum_of_even_factors = 0\n    for i in even_factors:\n        sum_of_even_factors += i\n    return sum_of_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\s+\\b[a-zA-Z]+\\s+\\b[a-zA-Z]+\\s+\\b[a-zA-Z]+\\s+\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a list of all words that contain 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b' # matches a word containing 'z'\n    result = re.findall(pattern, text) # find all occurrences of the pattern in the text\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expression to match any word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Use re.findall() to find all the words that match the pattern\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expressions to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n\n    # Print the matches\n    if len(matches) > 0:\n        print(f\"The word(s) containing 'z' in the text are: {matches}\")\n    else:\n        print(\"No words containing 'z' found in the text.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    # check if month num is within range\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    # check if month has 31 days\n    if monthnum in [4, 6, 9, 11]:\n        return monthnum + \" has 31 days\"\n    else:\n        return monthnum + \" does not have 31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            if monthnum2 % 100 == 0:\n                if monthnum2 % 4 == 0:\n                    return \"True\"\n                else:\n                    return \"False\"\n            else:\n                if monthnum2 % 4 == 0:\n                    return \"True\"\n                else:\n                    return \"False\"\n        else:\n            if monthnum2 % 4 == 0:\n                return \"True\"\n            else:\n                return \"False\"\n    else:\n        if monthnum2 % 4 == 0:\n            return \"True\"\n        else:\n            return \"False\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"The month number contains 31 days.\")\n    elif monthnum2 == 2:\n        print(\"The month number contains 28 or 29 days depending on the year.\")\n    else:\n        print(\"The month number does not contain any 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    # check if the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return False\n\n    # check if the month number contains 31 days\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if len(monthnum) == 2:\n        if monthnum.startswith('0'):\n            monthnum = int(monthnum[1:])\n        else:\n            monthnum = int(monthnum)\n    else:\n        return \"Invalid month number\"\n    \n    if monthnum in range(1, 13):\n        if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            if monthnum == 2 and (year % 100 == 0 or (year % 100!= 0 and year % 400 == 0)):\n                if daynum < 29:\n                    return \"31 days\"\n                else:\n                    return \"29 days\"\n            else:\n                if daynum < 28:\n                    return \"31 days\"\n                else:\n                    return \"28 days\"\n        elif monthnum == 2:\n            if daynum < 29:\n                return \"31 days\"\n            else:\n                return \"29 days\"\n        elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            if daynum < 30:\n                return \"30 days\"\n            else:\n                return \"28 days\"\n        else:\n            if daynum < 31:\n                return \"31 days\"\n            else:\n                return \"30 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if len(str(monthnum2)) == 2:\n        if monthnum2[0] == '0' and int(monthnum2[1:]) >= 1 and int(monthnum2[1:]) <= 9:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n\n    # Return the reversed list\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') #initialize minimum length as infinity\n    min_sublist = [] #initialize empty sublist\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize min_length with the length of the first sublist\n    min_length = len(lst[0])\n    # Initialize the minimum sublist\n    min_sublist = lst[0]\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Check if the length of the sublist is less than the minimum length\n        if len(sublist) < min_length:\n            # Update the minimum length and the minimum sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if j-i+1 < min_len:\n                min_len = j-i+1\n                min_lst = lst[i:j+1]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length*width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two parameters, l (length) and b (breadth), and returns the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define the pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    \n    # Use the pattern to find all uppercase substrings in the given string\n    uppercase_substrings = pattern.findall(str1)\n    \n    # Loop through all the uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Iterate over all non-overlapping matches of the pattern in the input string\n    matches = pattern.finditer(str1)\n    for match in matches:\n        # Extract the substring of the input string containing the uppercase substring\n        substring = str1[match.start():match.end()]\n        # Replace the uppercase substring with an empty string\n        str1 = str1.replace(substring, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # define regex pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # replace all uppercase substrings with a space\n    result = pattern.sub(' ', str1)\n\n    # return the result\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_uppercase(str1):\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for elem in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist.\n    '''\n    return [lst[0]] + lst[1:]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(item[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    Args:\n    string (str): The string whose upper case characters need to be counted.\n\n    Returns:\n    int: The number of upper case characters in the given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store all combinations\n    result = []\n    # use two loops to generate all possible combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # add each combination to the result list\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize a list to store the combinations\n    result = []\n\n    # Sort the input list\n    sorted_list = sorted(list1)\n\n    # Iterate through each element in the sorted list\n    for i in range(len(sorted_list)):\n        # Initialize the current combination\n        current_combination = []\n\n        # Iterate through each element after the current one\n        for j in range(i + 1, len(sorted_list)):\n            # Add the current element to the current combination\n            current_combination.append(sorted_list[j])\n\n            # If the current combination is a valid permutation, add it to the result list\n            if is_permutation(current_combination, sorted_list):\n                result.append(current_combination)\n\n        # Remove the first element of the current combination since it has already been used\n        del current_combination[0]\n\n    return result\n\n\ndef is_permutation(a, b):\n    '''\n    Check if a list is a permutation of another list.\n    '''\n\n    # Check if the lists have the same length\n    if len(a)!= len(b):\n        return False\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Iterate through the elements of the first list\n    for elem in a:\n        # Increment the frequency of the element in the dictionary\n        freq[elem] = freq.get(elem, 0) + 1\n\n    # Iterate through the elements of the second list\n    for elem in b:\n        # Check if the element is present in the dictionary and has a frequency of 0\n        if elem not in freq or freq[elem] == 0:\n            return False\n\n        # Decrement the frequency of the element in the dictionary\n        freq[elem] -= 1\n\n    return True"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    This function generates all possible combinations of the elements of a given list.\n    '''\n    # Base case: If list is empty, there are no combinations\n    if not lst:\n        return []\n    \n    # Recursive case: Generate combinations of the elements of the list\n    result = []\n    for i in range(1, len(lst) + 1):\n        for subset in combinations_list(lst[:i]):\n            result.append([lst[0]] + subset)\n    \n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of all possible combinations of the elements in the list\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            combinations.append(list1[j:j+i])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize the list of combinations\n    comb_list = []\n    # Iterate through the given list\n    for i in range(len(list1)):\n        # Create a new list to hold the current combination\n        temp_list = [list1[i]]\n        # Initialize the index of the next element to be added\n        j = i+1\n        # Iterate through the remaining elements in the list\n        while j < len(list1):\n            # Add the next element to the current combination\n            temp_list.append(list1[j])\n            # Update the index of the next element to be added\n            j += 1\n        # Add the current combination to the list of combinations\n        comb_list.append(temp_list)\n    # Return the list of combinations\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combinations = []\n\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # create a new list with only the current element\n        current_list = list1[:i] + list1[i+1:]\n        # loop through the current list\n        for j in range(1, len(current_list)+1):\n            # create a new list with the current element repeated j times\n            repeated_list = current_list * j\n            # add the repeated list to the combinations list\n            combinations.append(repeated_list)\n\n    # return the combinations list\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[i-1:j])\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    curr_product = 1\n    \n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], current_product * arr[i])\n        current_product = max_ending_here\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the maximum product subarray.\n    \"\"\"\n\n    # initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # loop through each element in the array\n    for i in range(len(arr)):\n        # update the current product\n        current_product *= arr[i]\n\n        # update the maximum product if the current product is greater than the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n        # update the current product to 1 for the next iteration\n        current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array, return the maximum product subarray.\n\n    Args:\n    arr (list): An array of integers.\n\n    Returns:\n    int: The maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        current_product *= num\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], min_product * arr[i])\n        min_product = min(max_product * arr[i], min_product * arr[i])\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert the dictionary to a list of values\n    values = [dict[key] for key in dict]\n    # Check if all values are same\n    if all(elem == values[0] for elem in values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[n]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a value n and returns True if all values are same as n else False.\n    '''\n    value = next(iter(dict.values())) # Get the first value of the dictionary\n    return all(value == x for x in dict.values()) # Check if all values of the dictionary are same as the first value"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if len(set(value)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if count == 0:\n            first_value = i\n            count += 1\n        else:\n            if i!= first_value:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    return len(set(value)) == 1"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        for i in range(1, len(values)):\n            if values[0]!= values[i]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Define an empty list to store the values in the dictionary\n    values = []\n\n    # Loop through the dictionary and append the values to the list\n    for value in dict.values():\n        values.append(value)\n\n    # Return True if all values are the same, otherwise return False\n    return values == values[:1]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return False\n    elif dict[n]!= dict[0]:\n        return False\n    else:\n        return check_value(dict, n+1)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n\n    Args:\n        dict1 (dict): A dictionary to be checked for empty items.\n\n    Returns:\n        dict: A dictionary without empty items.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= '' and v!= []}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)   \n    max_so_far = float('-inf')   \n    max_ending_here = 1   \n\n    for i in range(1, n):   \n        if arr[i] > arr[i-1]:   \n            max_ending_here *= arr[i]   \n            if max_ending_here > max_so_far:   \n                max_so_far = max_ending_here   \n        else:   \n            if max_ending_here > 0:   \n                max_ending_here = 1   \n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # initialize variables\n    n = len(arr)\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    # loop through the array\n    for i in range(n):\n\n        # if the next element is less than the current minimum, update the minimum\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n        # if the current element is greater than the maximum so far and the current element is less than the minimum, update the maximum\n        elif arr[i] > max_so_far and arr[i] < min_ending_here:\n            max_so_far = arr[i]\n            max_ending_here = arr[i]\n\n        # if the current element is greater than the maximum so far and the current element is greater than the minimum, update both the maximum and the maximum ending here\n        elif arr[i] > max_so_far and arr[i] > min_ending_here:\n            max_so_far = max(arr[i], max_ending_here)\n            max_ending_here = arr[i]\n\n        # if the current element is less than the maximum ending here, update the maximum ending here\n        else:\n            max_ending_here = max(arr[i], max_ending_here)\n\n    # return the maximum product formed by the subsequence\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, temp)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if arr[1] > arr[0]:\n        return max(arr[0] * arr[1], arr[1] * max_product(arr[2:]))\n    else:\n        return max(arr[1] * arr[0], arr[0] * max_product(arr[2:]))"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here*arr[i])\n            min_ending_here = min(arr[i], min_ending_here*arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Create a prefix sum array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # Initialize the maximum product\n    max_product = float('-inf')\n\n    # Iterate over increasing subsequences\n    for i in range(n):\n        for j in range(i+1, n):\n            # Find the maximum product in the current subsequence\n            current_product = max(prefix_sum[j] - prefix_sum[i-1], prefix_sum[n] - prefix_sum[j])\n\n            # Update the maximum product\n            max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here * arr[i], max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize the maximum and minimum products to negative infinity\n    max_prod = float('-inf')\n    min_prod = float('-inf')\n    # Initialize the current product and the current subsequence\n    curr_prod = 1\n    curr_subseq = [1]\n    # Traverse through the array and compute the products of increasing subsequences\n    for i in range(1, n):\n        # If the current element is greater than the last element in the subsequence, update the subsequence and product\n        if arr[i] > arr[curr_subseq[-1]]:\n            curr_subseq.append(i)\n            curr_prod *= arr[i]\n        # If the current element is less than or equal to the last element in the subsequence, update the subsequence and subtract the product from the product of the subsequence\n        else:\n            curr_subseq = [i]\n            curr_prod = arr[i]\n        # Update the maximum and minimum products\n        max_prod = max(max_prod, curr_prod)\n        min_prod = min(min_prod, curr_prod)\n    # Return the maximum product\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        first_element = test_tup[0]\n        second_element = test_tup[1]\n        third_element = test_tup[2]\n        return (first_element + second_element) + add_pairwise((second_element, third_element))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            result.append(test_tup[i] + test_tup[j])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the pairwise sums\n    pairwise_sums = []\n    # iterate over the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # calculate the sum of the adjacent elements\n        pairwise_sum = test_tup[i] + test_tup[i+1]\n        # add the pairwise sum to the list of pairwise sums\n        pairwise_sums.append(pairwise_sum)\n    # return the list of pairwise sums\n    return pairwise_sums"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables to keep track of the sum of the first and last elements\n    left_sum = test_tup[0]\n    right_sum = test_tup[-1]\n    \n    # iterate over the tuple and add the neighboring elements\n    for i in range(1, len(test_tup) - 1):\n        # add the neighboring elements to the sum\n        left_sum += test_tup[i-1]\n        right_sum += test_tup[i+1]\n        \n    # return the sum of the left and right sums\n    return left_sum + right_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    total = test_tup[0]\n    for i in range(1, len(test_tup)-1):\n        total += test_tup[i]\n    total += test_tup[-1]\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the pairwise sum\n    pairwise_sum = 0\n    \n    # Loop through the tuple and add the pairwise sum for each pair of elements\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    \n    # Return the final pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(i + j for i, j in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum and count variables\n    sum = 0\n    count = 0\n    # loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i+1]\n        count += 1\n    # return the sum divided by the count\n    return sum/count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum of the first two elements to 0\n    sum_pair = 0\n    \n    # loop through the tuple and add the next element to the sum of the previous two elements\n    for i in range(len(test_tup)-1):\n        sum_pair += test_tup[i+1]\n    \n    # return the sum of the pairwise addition\n    return sum_pair"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i] - test_tup[i-1]\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result *= i\n    return result % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num % n\n    \n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments: the array to be multiplied and the modulo n. It returns the product of the array\n    multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize a variable to store the product of the array multiplication\n    product = 1\n\n    # loop through the array and multiply each element with the previous product\n    for num in arr:\n        product = (product * num) % n\n\n    # return the final product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arrays arr and n as input and returns the product of their array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    This function takes two parameters:\n    arr: List of integers\n    n: Integer\n    \n    This function finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    \n    # Modulo operator to get the remainder after multiplication\n    remainder = product % n\n    \n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # calculate the product of the array using the formula: product = arr[0]*arr[1]*...*arr[n-1]\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    \n    # calculate the remainder using the formula: remainder = product % n\n    remainder = product % n\n    \n    return remainder"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize variables\n    consecutive = False\n    prev = -1\n    # Loop through the list and check for consecutive numbers\n    for i in range(len(l)):\n        if l[i] == prev + 1:\n            consecutive = True\n        else:\n            consecutive = False\n        prev = l[i]\n    # Return the value of consecutive\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    # Check if the length of the list is less than 2\n    if len(l) < 2:\n        return False\n\n    # Initialize two variables to keep track of the previous and current numbers\n    prev = l[0]\n    curr = l[1]\n\n    # Loop through the list and compare each number with the previous and current numbers\n    for num in l[2:]:\n        if num == prev + 1:\n            prev = num\n        elif num == prev:\n            return False\n        else:\n            curr = num\n            prev = curr\n\n    # If no consecutive numbers are found, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else it returns False.\n    '''\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] == 1:\n            count += 1\n        else:\n            count = 1\n    if count == len(l):\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # checking if the length of the list is greater than 1\n    if len(l) <= 1: \n        return \"The list is not consecutive\" \n\n    # checking if all the elements are consecutive \n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return \"The list is not consecutive\" \n\n    # if all elements are consecutive \n    return \"The list is consecutive\" "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if all the numbers in the list are consecutive and False otherwise.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # initialize variables\n    n = len(l)\n    count = 0\n\n    # loop through list\n    for i in range(n-1):\n        # check if current element is consecutive with next element\n        if l[i] + 1 == l[i+1]:\n            count += 1\n        else:\n            # reset count if current element is not consecutive with next element\n            count = 0\n        # if count reaches n-1, then all the elements are consecutive\n        if count == n-1:\n            return True\n\n    # if no consecutive element is found, then return False\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the count of each element in list 1\n    dict_1 = {}\n    for item in test_list1:\n        if item in dict_1:\n            dict_1[item] += 1\n        else:\n            dict_1[item] = 1\n\n    # Create a dictionary to store the count of each element in list 2\n    dict_2 = {}\n    for item in test_list2:\n        if item in dict_2:\n            dict_2[item] += 1\n        else:\n            dict_2[item] = 1\n\n    # Find the common elements in both lists\n    common_items = [key for key in dict_1 if key in dict_2 and dict_1[key] <= dict_2[key]]\n\n    # Create a list of tuples containing the common elements and their count in list 1\n    common_tuples_1 = []\n    for item in common_items:\n        common_tuples_1.append((item, dict_1[item]))\n\n    # Create a list of tuples containing the common elements and their count in list 2\n    common_tuples_2 = []\n    for item in common_items:\n        common_tuples_2.append((item, dict_2[item]))\n\n    # Sort the common elements in both lists based on their count in list 1\n    common_tuples_1.sort(key=lambda x: x[1])\n    common_tuples_2.sort(key=lambda x: x[1])\n\n    # Find the common elements in both lists based on their count in list 2\n    common_tuples_2 = [x for x in common_tuples_2 if x[1] == common_tuples_1[0][1]]\n\n    # Create a dictionary to store the count of each common element in both lists\n    common_dict = {}\n    for item in common_tuples_1:\n        common_dict[item[0]] = item[1]\n\n    # Create a list of tuples containing the common elements and their count in both lists\n    common_tuples = []\n    for item in common_dict:\n        common_tuples.append((item, common_dict[item]))\n\n    # Sort the common elements in both lists based on their count in both lists\n    common_tuples.sort(key=lambda x: x[1])\n\n    # Find the common elements in both lists based on their count in both lists\n    common_tuples = [x for x in common_tuples if x[1] == common_tuples[0][1]]\n\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection_list.append(i)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = set()\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.add(tup1)\n                break\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    i = 0\n    j = 0\n    intersection = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] < test_list2[j]:\n            i += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        else:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create an empty set to store the intersection tuples\n    intersection_set = set()\n\n    # Iterate through each tuple in test_list1\n    for tuple1 in test_list1:\n        # Iterate through each tuple in test_list2\n        for tuple2 in test_list2:\n            # If the two tuples have the same elements in the same order, add the tuple to the intersection set\n            if tuple1 == tuple2:\n                intersection_set.add(tuple1)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as inputs and returns their tuple intersection.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through both lists of tuples\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            # Check if the two tuples have the same elements\n            if tuple1 == tuple2:\n                # If they have the same elements, add them to the common set\n                common_elements.add(tuple1)\n\n    # Convert the set to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the first list\n    set1 = set(test_list1)\n    # Create an empty set to store the common elements\n    common_set = set()\n    # Iterate through the second list\n    for element in test_list2:\n        # If the element exists in the set, add it to the common set\n        if element in set1:\n            common_set.add(element)\n    # Return the list of common elements\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns a new list containing only the common elements between the two lists.\n    The lists are first converted to sets to remove duplicates and then converted back to tuples to retain their order.\n    \"\"\"\n    common_tuples = set(test_list1) & set(test_list2)\n    return tuple(common_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(set(test_list1) & set(test_list2)) == 0:\n        return \"No common elements found.\"\n    else:\n        return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string where all the occurrences of 'ch' are replaced by 'newch'\n    str2 = str1.replace(ch, newch)\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # split the string into individual characters\n    char_list = list(str1)\n    # iterate through each character and replace if it matches the given character\n    for i in range(len(char_list)):\n        if char_list[i] == ch:\n            char_list[i] = newch\n    # join the characters back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character with another character in a string.\n    \n    :param str1: The string to modify.\n    :type str1: str\n    :param ch: The character to replace.\n    :type ch: str\n    :param newch: The character to replace with.\n    :type newch: str\n    :return: The modified string.\n    :rtype: str\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Use Counter to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n    # Sort the values in descending order\n    sorted_values = sorted(counter.values(), reverse=True)\n    # Create a new dictionary with the sorted values and their original keys\n    sorted_dict = {key: val for key, val in dict1.items() if val in sorted_values}\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the counter object by values in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by values\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    \n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = min(nums)\n    smallest = max(nums)\n    # Sum the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the sum of the maximum and minimum values\n    total_sum = max_val + min_val\n    \n    return total_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > largest:\n                largest = nums[i]\n            elif nums[i] < smallest:\n                smallest = nums[i]\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables for the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Get the maximum and minimum values from the array\n    min_value = min(nums)\n    max_value = max(nums)\n\n    # Calculate the sum of the largest and smallest values\n    total_sum = min_value + max_value\n\n    return total_sum"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the lower case version of the string.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # replace all lowercase substrings with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into substrings\n    substrings = re.findall('[a-z]+', str1)\n    # Loop through the substrings and remove them from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'(?i)[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    uppercase_pattern = re.compile(r'[A-Z]+')\n\n    # Get all lowercase substrings from the given string\n    lower_substrings = lowercase_pattern.findall(string)\n\n    # Get all uppercase substrings from the given string\n    upper_substrings = uppercase_pattern.findall(string)\n\n    # Merge both lists of substrings and remove duplicates\n    merged_substrings = list(set(lower_substrings + upper_substrings))\n\n    # Replace each lowercase substring with an empty string\n    for substring in merged_substrings:\n        string = string.replace(substring, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Use regular expressions to find all lowercase substrings and replace them with empty strings\n    string = re.sub(r'([a-z])', r'\\1', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Use the re.sub() function to replace all lowercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    matches = re.findall(pattern, str1)\n    return ''.join([char for char in str1 if char.isupper()])"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # split the string into words\n    words = str1.split()\n    # create an empty list to store the non-lowercase words\n    non_lower = []\n    # loop through each word in the list\n    for word in words:\n        # check if the word is all lowercase\n        if word == word.lower():\n            # if it is, add it to the non-lowercase list\n            non_lower.append(word)\n        else:\n            # if it isn't, add it to the non-lowercase list\n            non_lower.append(word)\n    # join the non-lowercase words into a string and return it\n    return''.join(non_lower)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert all characters to lowercase\n    string = string.lower()\n    # Find all lowercase substrings\n    substrings = re.findall(r'[a-z]+', string)\n    # Remove the substrings from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to string and extract the first character of the string\n    first_digit = str(n)[0]\n\n    # Return the first digit of the given number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function finds the first digit of a given number\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to string\n    str_n = str(n)\n    # take the first character of the string\n    first_digit = str_n[0]\n    # convert the first character to integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n % 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return first_Digit(n // 10)\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if n is a valid input\n    if not isinstance(n, int):\n        print(\"Invalid input! Please enter a valid integer.\")\n        return\n    \n    # find the first digit of n using integer division and modulo operator\n    digit = n // 10\n    rem = n % 10\n    \n    # print the result\n    print(\"The first digit of the number\", n, \"is\", digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n    # Find the first character of the string\n    first_char = str_n[0]\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the number is positive or negative\n    if n < 0:\n        n = abs(n)\n    # convert the number to a string\n    s = str(n)\n    # get the first digit of the string\n    first_digit = s[0]\n    # convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        while n > 0:\n            if n % 10!= 0:\n                return str(n % 10)\n            else:\n                n //= 10\n        return None"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initialize an empty list to store odd numbers \n    odd = [] \n    # loop through each number in the list \n    for num in list: \n        # if the number is odd, append it to the odd list \n        if num % 2!= 0: \n            odd.append(num) \n    # return the odd list \n    return odd"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of cubes of the first n natural numbers\n    cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Compute the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n    \n    # Compute the difference between the two sums\n    diff = cubes - sum_n\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_nums = sum(range(1,n+1))\n    return abs(sum_cubes-sum_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Function to calculate the sum of cubes of numbers from 1 to n\n    def sum_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n\n    # Function to calculate the sum of numbers from 1 to n\n    def sum_numbers(n):\n        return sum([i for i in range(1, n+1)])\n\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # Calculate the sum of first n natural numbers\n    sum_n = sum_numbers(n)\n\n    # Calculate the difference between the two sums\n    diff = abs(sum_cubes_n - sum_n)\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_n_cube = sum(x**3 for x in range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_n_cube - sum_n\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [num**3 for num in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    natural_numbers = [num for num in range(1, n+1)]\n    sum_natural = sum(natural_numbers)\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # calculate the sum of the first n natural numbers\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    \n    # calculate the difference between the sum of cubes and the sum of numbers\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([i**3 for i in range(n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(n+1))\n\n    # Return the difference between the two sums\n    return cubes_sum - sum_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # function to calculate cubes of the numbers from 1 to n\n    def sum_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n    \n    # function to calculate the sum of the first n natural numbers\n    def sum_natural(n):\n        return sum(range(1, n+1))\n    \n    # calculate the sum of cubes and sum of natural numbers\n    sum_of_cubes = sum_cubes(n)\n    sum_of_natural = sum_natural(n)\n    \n    # calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural\n    \n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    difference = abs(sum_cubes - sum_natural)\n    return difference\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    #initialize the count variable\n    count = 0\n\n    #iterate through the array\n    for i in range(len(A)):\n        #initialize the left and right pointers\n        left = i+1\n        right = N\n\n        #find the next element that is odd\n        while (left < right) and (A[left] % 2 == 0):\n            left += 1\n\n        #find the next element that is odd\n        while (left < right) and (A[right] % 2 == 0):\n            right -= 1\n\n        #if the xor of the elements between left and right is odd, increment the count\n        if (A[left]^A[right]) % 2 == 1:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function finds the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize the count variable to zero\n    count = 0\n    \n    # loop through all possible pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # if the xor of the two elements is odd, increment the count variable\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    \n    # return the count of odd pairs found\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_val = 0\n        for j in range(N):\n            if i!= j:\n                xor_val ^= A[i] ^ A[j]\n        if xor_val % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j]\n            if xor % 2!= 0 : \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        xor = A[i] ^ A[(i+1)%N]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Initializing variables\n    count = 0\n\n    # Looping through all pairs\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n\n            # Checking if the xor value is odd\n            if xor_value % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible pairs (i,j) of elements in A\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the xor value of the pair\n            xor_value = A[i] ^ A[j]\n\n            # If the xor value is odd, increment the count\n            if xor_value % 2!= 0:\n                count += 1\n\n    # Return the count of odd xor values\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return \"\".join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.islower() else chr(ord(c) ^ 32).upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(c) ^ 32) if c.isupper() else chr(ord(c) ^ 32) for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Initialize an empty string to store the toggled case\n    toggled = \"\"\n    # Loop through each character in the string\n    for char in string:\n        # If the character is uppercase, toggle it to lowercase\n        if char.isupper():\n            toggled += char.lower()\n        # If the character is lowercase, toggle it to uppercase\n        else:\n            toggled += char.upper()\n    # Return the toggled string\n    return toggled"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(string)\n    \n    # Iterate over each character in the list\n    for i in range(len(chars)):\n        # If the character is lowercase, convert it to uppercase\n        if chars[i].islower():\n            chars[i] = chars[i].upper()\n        # If the character is uppercase, convert it to lowercase\n        elif chars[i].isupper():\n            chars[i] = chars[i].lower()\n            \n    # Convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert the two integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # get the length of the longer string\n    len_str = max(len(str1), len(str2))\n\n    # convert the longer string to a list of integers\n    list_str1 = [int(digit) for digit in str1]\n    list_str2 = [int(digit) for digit in str2]\n\n    # calculate the sum of the per-digit difference between the two strings\n    sum_per_digit_diff = 0\n    for i in range(len_str):\n        diff = abs(list_str1[i] - list_str2[i])\n        sum_per_digit_diff += diff\n\n    return sum_per_digit_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    while n1!= 0 or n2!= 0:\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # calculate the per-digit difference\n    diff = 0\n    for i in range(len(num1)):\n        diff += int(num1[i]) - int(num2[i])\n\n    # return the sum of the per-digit difference\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the integers to lists of digits\n    d1 = [int(d) for d in str(n1)]\n    d2 = [int(d) for d in str(n2)]\n    # find the per-digit difference between the two lists of digits\n    diff = [abs(d1[i] - d2[i]) for i in range(len(d1))]\n    # sum the per-digit differences to find the total sum\n    total_diff = sum(diff)\n    # return the total sum\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 - n2\n    per_digit_diff = 0\n    while diff > 0:\n        per_digit_diff += diff % 10\n        diff //= 10\n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    for i in range(10):\n        total += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        if str(n1)[i]!= str(n2)[i]:\n            sum_diff += int(str(n1)[i]) - int(str(n2)[i])\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables\n    result = 0\n    \n    # Iterate through each digit in n1 and n2\n    for i in range(10):\n        # Calculate the difference between the corresponding digits in n1 and n2\n        diff = abs(n1 % 10 - n2 % 10)\n        \n        # Add the difference to the result\n        result += diff\n        \n        # Move to the next digit in n1 and n2\n        n1 //= 10\n        n2 //= 10\n        \n    # Return the result\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    sum_of_diff = 0\n    for i in range(10):\n        num1_digit = n1 // (10 ** i) % 10\n        num2_digit = n2 // (10 ** i) % 10\n        diff = abs(num1_digit - num2_digit)\n        sum_of_diff += diff\n\n    return sum_of_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Loop through the array from the second element to the last one\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i >= size - 1:\n            continue\n        max_ending_here -= a[i + size]\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    window_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        window_sum = max(window_sum + a[i], curr_sum)\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a)):\n        if i < size - 1:\n            current_sum += a[i]\n        else:\n            current_sum = current_sum - a[i-size+1] + a[i]\n\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')  # initialize max sum to negative infinity\n    curr_sum = 0  # initialize sum to zero\n\n    for i in range(size):\n        curr_sum += a[i]  # add current element to sum\n        if curr_sum > max_sum:  # if current sum is greater than max sum\n            max_sum = curr_sum  # update max sum\n\n        if curr_sum < 0:  # if current sum becomes negative, reset it to zero\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    \n    # convert the set to a list and sort the elements in ascending order\n    sorted_union = sorted(union)\n    \n    # return the sorted union list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Get the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Use set() to remove duplicates and convert the resulting set to a list\n    unique_list = list(set(combined_tup))\n    \n    # Sort the list in ascending order\n    unique_list.sort()\n    \n    # Output the sorted list\n    return unique_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n\n    # create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n\n    # find the union of the two sets\n    union_set = set1.union(set2)\n\n    # convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # output the union list as a string\n    print(\"Union of the elements in the two tuples: {}\".format(union_list))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the union set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set() function\n    union = set(test_tup1 + test_tup2)\n    \n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union))\n    \n    # Output the sorted union list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert both tuples to lists and sort them\n    sorted_tup1 = sorted(list(test_tup1))\n    sorted_tup2 = sorted(list(test_tup2))\n\n    # create a new empty list to store the union\n    union_list = []\n\n    # find the intersection of the two sorted lists\n    intersection = list(set(sorted_tup1) & set(sorted_tup2))\n\n    # add the intersection elements to the union_list\n    union_list.extend(intersection)\n\n    # sort the union_list and print it\n    union_sorted = sorted(union_list)\n    print(union_sorted)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty list to store the union\n    union_list = []\n    # loop through the first tuple and add each element to the union_list\n    for element in test_tup1:\n        union_list.append(element)\n    # loop through the second tuple and add each element to the union_list if it doesn't already exist in the first tuple\n    for element in test_tup2:\n        if element not in test_tup1:\n            union_list.append(element)\n    # sort the union_list in ascending order and output the result\n    union_list.sort()\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            union.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            union.append(element)\n    union.sort()\n    print(union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist += lst[j]\n            max_length = max(max_length, len(sublist))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            max_len = max(max_len, len(lst[i:j+1]))  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    # Initialize a variable to store the current sublist length\n    current_length = 0\n\n    # Loop through each element in the list\n    for i in range(len(lst)):\n\n        # Check if the current element is in the sublist\n        if i == 0 or lst[i]!= lst[i-1]:\n\n            # Add 1 to the current sublist length\n            current_length += 1\n\n            # Update the maximum length if the current sublist length is greater\n            if current_length > max_length:\n                max_length = current_length\n\n        # If the current element is not in the sublist, reset the current sublist length to 1\n        else:\n            current_length = 1\n\n    # Return the maximum length of the sublists\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currLength = 0\n\n    for i in range(len(lst)):\n        if i == 0:\n            currLength = 1\n            maxLength = 1\n        elif lst[i] == lst[i-1]:\n            currLength += 1\n            maxLength = max(maxLength, currLength)\n        else:\n            currLength = 1\n\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n    if curr_length > max_length:\n        max_length = curr_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist_lengths = []\n    for i in range(len(lst)):\n        sublist_lengths.append(0)\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j+1 <= i+5:\n                sublist_lengths[j] += 1\n    max_length = max(sublist_lengths)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # initialize a list to store the lengths of longest sublists\n    max_sublists = []\n\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # create a list to store the lengths of current sublists\n        current_sublists = []\n\n        # loop through each element in the list after the current element\n        for j in range(i+1, len(lst)):\n            # add the length of the current sublist to the current_sublists list\n            current_sublists.append(len(lst[j:i+1]))\n\n        # check if the length of the current sublists is greater than the length of the longest sublists\n        if len(current_sublists) > len(max_sublists):\n            # update the max_sublists list with the current sublists list\n            max_sublists = current_sublists\n\n    # return the length of the longest sublists\n    return max(max_sublists)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  # initializing max_length variable to 0\n    start = 0  # initializing start variable to 0\n\n    # iterating over the list using the range function\n    for i in range(len(lst)):\n        length = 1  # initializing length variable to 1\n\n        # iterating over the list from i+1 to the end of the list\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[i]:\n                length += 1  # incrementing length if the element is present in the list\n\n            # updating max_length variable if the current length is greater than max_length\n            if length > max_length:\n                max_length = length\n                start = i-length+1  # updating start variable to the starting index of the longest sublist\n\n            # resetting length variable to 1 if the current element is not equal to the next element\n            else:\n                length = 1\n\n    return max_length, start"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_len = 0\n    temp_len = 0\n    # Loop through the list\n    for i in range(len(lst)):\n        # If the current element is greater than the previous element, increase the temp_len and reset max_len\n        if lst[i] > lst[i-1]:\n            temp_len += 1\n        else:\n            # If the current element is less than or equal to the previous element, update temp_len\n            temp_len = 1\n        # Update max_len if temp_len is greater\n        if temp_len > max_len:\n            max_len = temp_len\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.findall(text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        text (str): A string containing values between quotation marks.\n\n    Returns:\n        list: A list of extracted values.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\\\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\\b(\\\".+?\\\"|[^\\\"])'\n    match = re.findall(pattern, text)\n    return [x.strip('\"') for x in match]"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # calculate the number of pairs in the set\n    pairs_count = len(unique_set) * (len(unique_set) - 1) // 2\n    # print the final result\n    print(\"The number of possible unordered pairs where both elements are unequal is:\", pairs_count)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # Function to count number of possible unordered pairs\n    def count_pairs(arr, n):\n        # Initialize two counters for each element of the array\n        count1 = [0] * n\n        count2 = [0] * n\n\n        # Count the number of pairs for each element in the array\n        for i in range(n):\n            for j in range(i+1, n):\n                # If both elements are not equal, increment the counter for their element indices\n                if arr[i]!= arr[j]:\n                    count1[i] += 1\n                    count2[j] += 1\n\n        # Find the maximum count of pairs\n        max_count = 0\n        for i in range(n):\n            max_count = max(max_count, count1[i] + count2[i])\n\n        # Return the maximum count of pairs\n        return max_count\n\n    # Call the function to count the number of pairs\n    count = count_pairs(arr, n)\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert n to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    # Loop through each digit in the list and add it to the sum\n    for digit in digits:\n        sum_of_digits += digit\n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Check if n is a non-negative integer\n    if type(n)!= int or n < 0:\n        return \"Error: Input must be a non-negative integer.\"\n    else:\n        # Convert n to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(n)]\n        # Use the reduce function to add up the digits\n        return reduce(lambda x, y: x + y, digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the rightmost digit and add it to the total\n        digit = n % 10\n        total += digit\n        \n        # Remove the rightmost digit from the number\n        n //= 10\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input integer to a string\n    s = str(n)\n    # Initialize a variable to hold the sum\n    sum = 0\n    # Loop through each digit in the string and add it to the sum\n    for i in range(len(s)):\n        digit = int(s[i])\n        sum += digit\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    otherwise it returns False.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted and False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Args:\n        list1 (list): A list of lists of strings.\n\n    Returns:\n        list: A new list containing the same elements as `list1`, but with\n        each sublist of strings sorted in ascending order.\n    \"\"\"\n    # Loop over each sublist in list1\n    for sublist in list1:\n        # Sort the sublist using the sorted() function and the natural sort order\n        sublist.sort()\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in nums:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    unique_lists = []\n    for sublist in nums:\n        new_list = []\n        for num in sublist:\n            if num not in new_list:\n                new_list.append(num)\n        unique_lists.append(new_list)\n    return unique_lists"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store unique numbers\n    unique_nums = {}\n    # iterate over all lists in nums\n    for lst in nums:\n        # iterate over all numbers in the list\n        for num in lst:\n            # if the number is not in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n    # create a new list with only the unique numbers\n    new_lst = []\n    for num in unique_nums:\n        new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique values\n    unique_set = set()\n    # loop through each list in the input list\n    for num_list in nums:\n        # loop through each value in the list\n        for num in num_list:\n            # add the value to the set if it's not already in the set\n            if num not in unique_set:\n                unique_set.add(num)\n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_nums = list(set(list_data))\n    unique_product = 1\n    \n    for num in unique_nums:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    return reduce(lambda x, y: x * y, unique_numbers, 1)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and then convert back to a list\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    unique_list = list(unique_set)\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the given list\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # remove duplicates\n    product = 1\n    for num in unique_numbers: # multiply all numbers in the set\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # A = pi * r^2 * h\n    A = 2*3.14159*(r**2)*h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r**2 + 2 * 3.14159 * h * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14 * r * h\n    print(\"The surface area of the cylinder is\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and the height of its base as input and returns the surface area of the cylinder.\n    '''\n    # calculate the volume of the cylinder\n    V = math.pi * r**2 * h\n\n    # calculate the surface area of the cylinder\n    SA = 2 * math.pi * r * h + 2 * math.pi * r * math.sqrt(r**2 + h**2)\n\n    return SA, V"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * r + 2 * math.pi * r * h + math.pi * r * r + math.pi * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*r*h + 3.14159*r*h**2"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is a sublist of another list or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] in B:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    \n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if i < len(A) and A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    if len(A) == len(B):\n        return A == B\n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(A):\n        if A[j] == B[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n\n        if i == len(B):\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the length of A is less than or equal to B\n    if len(A) > len(B):\n        return False\n\n    # Traverse through A and check if each element is present in B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else False.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    if len(B) == len(A):\n        return all(x in A for x in B)\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == []: # base case\n        return True\n    elif B == []: # base case\n        return False\n    elif A[0] == B[0]: # check if first elements of A and B are same\n        return is_Sub_Array(A[1:], B) # recursive call to check subarray for the remaining elements of A\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize result to 0\n    result = 0\n    \n    # loop through each digit in the number\n    while n > 0: \n        # get the last digit of the number\n        last_digit = n % 10\n        \n        # multiply the result by the last digit\n        result *= last_digit\n        \n        # remove the last digit from the number\n        n //= 10\n    \n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Factorial of negative number is not defined.\")\n        return\n    else:\n        digit = n%10\n        return digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize factorial variable\n    factorial = 1\n\n    # loop through each digit of the number and multiply by the factorial\n    for i in str(n):\n        factorial *= int(i)\n\n    # return the last digit of the factorial\n    return int(str(factorial)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert the number to a string\n    n = str(n)\n    \n    # convert the string to a list of integers\n    digits = [int(digit) for digit in n]\n    \n    # calculate the factorial of the number without the last digit\n    factorial = 1\n    for i in range(len(digits)-1):\n        factorial *= digits[i]\n    \n    # find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n    # Find the length of the string\n    n_length = len(n_str)\n    # Initialize the last digit to None\n    last_digit = None\n    # Loop through each digit in the string\n    for i in range(n_length - 1, -1, -1):\n        # Get the current digit\n        digit = int(n_str[i])\n        # Check if the digit is greater than 0\n        if digit > 0:\n            # If the last digit is None, set it to the current digit\n            if last_digit is None:\n                last_digit = digit\n            # Otherwise, multiply the last digit by the current digit and set it as the new last digit\n            else:\n                last_digit = last_digit * digit\n    # Return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return int(str(n)[-1]) * last_Digit_Factorial(n-1)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number into a list of digits\n    num_list = [int(x) for x in str(n)]\n\n    # Initialize variables for the last digit and the factorial of the number\n    last_digit = 0\n    factorial = 1\n\n    # Loop through the list of digits\n    for digit in num_list:\n\n        # Calculate the factorial of the number with the given digit\n        factorial = factorial * (digit + 1)\n\n        # Calculate the last digit of the factorial\n        last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved list\n    interleaved = []\n    \n    # Loop through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(min(len(list1),len(list2),len(list3))):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    for i in range(max(len(list1), len(list2), len(list3))):\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index = 0\n    while index < len(list1):\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n        index += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while i < len(list2):\n        result.append(list2[i])\n        i += 1\n    while i < len(list3):\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the length of the lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n    # Check if the lists are of equal length\n    if n1!= n2 or n1!= n3 or n2!= n3:\n        raise ValueError(\"All lists must have the same length\")\n    # Initialize an empty list\n    flat_list = []\n    # Iterate over the lists and append the elements\n    for i in range(n1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Set up an empty set to hold the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through the first tuple and check if each element is in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            # If an element is not in the second tuple, add it to the dissimilar set\n            dissimilar_set.add(element)\n\n    # Loop through the second tuple and check if each element is in the first tuple\n    for element in test_tup2:\n        if element not in test_tup1:\n            # If an element is not in the first tuple, add it to the dissimilar set\n            dissimilar_set.add(element)\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it's not, return that element\n            return test_tup1[i]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Iterate through the first tuple and check for each element if it's present in the second tuple\n    for element1 in test_tup1:\n        if element1 not in test_tup2:\n            dissimilar_elements.append(element1)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initializing an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # iterating over both tuples\n    for i in range(len(test_tup1)):\n        # comparing the elements at the same index\n        if test_tup1[i]!= test_tup2[i]:\n            # appending the dissimilar element to the list\n            dissimilar_list.append(test_tup1[i])\n    \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(num): \n        return num % 2 == 0 \n    \n    new_list = []\n    for sublist in test_tuple:\n        for num in sublist:\n            if even_fnc(num):\n                new_list.append(num)\n        if len(sublist) == 1 and new_list:\n            new_list = []\n    return new_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # convert the tuple into a list to make it easier to work with it\n    test_list = list(test_tuple)\n    \n    # loop through each element in the list and apply the even_fnc function to it\n    for i in range(len(test_list)):\n        if even_fnc(test_list[i]) == True:\n            # if the element passes the even_fnc test, remove it from the list\n            test_list.pop(i)\n            i -= 1\n    \n    # convert the list back into a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sublist in test_tuple:\n        for item in sublist:\n            if even_fnc(item):\n                result.append(item)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\nmixed_tuple = [\n    [1, 2, 3, 4, 5],\n    [1, 3, 5, 7],\n    [2, 4, 6, 8]\n]\n\nresult = even_ele(mixed_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple) and not even_fnc(test_tuple[i]):\n            for j in range(len(test_tuple[i])):\n                test_tuple[i] = test_tuple[i][:j] + test_tuple[i][j+1:]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    def get_even_elements(nested_tuple):\n        \"\"\"\n        Helper function to get even elements from a nested tuple.\n        \"\"\"\n        return [item for sublist in nested_tuple for item in sublist if even_fnc(item)]\n\n    return get_even_elements(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the first element of the tuple is a tuple\n    if isinstance(test_tuple[0], tuple):\n        # If it is, recursively apply the function to the first element\n        first_tuple = even_ele(test_tuple[0], even_fnc)\n    else:\n        # If it's not, just apply the function to the element\n        first_tuple = even_fnc(test_tuple[0])\n    \n    # Check if the second element of the tuple is a tuple\n    if isinstance(test_tuple[1], tuple):\n        # If it is, recursively apply the function to the second element\n        second_tuple = even_ele(test_tuple[1], even_fnc)\n    else:\n        # If it's not, just apply the function to the element\n        second_tuple = even_fnc(test_tuple[1])\n    \n    # Return the concatenated result of the two tuples\n    return (first_tuple, second_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.extend(even_fnc(i))\n        else:\n            result.append(i)\n    return result\n\n\ndef even_fnc(nested_tuple):\n    '''\n    A helper function to remove even elements from a nested mixed tuple.\n    '''\n    return [x for x in nested_tuple if x % 2!= 0]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(item) for item in test_tuple if isinstance(item, (list, tuple))]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(num):\n        return num % 2 == 0\n    \n    def remove_even(x):\n        if isinstance(x, tuple):\n            return tuple(remove_even(y) for y in x)\n        elif isinstance(x, list):\n            return [remove_even(y) for y in x]\n        else:\n            return even_fnc(x)\n    \n    return remove_even(test_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b*s)+(b*s**2)+(s*b**2)+(s*b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*(b+s)) + (2*b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculating the surface area of the base and sides\n    area_base = b * s\n    area_side = s * s\n    #calculating the surface area of the pyramid\n    area_pyramid = area_base + area_side\n    #returning the surface area\n    return area_pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s * s + 0.5 * b * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the square pyramid\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    surface_area = 4 * b * s + 2 * b * b\n    print(\"The surface area of the square pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s #calculating the area of each triangle\n    area = area * 4 #multiplying by the number of triangles to get the total surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base\n    area_base = b * b\n    # Calculate the surface area of the pyramid\n    area_pyramid = ((s * b) ** 2) / 3\n    # Calculate the total surface area\n    total_area = area_base + area_pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the length of the base of the pyramid\n    base_length = b\n    \n    # Calculate the height of the pyramid\n    height = s\n    \n    # Calculate the number of sides of the pyramid\n    sides = 4\n    \n    # Calculate the surface area of the pyramid\n    surface_area = (base_length * height * sides) / 2\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2) + (b**2) + (s**2) # Formula to find surface area of a square pyramid\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"The dictionary is empty.\"\n    else:\n        return \"The dictionary is not empty.\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using formula:\n    C(n) = (2n+1)!/(n!(n-1)!).\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial // (n * (n-1) * 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*(catalan_number(n-1) + catalan_number(n-2))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Catalan numbers can only be positive integers.\")\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    catalan_list = [0, 1]\n    for i in range(3, num+1):\n        catalan_list.append(4*i*(2*i-1) - catalan_list[i-1] - catalan_list[i-2])\n    return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(2, num+1):\n        catalan.append(i*catalan[i-1]//(i+1))\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n-1) + catalan_number(n-2)\n    else:\n        return catalan_number(n-1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n\n    C(n) = n! / (k!(n-k)!) for k=0,1,...,n-1\n\n    Args:\n        n (int): The value of n\n\n    Returns:\n        int: The value of C(n)\n    \"\"\"\n    return sum(binomial(n, k) * (2*k + 1) / (k + 1) for k in range(n))\n\n\ndef binomial(n, k):\n    \"\"\"\n    Calculate the binomial coefficient n choose k using the formula:\n\n    n! / (k!(n-k)!)\n\n    Args:\n        n (int): The value of n\n        k (int): The value of k\n\n    Returns:\n        int: The value of n choose k\n    \"\"\"\n    if k > n // 2:\n        k = n - k\n\n    num = 1\n    denom = 1\n    for i in range(1, k + 1):\n        num *= i\n        denom *= n - i\n\n    return num // denom"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(1, num+1):\n            catalan += (i * catalan_number(num-i))\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \"\"\"\n    if num < 0:\n        return None\n    elif num == 0 or num == 1:\n        return 1\n    else:\n        return (2 * num - 1) * catalan_number(num-1) / num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(5)\n    143\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) // (n+1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n\n    # Use re.finditer() to iterate over all matches in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize empty list to store adverb positions and corresponding words\n    positions = []\n\n    # Loop over all matches and add their positions and words to the positions list\n    for match in matches:\n        positions.append((match.start(), match.group()))\n\n    # Return the list of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define a regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    \n    # find all non-overlapping occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # iterate over the matches and return a list of tuples with the position and value of each match\n    return [(match.start(), match.group()) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # Use re.findall() to find all non-overlapping occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty dictionary to store the adverb positions\n    positions = {}\n\n    # Iterate through the matches and add their positions to the dictionary\n    for i, match in enumerate(matches):\n        positions[match[0]] = i\n\n    # Return the dictionary containing the adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    # Find all matches of the pattern in the given text\n    matches = re.finditer(pattern, text)\n    # Iterate over the matches and return the adverb with its positions\n    for match in matches:\n        # Get the adverb and its start and end positions in the text\n        adverb = match.group(1)\n        start_pos = match.start(1)\n        end_pos = match.end(1)\n        # Return the adverb and its positions\n        return adverb, (start_pos, end_pos)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b([a-z]+)ly\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # Iterate through the list of adverbs and print their positions and contents\n    for i, adv in enumerate(adverbs):\n        print(f\"Adverb {i+1}: {adv}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern to match for adverbs ending with ly\n    pattern = r'\\b(ly)\\b\\s*[-\\.]\\s*'\n\n    # use the pattern to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # if there are matches, return a list of tuples containing the adverb and its position in the text\n    if matches:\n        return [(match[0], text.find(match[0])) for match in matches]\n\n    # if there are no matches, return an empty list\n    return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all occurrences of \"ly\" in the text\n    matches = re.findall(r'\\bly\\b', text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate through the matches and check if each one ends with \"ly\"\n    for match in matches:\n        # Check if the last character of the match is \"y\"\n        if match[-1] == 'y':\n            # Append the match to the adverbs list and its position to the positions list\n            adverbs.append((match, text.find(match)))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the regular expression pattern to match the adverb ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n\n    # find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # iterate over the matches and return a list of tuples containing the first adverb found and its position in the text\n    adverbs = []\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate over the dataset\n    for item in items:\n        # If the heap is full, remove the smallest item\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n\n        # Add the current item to the heap\n        heapq.heappush(min_heap, item)\n\n    # Extract and return the n most expensive items from the heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items by their price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Initialize a min heap to store the n most expensive items\n    min_heap = []\n\n    # Initialize variables to keep track of the number of items in the min heap and the total price of the items\n    num_items = 0\n    total_price = 0\n\n    # Iterate over the sorted items and add them to the min heap if their price is less than or equal to the smallest price in the heap\n    for item in sorted_items:\n        if num_items < n or item[1] <= min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n            num_items += 1\n            total_price += item[1]\n\n    # Extract the n most expensive items from the min heap and return them\n    return [item for item in heapq.nsmallest(n, min_heap)][::-1]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items in the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # create a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        # if the size of the heap exceeds n, remove the last element\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n most expensive items as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a max heap to keep track of the n most expensive items\n    max_heap = []\n    \n    # Add the first n items to the max heap\n    for i in range(n):\n        heapq.heappush(max_heap, items[i])\n        \n    # Iterate over the remaining items and add them to the heap\n    for i in range(n, len(items)):\n        # If the current item is more expensive than the smallest item in the heap, remove the smallest item and add the current item\n        if items[i] > heapq.heappop(max_heap):\n            heapq.heappush(max_heap, items[i])\n            \n    # Return the n most expensive items from the max heap\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input.\n    It returns a list containing the n most expensive items in the dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    # Iterate through the list of items\n    for item in items:\n        # Add the current item to the min heap if it's less than the minimum\n        if not min_heap or item < min_heap[0]:\n            heapq.heappush(min_heap, item)\n        # If the min heap has n items, remove the last item (item with the highest price)\n        elif len(min_heap) == n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items, find the n most expensive items.\n\n    :param items: a list of items, each representing a cost of an item\n    :param n: the number of items to consider\n    :return: a list of n items with the highest costs\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Define the compare function for the heap\n    def compare(x, y):\n        return x[1] < y[1]\n\n    # Create a heap of size n and fill it with the items from the dataset\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item, item[1]))\n\n    # Find the n largest elements from the heap\n    n_largest = heapq.nlargest(n, heap, key=lambda x: x[1])\n\n    # Return the n largest elements\n    return [item[0] for item in n_largest]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items, return a list of the n most expensive items.\n    \"\"\"\n    # Create a min heap with the first n elements\n    min_heap = items[:n]\n    heapq.heapify(min_heap)\n\n    # Extract the n most expensive items from the min heap\n    for _ in range(n, len(items)):\n        # Add the next item to the min heap\n        heapq.heappush(min_heap, items[_])\n        # Remove the least expensive item from the min heap\n        heapq.heappop(min_heap)\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and a positive integer n\n    and returns the n most expensive items in the list.\n    '''\n    # Use a min-heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size exceeds n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items in the list\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if n is a valid index in l\n    if n < 0 or n >= len(l):\n        return None\n    # split the list at n\n    a, b = l[:n], l[n:]\n    # add the first part of the list to the end\n    l = a + [b]\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    new_list = l[n:]\n    new_list.append(l[:n])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        raise ValueError(\"Index out of range\")\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Create an empty list to store the elements after the nth element\n    part_after_n = []\n    # Loop through the list and add each element to the part_after_n list if it's less than the nth element\n    for i in range(n, len(l)):\n        part_after_n.append(l[i])\n    # Add the first n elements to the list\n    part_before_n = l[:n]\n    # Concatenate the two lists and return the result\n    return part_before_n + part_after_n"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Initialize an empty list for the first part of the list\n    first_part = []\n    # Initialize an empty list for the second part of the list\n    second_part = []\n\n    # Loop through the list and add elements to the first part until n-1\n    for i in range(n-1):\n        first_part.append(l[i])\n\n    # Add the last element of the list to the first part and the rest of the elements to the second part\n    first_part.append(l[n-1])\n    for i in range(n, len(l)):\n        second_part.append(l[i])\n\n    # Return the concatenated first and second parts of the list\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create a new list to hold the first part of the list\n    first_part = []\n    \n    # Iterate through the list until the nth element has been reached\n    for i in range(n):\n        first_part.append(l[i])\n    \n    # Add the first part of the list to the end of the original list\n    l.extend(first_part)\n    \n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l[0], l[1:]\n    else:\n        return split_Arr(l[1:], n-1) + (l[0],)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[-n], *l[:-n]]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # Calculate the difference between the two numbers\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty.\"\n    \n    smallest = float('inf')\n    largest = float('-inf')\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The difference between largest and smallest value in the list.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 1:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff\n    else:\n        print(\"The list has less than two elements.\")"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest value in the list\n    largest = max(nums)\n\n    # Find the smallest value in the list\n    smallest = min(nums)\n\n    # Return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # calculate the difference between max and min\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    perfect_squares_list = []\n    for i in range(int(a ** 0.5) + 1, int(b ** 0.5) + 1):\n        square = i * i\n        if square >= a and square <= b:\n            perfect_squares_list.append(square)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initializing a variable to store the square of the first number\n    square_a = a**2\n\n    # initializing a variable to store the square of the second number\n    square_b = b**2\n\n    # initializing a variable to store the sum of the squares of the two numbers\n    sum_squares = square_a + square_b\n\n    # initializing a variable to store the count of perfect squares found\n    count = 0\n\n    # loop to find perfect squares between the two numbers\n    while square_a <= sum_squares:\n        square_a += a\n        square_b -= b\n        count += 1\n\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    squares = []\n    for num in range(a, b+1):\n        if num ** 2 == a or num ** 2 == b:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(math.sqrt(a)), int(math.sqrt(b))+1):\n        for j in range(int(math.sqrt(a)), int(math.sqrt(b))+1):\n            if i*i + j*j == a:\n                print(f\"{i}x{i} = {a}\")\n            elif i*i + j*j == b:\n                print(f\"{j}x{j} = {b}\")"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a list of all perfect squares\n    between them.\n    \"\"\"\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    \n    # Loop through each number between a and b\n    for i in range(a, b+1):\n        # Check if the current number is a perfect square\n        square_root = i ** 0.5\n        if int(square_root) ** 2 == i:\n            # If it is a perfect square, append it to the list\n            perfect_squares_list.append(i)\n    \n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initializing a variable to store the perfect squares found\n    perfect_squares = []\n\n    # looping through the range of numbers between a and b\n    for num in range(a, b+1):\n\n        # checking if the number is a perfect square\n        square = num * num\n        if square == num and num!= 1:\n\n            # appending the perfect square to the list of perfect squares\n            perfect_squares.append(square)\n\n    # returning the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through the range of numbers from a to b\n    for num in range(a, b+1):\n\n        # Check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i**2, end=' ')"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect,y_rect\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    This function takes two input parameters r and phi, which represent the\n    distance from the origin and the angle, respectively, of a point in the\n    polar coordinate system. It converts the polar coordinates to rectangular\n    coordinates, and returns the equivalent rectangular coordinates as a tuple.\n    \"\"\"\n\n    # Calculate the rectangular coordinates of the point\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.phase(r*cmath.exp(1j*theta))\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x.real, rect_y.real"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to Cartesian coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    \n    # Convert the angle from radians to degrees\n    theta = phi * 180 / cmath.pi\n    \n    # Return the rectangular coordinates\n    return (r, theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    theta = cmath.phase(r*1j)\n    x = r*cmath.cos(theta)*cmath.exp(1j*phi)\n    y = r*cmath.sin(theta)*cmath.exp(1j*phi)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    x (float): The radius of the circle.\n    y (float): The angle of the line with the positive x-axis.\n    \n    Returns:\n    (float, float): The rectangular coordinates (x, y).\n    \"\"\"\n    \n    # Convert the angle to radians\n    theta = cmath.radians(y)\n    \n    # Calculate the rectangular coordinates (x, y)\n    x = x * cmath.cos(theta)\n    y = x * cmath.sin(theta)\n    \n    # Return the rectangular coordinates\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = x*cmath.cos(y)\n    rect_y = x*cmath.sin(y)\n    return rect_x, rect_y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements.\")\n        return\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # length of the list\n    n = len(newList)\n    # first element of the list\n    first = newList[0]\n    # last element of the list\n    last = newList[n-1]\n    # swap first and last elements\n    newList[0] = last\n    newList[n-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as an argument and swaps the first and last elements in the list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Define the first and last elements of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # Define the new list without the first and last elements\n    new_list = newList[1:-1]\n    \n    # Append the first and last elements to the new list\n    new_list.append(first_element)\n    new_list.append(last_element)\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    # if list has less than two elements, return same list\n    if length < 2:\n        return newList\n    # swap the first and last elements of the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements\n        first = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the sum of the product of consecutive binomial co-efficients to 0\n    result = 0\n\n    # iterate over the range of k from 0 to n\n    for i in range(k+1):\n        # calculate the binomial coefficient\n        b = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n\n        # multiply the result by the binomial coefficient\n        result += b\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum\n    total = 0\n\n    # Iterate over the range of n and k\n    for i in range(k,n+1):\n        total += i * binomial_Coeff(n,i-1) # Recursive call to compute the sum of the product of consecutive binomial co-efficients\n\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Initialize the product variable\n    product = 1\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1, k+1):\n        product *= n - i + 1\n        product /= i\n\n    # Add the product to the sum\n    sum += product\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n: int, the number of elements in the set.\n    k: int, the number of elements to select from the set.\n\n    Returns:\n    float, the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum to 0\n    result = 0\n\n    # Calculate the binomial coefficient of n choose k\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= n - i + 1\n        coeff /= i\n    result += coeff\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, n - k + 1):\n        coeff = 1\n        for j in range(1, k + 1):\n            coeff *= n - i + j - 1\n            coeff /= j\n        result += coeff\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_prod = 0\n    for i in range(k,n+1):\n        sum_prod += i*(n-i+1)\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    count = k \n    # initialize sum of products of consecutive co-efficients \n    product = 1\n    # loop through the range of consecutive binomial co-efficients \n    for i in range(1,k+1): \n        # calculate the binomial coefficient at the current index i\n        bin_coeff = math.comb(n,i)\n        # multiply the current product by the binomial coefficient and add it to the sum\n        product *= bin_coeff\n        count += 1\n    # return the sum of products of consecutive co-efficients\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate through the range of k values from 0 to n-1\n    for i in range(k,n+1): \n        # Calculate the binomial coefficient\n        num = factorial(n)/(factorial(k)*factorial(i))\n\n        # Add the binomial coefficient to the sum\n        sum += num\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0 \n    for i in range(k, n+1): \n        sum += i * (n-i+1) \n    return sum "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0: # for invalid inputs\n        return 0\n    elif k == 0 or k == n: # base cases\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    #initialize variables\n    sum = 0\n    coeff = 1\n    num = n\n    denom = k\n\n    #calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(num, 0, -1):\n        sum += coeff * num\n        num -= 1\n        coeff *= denom\n\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+|\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    ip_pattern = re.compile(ip_regex)\n    ip_list = ip_pattern.findall(ip)\n    for i in range(len(ip_list)):\n        ip_list[i] = ip_list[i].replace('0', '')\n    return '.'.join(ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # remove leading and trailing zeros and dots\n    ip = re.sub(r'([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)$', r'\\1\\2\\3\\4\\5\\6\\7\\8', ip)\n    # remove leading zeros after the last dot\n    ip = re.sub(r'([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)$', r'\\1', ip)\n    # remove leading zeros before the first dot\n    ip = re.sub(r'^([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)$', r'\\1', ip)\n    # remove leading zeros from each group\n    ip = re.sub(r'([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each part of the ip address\n    ip = re.sub(r'^\\d+\\.', '', ip)\n    ip = re.sub(r'\\.\\d+$', '', ip)\n    # remove leading zeroes from the entire ip address\n    ip = re.sub(r'^0+', '', ip)\n    # remove trailing zeroes from each part of the ip address\n    ip = re.sub(r'\\.0+$', '', ip)\n    ip = re.sub(r'0+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from the ip address using regex\n    ip = re.sub(r'^\\d+\\.?\\d*\\.\\d+\\.?\\d*$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^(\\d{1,3}\\.){3}\\d{1,3}$\"\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        ip_list = [int(x) for x in ip_list]\n        while ip_list[0] == 0 and len(ip_list) > 1:\n            ip_list.pop(0)\n        ip = '.'.join([str(x) for x in ip_list])\n        return ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet of the ip address\n    ip = re.sub(r'([0-9]+)\\.(0)\\.(0)\\.(0)', r'\\1.\\2.\\3.\\4', ip)\n    # remove leading zeroes from the entire ip address\n    ip = re.sub(r'(\\.0)+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to remove leading zeroes from the ip address\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace('0.0.0.0', '')\n    ip = ip.replace('0.0.0', '')\n    ip = ip.replace('0.0', '')\n    ip = ip.replace('0', '')\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = next(i for i, x in enumerate(list1) if x % 2 == 0)\n    odd_first = next(i for i, x in enumerate(list1) if x % 2!= 0)\n    return list1[even_first] - list1[odd_first]\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = num - even_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = num - odd_num\n                \n    if even_num is None:\n        even_num = 0\n    if odd_num is None:\n        odd_num = 0\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n    else:\n        diff = odd_num - even_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n        else:\n            first_odd = list1[i]\n    return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    diff = abs(even_num - odd_num)\n    if even_count > odd_count:\n        return diff\n    elif odd_count > even_count:\n        return diff\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n            if count == 1:\n                return num - list1[0]\n    return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n\n    if len(even) == 0 or len(odd) == 0:\n        return None\n    else:\n        return even[0] - odd[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings into integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of bits in each binary string\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = n1 + n2\n\n    # Calculate the minimum number of swaps required to convert one number into another\n    for i in range(n1):\n        # Calculate the difference between the bits in the two binary strings\n        diff = num1 ^ num2\n        # Calculate the number of set bits in the difference\n        count = diff.bit_count()\n        # Calculate the number of times the set bits must be swapped to convert num1 to num2\n        swaps = n2 - count\n        # Update the minimum number of swaps if the current swap is smaller\n        min_swaps = min(min_swaps, i + swaps)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    if n!= len(str2) : \n        return \"Both strings should have same length\"\n    else : \n        count = 0\n        i = j = 0\n        while i < n and j < n : \n            if str1[i] == str2[j] : \n                i += 1\n                j += 1\n            else : \n                str1[i], str1[j] = str1[j], str1[i]\n                str2[i], str2[j] = str2[j], str2[i]\n                count += 1\n                i += 1\n                j += 1\n        if i == n : \n            return \"One binary number is shorter than another\"\n        else : \n            return count "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize a variable to store the number of swaps required\n    swaps = 0\n    \n    # Iterate through the binary strings from least significant bit (rightmost) to most significant bit (leftmost)\n    for i in range(31, -1, -1):\n        # If the binary numbers differ at the current bit position, swap them and increment the swap count\n        if (num1 >> i) & 1!= (num2 >> i) & 1:\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            swaps += 1\n            \n    # Return the minimum number of swaps required to convert the binary numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize the result variable\n    result = 0\n\n    # compare the bits from left to right\n    while num1!= num2:\n        # if the bits are different, increment the result by 1\n        if num1 & 1!= num2 & 1:\n            result += 1\n\n        # shift the bits to the right\n        num1 >>= 1\n        num2 >>= 1\n\n    return result"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n    # Find the lengths of the two binary numbers\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Initialize a list to store the number of swaps required for each digit position\n    num_swaps = [0] * n1\n\n    # Calculate the swaps required for each digit position in the two binary numbers\n    for i in range(n1):\n        for j in range(n2):\n            if str1[i] == str2[j]:\n                num_swaps[i] += abs(int(str1[i]) - int(str2[j]))\n\n    # Find the minimum number of swaps required to convert the first number to the second number\n    min_swaps = min(num_swaps)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # convert the integers to lists of bits\n    bits1 = [int(bit) for bit in bin(num1)[2:]]\n    bits2 = [int(bit) for bit in bin(num2)[2:]]\n\n    # compare the bits from the two integers\n    count = 0\n    for i in range(len(bits1)):\n        if bits1[i]!= bits2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize two dictionaries to store count of each digit in str1 and str2\n    count1 = {}\n    count2 = {}\n\n    # Convert each digit in str1 and str2 to dictionaries\n    for digit in str1:\n        count1[digit] = count1.get(digit, 0) + 1\n\n    for digit in str2:\n        count2[digit] = count2.get(digit, 0) + 1\n\n    # Compare the two dictionaries and calculate the minimum number of swaps required\n    min_swaps = 0\n    for digit in '01':\n        if count1.get(digit, 0) > count2.get(digit, 0):\n            min_swaps += abs(count1.get(digit, 0) - count2.get(digit, 0))\n        elif count1.get(digit, 0) < count2.get(digit, 0):\n            min_swaps += abs(count2.get(digit, 0) - count1.get(digit, 0))\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Check if input strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Strings must have equal length.\"\n\n    # Convert strings to binary\n    bin1 = bin(int(str1, 2))[2:] # Remove \"0b\" prefix from binary string\n    bin2 = bin(int(str2, 2))[2:] # Remove \"0b\" prefix from binary string\n\n    # Initialize minimum number of swaps\n    swaps = 0\n\n    # Compare binary strings and count swaps\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            swaps += 1\n\n    # Return minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the binary strings to lists of 0s and 1s\n    list1 = [int(x) for x in str1]\n    list2 = [int(x) for x in str2]\n\n    # find the number of swaps required to convert list1 to list2\n    swaps = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) # length of binary strings\n    dp = [[0]*(n+1) for i in range(n+1)] # dynamic programming table\n\n    # base case\n    for i in range(n+1):\n        dp[0][i] = i\n\n    for i in range(1,n+1):\n        dp[i][0] = i\n\n    # dp[i][j] represents the minimum number of swaps required to convert binary string str1[0:i] to str2[0:j]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1\n\n    return dp[n][n]"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert tuple to bytes\n    tuple_bytes = bytearray(tuple_list)\n\n    # Calculate size of the tuple in bytes\n    tuple_size = len(tuple_bytes) * sys.getsizeof(tuple_bytes[0])\n\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        tuple_size += sys.getsizeof(item)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of each tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    size_in_bytes = size_of_tuple * sys.getsizeof(tuple_list[0])\n    return size_in_bytes"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n    arr1: sorted list of integers\n    arr2: sorted list of integers\n    k: integer, the position of the element to be found\n\n    Returns:\n    The kth smallest element from the two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in two sorted arrays.\n\n    Args:\n    arr1 (list): First sorted array.\n    arr2 (list): Second sorted array.\n    k (int): The kth smallest element to find.\n\n    Returns:\n    int: The kth smallest element from arr1 and arr2.\n\n    Raises:\n    TypeError: If either arr1 or arr2 are not lists.\n    ValueError: If arr1 or arr2 is empty.\n    \"\"\"\n    if not isinstance(arr1, list) or not isinstance(arr2, list):\n        raise TypeError(\"Both arr1 and arr2 must be lists\")\n\n    if len(arr1) == 0 or len(arr2) == 0:\n        raise ValueError(\"Both arr1 and arr2 must not be empty\")\n\n    # Merge the two sorted arrays into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # Return the kth smallest element\n    return sorted_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    # initialize two pointers for arr1 and arr2\n    i = 0\n    j = 0\n    \n    # loop till kth element is found or both arrays are exhausted\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # if current element of arr1 is smaller, increment i pointer\n        if arr1[i] < arr2[j]:\n            i += 1\n            k -= 1\n        # if current element of arr2 is smaller, increment j pointer\n        else:\n            j += 1\n    \n    # if kth element is found, return it\n    if k == 0:\n        return arr1[i - 1]\n    \n    # if kth element is not found, return -1\n    else:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    i = j = 0\n\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    left, right = 0, len(arr1) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr1[mid] < arr2[k - mid - 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return arr2[k - left - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = 0\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): First sorted array.\n        arr2 (list): Second sorted array.\n        k (int): The value of k.\n\n    Returns:\n        int: The kth element from the given sorted arrays.\n\n    Example:\n        >>> find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4)\n        6\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters: \n    - arr1: the first sorted array\n    - arr2: the second sorted array\n    - k: the value of k\n    This function finds the kth element from the two sorted arrays, arr1 and arr2.\n    \"\"\"\n    i = 0\n    j = 0\n    \n    # Check if both arrays are empty\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    \n    # If arr1 is empty, return the (k-j)th element in arr2\n    if len(arr1) == 0:\n        return arr2[k-j-1]\n    \n    # If arr2 is empty, return the (k-i)th element in arr1\n    if len(arr2) == 0:\n        return arr1[k-i-1]\n    \n    # If the first element of arr1 is smaller than the first element of arr2\n    if arr1[0] < arr2[0]:\n        i = 1\n        j = len(arr2)-1\n    else:\n        i = len(arr1)-1\n        j = 1\n    \n    while i <= j:\n        mid = (i+j)//2\n        \n        # If the mid element of arr1 is equal to k, return it\n        if k == mid+1:\n            return arr1[k-i-1]\n        \n        # If the mid element of arr1 is less than k, move the left half of arr1 to the right\n        elif k < mid+1:\n            j = mid-1\n        \n        # If the mid element of arr1 is greater than k, move the right half of arr1 to the left\n        else:\n            i = mid+1\n    \n    # If the loop is not exited, return None as the kth element is not present in the array\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the smaller array\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers\n    i = 0\n    j = 0\n\n    # Initialize variables to keep track of the kth smallest element found so far\n    min1 = float('inf')\n    min2 = float('inf')\n    kth_smallest = None\n\n    # Loop until we have found the kth smallest element\n    while i < n1 and j < n2:\n        # If arr1[i] is smaller, then we need to move j to the next element\n        if arr1[i] < arr2[j]:\n            if arr1[i] < min1:\n                min1 = arr1[i]\n                kth_smallest = arr1[i]\n            if arr1[i] == min1:\n                kth_smallest = min(kth_smallest, arr1[i])\n            i += 1\n        # Otherwise, arr2[j] is smaller, so we need to move i to the next element\n        else:\n            if arr2[j] < min2:\n                min2 = arr2[j]\n                kth_smallest = arr2[j]\n            if arr2[j] == min2:\n                kth_smallest = min(kth_smallest, arr2[j])\n            j += 1\n\n    # If we still have elements remaining in arr1, we add them to kth_smallest\n    while i < n1:\n        if arr1[i] < min1:\n            if arr1[i] < min1:\n                min1 = arr1[i]\n                kth_smallest = arr1[i]\n            if arr1[i] == min1:\n                kth_smallest = min(kth_smallest, arr1[i])\n        i += 1\n\n    # If we still have elements remaining in arr2, we add them to kth_smallest\n    while j < n2:\n        if arr2[j] < min2:\n            if arr2[j] < min2:\n                min2 = arr2[j]\n                kth_smallest = arr2[j]\n        j += 1\n\n    # Return the kth smallest element\n    return kth_smallest"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    if number < 10:\n        return False\n\n    total = 0\n    temp = number\n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n    # Initialize the sum of the digits to 0\n    sum_digits = 0\n    # Loop through each digit of the number\n    for digit in number_str:\n        # Add the current digit to the sum of digits\n        sum_digits += int(digit)\n    # Return True if the sum of digits is equal to the original number\n    return sum_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # convert the number to a string\n    number_str = str(number)\n\n    # initialize a variable to keep track of the sum of each digit raised to the power of the number of digits\n    sum_of_digits = 0\n\n    # loop through each digit in the number\n    for digit in number_str:\n        # convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit) ** len(number_str)\n\n    # check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a number is armstrong or not.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # initialize the sum to 0\n    sum_of_squares = 0\n    # loop over the digits of the number\n    for digit in num_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # square the digit and add it to the sum\n        sum_of_squares += digit_int ** 3\n    # compare the sum of squares to the original number\n    if sum_of_squares == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    '''\n    This function checks whether a given number is an Armstrong number or not.\n    '''\n    if number < 10:\n        return False\n    \n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    # Get the number of digits in the number\n    n = len(str(number))\n\n    # Calculate the sum of the cubes of the digits\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += (int(str(number)[i]) ** 3)\n\n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n\n    # calculate the power of each digit and add them up\n    power = sum([digit**len(digits) for digit in digits])\n\n    # check if the sum of the powers is equal to the original number\n    if power == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(num):\n    # Convert the number to string\n    num_str = str(num)\n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    # Loop through each digit of the number\n    for digit in num_str:\n        # Add the current digit to the sum\n        digit_sum += int(digit) ** len(num_str)\n    # Return True if the sum of digits is equal to the original number\n    return num == digit_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize a variable to hold the sum of the cube of the digits of the number\n    sum = 0\n    # loop through each digit of the number\n    for digit in str(number):\n        # convert the digit to an integer and square it\n        digit_squared = int(digit)**3\n        # add the squared digit to the sum variable\n        sum += digit_squared\n    # return True if the sum of the cubes of the digits is equal to the original number, otherwise return False\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    # convert the number to a list of digits\n    digits = [int(d) for d in str(number)]\n    # calculate the sum of the squares of each digit\n    squares = [d**3 for d in digits]\n    # calculate the sum of the digits\n    total = sum(digits)\n    # check if the total is equal to the sum of the squares of digits\n    if total == sum(squares):\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average\n\nn = int(input(\"Enter the number of natural numbers: \"))\nresult = sum_average(n)\nprint(\"Sum of first\", n, \"natural numbers is:\", result[0])\nprint(\"Average of first\", n, \"natural numbers is:\", result[1])"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        total += i\n        count += 1\n    \n    average = total / count\n    \n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i+1\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    average = sum(sum_list) / len(sum_list)\n    return sum_list, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function calculates the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n\nn = int(input(\"Enter the value of n: \"))\nsum_value, average_value = sum_average(n)\nprint(\"Sum of the first\", n, \"natural numbers is:\", sum_value)\nprint(\"Average of the first\", n, \"natural numbers is:\", average_value)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_value = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_value += i\n        count += 1\n    average = sum_value / count\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n\nn = int(input(\"Enter the value of n: \"))\nresult = sum_average(n)\nprint(\"The sum of the first\", n, \"natural numbers is:\", result[0])\nprint(\"The average of the first\", n, \"natural numbers is:\", result[1])"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, False otherwise.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # Check if the input number is even or not\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the frequency of characters in the string\n    freq_dict = {}\n\n    # iterate through each character in the string and update the frequency count in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # iterate through the dictionary and find the first repeated character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate over the character count dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the dictionary to find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, then the function returns None.\n    \"\"\"\n    char_set = set() # Create an empty set to store unique characters\n    for char in str1: # Iterate through the string\n        if char in char_set: # If the character is already present in the set\n            return char # Return the first repeated character\n        else:\n            char_set.add(char) # Add the character to the set\n    return None # If no repeated character is found, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that appears more than once in the string\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store character frequencies\n    freq = {}\n    \n    # loop through the string and update the frequencies in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary and return the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first repeated character\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character by iterating through the dictionary and keeping track of the first\n    # character that appears more than once\n    for char in freq:\n        if freq[char] > 1:\n            first_repeated = char\n            break\n\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ludic_numbers.append(i)\n        else:\n            ludic_numbers.append(3 * i + 1)\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n):\n        for j in range(2, n):\n            if i*j <= n:\n                lucids.append(i*j)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    i = 3\n    while i <= n:\n        if i % 2!= 0:\n            lucid.append(i)\n        i += 2\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i < 10:\n            ludic_numbers.append(i)\n        else:\n            digits = []\n            while i > 0:\n                digits.append(i%10)\n                i //= 10\n            digits.reverse()\n            for j in range(len(digits)):\n                if digits[j] > 0:\n                    digits[j] += 10\n                    ludic_numbers.append(int(''.join(str(digit) for digit in digits)))\n                    digits[j] -= 10\n                    break\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    i = 2\n    while i <= n:\n        if is_lucid(i):\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Helper function to check if a given integer is a lucid number or not.\n    \"\"\"\n    return is_prime(n) and is_prime(sum_of_digits(n))\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a given integer is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"\n    Helper function to find the sum of digits of a given integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(2, n+1):\n        lucid_num = 0\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(n + 1):\n        is_lucid = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        lucid_numbers.append(i * (2 * i - 1))\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words with spaces\n    reversed_s =''.join(reversed_words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the words in the list\n    words.reverse()\n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using whitespace as the delimiter\n    words = s.split()\n    # reverse the order of the words using slicing\n    reversed_words = words[::-1]\n    # join the reversed words back into a string separated by spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into words using whitespace as a delimiter\n    reversed_words = words[::-1]  # reverse the list of words using slicing\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces as separators"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split() # Splitting the string by spaces\n    reversed_words = words[::-1] # Reverse the order of the words\n    return \" \".join(reversed_words) # Joining the words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    reversed_string = \" \".join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given number is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            if is_prime(i):\n                return True\n            else:\n                return False\n    return True\n\nprint(prime_num(2)) # Output: True\nprint(prime_num(3)) # Output: True\nprint(prime_num(4)) # Output: True\nprint(prime_num(5)) # Output: True\nprint(prime_num(6)) # Output: True\nprint(prime_num(7)) # Output: False\nprint(prime_num(8)) # Output: False\nprint(prime_num(9)) # Output: False\nprint(prime_num(10)) # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if the integer is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n\n    # check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # check if the given number is equal to 2\n    if num == 2:\n        return True\n\n    # check if the given number is divisible by any number between 2 and the square root of the given number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # if none of the above conditions are true, then the given number is a prime number\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi / 180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.pi * degree / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.search() method to search the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the substring, start index, and end index\n    if match:\n        return match.group(0), match.start(), match.end()\n    # Otherwise, return None if no match is found\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If there is a match, return the substring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use regex search to find all matches\n    matches = re.findall(pattern, text)\n\n    # Iterate over all matches and extract the literals\n    literals = []\n    for match in matches:\n        start_index = text.index(match)\n        end_index = start_index + len(match)\n        literal = text[start_index:end_index]\n        literals.append(literal)\n\n    # Return all literals and their start and end indices\n    return literals, [match.start() for match in matches], [match.end() for match in matches]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0][0], matches[0][1], len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern. The function returns the matching substring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize bell_number list\n    bell_number = []\n\n    # Iterate from 0 to n\n    for i in range(n+1):\n\n        # If i is even, append 1 to bell_number\n        if i % 2 == 0:\n            bell_number.append(1)\n\n        # If i is odd, append bell_number[i//2] + 1 to bell_number\n        else:\n            bell_number.append(bell_number[i//2] + 1)\n\n    # Return bell_number[n]\n    return bell_number[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number using recursion.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n - 1) * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n - 1) * (bell_Number(n - 1)) + n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input.\n    The function returns a new list with the same elements as the input list, \n    but the L'th element removed.\n    '''\n    # initializing the new list\n    new_list = []\n    # iterating through the list\n    for i in range(len(list1)):\n        # checking if the index is equal to L-1\n        if i!= L-1:\n            # appending the elements to the new list\n            new_list.append(list1[i])\n    # returning the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Return the list with the k'th element removed\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    while k < len(list1):\n        list1.pop(0)\n        k += 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize variables to keep track of the first k elements and the rest\n    kth_element = list1[0]\n    remaining_elements = list1[1:]\n    # Loop through the list and remove the kth element\n    for i in range(len(remaining_elements)):\n        if i == L-1:\n            remaining_elements.pop(i)\n            break\n        if i < L-1:\n            remaining_elements[i], kth_element = kth_element, remaining_elements[i]\n    return remaining_elements"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    if len(list1) == L:\n        return []\n    elif L > len(list1):\n        return list1\n    else:\n        list1.pop(L - 1)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            list1[i], list1[k] = list1[k], list1[i]\n            k -= 1\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Initialize the list of indexes to keep\n    keep_indexes = []\n    # Initialize the index of the kth element to remove\n    kth_index = L - 1\n    # Loop through the list to find the index of the kth element\n    for i in range(len(list1)):\n        if i == kth_index:\n            # The kth element is at the end of the list, so it doesn't need to be kept\n            break\n        keep_indexes.append(i)\n    # Create a new list with the same elements as the original list, but with the kth element removed\n    new_list = [list1[i] for i in keep_indexes]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # return the list without the k'th element\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # If the length of the list is less than or equal to L, then there is no k'th element to remove.\n    if len(list1) <= L:\n        return list1\n    \n    # Create a new list without the k'th element.\n    new_list = list1[:L-1]\n    \n    # Return the new list.\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value variable to the first element of the first row\n    max_val = test_list[0][0]\n\n    # Iterate over the rows of the matrix\n    for row in test_list:\n        # Check if the current element is greater than the maximum value\n        if row[N-1] > max_val:\n            # If it is, update the maximum value\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the length of the first row of the matrix\n    first_row = len(test_list[0])\n\n    # check if the N is valid\n    if N < 1 or N > first_row:\n        return None\n\n    # create an empty list to store the max values\n    max_values = []\n\n    # loop through each row in the matrix\n    for row in test_list:\n        # check if the N is valid for this row\n        if N > len(row):\n            continue\n\n        # add the max value of the Nth column to the max_values list\n        max_values.append(max(row[N-1]))\n\n    # return the maximum value of the max_values list\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # checking if the matrix is not empty\n    if not test_list:\n        return None\n    \n    # getting the length of the first row\n    first_row_len = len(test_list[0])\n    \n    # checking if the length of the matrix is not equal to 0\n    if first_row_len == 0:\n        return None\n    \n    # getting the nth column index\n    nth_column_index = N-1\n    \n    # creating an empty list to store the max of each row\n    max_list = []\n    \n    # looping through each row of the matrix\n    for row in test_list:\n        # checking if the index of the nth column is valid\n        if nth_column_index < 0 or nth_column_index >= first_row_len:\n            return None\n        \n        # getting the nth column value\n        nth_column_value = row[nth_column_index]\n        \n        # checking if the nth column value is not None\n        if nth_column_value is not None:\n            # appending the max value to the list of max values for each row\n            max_list.append(nth_column_value)\n    \n    # getting the maximum value of the max list\n    max_value = max(max_list)\n    \n    # returning the maximum value of the nth column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a matrix represented as a list of lists and returns the maximum value of the N'th column.\n    '''\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    # Initialize the maximum value to the smallest possible number\n    max_value = float('-inf')\n    # Loop through each row in the matrix\n    for i in range(num_rows):\n        # Get the value of the N'th column in the current row\n        nth_col_value = test_list[i][N-1]\n        # Update the maximum value if the current value is greater\n        if nth_col_value > max_value:\n            max_value = nth_col_value\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1])\n        print(\"Max of the\", N, \"th column of row\", i+1, \"is\", max_val)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the list is empty or not\n    if len(test_list) == 0:\n        return None\n    \n    # get the length of the list\n    n = len(test_list)\n    \n    # iterate over the rows of the list\n    for i in range(n):\n        # check if the current row has n columns\n        if len(test_list[i]) == n:\n            # get the nth column of the row\n            col = test_list[i][N-1]\n            # check if the current column is greater than the max value\n            if col > max_val:\n                max_val = col\n    \n    # return the max value found\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the max variable with the first element in the test_list\n    max_val = test_list[0][N-1]\n    \n    # Loop through the rest of the rows\n    for i in range(1, len(test_list)):\n        # If the current element in the test_list is greater than max_val, update max_val\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n            \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('Input must be a list of lists.')\n    if not all(isinstance(sublist, list) for sublist in test_list):\n        raise TypeError('Input must be a list of lists.')\n    if len(test_list[0]) < N:\n        raise ValueError(f'The matrix must have at least {N} columns.')\n    \n    # Get then'th column\n    column = [row[N-1] for row in test_list]\n    \n    # Find the maximum value in the column\n    max_value = max(column)\n    \n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    # Create an empty list to store the merged lists\n    merged_list = []\n\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # Append the first element of the sublist to the first list in the merged list\n        merged_list.append([sublist[0], sublist[1]])\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if len(sublist)!= 2:\n            raise ValueError(\"Sublist should have two elements\")\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum\n    cumulative_sum = 0\n    \n    # loop through each element in the list\n    for element in test_list:\n        # if the element is not a tuple, skip it\n        if not isinstance(element, tuple):\n            continue\n        \n        # add the values from the tuple to the cumulative sum\n        cumulative_sum += sum(element)\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for element in test_list:\n        cumulative_sum += element\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize cumulative sum to 0\n    cumulative_sum = 0\n    # loop through each tuple in the list\n    for item in test_list:\n        # if the item is a tuple, append its elements to the cumulative sum\n        if isinstance(item, tuple):\n            cumulative_sum += sum(item)\n        # if the item is not a tuple, append it to the cumulative sum as a single value\n        else:\n            cumulative_sum += item\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the sum variable to 0\n    sum_list = []\n    # Loop through the list of tuples and add up each value\n    for item in test_list:\n        sum_list.append(sum_list[-1] + item)\n    # Return the cumulative sum list\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # Iterate through each element in the list\n    for item in test_list:\n        # Add the current element to the cumulative sum\n        cumulative_sum += item\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        averages.append(sum(nums[i])/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        sum_values = 0\n        for val in tup:\n            sum_values += val\n        average = sum_values / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values for each tuple\n    averages = []\n    \n    # Loop through each tuple in the input tuple\n    for i in range(len(nums)):\n        # Calculate the average of all values in the current tuple\n        average = sum(nums[i]) / len(nums[i])\n        # Append the average value to the averages list\n        averages.append(average)\n    \n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum = 0\n        count = 0\n        for num in tup:\n            sum += num\n            count += 1\n        average = sum / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = sum(num)\n        count = len(num)\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_num = sum(tup)\n        avg = sum_num/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_set in nums:\n        average = sum(num_set) / len(num_set)\n        result.append(average)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be equal.\")\n    else:\n        # Perform element-wise modulo operation\n        result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples do not have the same length.\")\n        return\n    \n    # perform element-wise modulo\n    modulo_tup = tuple([num1 % num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    \n    # return the result as a tuple\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the input tuples must be the same\")\n        return\n    \n    # Perform element-wise modulo\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n    else:\n        modulo_tup = ()\n        for i in range(len(test_tup1)):\n            modulo_tup += (test_tup1[i] % test_tup2[i],)\n        return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    def is_valid_move(x, y):\n        return x >= 0 and x < m and y >= 0 and y < n and grid[x][y] == 0\n\n    def bfs(x, y, d):\n        q = [(x, y, 0)]\n        seen = set()\n        while q:\n            cx, cy, steps_taken = q.pop(0)\n            if (cx, cy) == (m - 1, n - 1):\n                return steps_taken\n            if (cx, cy) in seen:\n                continue\n            seen.add((cx, cy))\n            for dx, dy in directions:\n                new_x, new_y = cx + dx, cy + dy\n                if is_valid_move(new_x, new_y) and (new_x, new_y) not in seen:\n                    new_d = steps_taken + 1\n                    if new_d <= d:\n                        q.append((new_x, new_y, new_d))\n\n    m, n = len(grid), len(grid[0])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    return bfs(0, 0, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    jumps = 0\n    step = 0\n    for i in range(n):\n        if steps[i] >= d:\n            step += 1\n            if step == steps[i]:\n                jumps += 1\n                step = 0\n        else:\n            step = 0\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Function to check if a point is reachable\n    def is_reachable(x, y):\n        return x >= 0 and x < steps and y >= 0 and y <= steps\n\n    # Function to count the number of jumps required\n    def count_jumps(x, y):\n        if not is_reachable(x, y):\n            return 0\n\n        # Check if we can reach (x+d, y) from (x, y)\n        if is_reachable(x+d, y):\n            return 1 + count_jumps(x+d, y)\n        else:\n            # If not, we need to move down\n            return 1 + count_jumps(x, y-1)\n\n    # Check if the starting point is reachable\n    if is_reachable(0, 0):\n        return count_jumps(0, 0)\n    else:\n        return 0"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Number of steps required to reach the point (0, d)\n    num_jumps_to_d = steps // abs(d)\n\n    # Number of remaining steps to reach the point (0, 0)\n    num_steps_to_zero = steps - num_jumps_to_d * abs(d)\n\n    # Return the minimum number of jumps required\n    return min(num_jumps_to_d, num_steps_to_zero)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > 0: \n        return steps \n    else: \n        return -1 "
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables\n    i, j = 0, 0  # starting point is (0, 0)\n    count = 0\n    \n    # Check if the point (i, j) is at (d, 0)\n    while i < d and j >= 0:\n        # Update the count and move in the given direction\n        count += 1\n        i += 1 if j < d else 0\n        j -= 1 if j >= 0 else 0\n    \n    # If the point (i, j) is at (d, 0), return the count\n    if i == d and j >= 0:\n        return count\n    \n    # If the point (i, j) is not at (d, 0), return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Parameters:\n    steps (int): The number of steps to reach the point (d, 0) from origin.\n    d (int): The height of the jump in meters.\n\n    Returns:\n    int: The minimum number of jumps required to reach the point (d, 0) from origin.\n\n    \"\"\"\n\n    # Initialize variables\n    current_pos = 0\n    jumps = 0\n\n    # Loop until we reach the point (d, 0) from origin\n    while current_pos < steps:\n        # Check if we can reach the point (d, 0) from the current position\n        if current_pos + d >= steps:\n            # If we can reach the point (d, 0) from the current position, increment the jumps and move ahead by d\n            jumps += 1\n            current_pos += d\n        else:\n            # If we cannot reach the point (d, 0) from the current position, move ahead by d\n            current_pos += d\n\n    # Return the minimum number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    #initialize variables\n    max_rows = len(steps)\n    curr_row = 0\n    curr_col = 0\n    jumps = 0\n    remaining_steps = steps[curr_row]\n    reached_end = False\n\n    #perform breadth-first search\n    while not reached_end and remaining_steps > 0:\n        #move to next row\n        curr_row += 1\n        if curr_row == max_rows:\n            reached_end = True\n        elif curr_row == d:\n            curr_col = max_rows-1\n            jumps += remaining_steps\n            remaining_steps = 0\n\n        #move to next col\n        curr_col += 1\n        if curr_col == max_rows:\n            curr_row -= 1\n            curr_col = 0\n            jumps += remaining_steps\n            remaining_steps = 0\n\n        #decrease remaining steps\n        remaining_steps -= 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    # Check if the given point (d, 0) is reachable from origin\n    if steps <= d:\n        return 0\n    \n    # Check for the minimum number of jumps required to reach the point (d, 0) from origin\n    for i in range(1, steps+1):\n        if i > d:\n            return i\n    \n    # If the point (d, 0) is not reachable from origin, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    distance, jumps = 0, 0\n    start_x, start_y = 0, 0\n    end_x, end_y = d, 0\n    \n    # Iterate through steps\n    for i in range(steps):\n        # If distance is greater than d, move in the opposite direction\n        if distance > d:\n            start_x, start_y = end_x, end_y\n            end_x, end_y = d, 0\n            distance = 0\n            jumps += 1\n        \n        # Calculate the distance and move to the next point\n        distance += steps - i\n        \n        # If the point is at the destination, update the answer and break out of the loop\n        if end_x == 0 and end_y == 0:\n            break\n        \n        # If the point is not at the destination, move to the next point\n        start_x, start_y = end_x, end_y\n        end_x = d\n        end_y = 0\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must be of equal length\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the element-wise division of the corresponding elements in the input lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n\n    Args:\n        nums1 (list): List of numbers to be divided.\n        nums2 (list): List of numbers to divide the first list by.\n\n    Returns:\n        list: List of the same length as the first list, where each element is the result of dividing the corresponding element of nums1 by the corresponding element of nums2.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero\")\n            return\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The length of the two lists are not equal.\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the two lists and divide each element by the second element\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Lists must be of equal length.'\n    else:\n        result = []\n        for i in range(len(nums1)):\n            if nums2[i] == 0:\n                result.append('Error: Division by zero.')\n            else:\n                result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a list to store the numbers\n    num_list = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the list\n        if char.isdigit():\n            num_list.append(char)\n\n    # Reverse the list of numbers\n    num_list.reverse()\n\n    # Concatenate the numbers with non-numbers\n    non_num_str = ''.join([char for char in test_str if char.isdigit() == False])\n\n    # Concatenate the reversed list of numbers and non-numbers\n    return num_list + non_num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize two pointers - one for the start and one for the end of the string\n    start = 0\n    end = len(test_str) - 1\n\n    # Loop through the string until both pointers meet\n    while start < end:\n        # Check if the current character is a number\n        if test_str[start].isdigit():\n            # If it is a number, move it to the end of the string\n            test_str = test_str[:start] + test_str[start:end] + test_str[end:]\n        else:\n            # If it is not a number, move on to the next character\n            start += 1\n\n        # Move the pointer to the next character\n        end -= 1\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # initialize variables\n    num_found = False\n    num_count = 0\n    num_str = ''\n    # iterate through the string\n    for i, c in enumerate(test_str):\n        # if the character is a number\n        if c.isdigit():\n            # add the number to the number string\n            num_str += c\n            # increment the number count\n            num_count += 1\n        else:\n            # if no number found yet, move on to the next character\n            if not num_found:\n                num_found = True\n            # if the number is found, move all the numbers to the end of the string\n            else:\n                # get the index of the first non-number character\n                non_num_index = test_str.find(c)\n                # remove the numbers from the string and move them to the end\n                test_str = test_str[:non_num_index] + num_str + test_str[non_num_index:]\n                # reset the number count\n                num_count = 0\n                # reset the number string\n                num_str = ''\n                # move on to the next character\n                num_found = False\n                continue\n    # return the updated string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_count = 0\n    for char in test_str:\n        if char.isdigit():\n            num_count += 1\n\n    if num_count > 0:\n        num_str = ''.join(filter(str.isdigit, test_str))\n        return num_str + test_str.replace(num_str, '')\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Define an empty list to store numbers\n    nums = []\n    # Loop through each word in the list\n    for word in words:\n        # If the word is a number, add it to the nums list\n        if word.isdigit():\n            nums.append(word)\n        # If the word is not a number, add it to the word list\n        else:\n            words.remove(word)\n            words.insert(0, word)\n    # Join the words back into a string\n    moved_str =''.join(words)\n    # Concatenate the original string with the moved numbers\n    moved_str += ''.join(nums)\n    # Return the moved string\n    return moved_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables to store numbers and non-numbers\n    nums = \"\"\n    others = \"\"\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a digit, add it to the \"nums\" string\n        if char.isdigit():\n            nums += char\n        # If the character is not a digit, add it to the \"others\" string\n        else:\n            others += char\n    # Combine the two strings and return the result\n    return nums + others"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    \n    for i in range(len(num_list)):\n        test_str = test_str.replace(num_list[i], \"\")\n    \n    for i in range(len(alpha_list)):\n        test_str = test_str.replace(alpha_list[i], num_list[i])\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n    test_str = ''.join(nums)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    return \"\".join(numbers) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [char for char in test_str if char.isdigit()]\n    rest = [char for char in test_str if not char.isdigit()]\n    \n    return ''.join(numbers) + ''.join(rest)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the subset sizes and their corresponding indexes\n    subset_dict = {}\n    for i, num in enumerate(a):\n        # Check if the current number can be added to the subset\n        if (num - 1) % 2 == 0:\n            # If it can, add it to the dictionary and set the size of the subset\n            if num not in subset_dict:\n                subset_dict[num] = [i]\n            else:\n                subset_dict[num].append(i)\n    # Find the maximum size subset\n    max_size = 0\n    for subset_size in subset_dict.values():\n        max_size = max(max_size, len(subset_size))\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    a.sort() # Sorting the list in ascending order\n    max_size = 1\n    curr_size = 1\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0: # If the current element is divisible by the previous element, increment the size of the subset\n            curr_size += 1\n            max_size = max(max_size, curr_size)\n        else: # If the current element is not divisible by the previous element, reset the size of the subset\n            curr_size = 1\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the numbers such that every pair is divisible.\n\n    :param a: a list of numbers\n    :return: the size of the largest subset of the numbers such that every pair is divisible\n    \"\"\"\n\n    # sort the input list in ascending order\n    a = sorted(a)\n\n    # initialize variables\n    result = 0\n    current_subset_size = 1\n    prev_sum = 0\n\n    # loop through the sorted list\n    for i in range(1, len(a)):\n        # calculate the difference between the current number and the previous number\n        diff = a[i] - a[i - 1]\n\n        # if the difference is divisible by 2, add 1 to the current subset size and update the previous sum\n        if diff % 2 == 0:\n            current_subset_size += 1\n            prev_sum = a[i]\n        # if the difference is not divisible by 2, subtract 1 from the current subset size and update the previous sum\n        else:\n            current_subset_size -= 1\n            prev_sum = a[i - 1]\n\n        # update the result if the current subset size is greater than the previous result\n        result = max(result, current_subset_size)\n\n    # return the result\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a set to store the distinct numbers in the list\n    nums = set(a)\n    \n    # Sort the numbers in ascending order\n    nums = sorted(nums)\n    \n    # Initialize the largest subset size to 0\n    largest_size = 0\n    \n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = len(nums) - 1\n    \n    while left < right:\n        # Calculate the sum of the two numbers in the subset\n        subset_sum = nums[left] + nums[right]\n        \n        # Check if the subset_sum is divisible by 2\n        if subset_sum % 2 == 0:\n            # If it is, update the largest subset size if necessary\n            if subset_sum > largest_size:\n                largest_size = subset_sum\n            \n            # Move the right pointer to the right\n            right -= 1\n        else:\n            # If it's not divisible by 2, move the left pointer to the right\n            left += 1\n    \n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    result = 0\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            result += 1\n        else:\n            break\n            \n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the count of divisible pairs\n    count_dict = {}\n    max_count = 0\n    current_count = 0\n    for num in a:\n        if num % 2 == 0:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        else:\n            if num - 2 in count_dict:\n                count_dict[num - 2] += 1\n            else:\n                count_dict[num - 2] = 1\n        current_count = sum(count_dict.values())\n        if current_count > max_count:\n            max_count = current_count\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create an empty list to store the sizes of subsets\n    sizes = []\n    \n    # Loop over all possible subsets of the input list\n    for subset in combinations(a, len(a)):\n        # Check if the sum of the subset is divisible by 2\n        if sum(subset) % 2 == 0:\n            # If it is, compute the size of the subset and add it to the list of sizes\n            sizes.append(len(subset))\n    \n    # Return the maximum size of the subset found\n    return max(sizes)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n    max_len = max(dp)\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j - i + 1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    # Create a set to store unique pairs of numbers\n    pairs = set()\n    # Initialize variables to store the maximum size of a subset and the current largest subset size\n    max_size = 0\n    current_size = 0\n    # Loop through the list and add unique pairs of numbers to the set\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.add((a[i], a[j]))\n    # Loop through the unique pairs and update the maximum size of the subset and the current subset size\n    for pair in pairs:\n        current_size += 1\n        if current_size > max_size:\n            max_size = current_size\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters:\n    arr1: the first sorted list\n    arr2: the second sorted list\n    n: the size of the lists\n    \n    This function returns the median of the two sorted lists.\n    '''\n    # Find the median of the two sorted lists using binary search\n    left, right = 0, n-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr1[mid] < arr2[mid]:\n            left = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            right = mid - 1\n        else:\n            return mid\n    # If the median is not found, return the average of the two middle elements\n    return (arr1[n//2] + arr2[n//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Create a list to store the merged lists\n    merged = []\n    \n    # Merge the two sorted lists\n    for i in range(n):\n        merged.append(min(arr1[i], arr2[i]))\n        \n    # Calculate the median based on the number of elements\n    if len(merged) % 2 == 0:\n        median = (merged[len(merged)//2] + merged[len(merged)//2 - 1]) / 2\n    else:\n        median = merged[len(merged)//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    merged = arr1 + arr2\n    \n    # Sort the merged array\n    sorted_arr = sorted(merged)\n    \n    # Get the middle element of the sorted array\n    mid = n // 2\n    \n    # If the array size is odd, return the middle element\n    if n % 2 == 1:\n        return sorted_arr[mid]\n    \n    # If the array size is even, return the average of the middle two elements\n    else:\n        return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Combine the two arrays into one array\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n\n    # Get the length of the combined array\n    combined_length = len(combined_arr)\n\n    # Calculate the index of the middle element\n    middle_index = combined_length // 2\n\n    # If the length of the combined array is odd, return the middle element\n    if combined_length % 2 == 1:\n        return combined_arr[middle_index]\n    # Otherwise, return the average of the middle two elements\n    else:\n        return (combined_arr[middle_index - 1] + combined_arr[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Combine both lists into one\n    combined_list = arr1 + arr2\n    # Sort the combined list\n    combined_list.sort()\n    # Get the middle element of the combined list\n    median_index = n // 2\n    median = combined_list[median_index]\n    # Check if the median is in the first half or second half of the combined list\n    if median_index % 2 == 0:\n        # If the median is in the first half, return the average of the two middle elements\n        return (combined_list[median_index-1] + combined_list[median_index]) / 2\n    else:\n        # If the median is in the second half, simply return the middle element\n        return combined_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[median_index]\n\n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # Concatenate the two input arrays\n    combined = arr1 + arr2\n    \n    # Sort the combined array\n    combined.sort()\n    \n    # Calculate the median index\n    median_index = n // 2\n    \n    # If the length of the combined array is odd, the median is the middle element\n    if n % 2 == 1:\n        return combined[median_index]\n    \n    # If the length of the combined array is even, the median is the average of the two middle elements\n    else:\n        return (combined[median_index - 1] + combined[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Initialize variables for the two sorted arrays and the median\n    arr1_sorted = sorted(arr1)\n    arr2_sorted = sorted(arr2)\n    median = None\n    \n    # If the length of the two arrays is odd, the median is the average of the two middle elements\n    if n % 2 == 1:\n        median = (arr1_sorted[n//2] + arr2_sorted[n//2]) / 2\n    # If the length of the two arrays is even, the median is the average of the two middle elements and the middle element of the last array\n    else:\n        median = (arr1_sorted[n//2] + arr2_sorted[n//2]) / 2 + arr2_sorted[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays of size n and returns their median.\n\n    The function first merges the two arrays into a single sorted array and then\n    returns the middle element of the resulting array.\n\n    Args:\n        arr1 (list): A sorted list of size n.\n        arr2 (list): A sorted list of size n.\n        n (int): The size of the arrays.\n\n    Returns:\n        int: The median of the two arrays.\n    \"\"\"\n    merged_array = arr1 + arr2\n    sorted_array = sorted(merged_array)\n    median_index = n // 2\n\n    if n % 2 == 0:\n        return (sorted_array[median_index - 1] + sorted_array[median_index]) / 2\n    else:\n        return sorted_array[median_index]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of n-th powers of the numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n\n    for num in nums:\n        print(num,num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        A list of the nth powers of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The list must have at least 2 elements.\"\n    \n    # Swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements.\")\n        return\n    \n    # Initialize the first and last element of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Interchange the first and last element\n    newList[0] = last\n    newList[-1] = first\n    \n    # Print the modified list\n    print(\"Modified List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # taking the length of the list\n    length = len(newList)\n    # interchanging the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # returning the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return \"The given list has less than 2 elements.\"\n    else:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # If the list has less than 2 elements, return the same list.\n        return newList\n    else: # If the list has more than 1 element, swap the first and last elements.\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList "
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * math.pi * r\n    a = 2 * r\n    b = 2 * r\n    c = 2 * r\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))/3\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    a = 2 * r * pi\n    b = 2 * r * math.sin(pi/3)\n    c = 2 * r * math.sin(2*pi/3)\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula for the area of the largest triangle that can be inscribed in a semicircle with a radius r\n    a = math.sqrt(3) * r\n    b = 2 * r\n    c = math.sqrt(3) * r\n    \n    # Calculate the semiperimeter of the largest triangle\n    s = (a + b + c) / 2\n    \n    # Calculate the area of the largest triangle\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # approximate area of a triangle with sides of length 1\n    s = 0.5 * r * r\n    # approximate area of a circle with radius r\n    a = 3.14159265 * r * r\n    # approximate area of the largest triangle that can be inscribed in a semicircle\n    a_max = (s * 2) / a\n    # approximate area of the smallest triangle that can be inscribed in a semicircle\n    a_min = (s * (2 * r - s)) / a\n    return a_max\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # First, we need to find the hypotenuse of the largest triangle that can be inscribed in a semicircle\n    h = r * (2 - 1 / 2 ** 0.5)\n\n    # Next, we can find the area of the largest triangle using the Pythagorean theorem\n    area = 0.5 * r * r\n\n    # Finally, we can use the formula for the area of a triangle to find the area of the largest triangle that can be inscribed in a semicircle\n    area_max = 0.5 * h * h\n\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the area of a triangle using Heron's formula\n    def area_of_triangle(a, b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return area\n\n    # calculate the area of the largest triangle\n    max_area = 0\n    for i in range(1, 11):\n        for j in range(i + 1, 11):\n            for k in range(j + 1, 11):\n                a = area_of_triangle(1, i, j)\n                b = area_of_triangle(1, j, k)\n                c = area_of_triangle(1, k, i)\n                if a + b > max_area and a + c > max_area and b + c > max_area:\n                    max_area = a + b + c\n\n    # calculate the area of a semicircle with the given radius\n    area = (3 * r * r) / (4 * (3 * r - 1))\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_triangle_area = 0\n    for i in range(1, 11):\n        for j in range(i + 1, 11):\n            for k in range(j + 1, 11):\n                a = area_of_triangle(1, i, j)\n                b = area_of_triangle(1, j, k)\n                c = area_of_triangle(1, k, i)\n                if a + b > max_triangle_area and a + c > max_triangle_area and b + c > max_triangle_area:\n                    max_triangle_area = a + b + c\n\n    # return the maximum of the two areas\n    return max(max_area, max_triangle_area)\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the base and height of the largest triangle\n    base = 2*r\n    height = r**2\n    \n    # Calculate the area of the largest triangle\n    area = (base * height) / 2\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of a triangle with sides of length a\n    def triangle_area(a, b, c):\n        return 0.5 * a * b * c\n\n    # calculate the semi-perimeter of a semicircle with radius r\n    def semicircle_perimeter(r):\n        return 2 * math.pi * r\n\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    def max_triangle_area(r):\n        # find the largest triangle that can be inscribed in a semicircle with radius r\n        a = semicircle_perimeter(r) / 2\n        for i in range(3):\n            # try increasing the side length of the triangle\n            for j in range(i+1, 4):\n                # check if the triangle is larger than the current maximum\n                if triangle_area(a, r, r) > max_area:\n                    max_area = triangle_area(a, r, r)\n                    max_triangle = (a, r, r)\n        return max_area, max_triangle\n\n    # call the function to calculate the area and the triangle\n    max_area, max_triangle = max_triangle_area(r)\n    return max_area, max_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # formula to find the area of a triangle\n    s = (3 * r**2) / (4 * math.tan(math.pi/3))\n\n    # formula to find the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * r**2) / (4 * math.tan(math.pi/3))\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for num in range(start, end + 1):\n        if num!= array[num]:\n            return num\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers as input and returns the smallest missing number in the array.\n\n    Parameters:\n    array: A list of natural numbers.\n    start: An optional starting index. Default: 0.\n    end: An optional ending index. Default: None.\n\n    Returns:\n    The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the array is empty\n    if len(array) == 0:\n        return None\n\n    # Initialize the start and end indices if they are not provided\n    if end is None:\n        end = len(array) - 1\n\n    # Loop through the array from start to end\n    for i in range(start,end+1):\n        # Check if the current number is present in the array\n        if array[i] == i+1:\n            # If it is present, move to the next index\n            continue\n        else:\n            # If it is not present, return the current index as the missing number\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    # Get the range of indices of the list\n    if end is None:\n        end = len(array) - 1\n    # Initialize the missing number as the first index\n    missing_number = start\n    # Iterate through the list and compare each element with the missing number\n    for i in range(start, end + 1):\n        if array[i]!= missing_number:\n            # If the element is smaller than the missing number, increment the missing number\n            if array[i] < missing_number:\n                missing_number += 1\n            # If the element is equal to the missing number, move to the next index\n            else:\n                break\n    # If the missing number is still the last index in the list, return the next smallest index\n    if missing_number == end + 1:\n        return start\n    else:\n        return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number in the list.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # Check if the input array is sorted\n    if array[start] > array[end]:\n        print(\"Error: Array is not sorted\")\n        return None\n    \n    # Find the first missing number from the given array\n    for i in range(start,end+1):\n        if array[i]!= i+1:\n            return i+1\n    \n    # If all the numbers in the array are in the correct range, return None\n    return None"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even and odd numbers separately.\n    \"\"\"\n    even_lst = []\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n        else:\n            odd_lst.append(num)\n    return even_lst, odd_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_nums = []\n    \n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    \n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    \n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list: \n        if i % 2 == 0: \n            even_numbers.append(i) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list with only the even numbers from a given list of numbers.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \n    Args:\n        ele: a coordinate tuple\n        sub (list): a list of tuples, each representing a sub-region of the same coordinate system.\n            If not provided, the entire coordinate system is considered.\n            \n    Returns:\n        A list of all adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        # If sub is not provided, consider the entire coordinate system.\n        sub = [(0, 0), (1, 0), (0, 1), (1, 1), (0, -1), (1, -1), (0, -1), (1, -1)]\n    adj_coords = []\n    for sub_ele in sub:\n        row, col = sub_ele\n        for i in range(1, 4):\n            for j in range(1, 4):\n                new_row = row + i\n                new_col = col + j\n                if (new_row, new_col)!= ele:\n                    adj_coords.append((new_row, new_col))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    # set up the adjacent coordinates list\n    adj = []\n    # add adjacent x coordinates\n    adj.append((x+1, y))\n    adj.append((x-1, y))\n    # add adjacent y coordinates\n    adj.append((x, y+1))\n    adj.append((x, y-1))\n    # add the current coordinate to the sub list\n    sub.append(ele)\n    # recursively call the function for each adjacent coordinate\n    for i in adj:\n        adjac(i, sub)\n    # return the sublist containing all adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if i!= j and abs(i - j) == 1:\n                adj.append((ele[i], ele[j]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        adj_coords = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n        return adj_coords\n    elif len(ele) == 3:\n        adj_coords = [(ele[0]+1, ele[1], ele[2]), (ele[0]-1, ele[1], ele[2]), (ele[0], ele[1]+1, ele[2]), \n                       (ele[0], ele[1]-1, ele[2]), (ele[0], ele[1], ele[2]+1), (ele[0], ele[1], ele[2]-1)]\n        return adj_coords\n    elif len(ele) == 4:\n        adj_coords = [(ele[0]+1, ele[1], ele[2]), (ele[0]-1, ele[1], ele[2]), (ele[0], ele[1]+1, ele[2]), \n                       (ele[0], ele[1]-1, ele[2]), (ele[0], ele[1], ele[2]+1), (ele[0], ele[1], ele[2]-1),\n                       (ele[1]+1, ele[0], ele[2]), (ele[1]-1, ele[0], ele[2]), (ele[1], ele[0]+1, ele[2]), \n                       (ele[1], ele[0]-1, ele[2]), (ele[1], ele[0], ele[2]+1), (ele[1], ele[0], ele[2]-1),\n                       (ele[2]+1, ele[1], ele[0]), (ele[2]-1, ele[1], ele[0]), (ele[2], ele[1]+1, ele[0]), \n                       (ele[2], ele[1]-1, ele[0]), (ele[2], ele[1], ele[0]+1), (ele[2], ele[1], ele[0]-1)]\n        return adj_coords\n    else:\n        print(\"Invalid input tuple length\")"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    res = []\n    if y > 0:\n        res.append((x, y-1))\n    if y < 100:\n        res.append((x, y+1))\n    if x > 0:\n        res.append((x-1, y))\n    if x < 100:\n        res.append((x+1, y))\n    return res + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < len(sub):\n        sub.append((x, y+1))\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < len(sub):\n        sub.append((x+1, y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if i!= j and (i-1, j) not in sub and (i+1, j) not in sub and (i, j-1) not in sub and (i, j+1) not in sub:\n                adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)] + sub "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj_coords + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a coordinate tuple as an argument and returns all the adjacent coordinates.\n    \"\"\"\n    # Extract the row and column from the coordinate tuple\n    row, col = ele\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj_coords = []\n\n    # Check if the current coordinate is within the boundaries of the matrix\n    if row < 0 or col < 0 or row >= n or col >= m:\n        return adj_coords\n\n    # Check if the current coordinate is the upper left corner of the matrix\n    if row == 0 and col == 0:\n        adj_coords.append((n-1, col))\n    # Check if the current coordinate is the lower right corner of the matrix\n    elif row == n-1 and col == m-1:\n        adj_coords.append((0, col))\n    # Check if the current coordinate is in the top row\n    elif row == 0:\n        adj_coords.append((row, col+1))\n        adj_coords.append((row, col-1))\n    # Check if the current coordinate is in the bottom row\n    elif row == n-1:\n        adj_coords.append((row+1, col))\n        adj_coords.append((row-1, col))\n    # Check if the current coordinate is in the left column\n    elif col == 0:\n        adj_coords.append((row+1, col))\n        adj_coords.append((row-1, col))\n    # Check if the current coordinate is in the right column\n    elif col == m-1:\n        adj_coords.append((row+1, col))\n        adj_coords.append((row-1, col))\n    # Check if the current coordinate is in the top left corner of the matrix\n    elif row == 0 and col == 0:\n        adj_coords.append((n-1, col+1))\n        adj_coords.append((n-1, col-1))\n    # Check if the current coordinate is in the top right corner of the matrix\n    elif row == 0 and col == m-1:\n        adj_coords.append((n-1, col+1))\n        adj_coords.append((n-1, col-1))\n    # Check if the current coordinate is in the bottom left corner of the matrix\n    elif row == n-1 and col == 0:\n        adj_coords.append((0, col+1))\n        adj_coords.append((0, col-1))\n    # Check if the current coordinate is in the bottom right corner of the matrix\n    elif row == n-1 and col == m-1:\n        adj_coords.append((0, col+1))\n        adj_coords.append((0, col-1))\n    # If the current coordinate is not one of the four corners or in the top or bottom rows or left or right columns, it is a valid adjacent coordinate\n    else:\n        adj_coords.append((row+1, col+1))\n        adj_coords.append((row-1, col+1))\n        adj_coords.append((row+1, col-1))\n        adj_coords.append((row-1, col-1))\n\n    # Add the current coordinate to the list of adjacent coordinates\n    adj_coords.append(ele)\n\n    # Return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text\n\ntext = input(\"Enter the string: \")\nnew_text = replace_spaces(text)\nprint(\"Original String:\", text)\nprint(\"New String:\", new_text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n    new_text = spaces.join(underscore.join(text.split()).split())\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Function to replace spaces with underscores\n    def replace_spaces_underscore(text):\n        return text.replace(' ', '_')\n\n    # Function to replace underscores with spaces\n    def replace_underscore_spaces(text):\n        return text.replace('_','')\n\n    # Checking if the input string contains only spaces or only underscores\n    if text.isalpha():\n        # If the input string contains only spaces, replace them with underscores\n        if text.replace(' ', '').isalpha():\n            text = replace_spaces_underscore(text)\n        # If the input string contains only underscores, replace them with spaces\n        elif text.replace('_', '').isalpha():\n            text = replace_underscore_spaces(text)\n\n    # Checking if the input string contains spaces and underscores\n    else:\n        # If the input string contains spaces, replace them with underscores\n        if text.replace(' ', '').replace('_', '').isalpha():\n            text = replace_spaces_underscore(text)\n        # If the input string contains underscores, replace them with spaces\n        elif text.replace('_', '').replace(' ', '').isalpha():\n            text = replace_underscore_spaces(text)\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Create a new string to store the modified text\n    modified_text = \"\"\n\n    # Loop through each character in the input string\n    for char in text:\n        # Check if the character is a space\n        if char == \" \":\n            # If it is, replace it with an underscore\n            modified_text += \"_\"\n        # If the character is not a space, add it to the modified string as is\n        else:\n            modified_text += char\n\n    # Return the modified string\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Create a new string with the same length as the input string\n    result = text * 2\n    \n    # Loop through each character in the input string\n    for i in range(len(text)):\n        # If the character is a space, replace it with an underscore\n        if text[i] =='':\n            result[i] = '_'\n        # If the character is an underscore, replace it with a space\n        elif text[i] == '_':\n            result[i] =''\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n\n    for i in range(len(num_list)-1, zero_index-1, -1):\n        num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize pointers for the two pointers (one for the original list and one for the new list)\n    i = 0\n    j = 0\n    \n    # Traverse through the original list\n    while i < len(num_list):\n        # If the current element is not zero, move it to the new list\n        if num_list[i]!= 0:\n            num_list[j] = num_list[i]\n            j += 1\n        # Increment the pointer for the original list\n        i += 1\n        \n    # Truncate the original list to the size of the new list\n    num_list = num_list[:j]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    num_list[count:] = [0] * (len(num_list) - count)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Create an empty list to store the non-zero elements\n    non_zero_list = []\n\n    # Iterate through the list\n    for num in num_list:\n        # If the element is not zero, add it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Iterate through the non-zero list again and append all zeroes to the end of the original list\n    for num in non_zero_list:\n        num_list.append(num)\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a Python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize a counter for the number of non-zeroes\n    count = 0\n    # loop through the list and find the first non-zero number\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a copy of the list to avoid modifying the original\n    num_list_copy = num_list[:]\n    # Traverse the list from left to right\n    for i in range(len(num_list)):\n        # If the current element is zero, move it to the end of the list\n        if num_list_copy[i] == 0:\n            # Traverse the remaining elements from right to left to find the first non-zero element\n            for j in range(len(num_list)-1, i, -1):\n                if num_list_copy[j]!= 0:\n                    num_list_copy[i], num_list_copy[j] = num_list_copy[j], num_list_copy[i]\n                    break\n            else:\n                # If no non-zero element is found, append the zero at the end\n                num_list_copy.append(0)\n    return num_list_copy"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            break\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return arr[0] ^ arr[1]\n\n    # XOR of first and last elements\n    xor_sum = arr[0] ^ arr[n - 1]\n\n    # XOR of pairs\n    for i in range(1, n - 1):\n        xor_sum ^= arr[i] ^ arr[i + 1]\n\n    # XOR of last and first elements\n    xor_sum ^= arr[n - 1] ^ arr[0]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of two numbers \n    def xor(a,b) : \n        return a^b\n\n    # Sum of xor of all pairs of numbers in the given list \n    sum_xor = sum([xor(arr[i],arr[j]) for i in range(n) for j in range(i+1,n)])\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    \n    # iterate through the list\n    for i in range(n):\n        # iterate through the remaining list elements\n        for j in range(i+1, n):\n            # calculate the xor of the current pair and add to sum\n            sum += arr[i] ^ arr[j]\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    #initialize the sum to zero\n    xor_sum=0\n\n    #iterate through the list and calculate the xor of each pair\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum+=arr[i]^arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    # extract elements from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable (e.g. a list) as input, converts it to a list of tuples, and sorts it using the heap sort algorithm.\n    '''\n    \n    # Convert the input iterable to a list of tuples\n    input_list = list(iterable)\n    \n    # Define a heapify function to convert the list to a max-heap\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        \n        if l < n and arr[l] > arr[largest]:\n            largest = l\n            \n        if r < n and arr[r] > arr[largest]:\n            largest = r\n            \n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n            \n    # Build the max-heap\n    for i in range(len(input_list) // 2 - 1, -1, -1):\n        heapify(input_list, len(input_list), i)\n    \n    # Extract elements from the heap\n    result = []\n    for i in range(len(input_list)):\n        result.append(input_list[0])\n        heapify(input_list, i, 0)\n        \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, i, 0)\n\ndef heapify(iterable, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and iterable[left] > iterable[largest]:\n        largest = left\n\n    if right < n and iterable[right] > iterable[largest]:\n        largest = right\n\n    if largest!= i:\n        iterable[i], iterable[largest] = iterable[largest], iterable[i]\n        heapify(iterable, n, largest)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = list(iterable)\n    heapq.heapify(heap)\n    sorted_heap = []\n    while heap:\n        sorted_heap.append(heapq.heappop(heap))\n    return sorted_heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the given iterable to a list and create a max heap\n    arr = list(iterable)\n    heap = hq.heapify(arr)\n\n    # Extract all elements from the heap and convert back to a list\n    sorted_arr = []\n    while heap:\n        sorted_arr.append(hq.heappop(heap))\n\n    return sorted_arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    heap_size = len(heap)\n    while heap_size > 1:\n        # swap the root element with the last element\n        hq.heappushpop(heap, heap.pop())\n        heap_size -= 1\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build a max heap from the input list\n    hq.heapify(iterable)\n    # Extract elements from the heap in sorted order\n    for i in range(n-1, 0, -1):\n        hq.heapreplace(iterable, iterable[i])\n    # Convert the heap back to a list\n    sorted_list = [iterable[i] for i in range(n)]\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profitable investment\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0:\n        return \"No profit or loss possible\"\n    elif actual_cost >= sale_amount:\n        return \"No profit or loss possible\"\n    else:\n        return \"The given amount has no profit and no loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # If actual cost is greater than sale amount, it means there is a loss\n    if actual_cost > sale_amount: \n        return False\n    \n    # If actual cost is less than or equal to sale amount, it means there is a profit\n    if actual_cost <= sale_amount: \n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return \"Loss\"\n    elif sale_amount > actual_cost:\n        return \"Profit\"\n    else:\n        return \"Neither\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss for the given amount\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check whether the profit and loss are zero or not\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss for the given sale\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if there is any profit or loss\n    if profit == 0 and loss == 0:\n        print(\"No profit or loss\")\n    else:\n        # Calculate the total profit and loss\n        total_profit = profit + loss\n        total_loss = profit - loss\n\n        # Calculate the percentage of profit and loss\n        profit_percentage = profit / sale_amount * 100\n        loss_percentage = loss / sale_amount * 100\n\n        # Print the results\n        print(\"Profit: {:.2f}%\".format(profit_percentage))\n        print(\"Loss: {:.2f}%\".format(loss_percentage))\n        print(\"Total Profit: {:.2f}\".format(total_profit))\n        print(\"Total Loss: {:.2f}\".format(total_loss))"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit == 0 and loss == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (float): The actual cost of the sale.\n        sale_amount (float): The amount that was sold.\n\n    Returns:\n        bool: True if there is no loss and no profit, False otherwise.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc_temp = 35.74 + 0.6215*v - 35.75*math.log(t) + 0.4275*t*(1 - 0.14*t)*math.log(t)\n    \n    # Calculate the wind chill index\n    wc_index = round(wc_temp/t*10)\n    \n    return wc_index\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in the wind velocity in km/h and temperature in celsius and returns the wind chill index rounded to the nearest integer.\n\n    Parameters:\n    v (float): The wind speed in km/h.\n    t (float): The temperature in celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    '''\n\n    # Calculate the wind chill temperature using the formula:\n    # w = 0.6219 * T + 11.37\n    # where w is the wind chill temperature, T is the temperature, and w is rounded to the nearest integer.\n    w = int(round(0.6219 * t + 11.37))\n\n    # Check if the wind chill temperature is within the range of 0-30. If not, set it to 0.\n    if w < 0:\n        w = 0\n    elif w > 30:\n        w = 30\n\n    # Calculate the wind speed in m/s.\n    ws = v * 1.60934\n\n    # Calculate the heat capacity of water at constant pressure (Cp) and absolute zero (Za).\n    Cp = 1004.6\n    Za = 273.15\n\n    # Calculate the dewpoint temperature using the formula:\n    # D = 243.04 * (1 - exp((17.625 * (T - 273.15)) / (T - 237.3)))\n    D = 243.04 * (1 - math.exp((17.625 * (w - 273.15)) / (w - 237.3)))\n\n    # Calculate the skin temperature using the formula:\n    # S = 243.04 * (1 - exp((17.625 * (T - 273.15)) / (T - 237.3)))\n    S = 243.04 * (1 - math.exp((17.625 * (D - 273.15)) / (D - 237.3)))\n\n    # Calculate the humidity ratio using the formula:\n    # RH = 100 * (V / T)\n    RH = 100 * (ws / T)\n\n    # Calculate the vapor pressure deficit using the formula:\n    # PV = Cp * (T - 273.15) * (1 - RH / 100)\n    PV = Cp * (w - 273.15) * (1 - RH / 100)\n\n    # Calculate the skin conductance using the formula:\n    # G = 0.034 * (T - 15) * (T - 25)\n    G = 0.034 * (w - 15) * (w - 25)\n\n    # Calculate the latent heat of vaporization using the formula:\n    # LH = 250 * (1 - RH / 100)\n    LH = 250 * (1 - RH / 100)\n\n    # Calculate the water vapor pressure using the formula:\n    # Q = 2 * LH / (cp * T)\n    Q = 2 * LH / (Cp * S)\n\n    # Calculate the sensible heat flux using the formula:\n    # Qs = (PV - Q) / G\n    Qs = (PV - Q) / G\n\n    # Calculate the heat flux of air entering the skin using the formula:\n    # Qa = 0.01 * (T ** 2)\n    Qa = 0.01 * (w ** 2)\n\n    # Calculate the sensible heat flux of air entering the skin using the formula:\n    # Qs = Qs - Qa\n    Qs = Qs - Qa\n\n    # Calculate the sensible heat index using the formula:\n    # Si = w - (0.6219 * (T + 11.37))\n    Si = w - (0.6219 * (w + 11.37))\n\n    # Calculate the wind chill index using the formula:\n    # Wi = 35.74 + 0.6215 * T + 35.75 * S - 0.79 * Qs + 0.00"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    return round(35.74 + 0.6215 * (t - 273.15) - 35.75 * math.log(v * 0.00062196) + 0.4275 * (t - 273.15) * math.log(v * 0.00062196))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = round(35.74 + 0.6215*t - 35.75*math.log(v*0.001) + 0.4275*t*math.log(v*0.001))\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n    \n    # Calculate the dew point temperature using the ideal gas law\n    dp = (17.625 * v / (2.0 * math.pi * k))**(1/5)\n    \n    # Calculate the wind chill temperature\n    wc = 35.74 + (0.6215 * dp) - (35.75 * (v**0.16) * ((math.log(t/dp))/(math.log(10))))\n    \n    # Round the wind chill temperature to the nearest integer\n    wc = int(round(wc))\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill index\n    c = 0.622\n    w = v * math.cos(math.radians(t))\n    w = w * (c + (c*(t-273.15))/100)\n    # Round wind chill index to the nearest integer\n    w = round(w)\n    return w"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer.\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index in celsius\n    \"\"\"\n    # convert to knots\n    wind_speed_knots = v * 1.943844\n\n    # calculate the dew point temperature using the formula DewPoint = (2/3) * T + (1/3) * (T - 273.15)\n    dew_point = (2/3) * t + (1/3) * (t - 273.15)\n\n    # calculate the wind chill index using the formula Wc = (13.12 + 0.6215 * W + 11.37 * (T - 8) - 0.3965 * (T - 8)^2) / (1 - 0.14 * (T - 8) + 0.018 * (T - 8)^2)\n    wc = (13.12 + 0.6215 * wind_speed_knots + 11.37 * (t - 8) - 0.3965 * (t - 8)**2) / (1 - 0.14 * (t - 8) + 0.018 * (t - 8)**2)\n\n    # round to nearest integer\n    return int(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the dew point temperature using the formula: T = T_f - (0.6219 * (log(rh))^0.16)\n    # Where T_f is the temperature at the freezing point of water and rh is the relative humidity\n    T_f = 288.15\n    rh = 100 - v / 3.6\n    T = T_f - (0.6219 * (math.log(rh))**0.16)\n    \n    # Calculate the wind chill index using the formula: WCI = 13.12 + 0.6215 * T - 11.37 * math.exp(-0.0928 * T) + 0.3965 * math.exp(-0.0143 * T)\n    WCI = 13.12 + 0.6215 * T - 11.37 * math.exp(-0.0928 * T) + 0.3965 * math.exp(-0.0143 * T)\n    \n    # Round the wind chill index to the nearest integer and return the result\n    return int(round(WCI))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Formula: WCI = 13.12 + 0.6215 * T - 11.37 * math.log(T) + 0.3965 * math.pow(T, 2) - 0.5688 * math.pow(T, 3) + 0.0163 * math.pow(T, 4)\n    wci = 13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * t**2 - 0.5688 * t**3 + 0.0163 * t**4\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 20:\n        wch = 0\n    elif 20 < v <= 60:\n        wch = (v**0.16)*(math.log((t+273.15)/273.15)+0.0065)\n    else:\n        wch = 255\n        \n    wch = round(wch)\n    return wch"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initializing the sum of names lengths\n    total = 0\n\n    # Iterating through the list of names\n    for name in sample_names:\n        # Removing the lowercase letter from the start of the name\n        name = name[0].upper() + name[1:]\n        # Appending the length of the name to the sum\n        total += len(name)\n\n    # Returning the sum of names lengths\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize variables\n    total_length = 0\n    \n    # Iterate through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n        \n    # Return the total length of the names after removing the lowercase ones\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of names lengths\n    total_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name and move on to the next one\n            continue\n        # if the name does not start with a lowercase letter, add its length to the total length variable\n        total_length += len(name)\n\n    # return the total length of all names that did not start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a function to check if a string starts with a lowercase letter\n    def starts_with_lowercase(string):\n        return string[0].islower()\n\n    # Initialize a variable to store the sum of the lengths of the names that do not start with a lowercase letter\n    non_lowercase_sum = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter using the starts_with_lowercase function\n        if not starts_with_lowercase(name):\n            # If the name does not start with a lowercase letter, add its length to the non_lowercase_sum variable\n            non_lowercase_sum += len(name)\n\n    # Return the sum of the lengths of the names that do not start with a lowercase letter\n    return non_lowercase_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in lowercase_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper(): # check if the first letter of the name is uppercase\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    lengths = [len(name) for name in sample_names]\n    return sum(lengths)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(([^)]*)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\([^)]*\\))'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis and what's inside them\n    cleaned_items = re.sub(r'\\([^)]*\\)', '', items)\n    return cleaned_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use a regex to match the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    # loop over the items and remove the parenthesis\n    for item in items:\n        # remove any leading or trailing spaces\n        item = item.strip()\n        # check if the item is in parentheses\n        if pattern.match(item):\n            # if it is, remove the parentheses and the enclosed text\n            item = pattern.sub('', item)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (n + 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 4*i*(n-i)\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first and second nonagonal numbers\n    i = 1\n    j = 1\n    # Calculate the nth nonagonal number\n    while i <= n:\n        # Add the current nonagonal number to the sum\n        sum = i + j\n        # Check if the sum is equal to n\n        if sum == n:\n            # Return the sum\n            return sum\n        # Move to the next nonagonal number\n        i += 1\n        j += 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i * (n - i + 1)\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the nonagonal number and the number of squares\n    nonagonal = 0\n    squares = 0\n\n    # Loop through the number of squares\n    for i in range(n):\n        # Add the next square to the total\n        squares += i\n\n        # If the total is odd, then the number is nonagonal\n        if squares % 2 == 1:\n            nonagonal += squares\n\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        return \"Please enter a non-negative integer.\"\n    # Check if n is a prime number\n    if n == 1 or n == 2:\n        return \"1 is the only prime number.\"\n    i = 1\n    nonagonal = 0\n    while i <= n:\n        nonagonal += 4 * (n - i + 1)\n        i += 1\n    return nonagonal\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    nonagonal_count = 0\n    while nonagonal_count < n:\n        if i * (i + 1) % 2 == 0:\n            nonagonal_count += 1\n        i += 1\n    return nonagonal_count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (is_nonagonal(n//2) - 1)\n    else:\n        return 2 * (is_nonagonal((n-1)//2) - 1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Error: n must be a positive integer.\"\n\n    # Initialize variables for nonagonal number and row count\n    nonagonal = 0\n    count = 1\n\n    # Loop until we reach the nth row\n    while count <= n:\n        # Add the current row to the nonagonal number\n        nonagonal += count\n\n        # Increment the row count\n        count += 1\n\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n**2 + 2 * n - 1) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # remove all non-word characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # iterate over the words and check if 'z' is in the middle of the word\n    for word in words:\n        if word[1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match 'z' at the start and end of a word\n    pattern = r'\\b[zZ]\\w*'\n    matches = re.findall(pattern, text)\n    # Check if any matches were found\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    word_pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    words = re.findall(word_pattern, text)\n    if words:\n        for word in words:\n            if 'z' in word:\n                return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if the word 'z' exists at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    \n    # If no 'z' found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?=(?:[^a-z]*|[a-z]*[^a-z])(?:z))(?!(?:^|[^a-z])[z](?:$|[^a-z]))'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all the words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through the words and check if 'z' is not at the start or end of the word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    \n    # If no 'z' was found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b\\w+\\b'\n    matches = re.findall(word_pattern, text)\n\n    for match in matches:\n        if match.startswith('z') and match.endswith('z'):\n            print(f'{match} found in the middle of the word.')\n        elif match.startswith('z') and not match.endswith('z'):\n            print(f'{match} found at the start of the word.')\n        elif not match.startswith('z') and match.endswith('z'):\n            print(f'{match} found at the end of the word.')\n        else:\n            continue"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        input_copy = input[:]\n        start = 0\n        end = k - 1\n        while start < end:\n            input_copy[start], input_copy[end] = input_copy[end], input_copy[start]\n            start += 1\n            end -= 1\n        return reverse_Array_Upto_K(input_copy, k)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input and returns the reversed array upto position k.\n    '''\n    n = len(input)\n    # reverse the first n-k elements\n    input[:n-k] = input[:n-k][::-1]\n    # reverse the remaining elements\n    input[n-k:] = input[n-k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    #create a new array to store the reversed part of the input array\n    reverse_array = input[:k]\n    #reverse the array from k to the last element\n    reverse_array = reverse_array[::-1]\n    #append the remaining part of the array to the end of the reverse_array\n    reverse_array += input[k:]\n    #return the reversed array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #initialize two pointers, one for the start and the other for the end of the array\n    start = 0\n    end = len(input)-1\n    \n    #swap the elements at the start and k positions if they are not equal\n    while start<k and input[start]!=input[k]:\n        temp = input[start]\n        input[start] = input[k]\n        input[k] = temp\n        start+=1\n        k-=1\n    \n    #reverse the remaining elements of the array\n    while start<end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start+=1\n        end-=1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if k > length:\n        return \"Invalid input\"\n    else:\n        left, right = 0, k-1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    Parameters:\n    input (list): list of integers to be reversed.\n    k (int): position from where the array is to be reversed.\n\n    Returns:\n    reversed_array (list): reversed array from given position upto k.\n    \"\"\"\n    reversed_array = input[::-1][:k]\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n\n    # Check if k is valid\n    if k > n or k < 1:\n        return \"Invalid input\"\n\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    # Reverse the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # reverse the entire array\n    input.reverse()\n    \n    # reverse the array upto the k-th element\n    input[:k] = input[:k][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the array from k to n-1\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the array from n//2 to n-1\n    for i in range(n//2, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)): \n        temp = input[i] \n        input[i] = input[k-1] \n        input[k-1] = temp "
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,),)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Merge the two dictionaries\n    new_dict = dict(test_dict)\n    # Update the tuple with the new dictionary\n    test_tup = (test_tup, new_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # check if the dictionary is empty\n    if not test_dict:\n        # if it's empty, return the tuple unchanged\n        return test_tup\n    # convert the dictionary to a list of tuples\n    test_list = [(key, value) for key, value in test_dict.items()]\n    # add the list of tuples to the tuple\n    new_tup = test_tup + test_list\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the keys and values of the original dictionary\n    new_dict = {**test_dict}\n    # add the new dictionary to the tuple\n    new_tup = (test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a list of tuples\n    tup_list = list(test_dict.items())\n    # add the list of tuples to the tuple\n    result_tup = tuple(test_tup + tup_list)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # Initialize the first row and column\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    # Compute the rest of the cells\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum path\n    max_path = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, -1, -1):\n            if i == N-1 and j == N-1:\n                max_path[i][j] = True\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_path[i][j] = dp[i+1][j] or dp[i][j+1]\n                max_avg = max(max_avg, dp[i+1][j] + dp[i][j+1], max_avg)\n    \n    # Find the path with maximum average\n    max_avg_path = []\n    for i in range(N-1, -1, -1):\n        for j in range(N-1, -1, -1):\n            if max_path[i][j]:\n                max_avg_path.append((i, j))\n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = float('-inf')\n    dp = [[0]*n for _ in range(n)]\n    \n    # Fill first row and column\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            # Maximum average of current cell and its neighboring cells\n            max_avg_curr = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n            # Add current cell to the total cost\n            dp[i][j] = max_avg_curr + cost[i][j]\n            # Update maximum average\n            max_avg = max(max_avg, dp[i][j])\n            \n    # Return maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    max_avg = 0\n    visited_cells = 0\n    max_path = []\n\n    # traverse each cell and calculate the average cost\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0 and j == 0:\n                visited_cells += 1\n                max_avg = cost[i][j]\n                max_path = [0, 0]\n                max_path[i] = j\n                max_path[j] = i\n                continue\n\n            # calculate the total cost\n            cost_from_left = cost[i][j] if j > 0 else 0\n            cost_from_right = cost[i][j] if j < len(cost[i]) - 1 else 0\n            cost_from_top = cost[i][j] if i > 0 else 0\n            cost_from_bottom = cost[i][j] if i < len(cost) - 1 else 0\n            total_cost = cost[i][j] + cost_from_left + cost_from_right + cost_from_top + cost_from_bottom\n\n            # update the max average and visited cells if necessary\n            if total_cost > max_avg:\n                max_avg = total_cost\n                visited_cells = 1\n                max_path = [0, 0]\n                max_path[i] = j\n                max_path[j] = i\n            elif total_cost == max_avg:\n                visited_cells += 1\n\n            # update the max path if necessary\n            if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                visited_cells += 1\n                if max_avg < total_cost:\n                    max_avg = total_cost\n                    max_path = [0, 0]\n                    max_path[i] = j\n                    max_path[j] = i\n\n    # calculate the maximum average over all paths\n    max_avg_over_paths = max_avg / visited_cells\n    return max_avg_over_paths, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, cost[i][i])\n    \n    for k in range(2, N):\n        for i in range(N-k):\n            j = i+k\n            if i > 0 and j < N:\n                dp[i][j] = max(dp[i][j], dp[i+1][j]+cost[i][j])\n            elif i > 0:\n                dp[i][j] = dp[i+1][j] + cost[i][j]\n            elif j < N:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg/(N**2)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False] * N for i in range(N)]\n    visited[0][0] = True\n    queue = [(0, 0, 0)]\n    max_avg = 0\n    \n    while queue:\n        i, j, avg = queue.pop(0)\n        if i == N-1 and j == N-1:\n            max_avg = max(max_avg, avg)\n            continue\n            \n        if i < N-1 and not visited[i+1][j]:\n            visited[i+1][j] = True\n            queue.append((i+1, j, avg + cost[i+1][j]))\n            \n        if j < N-1 and not visited[i][j+1]:\n            visited[i][j+1] = True\n            queue.append((i, j+1, avg + cost[i][j+1]))\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    current_cost = 0\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                if i == 0 and j == 0:\n                    current_cost += cost[i][j]\n                    visited[i][j] = True\n                    if i == N-1 and j == N-1:\n                        max_avg = max(max_avg, current_cost/N)\n                        current_cost = 0\n                elif i == 0:\n                    current_cost += cost[i][j]\n                    visited[i][j] = True\n                    if j == N-1:\n                        max_avg = max(max_avg, current_cost/N)\n                        current_cost = 0\n                elif j == 0:\n                    current_cost += cost[i][j]\n                    visited[i][j] = True\n                    if i == N-1:\n                        max_avg = max(max_avg, current_cost/N)\n                        current_cost = 0\n                elif i == N-1:\n                    current_cost += cost[i][j]\n                    visited[i][j] = True\n                    if j == 0:\n                        max_avg = max(max_avg, current_cost/N)\n                        current_cost = 0\n                elif j == N-1:\n                    current_cost += cost[i][j]\n                    visited[i][j] = True\n                    if i == 0:\n                        max_avg = max(max_avg, current_cost/N)\n                        current_cost = 0\n                else:\n                    current_cost += cost[i][j]\n                    visited[i][j] = True\n                    if visited[i-1][j] and visited[i][j-1]:\n                        max_avg = max(max_avg, current_cost/N)\n                        current_cost = 0\n                    elif visited[i][j-1]:\n                        current_cost += cost[i][j-1]\n                        visited[i][j-1] = True\n                    elif visited[i-1][j]:\n                        current_cost += cost[i-1][j]\n                        visited[i-1][j] = True\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j]) + max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # Initialize a matrix to store the maximum average of each subpath ending at each cell\n    dp = [[0] * N for _ in range(N)]\n    # Initialize the maximum average to be the minimum possible integer\n    max_avg = float('inf')\n    # Fill in the dp matrix using dynamic programming\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                # For the first cell, there is only one way to reach it\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                # For each cell in the first row, there is only one way to reach it either down or right\n                dp[i][j] = max(dp[i][j], dp[i][j+1] + cost[i][j])\n            elif j == 0:\n                # For each cell in the first column, there is only one way to reach it either up or left\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j])\n            else:\n                # For each cell in the rest of the matrix, there are two choices: either down or right or up or left from the current cell\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j], dp[i-1][j-1] + cost[i][j])\n    # Find the maximum average of all subpaths\n    for i in range(N):\n        for j in range(N):\n            # If the maximum average so far is smaller than the current subpath, update max_avg\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[float('-inf')]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[i][0] = max(dp[i-1][0], dp[i][0]-cost[i][0])\n        \n    for j in range(1, N):\n        dp[0][j] = max(dp[0][j-1], dp[0][j]-cost[0][j])\n        \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n            \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    return max_avg/(N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if cost[i][j] >= cost[i][j+1]:\n                    max_path_avg = max(max_path_avg, (cost[i][j] + cost[i][j+1]) / 2.0)\n            elif j == 0:\n                if cost[i][j] >= cost[i+1][j]:\n                    max_path_avg = max(max_path_avg, (cost[i][j] + cost[i+1][j]) / 2.0)\n            else:\n                if cost[i][j] >= cost[i+1][j] and cost[i][j] >= cost[i][j+1]:\n                    max_path_avg = max(max_path_avg, (cost[i][j] + cost[i+1][j]) / 2.0)\n    return max_path_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: value for name, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student_name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student_name] = students[student_name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name,data in students.items():\n        height,weight = data\n        if height>h and weight>w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to zero\n    total = 0\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digit raised to the power\n        digit_sum = digit_int ** power\n        # Add the digit sum to the total\n        total += digit_sum\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string\n    base_str = str(base)\n    # Initialize sum variable\n    sum = 0\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert digit to integer\n        digit_int = int(digit)\n        # Calculate sum of digits to specified power\n        digit_sum = digit_int ** power\n        # Add digit sum to sum variable\n        sum += digit_sum\n    # Return sum of all digits\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    for i in range(power):\n        total += int(base) % 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize a variable to store the sum\n    total = 0\n    # loop through each digit of the base\n    while base > 0:\n        # get the last digit of the base\n        digit = base % 10\n        # add the last digit to the total\n        total += digit\n        # remove the last digit from the base\n        base //= 10\n    # multiply the total by the power to get the sum of digits raised to the power\n    return total * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        digit_value = int(digit)\n        power_value = digit_value ** power\n        sum += power_value\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        power //= 10\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit ** power\n        base //= 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    \n    # Loop through each digit of base\n    for digit in str(base):\n        # Convert digit to int and add to sum\n        total += int(digit) ** power\n    \n    # Return sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n    :param base: an integer\n    :param power: an integer\n    :return: an integer\n    \"\"\"\n    # calculate the sum of digits of the base to the power\n    total = sum(int(digit) ** power for digit in str(base))\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base and power to integer\n    base = int(base)\n    power = int(power)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base and add the value to the sum\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        # Remove the last digit from the base\n        base = base // 10\n    # Calculate the sum of the digits raised to the power\n    result = sum ** power\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' #regex pattern to extract the string between quotation marks\n    matches = re.findall(pattern, text1) #find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" of the string.\n    '''\n    # define the pattern to match the quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    # find all the matches in the string\n    matches = pattern.findall(text)\n    # return a list of all the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to match quotation marks and capture their values\n    pattern = r'(?<=\\s)\"(.+?)\"(?=\\s)'\n    match = re.search(pattern, text1)\n    \n    if match:\n        # return the captured value if found\n        return match.group(1)\n    else:\n        # if not found, return None\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # create a regular expression to match quotation marks\n    pattern = re.compile(r'(\".*?\")')\n\n    # find all matches of the regular expression in the string\n    matches = pattern.findall(text1)\n\n    # iterate over the matches and extract the values between the quotes\n    quotations = []\n    for match in matches:\n        quotation = match.strip('\"')\n        quotations.append(quotation)\n\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # regex pattern to match the values between quotation marks\n    match = re.findall(pattern, text) # find all the matches of the pattern in the text\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Extract values between quotation marks using regex\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n\n    # Return the values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # defining the regular expression pattern for matching quotation marks\n    pattern = r'(?<=\")(?:(?!\\1).)*?(?=\\1)'\n    # using the pattern to search for all the occurrences of quotation marks\n    matches = re.findall(pattern, text1)\n    # extracting the contents of the quotation marks using string slicing\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the regular expression pattern for matching quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # find all matches using the pattern\n    matches = re.findall(pattern, text1)\n    # return the matches as a list\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([t_i * test_tup[i+1] for i in range(N-1)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize empty list to hold the result\n    result = []\n    # iterate over the tuple, multiplying each element with the next one in the tuple\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    # return the resulting list\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize the result tuple with the same length as the input tuple\n    result_tup = (test_tup[0],)\n    \n    # Loop through the input tuple and multiply each element with the next one\n    for i in range(1, len(test_tup)):\n        result_tup += (test_tup[i] * result_tup[-1],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    multiplied_tup = tuple([t_i * t_i+1 for i in range(N)])\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([t_i * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple(x*test_tup[i+1] for i in range(N))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Calculate the length of the tuple (N)\n    N = len(test_tup)\n    \n    # Create a new tuple of length N with all elements equal to the product of the corresponding elements of the input tuple\n    new_tup = tuple(t_i * test_tup[i+1] for i in range(N-1))\n    \n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for group in groupby(sorted(nums)) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Define a generator function to iterate over the nums list\n    def grouper(iterable, n):\n        args = [iter(iterable)] * n\n        return zip(*args)\n    \n    # Iterate over the list using groupby to group consecutive duplicates\n    for group in grouper(nums, 2):\n        if next(group[1])[0] == group[0]:\n            nums.remove(group[0])\n    \n    # Return the modified list\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the numbers by their value and get the consecutive duplicates\n    consecutive_nums = {k: list(v) for k, v in groupby(nums)}\n    consecutive_nums = list(filter(lambda x: len(x) > 1, consecutive_nums.values()))\n\n    # Return the final list\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev = nums[0]\n    for num in nums[1:]:\n        if num == prev:\n            continue\n        yield prev\n        prev = num"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x in nums if not any(x == y for y in groupby(nums))][::-1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the itertools.groupby() function to group the numbers by their consecutive duplicates\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)\n    \n    # Use a list comprehension to iterate over the grouped numbers and remove duplicates\n    consecutive_nums = [num for num, group in grouped_nums if not group]\n    \n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Create a generator that groups the numbers by their indices and returns a tuple of indices and numbers\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)\n    \n    # Create a new list to store the consecutive duplicates\n    consecutive_duplicates = []\n    \n    # Loop through the grouped numbers and check if the number is consecutive\n    for group in grouped_nums:\n        # Check if the number is consecutive\n        if group[1][1] - group[1][0] == 1:\n            # If it is, add it to the list of consecutive duplicates\n            consecutive_duplicates.append(group[1][1])\n    \n    # Return the list of consecutive duplicates\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(lambda x: list(x), groupby(nums)))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r**2) * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    s = (3*math.pi*r**2)/4\n    area = math.pi * r**2 * h\n    lateral_surface_area = area - s\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2*math.pi*(r*h)**2\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two inputs, r (radius of the cone) and h (height of the cone).\n    It returns the lateral surface area of the cone as a float.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using Heron's formula to calculate the lateral surface area of the cone\n    s = (r**2 + h**2)**(1/2)\n    return math.pi*r**2*s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r ** 2 # Calculate the square of the radius\n    area = s * h / 3 # Calculate the lateral surface area\n    return area # Return the lateral surface area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2\n    s = 2 * A + 2 * math.pi * r * h\n    LSA = 2 * A + (s/2) * math.sin(math.pi/2)\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using the formula A = 2\u03c0r\u00b2h\n    A = 2 * math.pi * r**2 * h\n\n    # Return the lateral surface area\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = (1/3)*math.pi*r**2*h\n    \n    # Print the result\n    print(\"The lateral surface area of the cone is:\",lateral_area)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Define a regular expression pattern for matching special characters\n    special_chars = r'[\\s,\\.]'\n    # Use the re.sub() function to replace all occurrences of special characters with a colon\n    result = re.sub(special_chars, ':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,\\s]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with colon\n    text = re.sub('\\s+', ':', text)\n    # Replace all occurrences of commas with colon\n    text = re.sub(',', ':', text)\n    # Replace all occurrences of dots with colon\n    text = re.sub('.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to replace spaces, commas, or dots with a colon\n    pattern = re.compile(r'[,.]')\n    \n    # replace all occurrences of pattern in text with a colon\n    text = pattern.sub(':', text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.findall(r\"[,\\. ]\", text)\n    for char in special_chars:\n        text = text.replace(char, \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r'\\s', ':', text)\n    # Replace commas with colons\n    text = re.sub(r',', ':', text)\n    # Replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ]|,|\\.'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search algorithm\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the left pointer to 0 and the right pointer to the length of the array minus 1\n    left = 0\n    right = len(A) - 1\n\n    # Initialize a counter to keep track of the number of occurrences of x in the array\n    count = 0\n\n    # While left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Check if the value at the left pointer is equal to x\n        if A[left] == x:\n            # Increment the counter\n            count += 1\n            # If the counter is equal to 1, return the left pointer as the index of the first occurrence\n            if count == 1:\n                return left\n        # If the value at the left pointer is not equal to x, move the left pointer to the right\n        else:\n            left += 1\n\n    # If no occurrences of x are found, return -1 as the index of the first occurrence\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted list of integers.\n    x (int): The number we want to find the index of the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of x in A.\n\n    Raises:\n    TypeError: If A is not a list of integers.\n    ValueError: If x is not a positive integer.\n    \"\"\"\n    if not isinstance(A, list) or not all(isinstance(i, int) for i in A):\n        raise TypeError(\"A must be a list of integers.\")\n    if not isinstance(x, int) or x <= 0:\n        raise ValueError(\"x must be a positive integer.\")\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize variables\n    n = len(A)\n    i = 0\n    \n    # Binary search for the first occurrence of x\n    while i < n and A[i]!= x:\n        i += 1\n    \n    # If x is not found, return -1\n    if i == n:\n        return -1\n    \n    # If x is found, return its index\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    first_occurrence = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Use binary search to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # find the leftmost index where x >= A[i]\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # x is not present in A\n    if left == len(A) or A[left]!= x:\n        return -1\n    \n    # find the first occurrence of x\n    left = 0\n    while left < len(A) and A[left] == x:\n        left += 1\n    \n    return left - 1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0]*(n+1)\n    res = 0\n\n    for i in range(1, n+1):\n        if i == 1:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i-1] * arr[i-1]\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            res += dp[j] * dp[n-j]\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    product_sum = 0\n\n    for i in range(n):\n        product *= arr[i]\n        product_sum += product\n\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the product array and prefix sum array\n    product = [1] * n\n    prefix_sum = [0] * n\n    \n    # Calculate the prefix sum and product of the first element\n    prefix_sum[0] = arr[0]\n    product[0] = arr[0]\n    \n    # Calculate the prefix sum and product of the remaining elements\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n        product[i] = product[i-1] * arr[i]\n    \n    # Initialize the result and start the subarray counter\n    result = 0\n    start = 0\n    \n    # Iterate through the array and calculate the sum of products of all possible subarrays\n    for end in range(n):\n        # Calculate the product of the subarray\n        subarray_product = product[end]\n        # Calculate the sum of products of all possible subarrays up to the current subarray\n        current_sum = prefix_sum[end] - (prefix_sum[start]*start) + subarray_product * end\n        # Update the result if the current sum is greater\n        if current_sum > result:\n            result = current_sum\n            # Update the start index for the next iteration\n            start = end\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j+1] * arr[j]\n    return dp[n][0]\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a list to store the products of subarrays\n    prod_list = []\n    # Calculate the products of all subarrays\n    for i in range(1, n+1):\n        prod = 1\n        for j in range(n-i+1):\n            prod *= arr[j]\n        prod_list.append(prod)\n    # Calculate the sum of products of all subarrays\n    sum_prod = sum(prod_list)\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. \n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    def subarray_product(arr, i, j):\n        \"\"\"\n        Calculate the product of all the elements in the subarray arr[i:j+1]\n        \"\"\"\n        prod = 1\n        for k in range(i, j+1):\n            prod *= arr[k]\n        return prod\n    \n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            result += subarray_product(arr, i, j)\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize all subarray products as 1\n    subarray_products = [1] * n\n    # Initialize sum of products as 0\n    sum_of_products = 0\n\n    # Calculate the products of each subarray\n    for i in range(n):\n        subarray_products[i] = subarray_products[i - 1] * arr[i]\n\n    # Calculate the sum of products of all subarrays\n    for i in range(n):\n        # Update the sum of products\n        sum_of_products += subarray_products[i]\n\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] += dp[j] * arr[i]\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # Initialize a list to store the products of subarrays\n    products = [0]*n\n    # Initialize the sum of products\n    total_sum = 0\n    # Iterate through all possible sublists\n    for i in range(2*n-1):\n        # Initialize the product of the current sublist\n        sublist_product = 1\n        # Iterate through the sublist\n        for j in range(i, n):\n            # Calculate the product of the sublist\n            sublist_product *= arr[j]\n        # Add the product of the sublist to the list of products\n        products[i] = sublist_product\n    # Iterate through all possible sublists again and add their products to the sum\n    for i in range(n):\n        # Calculate the product of the current sublist\n        sublist_product = 1\n        # Iterate through the sublist\n        for j in range(i, n):\n            # Calculate the product of the sublist\n            sublist_product *= arr[j]\n        # Add the product of the sublist to the sum\n        total_sum += products[i]\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Create a prefix sum list\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[1] = arr[0]\n\n    # Iterate through the array and calculate the prefix sum list\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_prod_sum = 0\n\n    # Iterate through the prefix sum list and calculate the sum of products of subarrays\n    for i in range(n):\n        prod_sum = 1\n\n        # Calculate the product of the current subarray\n        for j in range(i + 1, n + 1):\n            prod_sum *= arr[j - 1]\n            subarray_prod_sum += prefix_sum[j] * prod_sum\n\n    return subarray_prod_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # mask to toggle the first and last bit of the number\n    mask = ~(1 << 0) & ~(1 << (n.bit_length()-1))\n    \n    # toggle all the middle bits\n    n = n ^ (mask << 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # get the first and last bits of the number\n    first_bit = n & (1 << (num_bits - 1))\n    last_bit = n & (1 << 0)\n\n    # get the number without first and last bits\n    n_without_bits = n & ~(1 << (num_bits - 1)) & ~(1 << 0)\n\n    # toggle the middle bits\n    middle_bits = n & ~(1 << (num_bits - 1)) & ~(1 << 0)\n\n    # set the middle bits to the opposite of their current value\n    if middle_bits & (1 << (num_bits - 1)):\n        middle_bits |= (1 << (num_bits - 1))\n    else:\n        middle_bits &= ~(1 << (num_bits - 1))\n\n    # combine the first and last bits, middle bits and number without first and last bits\n    n = (first_bit | last_bit | middle_bits | n_without_bits)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Finding the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # Finding the position of the first and last bit\n    first_bit = num_bits - 1\n    last_bit = 0\n    \n    # Initializing the result\n    result = 0\n    \n    # Loop through each bit in the number\n    for i in range(num_bits):\n        \n        # If the current bit is not the first or last bit\n        if i!= first_bit and i!= last_bit:\n            \n            # If the current bit is 0, set it to 1\n            if (n & (1 << i)) == 0:\n                result |= (1 << i)\n            \n            # If the current bit is 1, set it to 0\n            else:\n                result &= ~(1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last set bits\n    pos = 0\n    while n & 1 == 0:\n        n >>= 1\n        pos += 1\n\n    # Reverse the first half of the number\n    n = ((n >> 1) & ((1 << pos) - 1)) | ((n & 1) << (pos - 1))\n\n    # Reverse the second half of the number\n    n = ((n >> 1) & ((1 << pos) - 1)) | ((n & 1) << (pos - 1))\n\n    # Toggle the middle bits\n    for i in range(pos, 0, -1):\n        n ^= (1 << (i - 1))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    # Toggle the first and last bits\n    toggled_first_bit = first_bit ^ 1\n    toggled_last_bit = last_bit ^ 1\n    # Set the toggled first and last bits\n    n = n & ~(1 << (n.bit_length() - 1))\n    n |= toggled_first_bit << (n.bit_length() - 1)\n    n |= toggled_last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 1) << 31\n    last_bit = (n & 1) << 30\n    n = n ^ first_bit ^ last_bit\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    first_bit_set = (n & 1) ^ 1\n    last_bit_set = (n >> 31) & 1\n    return first_bit_set | last_bit_set"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Take the first two bits of n (the first two bits are 00)\n    mask = 0b11\n    first_two = n & mask\n\n    # Take the last two bits of n (the last two bits are 11)\n    mask = 0b11 << 2\n    last_two = n & mask\n\n    # Toggle the middle two bits of n\n    middle_two = first_two ^ last_two\n\n    # Combine the middle two bits with the first two bits\n    n = first_two | middle_two\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0\n    for i in range(1, 32):\n        mask = mask | (1 << i)\n    mask = mask ^ (1 << 0)\n    mask = mask ^ (1 << 31)\n    n = n ^ mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize two variables to keep track of the first and last bits.\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Toggle the middle bits.\n    mid_bits = (n & 0x7FFFFFFF) ^ (first_bit ^ last_bit)\n\n    # Combine the first and last bits back with the middle bits.\n    n = mid_bits ^ first_bit ^ last_bit\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the index of the leftmost element greater than or equal to x\n    left = bisect.bisect_left(a, x)\n    # If the leftmost element is equal to x, return the left index\n    if a[left-1] == x:\n        return left-1\n    # Otherwise, return the left index plus one\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x) # use bisect_left function from bisect module\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Initialize left and right pointers\n    left, right = 0, len(a) - 1\n    \n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the value is present at the middle itself\n        if a[mid] == x:\n            # If the value is greater than mid\n            if mid == 0 or a[mid - 1] <= x:\n                return mid\n            # If the value is smaller than mid\n            else:\n                return mid + 1\n        \n        # If the value is smaller than mid\n        elif a[mid] < x:\n            left = mid + 1\n        \n        # If the value is greater than mid\n        else:\n            right = mid - 1\n    \n    # If the value is not present in the array\n    return -1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(string + \" starts with a vowel\")\n    else:\n        print(string + \" does not start with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(string, \"is starting with a vowel\")\n    else:\n        print(string, \"is not starting with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (1 / (n - 1)) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1/n) * (n*geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 / (n - 1)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 0\n    # recursive case\n    else:\n        return 1 + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    max_triangular_num = 10**(n-1) - 1  # Maximum triangular number with n-1 digits\n    index = 0  # Initialize index to 0\n    \n    # Loop through all triangular numbers with n-1 digits\n    while max_triangular_num <= math.factorial(n-1):\n        index += 1  # Increment index\n        max_triangular_num = index * math.factorial(n-1)  # Update max_triangular_num\n    \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    max_digits = 10**(n-1) # Maximum possible value for the last digit\n    \n    # Calculate the sum of the first n-1 digits of 1\n    sum_digits = 1\n    for i in range(1, n-1):\n        sum_digits += max_digits * math.factorial(n-2-i)\n    \n    # Calculate the sum of the first n-1 digits of the smallest triangular number\n    min_triangular_num = sum_digits\n    for i in range(2, max_digits+1):\n        min_triangular_num += i * i\n    \n    # Calculate the index of the smallest triangular number\n    index_of_min_triangular_num = int(math.log10(min_triangular_num))\n    \n    return index_of_min_triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        if math.log10(i) + 1 == n:\n            return i\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_triangular(n):\n        if n < 1:\n            return False\n        i = 5\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        i = 2\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n\n    def triangular_number(n):\n        if n < 2:\n            return 1\n        return n * (n+1) / 2\n\n    def digit_count(n):\n        count = 0\n        while n:\n            n //= 10\n            count += 1\n        return count\n\n    def triangular_digits(n):\n        i = 1\n        while digit_count(i * (i+1)) <= n:\n            i += 1\n        return i\n\n    def is_power_of_two(n):\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        return is_power_of_two(n//2)\n\n    def smallest_triangular_number(n):\n        if n <= 0:\n            return None\n\n        if is_prime(n):\n            return None\n\n        triangular_digits_count = triangular_digits(n)\n\n        if is_power_of_two(n):\n            triangular_number_count = math.ceil(math.log2(n))\n        else:\n            triangular_number_count = math.ceil(math.log(n)/math.log(2))\n\n        if triangular_number_count > triangular_digits_count:\n            return None\n\n        triangular_number_start = triangular_number(2)\n        triangular_number_end = triangular_number(triangular_number_start)\n\n        while True:\n            triangular_number_mid = (triangular_number_start + triangular_number_end) // 2\n            if triangular_number_mid < triangular_number(triangular_digits_count):\n                triangular_number_end = triangular_number_mid\n            else:\n                triangular_number_start = triangular_number_mid\n\n            if triangular_number_start > triangular_number_end:\n                break\n\n        return triangular_number_start\n\n    return smallest_triangular_number(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # First, we need to find the sum of n digits in the triangular numbers\n    def sum_of_digits(n):\n        result = 0\n        while n > 0:\n            result += n % 10\n            n //= 10\n        return result\n\n    # Now, we need to find the smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        triangular = 0\n        while sum_of_digits(triangular) < n:\n            triangular += 1\n        return triangular\n\n    # Finally, we need to find the index of the smallest triangular number with n digits\n    def find_Index(n):\n        triangular = find_smallest_triangular(n)\n        index = 0\n        while sum_of_digits(triangular + index) < n:\n            index += 1\n        return index\n\n    return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # first, find the number of digits in the given integer\n    num_digits = len(str(n))\n\n    # now, find the index of the smallest triangular number with n digits\n    if num_digits == 1:\n        # there is only one digit in the number, so it must be the smallest triangular number\n        return 1\n    elif num_digits == 2:\n        # there are two digits in the number, so it must be the smallest triangular number with either 1 or 2 digits\n        if n >= 10:\n            return 2\n        else:\n            return 1\n    else:\n        # find the index of the smallest triangular number with n digits\n        triangular = int(math.pow(5, num_digits - 1) + math.pow(5, num_digits - 2))\n        # find the smallest triangular number with n digits\n        smallest_triangular = triangular * math.pow(10, num_digits - 1) + 1\n\n        # check if the smallest triangular number is greater than the given integer n\n        if smallest_triangular > n:\n            # return the index of the smallest triangular number with n digits\n            return find_Index(n)\n        else:\n            # if the smallest triangular number is less than or equal to the given integer n, return the index of the smallest triangular number\n            return num_digits - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function calculates the index of the smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        min_triangular = math.pow(10, n-1)\n        triangular_count = 1\n        for i in range(2, 10**n):\n            if i >= min_triangular:\n                min_triangular = i\n            triangular_count += 1\n        return triangular_count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    # Define a list to store the triangular numbers\n    triangular_list = [0]\n\n    # Calculate the sum of triangular numbers up to n\n    sum_of_triangulars = 5 * n * (n - 1) // 4\n\n    # Iterate through the range of n digits\n    for i in range(n):\n        # Add the next triangular number to the list\n        triangular_list.append(sum_of_triangulars - sum_of_triangulars // 10**i)\n        # Update the sum of triangular numbers\n        sum_of_triangulars += triangular_list[-1]\n\n    # Return the index of the smallest triangular number\n    return triangular_list.index(min(triangular_list))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    # Initialize the smallest triangular number with n digits and its index as 0\n    smallest = 10**(n-1) * 10**(n-2) * 10**(n-3)\n    index = 0\n    \n    # Loop through all the triangular numbers with n digits\n    for i in range(10**(n-2), 10**(n-3)-1, -1):\n        for j in range(10**(n-3)-i, 10**(n-4)-i-1, -1):\n            for k in range(10**(n-4)-i-j, 10**(n-5)-i-j-k, -1):\n                # Check if the current triangular number is smaller than the smallest triangular number\n                if k+j+i <= smallest:\n                    # If it is, update the smallest triangular number and its index\n                    smallest = k+j+i\n                    index = i-1\n                    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Since we need to find the index of smallest triangular number with n digits, we need to calculate the difference between n and the length of the number in triangular form\n    n_digits = len(str(n))\n    diff = n - n_digits\n\n    # We can calculate the sum of the first n digits of the triangular number by adding all the digits from 1 to n\n    sum_of_first_n_digits = sum(range(1, n+1))\n\n    # Since we need to find the index of smallest triangular number with n digits, we need to calculate the index of the smallest triangular number that has more than n digits\n    index_of_smallest_triangular_number = int(math.log10(n_digits) + math.log10(sum_of_first_n_digits) + diff)\n\n    # Return the index of the smallest triangular number with n digits\n    return index_of_smallest_triangular_number"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # creating a dictionary\n    my_dict = {}\n    # iterating over the tuple\n    for i in range(len(test_tup)):\n        # adding key-value pair to dictionary\n        my_dict[i] = test_tup[i]\n    # returning the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    \n    dict_data = {}\n    for i in range(0, len(test_tup), 2):\n        dict_data[test_tup[i]] = test_tup[i+1]\n    \n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # creating an empty dictionary\n    dict_obj = {}\n    # checking if the tuple has an odd number of elements\n    if len(test_tup) % 2 == 1:\n        print(\"Tuple has an odd number of elements. Please provide a tuple with an even number of elements\")\n    else:\n        # iterating over the tuple using two pointers\n        i = 0\n        j = 1\n        # while j is less than the length of the tuple\n        while j < len(test_tup):\n            # adding the key-value pair to the dictionary\n            dict_obj[test_tup[i]] = test_tup[j]\n            # incrementing i and j\n            i += 1\n            j += 2\n    # returning the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    if not isinstance(test_tup, tuple) or len(test_tup) % 2!= 0:\n        return None\n    \n    # Convert the tuple to a dictionary\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[i] = test_tup[i] + test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # use zip function to create a tuple of adjacent elements\n    zipped = zip(test_tup[::2], test_tup[1::2])\n    # create a dictionary from the zipped tuple\n    result = dict(zipped)\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple and returns a dictionary created from adjacent elements of the tuple.\n\n    Parameters:\n    test_tup (tuple): A tuple of any size.\n\n    Returns:\n    dict: A dictionary created from the adjacent elements of the tuple.\n    \"\"\"\n\n    # Initialize an empty dictionary\n    dict_obj = {}\n\n    # Traverse through the tuple and add adjacent elements to the dictionary as key-value pairs\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Traverse through the tuple and add each element to the dictionary using the index as the key\n    for i in range(len(test_tup)):\n        my_dict[i] = test_tup[i]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # check if string is empty or not\n    if len(s) == 0:\n        return True\n    else:\n        # check if all the characters in the string are same or not\n        for i in range(len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    # check if string is empty or not\n    if len(s) == 0:\n        return True\n    # check if all characters in string are same or not\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    elif len(s) > 2:\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    # Check if all characters in the string are same or not\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize a variable to store the first character of the string\n    first_char = s[0]\n    # loop through the string using a for loop\n    for char in s:\n        # check if the current character is the same as the first character\n        if char!= first_char:\n            # if they are not the same, return False\n            return False\n    # if all the characters in the string are the same as the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif len(s) > 1:\n        first_char = s[0]\n        rest_of_string = s[1:]\n        return all_Characters_Same(rest_of_string) and first_char == s[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # if the length of the string is less than 2, it cannot be equal to all the characters\n    if len(s) < 2:\n        return False\n\n    # if the length of the string is 2, then it can be equal to all the characters\n    if len(s) == 2:\n        return s[0] == s[1]\n\n    # otherwise, compare all the characters of the string\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/6) * side**2\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n\n    # convert the length of one side to a constant\n    const = side / 3\n\n    # use Heron's formula to calculate the area\n    area = math.sqrt(const * (const - 1) * (const - 2) * (const - 3))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    perimeter = side * (1 + math.sqrt(2)) / 2\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(perimeter * (perimeter - side) * (perimeter - side) * (perimeter - side))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = 4*side\n    \n    # Calculate the area using Heron's formula\n    area = (semi_perimeter**2) / (6*math.tan(math.pi/3))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    \n    # calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(s*(s-side)*(s-side)*(s-side))\n    \n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron using its three sides\n    \"\"\"\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side + math.sqrt(3) * side**2 / 2) / 2\n\n    # Calculate the area of the tetrahedron\n    A = 1/3 * side**2 * s**2\n\n    return A"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side * side * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    k = n - m\n    temp = list[:k]\n    list[k:] = list[:m]\n    list[:m] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:-m]\n    list[:-m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n\n    # Length of the list\n    n = len(list)\n\n    # To get the element to be rotated\n    x = list[m % n]\n\n    # To shift all the elements to the right by m\n    for i in range(m, n):\n        list[i - m] = list[i]\n\n    # To shift the last element to the right by n - m\n    list[n - m] = x\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Initialize the temporary variable\n    temp = list[-1]\n    # Loop through the list and shift the elements to the left\n    for i in range(len(list)-1, m-1, -1):\n        list[i] = list[i-1]\n    # Set the last element of the list to the temporary variable\n    list[0] = temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # check if m is greater than n\n    if m > n:\n        return list\n    # if m is less than or equal to n, rotate m items to the right\n    for i in range(m):\n        list.append(list.pop(0))\n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(n//2):\n        # swapping i-th and n-i-th elements\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    # swapping first m elements with last m elements\n    list[:m], list[m:] = list[m:], list[:m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle the case when m is greater than n\n\n    # Using recursion to rotate the list\n    def helper(l, m, n):\n        if m == 0:\n            return l\n        else:\n            return helper(l[1:], m-1, n)\n\n    # Rotating the list by m items\n    return helper(list, m, n)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function will rotate a given list by the specified number of items to the right direction. \n    \"\"\"\n    n = len(list)\n    if m>=n:\n        return list\n    # reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    # reverse the last n-m elements of the list\n    list[m:] = list[m:][::-1]\n    # return the rotated list\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    return any(i is None for i in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by each digit in the number itself\n    is_divisible_by_digit = lambda x: all(int(digit) % int(x) == 0 for digit in str(x))\n    \n    # Loop through the range of numbers between startnum and endnum\n    for num in range(startnum, endnum + 1):\n        # Check if the number is divisible by every digit in the number itself\n        if is_divisible_by_digit(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        return all(num % digit == 0 for digit in str(num))\n    \n    result = [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num, digit):\n        return num % digit == 0\n    \n    return list(filter(lambda x: all(is_divisible(x, digit) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        return all(num % digit == 0 for digit in digits)\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    numbers = [num for num in range(startnum, endnum+1)]\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible = lambda num: all(int(digit) == 0 or num % int(digit)!= 0 for digit in str(num))\n\n    # Use filter to filter out the numbers within the range that are not divisible by every digit\n    result = list(filter(is_divisible, range(startnum, endnum + 1)))\n\n    # Return the filtered list of numbers\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(d) % int(num) == 0 for d in str(num))\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(str(num))]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(int(d) == 0 for d in str(num))\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    a = math.radians(a)\n    \n    # calculate area of sector\n    area = r * r * a\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within the valid range of 0 to 360 degrees\n    if a < 0 or a > 360:\n        return None\n    \n    # Calculate area of sector using formula A = Pi * r^2 * sin(a/180*pi)\n    A = math.pi * r**2 * math.sin(a/180*math.pi)\n    \n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is valid\n    if a > 360:\n        print(\"Angle is larger than 360 degrees, returning None.\")\n        return None\n    \n    # Calculate area\n    area = r**2 * math.pi * (a/360)\n    \n    # Print result\n    print(\"Area of sector: {:.2f}\".format(area))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: angle must be less than or equal to 360 degrees\")\n        return None\n    else:\n        area = math.pi * r**2 * a / 360 # formula for area of a sector\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360 #using the formula for area of a sector"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Finding length of each string\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Creating a table to store the length of LCS\n    LCS = [[0] * (p + 1) for i in range(n + 1)]\n\n    # Initializing values of the table\n    for i in range(n + 1):\n        LCS[i][0] = 0\n\n    for i in range(m + 1):\n        LCS[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n\n    # Constructing the LCS matrix\n    lcs = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif LCS[i - 1][j] > LCS[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Returning the LCS\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Create a table to store lengths of LCS of subsequences of X[0..i], Y[0..j], and Z[0..k]\n    table = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n    \n    # Fill the table in bottom up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n    \n    # Read the table to get the LCS of X[0..i], Y[0..j], and Z[0..k]\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Reverse the LCS to get the correct order of elements\n    lcs = lcs[::-1]\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    #creating a table to store the length of the longest common subsequences\n    LCS = [[0] * (o+1) for _ in range(m+1)]\n\n    #filling the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    LCS[i][j] = LCS[i-1][j-1] + 1\n                elif LCS[i-1][j] >= LCS[i][j-1]:\n                    LCS[i][j] = LCS[i-1][j]\n                else:\n                    LCS[i][j] = LCS[i][j-1]\n\n    #backtracking to find the longest common subsequence\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j] >= LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    # base case: if either X or Y is empty, return Y as it is longest common subsequence with any string\n    if len(X) == 0:\n        return Y\n    elif len(Y) == 0:\n        return X\n    # recursive case: compare each character of X and Y, and add the maximum of these two subsequences to the result string\n    else:\n        if X[0] == Y[0]:\n            # if the characters are equal, add the character to the result string and call the function recursively for the remaining subsequences\n            return X[0] + lcs_of_three(X[1:], Y[1:], Z)\n        else:\n            # if the characters are not equal, return the maximum of the two subsequences\n            return max(lcs_of_three(X[1:], Y, Z), lcs_of_three(X, Y[1:], Z))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Concatenate all the three string sequences into a single string\n    str1 = X + Y + Z\n    # Convert the string into a list of characters\n    str1 = list(str1)\n    # Initialize a 2D matrix to store the lengths of the longest common subsequences for all pairs of prefixes\n    len_matrix = [[0 for j in range(len(str1))] for i in range(len(str1))]\n    # Initialize a variable to store the length of the longest common subsequence\n    lcs_len = 0\n    # Initialize two pointers i and j to start comparing prefixes from the beginning of the string\n    i = 0\n    j = 0\n    # Iterate through all prefixes of the string and fill the len_matrix with the lengths of the LCS for each pair\n    for prefix in range(len(str1)):\n        # If the characters at the current position are same, then the length of the LCS is the sum of the LCS for the previous prefixes and the previous character\n        if str1[prefix] == X[i] and str1[prefix] == Y[j] and str1[prefix] == Z[k]:\n            len_matrix[prefix][prefix] = len_matrix[i][j] + 1\n            i += 1\n            j += 1\n            k += 1\n            # Update the length of the LCS if the length of the LCS for the current prefixes is greater than the length of the LCS obtained so far\n            if len_matrix[prefix][prefix] > lcs_len:\n                lcs_len = len_matrix[prefix][prefix]\n        # If the characters at the current position are not same, then the length of the LCS is either the maximum of the LCS for the previous prefixes or the previous character\n        elif str1[prefix] == X[i] and str1[prefix] == Y[j]:\n            len_matrix[prefix][prefix] = max(len_matrix[i][j], len_matrix[i][prefix])\n            i += 1\n            # Update the length of the LCS if the length of the LCS for the current prefixes is greater than the length of the LCS obtained so far\n            if len_matrix[prefix][prefix] > lcs_len:\n                lcs_len = len_matrix[prefix][prefix]\n        elif str1[prefix] == X[i] and str1[prefix] == Z[k]:\n            len_matrix[prefix][prefix] = max(len_matrix[i][j], len_matrix[prefix][k])\n            i += 1\n            k += 1\n            # Update the length of the LCS if the length of the LCS for the current prefixes is greater than the length of the LCS obtained so far\n            if len_matrix[prefix][prefix] > lcs_len:\n                lcs_len = len_matrix[prefix][prefix]\n        elif str1[prefix] == Y[j] and str1[prefix] == Z[k]:\n            len_matrix[prefix][prefix] = max(len_matrix[i][j], len_matrix[i][k])\n            j += 1\n            k += 1\n            # Update the length of the LCS if the length of the LCS for the current prefixes is greater than the length of the LCS obtained so far\n            if len_matrix[prefix][prefix] > lcs_len:\n                lcs_len = len_matrix[prefix][prefix]\n    # Return the length of the longest common subsequence\n    return lcs_len"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 2D table to store the lengths of longest common subsequence for each possible alignment\n    table = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # calculating the lengths of longest common subsequence for all possible alignments\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # backtracking to find the actual common subsequence\n    i = m\n    j = p\n    lcs = []\n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store lengths of LCS of subsequences of X[0..i], Y[0..j], and Z[0..k]\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Following steps build L[m+1][p+1] in bottom up fashion.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Create a list to store the LCS string\n    lcs = []\n\n    # Start from the bottom-right corner and move up, down, and to the left to construct the lcs string\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Convert the list to string and return the result\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # create a 2D table to store the length of longest common subsequences of X[0..m-1], Y[0..n-1], and Z[0..p-1]\n    L = [[0] * (p+1) for i in range(m+1)]\n    \n    # fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k])\n                    \n    # backtrack to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1] and L[i-1][j] > L[i][k]:\n            i -= 1\n        elif L[i][j-1] > L[i-1][j] and L[i][j-1] > L[i][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    \n    def lcs(X, Y, Z): \n        \"\"\"\n        Write a recursive function to find the longest common subsequence of the three given string sequences. \n        \"\"\"\n        \n        # base case \n        if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n            return 0 \n        \n        # compare the first characters of the three strings \n        if X[0] == Y[0] and X[0] == Z[0]: \n            return 1 + lcs(X[1:], Y[1:], Z[1:]) \n        \n        # if the first characters are different, return the maximum of the two subsequences \n        else: \n            return max(lcs(X[1:], Y, Z), lcs(X, Y[1:], Z), lcs(X, Y, Z[1:])) \n        \n    # find the length of the longest common subsequence \n    length = lcs(X, Y, Z) \n    \n    # initialize the result string with zeros \n    result = [0] * length \n    \n    # fill the result string by tracing the path from the bottom-right corner to the top-left corner \n    i = j = k = length - 1  # initialize the indices to start from the bottom-right corner \n    while i >= 0 and j >= 0 and k >= 0:  # while we have not reached the top-left corner \n        if X[i] == Y[j] and X[i] == Z[k]: \n            result[k] = 1 + result[k - 1]  # add 1 to the previous value to account for the current character \n            i -= 1  # move down one row in X \n            j -= 1  # move down one row in Y \n            k -= 1  # move down one row in Z \n        elif X[i] == Y[j]: \n            i -= 1  # move down one row in X \n        elif X[i] == Z[k]: \n            k -= 1  # move down one row in Z \n        else: \n            j -= 1  # move down one row in Y \n            \n    # reverse the result string to get the longest common subsequence \n    result = list(reversed(result)) \n    \n    # convert the result string to a string and return it \n    return ''.join(str(x) for x in result)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences as input and returns the longest common subsequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # table to store lengths of LCS of subproblems\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # filling table L[][] in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][k])\n\n    # Backtracking to find LCS\n    i = m\n    j = n\n    k = p\n\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j] >= L[i][j - 1] and L[i - 1][j] >= L[i - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match capital letters\n    pattern = r'[A-Z][a-z]+'\n    # Use the regular expression pattern to match all capital letters in the string\n    matches = re.findall(pattern, str1)\n    # Iterate over all matches and split them into words\n    words = [match.capitalize() for match in matches]\n    # Join all words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words using the regular expression pattern of one or more whitespace characters\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Iterate over the words and capitalize the first letter of each word\n    new_words = []\n    for word in words:\n        new_word = word.capitalize()\n        new_words.append(new_word)\n    \n    # Join the new words back into a single string\n    result =''.join(new_words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z][a-z]+\\b', r'\\1\\ ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Removing all non-alphanumeric characters and converting to lowercase\n    str1 = re.sub(r'[^\\w\\s]', '', str1).lower()\n    \n    # Splitting the string into words\n    words = str1.split()\n    \n    # Capitalizing the first letter of each word and adding a space between them\n    words_capitalized =''.join([word.capitalize() for word in words])\n    \n    return words_capitalized"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # join the words with spaces and capitalize the first letter of each word\n    output =''.join(word.capitalize() for word in words)\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words using the space as the delimiter\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper():\n            # If the word starts with a capital letter, add a space before it\n            words[i] ='' + words[i]\n    # Join the words back into a string with spaces between them\n    str2 =''.join(words)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define a regular expression to match the start of a capitalized word\n    start_pattern = re.compile(r'\\b[A-Z]\\w*')\n    # Find all the matches in the string\n    matches = re.findall(start_pattern, string)\n    # Loop through the matches and insert a space between each capitalized word\n    for match in matches:\n        string = string.replace(match,'' + match, 1)\n    # Remove any extra spaces at the beginning or end of the string\n    string = string.strip()\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all capital words in the string\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    matches = re.findall(pattern, str1)\n    \n    # Iterate over all matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match)\n    \n    # Remove leading and trailing spaces\n    str1 = str1.strip()\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string)\n\n    # Join the words with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # Split the string into words using the regular expression pattern\n    words = re.findall(pattern, str1)\n    # Capitalize the first letter of each word and join the words with spaces\n    result =''.join(word.capitalize() for word in words)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the integers numerically\n    nums.sort()\n\n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    # Join the sorted strings back into a single string\n    return ''.join(sorted_nums_str)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    return nums_int"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: int(s))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    result = []\n    for num in nums_int:\n        result.append(str(num))\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to numbers\n    nums = [float(num) for num in nums_str]\n    # Use sorted() to sort the numbers\n    return sorted(nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers separated by commas, and sorts them numerically.\n    '''\n    nums = [int(num.replace(',', '')) for num in nums_str.split(',')]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert strings to numeric values\n    nums = [int(x) for x in nums_str]\n    \n    # sort the numeric values\n    nums.sort()\n    \n    # convert sorted numeric values back to strings\n    result = [''.join([str(y) for y in x]) for x in nums]\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            pass\n    return sorted(nums)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the given tuple to the given list\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # check if array has only one element\n    if i >= len(arr) - 1:\n        return True\n\n    # check if left child is smaller than parent\n    if arr[i] > arr[2 * i + 1]:\n        return False\n\n    # check if right child is smaller than parent\n    if arr[i] > arr[2 * i + 2]:\n        return False\n\n    # if both conditions are true, then parent is greater than both children\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # base case\n    if len(arr) <= 1:\n        return True\n\n    # check if left child is smaller than parent\n    if arr[0] > arr[1]:\n        return False\n\n    # recursive call to check the rest of the array\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[parent(i)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, parent(i))\n\ndef parent(i):\n    return (i-1)//2"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n    \n    # If left child is smaller than root\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n        \n    # If right child is smaller than root\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n        \n    # If the root is not the minimum element\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        check_min_heap_helper(arr, min_index)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[left]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Function to check if the given array represents min heap or not.\n    \"\"\"\n    if len(arr) < 2:\n        return True\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    left = 2 * i\n    right = 2 * i + 1\n    \n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, i - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    \n    left = 2 * i\n    right = 2 * i + 1\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n\n    if i >= len(arr):\n        return True\n\n    if arr[i] < arr[i-1]:\n        return False\n\n    return check_min_heap_helper(arr, i-1)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:  # base case\n        return True\n    \n    if arr[i] > arr[2*i+1]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacob = [0, 1, 1]\n    for i in range(3, n+1):\n        jacob.append(jacob[-1] + jacob[-2])\n    return jacob[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # initialize the first two jacobsthal numbers\n    j1 = 0\n    j2 = 1\n\n    # loop through the rest of the jacobsthal numbers\n    for i in range(2, n+1):\n        # calculate the next jacobsthal number\n        j3 = (j1 * (4 * j1**2 - 1)) % 10\n        # update the jacobsthal numbers\n        j1 = j2\n        j2 = j3\n\n    return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 2 * (2 * jacobsthal_num(n//2) - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2 + 1)\n    else:\n        return jacobsthal_num((n-1)//2) + jacobsthal_num((n-1)//2 + 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_seq = [0, 1]\n    for i in range(2, n):\n        jacobsthal_seq.append(jacobsthal_seq[i-1] + jacobsthal_seq[i-2])\n    return jacobsthal_seq[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    for i in range(n):\n        j += i * (i + 1)\n        j //= 2\n    return j"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # initialize two variables to keep track of minimum and maximum values\n    min_val = sorted_list[0][0]\n    max_val = sorted_list[-1][0]\n\n    # loop through the list starting from the second element of each tuple (i.e., after sorting)\n    for i in range(1, len(sorted_list)):\n        # if the current element is less than the minimum value, update it as the new minimum\n        if sorted_list[i][0] < min_val:\n            min_val = sorted_list[i][0]\n\n        # if the current element is greater than the maximum value, update it as the new maximum\n        if sorted_list[i][0] > max_val:\n            max_val = sorted_list[i][0]\n\n        # if the current element is equal to the minimum value, increment the count of occurrences of the minimum value\n        if sorted_list[i][0] == min_val:\n            min_count += 1\n\n        # if the count of occurrences of the minimum value is greater than or equal to k, return the minimum value\n        if min_count >= K:\n            return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize variables\n    min_list = []\n    count = 0\n    min_count = 0\n    \n    # Iterate through the list\n    for i in range(len(test_list)):\n        # If the count is less than k, add the element to the list and increment the count\n        if count < K:\n            min_list.append(test_list[i])\n            count += 1\n        # If the count is equal to k, add the element to the list and decrement the count\n        elif count == K:\n            min_list.append(test_list[i])\n            count -= 1\n            min_count += 1\n            \n    # Sort the list based on the values in the first element of each tuple\n    min_list.sort(key=lambda x: x[0])\n    \n    # Return the first k elements of the sorted list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_heap = []\n\n    # Insert all the elements of the list into the min heap\n    for item in test_list:\n        heappush(min_heap, item)\n\n    # Remove k elements from the heap\n    for i in range(K):\n        heappop(min_heap)\n\n    # Return the minimum k elements from the heap\n    result = []\n    while min_heap:\n        result.append(heappop(min_heap))\n\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # Create a list to store the count of each element in the test_list\n    count_list = []\n\n    # Iterate over each element in the test_list\n    for element in test_list:\n        # If the element is already in the count_list, increment its count\n        if element in count_list:\n            count_list[count_list.index(element)] += 1\n        # If the element is not in the count_list, add it with a count of 1\n        else:\n            count_list.append(1)\n\n    # Sort the count_list in descending order\n    count_list.sort(reverse=True)\n\n    # Initialize the minimum count to be the first K elements of the count_list\n    min_count = count_list[:K]\n\n    # Iterate over each element in the test_list\n    for element in test_list:\n        # If the element is in the count_list, decrement its count and append it to the min_count list\n        if element in count_list:\n            count_list[count_list.index(element)] -= 1\n            min_count.append(element)\n\n    # If the count of any element is less than 0, set it to 0\n    for count in min_count:\n        if count < 0:\n            count = 0\n\n    # Return the min_count list\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # initialize the minimum count as 10^9\n    min_count = 10**9\n\n    # iterate over the first K elements of the sorted list\n    for i in range(K):\n        # add the count of the current element to the minimum count\n        min_count = min(min_count, sorted_list[i][0])\n\n    # return the minimum count\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for element in test_list:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n\n    # sort the dictionary in descending order based on the frequency of each element\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # initialize a list to store the minimum k records\n    min_k_records = []\n\n    # iterate through the sorted dictionary and add the first K elements to the min_k_records list\n    for i in range(K):\n        min_k_records.append(sorted_freq[i][0])\n\n    # return the minimum k records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a tuple list and a number K as input.\n    It finds the minimum K records from the tuple list.\n\n    Args:\n    test_list (list): A tuple list consisting of tuples.\n    K (int): A positive integer representing the number of records to be returned.\n\n    Returns:\n    list: A list of tuples representing the minimum K records from the input tuple list.\n\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Iterate through the list and update the frequency of each element in the dictionary\n    for elem in test_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    # Initialize a list to store the minimum K records\n    min_k_records = []\n\n    # Iterate through the dictionary and append the elements with frequency greater than or equal to K to the min_k_records list\n    for elem, count in freq_dict.items():\n        if count >= K:\n            min_k_records.append(elem)\n\n    # Return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    records = []\n    for i in range(len(test_list)):\n        records.append(test_list[i])\n        if len(records) > K:\n            records.pop(0)\n    return min(records, key=lambda x: x[1])"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # sort the dictionary by the frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # create a list of tuples containing the sorted elements and their frequency\n    sorted_list = sorted_freq[:K]\n\n    # create a new list containing the minimum k elements\n    min_list = []\n    for item, freq in sorted_list:\n        min_list.extend([item] * freq)\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1]) # sort by second element of tuple\n    count = 0\n    min_count = 0\n    min_val = float('inf')\n    for i in range(len(test_list)):\n        if count == K:\n            if test_list[i][1] < min_val:\n                min_count = 1\n                min_val = test_list[i][1]\n            elif test_list[i][1] == min_val:\n                min_count += 1\n            break\n        if test_list[i][1] < min_val:\n            min_count = 1\n            min_val = test_list[i][1]\n        elif test_list[i][1] == min_val:\n            min_count += 1\n        count += 1\n    return min_count"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Use a set to remove duplicates from each list\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n\n    # Create an empty set to store common elements\n    common = set()\n\n    # Iterate over each index in the lists\n    for i in range(len(l1)):\n        # Check if the element is common for all three sets\n        if set1.intersection(set2).intersection(set3) and set1.intersection(set3).intersection(set2) and set2.intersection(set1).intersection(set3) and set2.intersection(set3).intersection(set1) and set3.intersection(set1).intersection(set2) and set3.intersection(set2).intersection(set1):\n            # If it is, add it to the common set\n            common.add(l1[i])\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in the first list\n    for i in range(len(l1)):\n        # Check if the element at the current index is present in all the lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    common_elements = []\n\n    # iterate through each index of each list\n    for i in range(len(l1)):\n        # if the element at the current index is present in all three lists, add it to the common_elements list\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function finds common elements from three lists. The function returns a list.\n    \"\"\"\n    # Create a dictionary to store the counts of elements in each list\n    counts = {}\n    for elem in l1 + l2 + l3:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    # Find the indices where the counts differ by 1\n    common_indices = []\n    for i in range(len(l1)):\n        if counts[l1[i]] == 1 and counts[l2[i]] == 1 and counts[l3[i]] == 1:\n            common_indices.append(i)\n\n    # Extract the common elements from the original lists\n    common_elements = []\n    for i in common_indices:\n        common_elements.append(l1[i])\n        common_elements.append(l2[i])\n        common_elements.append(l3[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create a set to store common elements\n    common_elements = set()\n    # loop through each list and check if an element is present in all three lists\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.add(l1[i])\n    return list(common_elements)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # sort the list in ascending order\n    return numbers[1]  # return the second element in the sorted list\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n\n    # Check if the length of the list is greater than 1\n    if len(sorted_list) > 1:\n        # Return the second smallest element\n        return sorted_list[1]\n    else:\n        # If the list has only one element, return it\n        return sorted_list[0]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # Sort the list in ascending order\n    return numbers[1] # Return the second smallest number"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Found one or more 'b's followed by an 'a':\", matches)\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # create a dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    for string in test_list:\n        # reverse the string and convert it into a tuple\n        reverse_tuple = (tuple(reversed(string)), string)\n        # check if the tuple is already in the dictionary, if not add it\n        if reverse_tuple not in count_dict:\n            count_dict[reverse_tuple] = 1\n        # if the tuple is already in the dictionary, increment its count\n        else:\n            count_dict[reverse_tuple] += 1\n    \n    # count the number of reverse pairs and return the result\n    count = 0\n    for key, value in count_dict.items():\n        if value > 1:\n            count += value\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initialize a set to store unique strings\n    unique_strings = set()\n    # loop through each string in the list\n    for string in test_list:\n        # reverse the string and add it to the set\n        reversed_string = string[::-1]\n        unique_strings.add(reversed_string)\n    # initialize a count variable to keep track of pairs\n    count = 0\n    # loop through each unique string in the set\n    for string1 in unique_strings:\n        # reverse the string1 and check if it exists in the set\n        reversed_string1 = string1[::-1]\n        if reversed_string1 in unique_strings:\n            # initialize a counter for pairs in string1\n            pairs_in_string1 = 0\n            # loop through each character in string1\n            for char in string1:\n                # check if the character exists in the set of unique strings\n                if char in unique_strings:\n                    # increment the pair counter if the characters are the same\n                    if char == reversed_string1[::-1]:\n                        pairs_in_string1 += 1\n            # loop through each character in string1\n            for char in reversed_string1:\n                # check if the character exists in the set of unique strings\n                if char in unique_strings:\n                    # increment the pair counter if the characters are the same\n                    if char == string1[::-1]:\n                        pairs_in_string1 += 1\n            # check if the number of pairs in string1 is less than the length of string1\n            if pairs_in_string1 < len(string1):\n                # increment the pair counter\n                count += 1\n    # return the final count of pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the two strings are reverse of each other\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # create a dictionary to store the frequency of characters in each string\n    char_freq = {}\n    for s in test_list:\n        for c in s:\n            if c in char_freq:\n                char_freq[c] += 1\n            else:\n                char_freq[c] = 1\n\n    # create a list to store the unique characters in the strings\n    unique_chars = sorted(char_freq.keys())\n\n    # create a list to store the pairs of characters that appear in the strings in reverse order\n    pairs_in_reverse = []\n    for c in unique_chars:\n        pairs_in_reverse.extend(unique_chars[:char_freq[c]])\n\n    # count the number of pairs of characters that appear in the strings in reverse order\n    count = 0\n    for pair in pairs_in_reverse:\n        count += len(test_list) // 2 - sum(1 for s in test_list if pair in s)\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to a set to get unique lists\n    unique_lists = set(list(map(tuple, list1)))\n    # create a dictionary to store the count of each unique list\n    count_dict = {}\n    for list_ in unique_lists:\n        count_dict[list_] = list1.count(list_)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if tuple(sublist) in count:\n                count[tuple(sublist)] += 1\n            else:\n                count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = set()\n    for i in range(len(list1)):\n        list_tuples.add(tuple(list1[i]))\n    count_dict = {}\n    for i in range(len(list_tuples)):\n        count_dict[list_tuples[i]] = list1.count(list_tuples[i])\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        if not isinstance(list1[i], tuple):\n            list1[i] = (list1[i],)\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple not in sublist_dict:\n                sublist_dict[sublist_tuple] = sublist.count(sublist_tuple)\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    count_dict = {}\n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple not in count_dict:\n            # If not, add it with a value of 1\n            count_dict[sublist_tuple] = 1\n        # Otherwise, increment the count by 1\n        else:\n            count_dict[sublist_tuple] += 1\n    # Return the dictionary\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    unique_counts = {}\n    # Iterate over the sublists in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it exists in the dictionary\n        if tuple(sublist) in unique_counts:\n            # If it does, increment the count by 1\n            unique_counts[tuple(sublist)] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            unique_counts[tuple(sublist)] = 1\n    # Return the dictionary of unique counts\n    return unique_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each sublist\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in count_dict:\n            count_dict[sublist] += 1\n        else:\n            count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    sublist_counts = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Iterate through each element of the list\n    for element in list1:\n        # Convert the element to a tuple\n        tup = tuple(element)\n        # Check if the tuple already exists in the dictionary\n        if tup in count_dict:\n            # Increment the count for this tuple\n            count_dict[tup] += 1\n        else:\n            # If the tuple does not exist in the dictionary, add it with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n\n    # iterate through each list in the input list\n    for i, lst in enumerate(list1):\n        # convert the list to a tuple and check if it exists in the count_dict\n        tuple_str = tuple(lst)\n        if tuple_str in count_dict:\n            # increment the count of the tuple in the count_dict\n            count_dict[tuple_str] += 1\n        else:\n            # otherwise, add the tuple to the count_dict with a count of 1\n            count_dict[tuple_str] = 1\n\n    # return the count_dict as the output\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        decimal_part = float(num).split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Remove any non-digit characters from the string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Check if the length of the string is exactly 2\n    if len(num)!= 2:\n        return False\n\n    # Convert the string to an integer\n    num = int(num)\n\n    # Check if the integer is within the range of a decimal with a precision of 2\n    return 0 <= num <= 99"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        decimal.Decimal(num)\n        if '.' in num and len(num.split('.')[1]) > 2:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if str(num).count('.') == 1:\n            parts = str(num).split('.')\n            if len(parts[0]) <= 2 and len(parts[1]) <= 2:\n                return True\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num_parts = num.split('.')\n            if len(num_parts[1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_string = num.replace(',', '.')\n    try:\n        decimal_number = float(decimal_string)\n        if str(decimal_number).count('.') == 1:\n            integer_part = str(decimal_number).split('.')[0]\n            decimal_part = str(decimal_number).split('.')[1]\n            if len(integer_part) > 1 and len(decimal_part) > 2:\n                return False\n            for digit in integer_part:\n                if int(digit) > 9:\n                    return False\n            for digit in decimal_part:\n                if int(digit) > 9:\n                    return False\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the string to a float with a precision of 2 decimal places\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list is empty or not\n    if not arr:\n        return \"The list is empty.\"\n    \n    # convert the list to set to remove duplicates\n    unique_set = set(arr)\n    \n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return \"The list contains only one distinct element.\"\n    else:\n        return \"The list contains more than one distinct element.\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0 or len(arr) > 1000:\n        return \"Invalid input.\"\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the length of the list is greater than 1\n    if len(arr) > 1:\n        # Check if all elements in the list are distinct\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    '''\n\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(arr) <= 1:\n        return True\n    \n    # Create a set to store the unique elements in the list\n    unique_set = set()\n    \n    # Loop through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n    \n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    \n    # If none of the conditions are met, return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            distinct_count += 1\n    if distinct_count == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    elif len(arr) > 1:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is valid\n    if monthnum3 not in range(1, 13):\n        return \"Invalid month number!\"\n    \n    # Check if the month number contains 30 days\n    if monthnum3 % 2 == 0:\n        return \"The given month number contains 30 days.\"\n    else:\n        return \"The given month number does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            print(\"The given month number contains 30 days.\")\n        else:\n            print(\"The given month number does not contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 2 == 0:\n        print(monthnum3, \"is a leap year\")\n    else:\n        print(monthnum3, \"is not a leap year\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        elif year % 4!= 0:\n            return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        print(f\"{monthnum3} contains 30 days.\")\n    else:\n        print(f\"{monthnum3} does not contain 30 days.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1, 13):\n        if monthnum3 % 2 == 0:\n            if monthnum3 in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 in [2, 4, 6, 9, 11]:\n                return True\n            else:\n                return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    The function first sorts the array in ascending order and then iterates through it to find the minimum difference.\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])  # Calculate absolute difference\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size n and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = arr[1] - arr[0]\n\n    # Iterate over the remaining elements of the array\n    for i in range(1, n-1):\n\n        # Calculate the difference between the current element and the next and previous elements\n        diff = abs(arr[i] - arr[i+1]) + abs(arr[i] - arr[i-1])\n\n        # Update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and the number of elements in the array as inputs.\n    It then finds the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the last two elements in the array\n    min_diff = abs(arr[-1] - arr[-2])\n\n    # Loop through the array and calculate the difference between each pair of adjacent elements\n    for i in range(n-2):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference found\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in the given array.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the given array.\n\n    Time Complexity:\n        O(n^2)\n\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two variables to keep track of the minimum and maximum values\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    \n    # Iterate over the array and calculate the difference between each pair of adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum and maximum differences\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n    arr: List of integers\n    n: Integer, the size of the array\n\n    Returns:\n    int: The minimum difference between any two elements in the array\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Iterate through the array and find the minimum difference\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the given array.\n\n    \"\"\"\n    # Sorting the array in ascending order\n    arr.sort()\n\n    # Initializing the minimum difference variable\n    min_diff = float('inf')\n\n    # Looping through the array\n    for i in range(n - 1):\n        # Calculating the difference between current and next element\n        diff = arr[i + 1] - arr[i]\n\n        # Updating the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n\n    for i in str:\n        if i.isdigit():\n            count += 1\n\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function returns the nth polite number. \n    '''\n    if n <= 0:\n        return 0\n\n    polite_numbers = [0]\n    i = 1\n    while len(polite_numbers) < n:\n        if is_prime(i):\n            polite_numbers.append(i)\n            i += 1\n        else:\n            i += 2\n\n    return polite_numbers[n-1]\n\ndef is_prime(num): \n    '''\n    This function checks if a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if n is a polite number, False otherwise.\n    \"\"\"\n    # Check if n is even or odd\n    if n % 2 == 0:\n        if n > 2:\n            return True\n        else:\n            return False\n    else:\n        # Calculate the square root of n\n        sqrt_n = math.sqrt(n)\n\n        # Check if the square root is an integer\n        if sqrt_n.is_integer():\n            # Calculate the integer part of the square root\n            int_sqrt_n = int(sqrt_n)\n\n            # Check if the integer part is greater than 2\n            if int_sqrt_n > 2:\n                return True\n            else:\n                return False\n        else:\n            # Calculate the integer part of the square root\n            int_sqrt_n = int(sqrt_n)\n\n            # If the integer part is 2, check if the square root is greater than 2\n            if int_sqrt_n == 2:\n                if sqrt_n > 2:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        return is_polite(n-1) + 3\n\ndef nth_polite_number(n):\n    '''\n    Write a function to find the nth polite number using recursion.\n    '''\n    return is_polite(n)\n\ndef main():\n    n = 10\n    print(\"The {}th polite number is: {}\".format(n, nth_polite_number(n)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return is_polite(n//2) + 1\n    else:\n        return 3*is_polite((n-1)//2) + 1\n\nn = int(input(\"Enter a number for which you want to find the nth polite number: \"))\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return \"0th polite number is 0\"\n    elif n == 1:\n        return \"1st polite number is 1\"\n    elif n == 2:\n        return \"2nd polite number is 1\"\n    elif n == 3:\n        return \"3rd polite number is 2\"\n    else:\n        polite_number = 0\n        for i in range(2, n+1):\n            polite_number = (2*i-1) if (2*i-1) % 2 == 0 else (3*i-2)\n            if is_prime(polite_number):\n                return f\"{polite_number}th polite number is {polite_number}\"\n        return f\"No polite number found for {n}th polite number\"\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]\n    for i in range(len(polite_numbers)):\n        if n == polite_numbers[i]:\n            return True\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_polite(n):\n    sum_of_integers = sum(range(1, n+1))\n    half_sum = sum_of_integers // 2\n    if half_sum.is_integer():\n        return half_sum\n    else:\n        return half_sum + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Start with the first polite number\n    polite_number = 1\n    \n    # Check if the number is a polite number or not\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    \n    # Calculate the nth polite number using the formula\n    # polite_number = (3^n - 1)/(2^n - 1)\n    # We can use the formula to calculate the nth polite number in O(log(n)) time\n    while polite_number**n - 1!= (polite_number**n - 1)/(2**n - 1):\n        polite_number += 2\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 2\n    b = 1\n    while a < n:\n        a, b = b, (a + b)\n    return a\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Given a list, return a list of all pairs of consecutive items in the list.\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and the sum as input and returns the count of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n\n    pairs_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum'. The function takes a list of numbers 'arr' and the sum'sum' as input.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a new list to store the difference\n    diff_list = []\n    # iterate over each element in list1 and check if it exists in list2\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1_set = set(li1)\n    li2_set = set(li2)\n    return li1_set.symmetric_difference(li2_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns their difference.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_odd_pow_four = 0\n    i = 1\n    while i <= n:\n        sum_odd_pow_four += i ** 4\n        i += 2\n    return sum_odd_pow_four"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count ** 4\n        count += 1\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num_sum = 0\n    for i in range(1, n+1, 2):\n        num_sum += i**4\n    return num_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        num = 2*i\n        sum += num**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum of fourth power to zero\n    sum_fourth_power = 0\n    # initialize counter to zero\n    count = 0\n    # iterate n times\n    for i in range(1, n+1, 2):\n        # check if i is odd\n        if i % 2!= 0:\n            # if i is odd, calculate fourth power and add to sum of fourth power\n            sum_fourth_power += i**4\n            # increment count\n            count += 1\n    # return sum of fourth power\n    return sum_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Initialize an empty stack and a counter for the opening brackets\n    stack = deque()\n    count = 0\n    \n    # Loop through each character in the expression\n    for char in exp:\n        if char in ['(', '[', '{']:\n            # If the character is an opening bracket, push it onto the stack\n            stack.append(char)\n        else:\n            # If the character is a closing bracket, pop the top element from the stack\n            if stack and stack[-1] in ['(', '[', '{']:\n                if char in [')', ']', '}']:\n                    # If the closing bracket matches the last opening bracket, pop the stack and increase the counter\n                    stack.pop()\n                    count += 1\n                else:\n                    # If the closing bracket does not match the last opening bracket, return False\n                    return False\n            else:\n                # If there are no opening brackets on the stack, return False\n                return False\n    \n    # If the loop completes without encountering any opening brackets on the stack, return True\n    return True if not stack else False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                continue\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c in ['(', '[', '{']:\n            stack.append(c)\n        elif c in [')', ']', '}']:\n            if not stack:\n                return False\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '{', '['}\n    close_brackets = {')', '}', ']'}\n\n    for bracket in exp:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if not (close_brackets[bracket] == top):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n\n    for i in exp:\n        if i in parentheses.values():\n            stack.append(i)\n        elif not stack:\n            return False\n        else:\n            if i == parentheses[stack[-1]]:\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_parentheses = {'(', '[', '{'}\n\n    for i in range(len(exp)):\n        if exp[i] in open_parentheses:\n            stack.append(exp[i])\n        elif exp[i] in ['+', '-', '*', '/', '^']:\n            if not stack:\n                return False\n            last_open_parenthesis = stack.pop()\n            if (open_parentheses[last_open_parenthesis] == '(' and exp[i]!= ')'\n                or open_parentheses[last_open_parenthesis] == '[' and exp[i]!= ']'\n                or open_parentheses[last_open_parenthesis] == '{' and exp[i]!= '}'):\n                return False\n        elif exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            last_open_parenthesis = stack.pop()\n            if (open_parentheses[last_open_parenthesis] == '(' and exp[i]!= ')'\n                or open_parentheses[last_open_parenthesis] == '[' and exp[i]!= ']'\n                or open_parentheses[last_open_parenthesis] == '{' and exp[i]!= '}'):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', ')']:\n            stack.append(i)\n        elif i.isspace():\n            continue\n        else:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a set to store words of length K or less\n    k_words = set()\n\n    # Loop through the words and add words of length K or less to the set\n    for word in words:\n        if len(word) <= K:\n            k_words.add(word)\n\n    # Join the set of words with spaces and return the result\n    return''.join(k_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with k length or less\n    result = []\n    \n    # Loop through the words\n    for word in words:\n        # If the length of the word is less than or equal to K, append it to the result list\n        if len(word) <= K:\n            result.append(word)\n    \n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the length of the word is equal to K, remove it from the list\n        if len(words[i]) == K:\n            del words[i]\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Iterate through each word\n    for i in range(len(words)):\n        # Check if the length of the word is greater than or equal to K\n        if len(words[i]) >= K:\n            # Remove the word from the list\n            del words[i]\n    \n    # Join the list of words into a single string\n    result_str =''.join(words)\n    \n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, add it to the filtered list\n            filtered_words.append(word)\n    \n    # Join the filtered list of words into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence = re.findall(pattern, text)\n    if occurrence:\n        return occurrence[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    result = re.search(pattern,text)\n    if result:\n        return (result.group(),result.start(),result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and (nums[i] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums:\n            if num % 2!= 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            odd_indices.append(i)\n    for i in odd_indices:\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not any(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if i % 2 == 0:\n                continue\n            else:\n                odd_count += 1\n                if odd_count == 2:\n                    return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if i + 1 < len(nums):\n                if nums[i] % 2!= 0 and nums[i+1] % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    \n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n    \n    if odd_count == len(nums) / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # calculate the sum of unique elements\n    sum_of_unique = sum(unique_elements)\n    # return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a Python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store the non-repeated elements\n    unique_elements = set(arr)\n    # initialize the sum variable to 0\n    sum_unique_elements = 0\n    # loop through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum_unique_elements += element\n    # return the sum of the unique elements\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their frequencies\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    total = 0\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            total += num\n    \n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    This function takes in a list and finds the sum of non-repeated elements in the list.\n    '''\n    # Create a dictionary to store the counts of each element in the list\n    count_dict = {}\n    \n    # Iterate over each element in the list\n    for num in arr:\n        # If the element is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n            \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over the keys of the dictionary (which are the unique elements in the list) and add their counts to the sum variable\n    for num in count_dict:\n        sum += count_dict[num]\n    \n    # Return the sum of the non-repeated elements in the list\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store unique elements and their frequencies\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    sum_ = 0\n    for num, freq in freq.items():\n        if freq == 1:\n            sum_ += num\n    \n    return sum_"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Find the sum of unique elements in the list\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to keep track of the elements in the array\n    unique_elements = set(arr)\n    # calculate the sum of the unique elements\n    sum_of_unique_elements = sum(unique_elements)\n    # return the sum of unique elements\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of the elements in the list\n    set_arr = set(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through the set and add its elements to the sum variable\n    for element in set_arr:\n        sum += element\n    # Return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the dictionary to find the sum of non-repeated elements\n    for i in freq:\n        if freq[i] == 1:\n            total_sum += i\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of the non-repeated elements in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back to a list and sort it\n    unique_list = sorted(list(unique_set))\n    # Initialize a variable to store the sum of the non-repeated elements\n    total_sum = 0\n    # Iterate over the sorted list and add up the non-repeated elements\n    for num in unique_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Group the elements of the list by the same key.\n    grouped_list = groupby(list1)\n    # Initialize an empty list to store the sublists.\n    result = []\n    # Iterate over the grouped list and pack consecutive duplicates into sublists.\n    for group in grouped_list:\n        # Check if the current group is the first group in the list.\n        if len(list(group)) == 1:\n            continue\n        # Get the first element of the group and initialize an empty list to store consecutive duplicates.\n        first_elem = next(group)[0]\n        consecutive_duplicates = []\n        # Iterate over the rest of the group.\n        for elem, group_elem in group:\n            # Check if the current element is the same as the first element of the group.\n            if elem!= first_elem:\n                # Add the first element of the group to the result list and reset the consecutive duplicates list.\n                result.append(consecutive_duplicates)\n                consecutive_duplicates = [elem]\n            else:\n                # Append the current element to the consecutive duplicates list.\n                consecutive_duplicates.append(elem)\n        # Append the last element of the group to the result list.\n        result.append(consecutive_duplicates)\n    # Return the result list.\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(enumerate(list1)):\n        yield [x[1] for x in group]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() to group consecutive duplicates of elements in the list\n    grouped_lst = [(k, list(g)) for k, g in groupby(lst) if not k]\n    # Create a sublist for each group of consecutive duplicates\n    sublist_lst = [item for lst in grouped_lst for item in lst]\n    # Return the sublist containing all the consecutive duplicates\n    return sublist_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            group = [next(group)]\n        else:\n            group = list(group)\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and returns a list of sublists where consecutive duplicates of elements are packed together.\n    \n    Example:\n    pack_consecutive_duplicates([1, 2, 3, 2, 1, 4, 3])\n    Output: [[1, 2, 2], [1, 3, 3], [4]]\n    '''\n    return [list(group) for key, group in groupby(lst) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # First, we need to group the list by the first element of each group\n    grouped_list = groupby(list1)\n    # Then, we need to iterate over the groups and pack consecutive duplicates into sublists\n    result = []\n    for key, group in grouped_list:\n        # If the group consists of only one element, we don't need to pack it into a sublist\n        if len(list(group)) == 1:\n            result.extend(group)\n        else:\n            # Otherwise, we pack the consecutive duplicates into sublists\n            prev_elem = None\n            for elem in group:\n                if prev_elem is not None and prev_elem == elem:\n                    sublist = [prev_elem]\n                    result.extend(sublist)\n                else:\n                    sublist = [prev_elem] if prev_elem is not None else []\n                    sublist.append(elem)\n                    result.append(sublist)\n                prev_elem = elem\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == key:\n            yield [key] + list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(map(list, groupby(lst)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the counts of sublists\n    counts = {}\n    \n    # Loop through each sublist in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it's already in the dictionary\n        if tuple(sublist) not in counts:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n        # Otherwise, increment the count for the tuple in the dictionary\n        else:\n            counts[tuple(sublist)] += 1\n    \n    # Return the dictionary of counts of sublists\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        if i == 0 or list1[i]!= list1[i-1]:\n            sublists[tuple(list1[i:])] = sublists.get(tuple(list1[i:]), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            if item in sublists:\n                sublists[item] += 1\n            else:\n                sublists[item] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Convert the list to a dictionary, where every list is turned to a tuple\n    list2 = [(x,) for x in list1]\n\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Iterate through the list and count the number of occurrences of each tuple\n    for tup in list2:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of lists\n    count_dict = {}\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple exists in the dictionary\n        if sublist_tuple in count_dict:\n            # If it does, increment its count by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the unique sublists\n    sublist_counts = {}\n\n    # Iterate through each list in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        sublist = tuple(sublist)\n        # If the sublist is not in the dictionary, add it with a count of 1\n        if sublist not in sublist_counts:\n            sublist_counts[sublist] = 1\n        # If the sublist is already in the dictionary, increment its count by 1\n        else:\n            sublist_counts[sublist] += 1\n\n    # Return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through the list1 and turn each list into a tuple\n    for item in list1:\n        # Turn the list into a tuple\n        item_tuple = tuple(item)\n        \n        # If the tuple is not in the dictionary yet, add it with a count of 1\n        if item_tuple not in counts:\n            counts[item_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[item_tuple] += 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    count = {}\n    for i in list1:\n        if tuple(i) not in unique_list:\n            unique_list.append(tuple(i))\n    for i in unique_list:\n        count[i] = count.get(i, 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1,len(test_list)+1):\n        for comb in combinations(test_list,i):\n            if sum(comb) == 0:\n                print(tuple(comb))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples\n    tuple_set = set(test_list)\n    # Find all possible combinations of sums\n    for i in range(1, len(tuple_set)+1):\n        for comb in combinations(tuple_set, i):\n            print(tuple(comb))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Define the function to find the sum of all elements in a tuple\n    def tuple_sum(t):\n        return sum(t)\n\n    # Initialize the variable to store the combinations\n    combinations_list = []\n\n    # Loop through all possible combinations of tuples\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            # Find the sum of the current combination of tuples\n            current_sum = tuple_sum(j)\n\n            # Check if the current combination has the target sum\n            if current_sum == target_sum:\n                # Add the current combination to the list\n                combinations_list.append(j)\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # iterate through the list of tuples\n    for i in range(len(test_list)):\n        # find the combinations of sums\n        for comb in combinations(test_list[i], r=2):\n            # check if the combination is in the list\n            if comb in test_list:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Create a set of tuples from the given list of tuples\n    set_of_tuples = set(test_list)\n\n    # Create a list of all possible sums\n    sums = [sum(x) for x in test_list]\n\n    # Find all possible combinations of sums\n    combinations_of_sums = []\n    for i in range(len(sums)):\n        for j in range(i + 1, len(sums)):\n            combination = (sums[i], sums[j])\n            if combination in set_of_tuples:\n                combinations_of_sums.append(combination)\n\n    return combinations_of_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Check if the input list is valid or not\n    if not isinstance(test_list, list) or not all(isinstance(tup, tuple) for tup in test_list):\n        return \"Invalid input list\"\n\n    # Store the sum of each tuple in a list\n    sum_list = [sum(tup) for tup in test_list]\n\n    # Use the itertools.combinations function to find all combinations of sums with tuples\n    result = list(combinations(sum_list, len(sum_list)))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns the combinations of sums with tuples in the given list.\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combination = tuple(test_list[i:j])\n            combinations_list.append(combination)\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combo = (test_list[i][0], test_list[j][0])\n            for k in range(j+1, len(test_list)):\n                if test_list[i][1] + test_list[k][1] == test_list[j][1]:\n                    combo += (test_list[i][1], test_list[k][1])\n            if combo in test_list:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize the result list to store all the combinations\n    result = []\n    \n    # loop through all possible combinations of tuples of length 2\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the sum of the two tuples is present in the list\n            if sum(test_list[i]) + sum(test_list[j]) in test_list:\n                # add the combination to the result list\n                result.append((test_list[i], test_list[j]))\n                \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns a list of all the combinations of sums with tuples in the list.\n    '''\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    all_combinations = []\n    \n    for i in range(1, len(unique_tuples) + 1):\n        for combination in combinations(unique_tuples, i):\n            if sum(combination) == 0:\n                all_combinations.append(tuple(combination))\n                \n    return all_combinations"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, False otherwise.\n    '''\n    if n < 2:\n        return False\n    \n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    \n    if n > 1:\n        count += 1\n    \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Count the number of divisors of a given number using the formular: a^2 + b^2 = c^2 \n    where a, b, and c are the given number and the square root of the given number respectively.\n    \n    Args:\n        n (int): The given number for which we want to count the divisors.\n        \n    Returns:\n        int: The number of divisors of the given number.\n    \"\"\"\n    a = math.floor(math.sqrt(n))\n    b = int(math.sqrt(n))\n    c = 2\n\n    divisors = 0\n    while b >= 1:\n        if n % b == 0:\n            divisors += 2\n            n //= b\n        else:\n            b -= 1\n\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = [1]\n    i = 2\n    while i*i <= n: \n        if n % i: \n            i += 1\n        else: \n            divisors.append(i) \n            n //= i\n    divisors.append(n) \n    divisors.sort() \n    count_div = 0\n    count_even_div = 0\n    for i in range(len(divisors)): \n        count_div += 1\n        if divisors[i] % 2 == 0: \n            count_even_div += 1\n    if count_even_div % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 2\n            n //= i\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    \n    if n > 1 and divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the number of divisors of a given number n.\n    The function returns a tuple containing the count of divisors and the sum of their squares.\n    \"\"\"\n    divisors = []\n    divisor = 2\n    count = 0\n    sum_of_squares = 0\n\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n            sum_of_squares += divisor**2\n            divisors.append(divisor)\n        divisor += 1\n\n    if n > 1 and n % divisor == 0:\n        count += 1\n        sum_of_squares += n\n\n    return (count, sum_of_squares)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    This function returns True if the count of divisors is even and False otherwise.\n    '''\n    if n <= 1 : \n        return True\n    elif n == 2 : \n        return False\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n    \n    if n % int(math.sqrt(n)) == 0 : \n        count += 1\n    \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, False otherwise.\n    '''\n    # Calculate the number of divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n\n    # Count the number of divisors\n    count = len(divisors)\n\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum of odd length subarrays\n    sum_odd = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n\n        # Check if the length of the subarray is odd\n        if len(arr[i]) % 2 == 1:\n\n            # Initialize the sum of the subarray\n            subarray_sum = 0\n\n            # Loop through the subarray\n            for j in range(len(arr[i])):\n\n                # Add each element to the sum\n                subarray_sum += arr[i][j]\n\n            # Add the subarray sum to the sum of odd length subarrays\n            sum_odd += subarray_sum\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # Loop through each subarray of odd length\n    for i in range(1, n):\n        # Sum the odd length subarray\n        subsum = sum_odd_length_subarray(arr, i)\n        sum += subsum\n    \n    return sum\n\ndef sum_odd_length_subarray(arr, n):\n    '''\n    Helper function to sum the odd length subarray.\n    '''\n    subsum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            subsum += arr[i]\n    return subsum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n-2):\n        if arr[i] % 2!= 0:\n            for j in range(i+2, n):\n                if arr[j] % 2!= 0:\n                    total += arr[j] - arr[i]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        if i < len(arr) // 2:\n            start = i\n        else:\n            start = len(arr) - i - 1\n        for j in range(start, len(arr)):\n            total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_of_subarrays = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray = arr[i:j]\n            sum_of_subarrays += sum(subarray)\n            \n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        left = i\n        right = i + 1\n        while right < n:\n            if right - left + 1 % 2 == 1:\n                sum += arr[left] + arr[right]\n            left += 1\n            right += 1\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n    for i in range(n):\n        for j in range(i+1, min(n, i+3)+1, 2):\n            sum_odd_length += arr[j-1]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+2, n):\n            if j-i == 1:\n                sum_odd_length_subarrays += arr[i]\n            elif j-i == 3:\n                sum_odd_length_subarrays += arr[i] + arr[j] + arr[j+1]\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd\n        if arr[i] % 2 == 1:\n            # Initialize the current sum variable\n            curr_sum = 0\n            \n            # Iterate through the remaining elements after the current element\n            for j in range(i+1, len(arr)):\n                # Add the current element to the current sum\n                curr_sum += arr[j]\n                \n                # If the current sum is odd and its length is odd, add it to the sum\n                if curr_sum % 2 == 1 and len(curr_sum) % 2 == 1:\n                    sum += curr_sum\n                    \n    # Return the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j > i+1:\n                sub_arr = arr[i:j]\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an rgb color to a hsv color.\n    \"\"\"\n    # Convert the RGB values to float\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / diff)\n    elif max_val == g:\n        hue = 60 * ((b - r) / diff) + 120\n    else:\n        hue = 60 * ((r - g) / diff) + 240\n\n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate the value\n    value = max_val\n\n    # Convert the hue, saturation, and value to int\n    hue = int(hue)\n    saturation = int(saturation * 255)\n    value = int(value * 255)\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to floats\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Find max and min values among r, g and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate h, s and v\n    if max_val == min_val:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        delta = max_val - min_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n        s = delta / max_val\n\n        if max_val == 0:\n            v = 0\n        else:\n            v = max_val\n\n    # Convert h, s and v to percentages\n    h = h * 100\n    s = s * 100\n    v = v * 100\n\n    # Return h, s and v\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color using the following conversion formula:\n    h = hue\n    s = saturation (percentage of maximum value)\n    v = value (percentage of maximum value)\n    \n    where:\n        h = (max(r, g, b) - min(r, g, b))/max(r, g, b)\n        s = (max(r, g, b) - min(r, g, b))/(max(h, s))\n        v = max(r, g, b)\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    h = (max_color - min_color) / max_color\n    s = (max_color - min_color) / max(h, 1)\n    v = max_color\n\n    if max_color == min_color:\n        h = 0\n        s = 0\n    elif max_color == r:\n        h = 60 * (((g - b) / (max_color - min_color)) % 6)\n    elif max_color == g:\n        h = 60 * (((b - r) / (max_color - min_color)) + 2)\n    else:\n        h = 60 * (((r - g) / (max_color - min_color)) + 4)\n\n    h = int(h)\n    s = int(s * 100)\n    v = int(v * 100)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h / 6\n    \n    if h < 0:\n        h += 1\n        \n    v = cmax\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n        \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to XYZ color space\n    r_xyz = (r/255) * 100.0\n    g_xyz = (g/255) * 100.0\n    b_xyz = (b/255) * 100.0\n\n    x = (r_xyz * 0.4124) + (g_xyz * 0.3576) + (b_xyz * 0.1805)\n    y = (r_xyz * 0.2126) + (g_xyz * 0.7152) + (b_xyz * 0.0722)\n    z = (r_xyz * 0.0193) + (g_xyz * 0.1192) + (b_xyz * 0.9505)\n\n    # Convert XYZ to XYZ color space\n    x_xyz = x/100.0\n    y_xyz = y/100.0\n    z_xyz = z/100.0\n\n    if x_xyz > y_xyz and x_xyz > z_xyz:\n        max_c = x_xyz\n        min_c = y_xyz\n        sec_c = z_xyz\n    elif y_xyz > x_xyz and y_xyz > z_xyz:\n        max_c = y_xyz\n        min_c = x_xyz\n        sec_c = z_xyz\n    else:\n        max_c = z_xyz\n        min_c = x_xyz\n        sec_c = y_xyz\n\n    delta_c = max_c - min_c\n    if delta_c == 0:\n        h = 0\n    elif max_c == r_xyz or max_c == g_xyz or max_c == b_xyz:\n        h = (sec_c - min_c) / delta_c\n    else:\n        h = (sec_c - min_c) / delta_c + 6\n\n    if h < 0:\n        h += 1\n\n    h_hsv = h/6 * 360\n    s = delta_c/max_c\n    v = max_c*100\n\n    return round(h_hsv, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to HSV color value.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    h, s, v = 0, 0, max_value\n\n    if max_value == min_value:\n        h, s = 0, 0\n    else:\n        delta = max_value - min_value\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6 if h < 0 else h / 6\n\n        s = delta / max_value\n\n    h, s = round(h * 360), round(s * 100)\n    v = round(v * 100)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, and b to float values\n    r, g, b = map(float, (r, g, b))\n\n    # Find greatest and smallest values in the RGB tuple\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find difference between max and min values\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Normalize the hue value\n    if hue < 0:\n        hue += 6\n\n    # Calculate the saturation value\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate the value value\n    value = max_value\n\n    # Return the HSV values in a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: red value (0-255)\n    :param g: green value (0-255)\n    :param b: blue value (0-255)\n    :return: h, s, and v values for the given rgb color\n    \"\"\"\n\n    # Convert rgb to the range of 0-1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the max and min values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the delta between max and min\n    delta = max_value - min_value\n\n    # Calculate the hue\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h % 6.0\n\n    # Calculate the saturation\n    if max_value == 0:\n        s = 0.0\n    else:\n        s = delta / max_value\n\n    # Calculate the value\n    v = max_value\n\n    # Return the h, s, and v values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r,g,b to float values\n    r = float(r)/255\n    g = float(g)/255\n    b = float(b)/255\n    \n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the difference between maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the value of hue\n    if max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n    \n    # Calculate the value of saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n    \n    # Calculate the value of value\n    value = max_val\n    \n    # Find the value of saturation and value for each hue value\n    if saturation == 0:\n        hue_value = [0, 0, 0]\n    else:\n        if hue < 0:\n            hue += 6\n        \n        if 0 <= hue < 1:\n            hue_value = [value, (max_val - min_val) / (max_val + min_val), 0]\n        elif 1 <= hue < 2:\n            hue_value = [(max_val - min_val) / (max_val + min_val), value, 0]\n        elif 2 <= hue < 3:\n            hue_value = [0, value, (max_val - min_val) / (max_val + min_val)]\n        elif 3 <= hue < 4:\n            hue_value = [0, (max_val - min_val) / (max_val + min_val), value]\n        elif 4 <= hue < 5:\n            hue_value = [(max_val - min_val) / (max_val + min_val), 0, value]\n        else:\n            hue_value = [value, 0, (max_val - min_val) / (max_val + min_val)]\n    \n    return hue_value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    h, s, v = 0, 0, 0\n\n    r_min, g_min, b_min = min(r, g, b), min(r, g, b), min(r, g, b)\n    r_max, g_max, b_max = max(r, g, b), max(r, g, b), max(r, g, b)\n\n    d = r_max - r_min\n    s = 0 if d == 0 else d / (r_max + g_max + b_max)\n\n    if r_max == r_min:\n        h = (g_max - b_max) / d\n    elif g_max == r_min:\n        h = 2 + (b_max - r_max) / d\n    else:\n        h = 4 + (r_max - g_max) / d\n\n    if h < 0:\n        h += 6\n\n    h, s, v = int(h * 65535), int(s * 65535), int(v * 65535)\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        if even_count > 0:\n            product *= num\n            even_count -= 1\n        elif odd_count > 0:\n            product *= num\n            odd_count -= 1\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            even_sum += i\n        else:\n            odd_count += 1\n            odd_sum += i\n\n    if even_count == 0:\n        return 0\n    else:\n        return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd numbers.\n    \"\"\"\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            if product % 2!= 0:\n                product *= 1\n            product *= num\n        else:\n            if product % 2 == 0:\n                product *= 1\n            product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count > 0:\n        product *= even_count\n    if odd_count > 0:\n        product *= odd_count\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        \n        if count_even > 0 and count_odd > 0:\n            product *= i\n            count_even = 0\n            count_odd = 0\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    return even[0] * odd[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers and returns the product of the first even and the first odd number in the list.\n    '''\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                return lst[i] * lst[i+1]\n        elif lst[i] % 2 == 1:\n            if lst[i] % 2 == 1:\n                return lst[i] * lst[i+1]\n    return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n\n    # Initialize two variables to store the first even and odd numbers of the list\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list and find the first even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                break\n        elif num % 2!= 0:\n            if first_odd is None:\n                first_odd = num\n            else:\n                break\n\n    # If no even or odd number is found, return None\n    if first_even is None or first_odd is None:\n        return None\n\n    # Multiply the first even and odd numbers and return the result\n    return first_even * first_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_num += num\n        else:\n            odd_count += 1\n            odd_num += num\n    if even_count == 0:\n        return 0\n    return even_num * odd_num"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings based on whitespace\n    str_list = test_str.split()\n    # Create an empty list to store the converted integer values\n    int_list = []\n    # Loop through the list of strings\n    for i in str_list:\n        # Convert the string to an integer and append it to the list\n        int_list.append(int(i))\n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' and convert each element to integer\n    result = tuple(int(s.strip()) for s in test_str.split(','))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to list of tuples\n    tuples_list = [tuple(i.split()) for i in test_str.split(',')]\n    # Convert each tuple in the list to integer\n    int_tuples = [tuple(map(int, i)) for i in tuples_list]\n    # Return the converted integer tuple\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    list_str = test_str.split(',')\n    \n    # Initialize an empty list to hold the integer tuples\n    list_int = []\n    \n    # Loop through the list of strings and convert them to integers\n    for str_item in list_str:\n        int_item = int(str_item.strip())\n        list_int.append(int_item)\n    \n    # Return the list of integer tuples\n    return tuple(list_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tuple = eval(test_str)\n    int_tuple = tuple(map(int, str_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Check if input is a tuple string\n    if isinstance(test_str, tuple) and isinstance(test_str[0], str):\n        # Convert each string in the tuple to an integer\n        int_tuple = tuple(int(item) for item in test_str)\n        return int_tuple\n    else:\n        print(\"Input is not a tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string into a list of words\n    words = test_str.split()\n    # Initialize an empty integer list\n    int_list = []\n    # Loop through each word in the list\n    for word in words:\n        # If the word is a valid integer, append it to the list\n        try:\n            int_list.append(int(word))\n        except ValueError:\n            continue\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to list of tuples\n    test_list = [tuple(x.strip('()').split(',')) for x in test_str.split(')(')]\n    # convert each list of tuples to integer tuple\n    int_list = [tuple(map(int, x)) for x in test_list]\n    # return integer tuple\n    return tuple_str_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string by comma and space\n    split_tuple = test_str.split(\", \")\n\n    # Convert each element of the tuple string to integer\n    int_tuple = [int(i) for i in split_tuple]\n\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    int_list = []\n    for i in test_str:\n        try:\n            int_list.append(int(i))\n        except ValueError:\n            continue\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        i = 0\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index]:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a):\n        if a[index] == x:\n            return index\n        else:\n            return bisect.bisect_left(a, x)\n    else:\n        return len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # binary search for the right insertion point\n    i = bisect.bisect_left(a, x)\n    # if the value is greater than the last element of the array, return the index of the last element\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        # check if the right insertion point exists\n        j = i - 1\n        while j >= 0 and a[j] == x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i + 1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b.*b.*b.*')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba(?=b{3})'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return f\"The pattern '{pattern}' found {len(matches)} matches in the text.\"\n    else:\n        return f\"The pattern '{pattern}' did not find any matches in the text.\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'[a]+b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(b{3})')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"aaabbbbcccb\"\nresult = text_match_three(text)\nprint(result)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list) + tuple(test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string using the + operator\n    new_string = test_str + str(test_list)\n    # Convert the concatenated string into a list of tuples\n    new_list = eval(new_string)\n    # Return the new list of tuples\n    return new_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and the string into one string\n    combined_str = test_str + str(test_list)\n    # convert the concatenated string into a tuple\n    new_tuple = tuple(combined_str)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert list to tuple and convert string to tuple\n    new_tuple = tuple(test_list)\n    new_str = tuple(test_str)\n    # Combine the tuples into a new tuple\n    new_tuple_combined = new_tuple + new_str\n    # Return the new tuple\n    return new_tuple_combined"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1: # checking if i is odd (i.e. not a multiple of 2)\n            if nums[i] % 2 == 0: # checking if nums[i] is even\n                return False # if nums[i] is even at odd index, return False\n    return True # if all even numbers at odd indices are found, return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        bool: True if every even index contains even numbers, otherwise False.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(n % 2 == 0 for n in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of integers as input and returns True if every even index contains even numbers\n    and False otherwise.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(i, i+2) if nums[j] % 2 == 0])) == 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Convert the tuple to a list so that we can modify it\n    test_lst = list(test_tup)\n    # Iterate through the list and remove any tuple\n    for i in range(len(test_lst)):\n        if isinstance(test_lst[i], tuple):\n            test_lst.pop(i)\n            i -= 1  # Decrement the index to continue the loop\n    # Convert the modified list back to a tuple\n    return tuple(test_lst)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    nested_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                nested_list.append(sub_item)\n        else:\n            nested_list.append(item)\n    return nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define an empty list to store the non-nested tuples\n    non_nested_list = []\n    # Loop through each tuple in the given tuple\n    for item in test_tup:\n        # If the item is not a tuple, add it to the non_nested_list\n        if not isinstance(item, tuple):\n            non_nested_list.append(item)\n        # If the item is a tuple, recursively call remove_nested() on it and append the result to non_nested_list\n        else:\n            non_nested_list += remove_nested(item)\n    # Return the non_nested_list with all the tuples removed\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [elem for tup in test_tup for elem in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup += remove_nested(item)\n        else:\n            new_tup.append(item)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[0])\n    elif isinstance(test_tup, list):\n        result = []\n        for item in test_tup:\n            if isinstance(item, tuple):\n                result.extend(remove_nested(item))\n            else:\n                result.append(item)\n        return result\n    else:\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count = count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list): \n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            return arr.index(x)\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index=-1\n    for i in range(len(arr)):\n        if arr[i]==x:\n            index=i\n            break\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments, an array and an element x. It then returns the last index of x in the array.\n\n    :param arr: the sorted array in which x can be found.\n    :param x: the element to be searched for in the array.\n    :return: the last index of x in the array.\n    \"\"\"\n\n    # initialize variables\n    i = 0\n    j = len(arr) - 1\n\n    # loop until i is greater than j\n    while i <= j:\n\n        # if the current element is equal to x, return the index\n        if arr[i] == x:\n            return i\n\n        # if the current element is greater than x, update the lower bound\n        elif arr[i] < x:\n            i += 1\n\n        # if the current element is less than x, update the upper bound\n        else:\n            j -= 1\n\n    # if x is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr) - 1 and arr[i] <= x:\n        i += 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): List of sorted elements.\n    x (int): Element to search for.\n\n    Returns:\n    int: Index of the last occurrence of x in the array.\n\n    Raises:\n    ValueError: If x is not in the array.\n    \"\"\"\n    # Find the first index at which x is greater than or equal to the element at arr[i].\n    i = bisect_left(arr, x)\n    # Check if x is in the array.\n    if i == len(arr) or arr[i]!= x:\n        raise ValueError(\"x is not in the array\")\n    # Find the last index at which x is greater than the element at arr[i].\n    j = bisect_right(arr, x) - 1\n    # Return the index of the last occurrence of x in the array.\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the last position of x in the array.\n    If x is not in the array, it will return -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    # If x is already at the end of the array, return the index\n    if arr[right] == x:\n        return right\n    \n    # Binary search for x in the array\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the element is in the left half\n        if arr[mid] == x:\n            right = mid - 1\n        \n        # If the element is in the right half\n        elif arr[mid] > x:\n            left = mid + 1\n        \n        # If the element is in the middle\n        else:\n            return mid\n            \n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: the sorted array and the element to search for.\n    It returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    elif arr[0] == x:\n        return 0\n    elif arr[-1] == x:\n        return len(arr) - 1\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                right = mid - 1\n            elif arr[mid] > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters, an array and an element x, and returns the last position of x in the array.\n    \"\"\"\n    # Create a dictionary to store the position of each element in the array\n    pos = {}\n    for i, e in enumerate(arr):\n        pos[e] = i\n\n    # Iterate over the array and find the last position of x\n    for i, e in enumerate(arr):\n        if e == x:\n            return i\n\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last occurrence of x in arr\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # Return the last occurrence of x in arr\n    return right + 1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = \"This is an example text that contains an 'a' followed by anything, ending in 'b'.\"\nresult = text_starta_endb(text)\nprint(result)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Given a range l and r, return the sum of all odd natural numbers within the range.\n    \"\"\"\n    if l > r:\n        return 0\n    else:\n        return l + sum_odd(l+2, r)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize a variable to store the sum of odd numbers\n    sum_odd = 0\n    \n    # Loop through each number between 1 and n (inclusive)\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # If it is, add it to the sum\n            sum_odd += i\n    \n    # Return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments: l (the lower limit of the range) and r (the upper limit of the range).\n    The function finds all the odd natural numbers between l and r, and returns their sum.\n    \"\"\"\n    # initialize a variable to store the sum\n    total_sum = 0\n\n    # iterate over all the numbers between l and r\n    for i in range(l, r+1):\n        # if the number is odd, add it to the total sum\n        if i % 2!= 0:\n            total_sum += i\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables to keep track of the sum and the number of odd numbers seen so far\n    sum_so_far = 0\n    num_odd = 0\n    \n    # loop over all the numbers between l and r (inclusive)\n    for i in range(n+1):\n        # if the current number is odd, add it to the sum and increment the count of odds\n        if i % 2!= 0:\n            sum_so_far += i\n            num_odd += 1\n            \n    # return the sum of all odd numbers found\n    return sum_so_far"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter the lower limit of the range: \")), int(input(\"Enter the upper limit of the range: \"))\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    print(\"Sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary\n    binary_number = bin(n)[2:]\n    # Append zeros to the binary number to make it d bits long\n    padded_binary_number = binary_number.zfill(d)\n    # Reverse the binary number\n    reversed_binary_number = padded_binary_number[::-1]\n    # Convert the reversed binary number to an integer\n    rotated_number = int(reversed_binary_number, 2)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \"\"\"\n    # Rotate left by d bits\n    rotated = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # rotate left by d bits\n    result = (n << d) | (n >> (32-d))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary\n    binary_n = bin(n)[2:]\n    # Add zeros to the left until the length of binary_n is equal to d\n    binary_n = '0'*(d-len(binary_n)) + binary_n\n    # Convert binary to integer\n    n = int(binary_n, 2)\n    # Rotate the number by d bits\n    n = n >> d | n << (32 - d)\n    # Convert integer back to binary\n    binary_n = bin(n)[2:]\n    # Add zeros to the left until the length of binary_n is equal to 32\n    binary_n = '0'*(32-len(binary_n)) + binary_n\n    # Convert binary to integer and return\n    return int(binary_n, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary string and get the length of binary string\n    num_bin = bin(n)[2:]\n    num_bin_len = len(num_bin)\n    \n    # get the number of times we need to rotate the binary string\n    rot_times = d % num_bin_len\n    \n    # get the number of bits to be rotated and shift the bits accordingly\n    rot_bits = num_bin[-rot_times:]\n    shifted_bits = (rot_bits << (num_bin_len-rot_times)) | (num_bin[:-rot_times] >> rot_times)\n    \n    # convert the shifted binary string back to decimal number\n    rotated_num = int(shifted_bits, 2)\n    \n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]\n\n    # Check if d is negative\n    if d < 0:\n        d = d % 32\n\n    # Calculate the number of bits to rotate\n    rotation_bits = d % 32\n\n    # Calculate the number of bits to skip\n    skip_bits = 32 - rotation_bits\n\n    # Calculate the new binary string after rotation\n    new_binary_str = binary_str[rotation_bits:] + binary_str[:rotation_bits]\n\n    # Convert the new binary string back to an integer\n    new_int = int(new_binary_str, 2)\n\n    # Return the new integer\n    return new_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to a string\n    num_str = format(n, '032b')\n    # Find the length of the string\n    length = len(num_str)\n    # Calculate the rotation amount\n    rotation_amount = d % length\n    # If the rotation amount is 0, return the original number\n    if rotation_amount == 0:\n        return n\n    # Calculate the new number by shifting the bits and filling in zeros\n    new_num = int(num_str[rotation_amount:] + num_str[:rotation_amount], 2)\n    # Convert the new number back to an integer and return it\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the integer to binary string and get the length of the binary string\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n\n    # Calculate the shift amount\n    shift_amount = d % length\n\n    # Calculate the rotation mask\n    rotation_mask = (1 << length) - 1\n    mask = ((1 << shift_amount) - 1) << (32 - shift_amount)\n    mask_complement = ((1 << shift_amount) - 1) << shift_amount\n\n    # Perform the rotation\n    n = ((n >> shift_amount) | (n << (32 - shift_amount))) & rotation_mask\n    n = (n ^ mask) & mask_complement\n\n    # Convert the integer back to decimal and return the result\n    return int(n, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the low d bits of the number\n    mask = 0xFFFFFFFF << d\n    # Shift the bits to the left by d bits and append the high d bits of the original number\n    return ((n & mask) << d) | (n >> (32 - d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n\n    Args:\n    text (str): The string to remove all whitespaces from.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with an empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function will remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    \n    # Return the modified string\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    # initialize variables for counting\n    count = 0\n    # convert integers to lists\n    int_list = [x, y, z]\n    # sort the list in ascending order\n    int_list.sort()\n    # loop through the sorted list\n    for num in int_list:\n        # if the current number is equal to the next number, increment count\n        if num == int_list[1]:\n            count += 1\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(100):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and counts the number of equal numbers.\n    \"\"\"\n    count = 0\n    # Compare all the numbers\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j or i == z or j == z:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    # compare all three numbers\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j-1] > arr[j]:\n            j += 1\n        count += j - i\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Check if the array is already sorted\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        return 0\n\n    # Initialize variables\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n-1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid+1]:\n            count += mid - left + 1\n            right = mid\n        else:\n            left = mid + 1\n\n    # Check if the array is sorted in descending order\n    if all(arr[i] >= arr[i+1] for i in range(n-2, -1, -1)):\n        return count + 1\n\n    # If the array is not sorted, then we need to rotate it by 1\n    if arr[0] < arr[1]:\n        arr.append(arr.pop(0))\n\n    count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n\n    Args:\n        arr (list): A sorted array.\n\n    Returns:\n        int: The number of rotations required to generate the sorted array.\n\n    Example:\n        >>> count_rotation([4, 5, 1, 3, 2])\n        2\n    \"\"\"\n    # Initialize the rotation count and the index of the last element of the array\n    rotation_count = 0\n    last_index = len(arr) - 1\n\n    # Iterate over the array in reverse order\n    for i in range(last_index):\n        # If the element at the current index is less than the element at the next index,\n        # then there is a rotation and we increment the rotation count\n        if arr[i] < arr[i + 1]:\n            rotation_count += 1\n        # If the element at the current index is greater than the element at the next index,\n        # then we have reached the end of the rotation and we can move on to the next element\n        else:\n            break\n\n    return rotation_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Counting number of rotations required for ascending order\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    # If all elements are in ascending order\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # count number of rotations required to sort the array\n    count = 0\n    for i in range(n):\n        # check if array[i] is already sorted\n        if i == 0 or arr[i] > arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Calculate the number of rotations required\n    count = 0\n    for i in range(n):\n        # Check if the array is already sorted\n        if arr == sorted(arr):\n            return count\n        # If the array is not sorted, we need to rotate it\n        count += 1\n        # Reverse the elements of the array\n        arr.reverse()\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    # Find the median of the array\n    mid = len(arr) // 2\n    arr.sort()\n    if len(arr) % 2 == 0:\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n\n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < median:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Find the largest element in the array\n    max_elem = max(arr)\n\n    # Create a new array with the elements of the original array rotated by the difference between the max element and the smallest element in the array\n    rotated_arr = arr[(arr.index(max_elem) - arr.index(min(arr)) + n) % n:]\n\n    # Count the number of rotations required to generate a sorted array\n    rotations = 0\n    while not sorted(rotated_arr):\n        rotated_arr = arr[(arr.index(max_elem) - arr.index(min(arr)) + n) % n:]\n        rotations += 1\n\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[n-i-1]:\n            count += n - i - 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = [0] * (n+1)\n    for i in arr:\n        count[i] += 1\n    for i in range(1, n+1):\n        count[i] += count[i-1]\n    ans = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                ans += count[n-i]\n    return ans"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        i = 0\n        while i*i <= n:\n            if i*i == n:\n                return True\n            i += 1\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # Check if n is a perfect square\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    x = int(n**0.5) + 1\n    return x*x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Take square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n * sqrt_n!= n:\n        return False\n\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    root = int(n**0.5) + 1\n    \n    # If the square of the root is equal to n, the number is a perfect square\n    if root * root == n:\n        return True\n    \n    # If the square of the root is less than n, the number is not a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # check if the number is odd\n    if n % 2 == 1:\n        return False\n\n    # initialize the square root of the number\n    sqrt_n = int(n**0.5)\n\n    # check if the square root of the number is an integer\n    if sqrt_n**2 == n:\n        return True\n\n    # if the square root is not an integer, then it's a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 or n == 4:\n        return True\n    elif n < 4:\n        return False\n    \n    root = int(n**0.5) + 1\n    \n    if root * root == n:\n        return True\n    elif root * root < n:\n        return False\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    left, right = 0, n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    i = 0\n    while i*i <= n:\n        if n == i*i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the number is a perfect square and False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate through the list and multiply each element by the product\n    for num in arr:\n        product *= num\n    \n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    # initialize product to zero\n    product = 1\n    # iterate over the list and multiply each element with the product\n    for num in arr:\n        product *= num\n    # check if the product is even or odd using the modulo operator\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers and checks whether their product is even or odd.\n    '''\n    if not arr:\n        return False\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sum_list = sublist\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            if j == 0:\n                max_sum = lists[i][j]\n                for k in range(1, len(lists[i])):\n                    max_sum = max(max_sum, lists[i][k] + lists[i][j])\n            else:\n                max_sum = max(max_sum, lists[i][j] + max_list[j-1])\n        max_list.append(max_sum)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum and current sum variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the lists\n    for num_list in lists:\n        # Iterate through the number list\n        for num in num_list:\n            # Add the current number to the current sum\n            curr_sum += num\n\n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n            # If the current sum is equal to the maximum sum, check for the longest sublist\n            if curr_sum == max_sum:\n                # Initialize the longest sublist length and current sublist length variables\n                longest_sublist_len = 1\n                curr_sublist_len = 1\n\n                # Iterate through the number list again to check for the longest sublist\n                for num in num_list:\n                    # If the current number is the same as the last number in the sublist, increment the sublist length\n                    if num == num_list[num_list.index(num) - 1]:\n                        curr_sublist_len += 1\n\n                    # If the current sublist length is greater than the longest sublist length, update the longest sublist length\n                    elif curr_sublist_len > longest_sublist_len:\n                        longest_sublist_len = curr_sublist_len\n\n                # If the longest sublist length is greater than 1, update the maximum sum\n                if longest_sublist_len > 1:\n                    max_sum = longest_sublist_len * max_sum\n\n    # Return the list in the list of lists that has the highest sum\n    return lists[lists.index(max(lists, key=lambda x: sum(x)))]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with that sum\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Loop through each list in the list of lists\n    for sublist in lists:\n        # Initialize variables to store the current sum and the current list\n        current_sum = 0\n        current_list = []\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the current sum and the current list\n            current_sum += element\n            current_list.append(element)\n            \n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum and the corresponding list\n                max_sum = current_sum\n                max_list = current_list\n    \n    # Return the maximum sum and list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n                \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes in a list of lists as input and returns the list in a list of lists\n    whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = [[lists[i][j]]]\n        elif current_sum == max_sum:\n            max_list.append([lists[i][j]])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # create a new list to store the maximum sum list\n    max_sum_list = []\n    \n    # loop through each sub-list in the input list\n    for sub_list in lists:\n        # initialize the current maximum sum to the first element of the sub-list\n        current_max_sum = sub_list[0]\n        \n        # loop through each element in the sub-list\n        for element in sub_list:\n            # add the current element to the current maximum sum\n            current_max_sum += element\n            \n            # if the current maximum sum is greater than the maximum sum in the `max_sum_list` list, update it\n            if current_max_sum > max_sum_list[0]:\n                max_sum_list = [current_max_sum]\n            # if the current maximum sum is equal to the maximum sum in the `max_sum_list` list, add it to the list\n            elif current_max_sum == max_sum_list[0]:\n                max_sum_list.append(current_max_sum)\n                \n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the list of lists\n    whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    # iterate through each list in the input list of lists\n    for lst in lists:\n        # initialize a variable to store the current sum\n        current_sum = 0\n        # iterate through each element in the current list\n        for num in lst:\n            # add the current element to the current sum\n            current_sum += num\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # return the list in the input list of lists whose sum of elements is the highest\n    return [lst for lst in lists if sum(lst) == max_sum]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    max_run = max(max_run, current_run)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    max_run_start = 0\n    max_run_end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            if upper_count > max_run_end - max_run_start + 1:\n                max_run_start = i\n                max_run_end = i\n        else:\n            upper_count = 0\n    return test_str[max_run_start:max_run_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 1\n    curr_run = 1\n    # loop through the string\n    for char in test_str:\n        # if the character is uppercase, increment the run count and check if it's the longest\n        if char.isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        # if the character is not uppercase, reset the run count and check if it's the longest\n        else:\n            curr_run = 1\n            if curr_run > max_run:\n                max_run = curr_run\n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 0\n    current_run = \"\"\n    max_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            if len(current_run) > run_length:\n                run_length = len(current_run)\n                max_run = 1\n            elif len(current_run) == run_length:\n                max_run += 1\n        else:\n            current_run = \"\"\n            run_length = 0\n\n    if len(current_run) > run_length:\n        run_length = len(current_run)\n        max_run = 1\n    elif len(current_run) == run_length:\n        max_run += 1\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    is_uppercase = False\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            is_uppercase = False\n        if not is_uppercase and char.isupper():\n            is_uppercase = True\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    max_run = 0\n    current_run = 0\n    current_uppercase = False\n\n    for char in test_str:\n        if char.isupper():\n            current_uppercase = True\n        else:\n            if current_uppercase:\n                current_run += 1\n            else:\n                current_run = 0\n            max_run = max(max_run, current_run)\n            current_uppercase = False\n\n    if current_uppercase:\n        current_run += 1\n    max_run = max(max_run, current_run)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    \n    # Loop through the string\n    for char in test_str:\n        # If the current character is uppercase, increment the run counter\n        if char.isupper():\n            curr_run += 1\n        # If the current character is not uppercase, reset the run counter\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    \n    # Update the maximum run counter\n    max_run = max(max_run, curr_run)\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 0\n    count = 1\n    current_run = 0\n\n    # loop through the string\n    for i in range(len(test_str)):\n        # if the character is uppercase, increment count and reset current_run if necessary\n        if test_str[i].isupper():\n            count += 1\n            if count == 1:\n                current_run = 1\n            else:\n                current_run += 1\n        else:\n            # if the character is not uppercase and the count is greater than 1, update max_run if necessary\n            if count > 1:\n                max_run = max(max_run, current_run)\n            # reset count and current_run\n            count = 1\n            current_run = 0\n\n    # if the last character was uppercase and the count is greater than 1, update max_run\n    if count > 1:\n        max_run = max(max_run, current_run)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to store maximum run of uppercase characters\n    max_run = 0\n    current_run = 0\n\n    # Loop through the string and count the number of uppercase characters\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            # If the current run becomes greater than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter\n            current_run = 0\n\n    # If the final current run is greater than the maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    current_char = test_str[0]\n    # Loop through each character in the string\n    for i in range(1, len(test_str)):\n        # If the character is an uppercase letter and the previous character was a lowercase letter, increment run_length\n        if test_str[i].isupper() and test_str[i-1].islower():\n            run_length += 1\n        # If the character is not an uppercase letter or if it is the last character in the string, update max_run if necessary\n        else:\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 0\n    # If the last run_length is greater than max_run, update max_run\n    if run_length > max_run:\n        max_run = run_length\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Initialize first odd number as None\n    first_odd_num = None\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the current number is odd\n        if num % 2!= 0:\n            # If the current number is odd, set it as the first odd number\n            if first_odd_num is None:\n                first_odd_num = num\n            # If the current number is even and the first odd number is set, return the first odd number\n            else:\n                return first_odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as an input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples as input and a number K as an argument.\n    It returns True if the number of elements in the first tuple is greater than or equal to K and\n    the number of elements in the second tuple is greater than or equal to K, otherwise it returns False.\n    '''\n    if len(test_tup[0]) >= K and len(test_tup[1]) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of equal length\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # Check if each element of second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The first tuple cannot have elements larger than their corresponding elements in the second tuple.\")\n            return\n\n    # If all elements in both tuples are smaller, print \"The tuples are smaller.\"\n    print(\"The tuples are smaller.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of both tuples should be same.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]