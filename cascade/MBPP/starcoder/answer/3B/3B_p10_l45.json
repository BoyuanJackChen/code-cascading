[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_list:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create two sets to store the unique elements of each list\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the set back to a list\n    shared_list = list(shared_set)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns a boolean indicating\n    whether the number is not prime or not. The trial division method is used\n    to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is greater than 1\n    if n <= 1:\n        return True\n\n    # Check if the number is divisible by 2\n    if n == 2:\n        return False\n\n    # Check odd numbers up to the square root of the number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function identifies non-prime numbers by checking if the number is divisible by any number from 2 to the square root of the number.\n    '''\n\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap with n largest elements\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap, nums[i])\n    \n    # Iterate through the remaining elements and add them to the max heap\n    for i in range(n, len(nums)):\n        if nums[i] > hq.heappop(max_heap):\n            hq.heappush(max_heap, nums[i])\n    \n    # Return the n largest integers from the max heap in descending order\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap from the first n elements of the list\n    hq.heapify(nums[:n])\n    # Iterate through the remaining elements of the list\n    for i in range(n, len(nums)):\n        # Remove the minimum element from the heap\n        heap_min = hq.heappop(nums[:n])\n        # Add the i-th element to the heap\n        hq.heappush(nums[:n], nums[i])\n        # Restore the heap property to maintain the heap order\n        hq.heapify(nums[:n])\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Build the heap\n    hq.heapify(nums)\n\n    # Remove the smallest n numbers from the heap\n    for i in range(n):\n        hq.heappop(nums)\n\n    # Return the largest n numbers in descending order\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max-heap from the input list of numbers\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Pop the n largest elements from the max-heap and append them to the result list\n    result = []\n    while max_heap:\n        result.append(max_heap[0])\n        max_heap = max_heap[1:]\n\n    return result[::-1]  # reverse the result list to get the largest elements in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list of numbers to heap\n    heap = hq.nlargest(n, nums)\n    # return heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n    for _ in range(n):\n        hq.heappop(heap)\n    return [abs(x) for x in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to min heap\n    min_heap = [-num for num in nums]\n    heapq.heapify(min_heap)\n    \n    # extract and return the n largest elements\n    largest = [heapq.heappop(min_heap) for _ in range(n)]\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = [nums.pop()]\n    for i in range(n-1):\n        largest.append(nums.pop())\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of the first n largest numbers\n    hq.heapify(nums[:n])\n\n    # iterate over the remaining numbers\n    for num in nums[n:]:\n        # if the number is greater than the smallest number in the heap, pop the smallest number from the heap and insert the number\n        if num > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n], num)\n\n    # return the n largest numbers in descending order\n    return nums[:n]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the input number to binary string \n    x_binary = bin(x)[2:] \n    \n    # Iterate over each bit of the binary string and check if it differs from the next bit \n    for i in range(len(x_binary)-1): \n        if x_binary[i]!= x_binary[i+1]: \n            return False \n    return True "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    while x & (x-1) == 0:\n        if x == 0:\n            return True\n        x >>= 1\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns a boolean value indicating whether the \n    number is a power of two or not. A power of two is a positive integer that is equal to 2 raised \n    to a certain power. The power is calculated by counting the number of 1 bits in its binary \n    representation. For example, 16 is a power of two because 2^4 = 16.\n    '''\n    count = 0\n    while x > 1:\n        x = x >> 1\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # convert the integer to binary string\n    binary_str = bin(x)[2:]\n\n    # check if the binary string contains only one bit set to 1\n    if len(set(binary_str)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x & (x - 1)!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Replace all special characters with whitespace\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Filter the words to get only those which are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the filtered words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # find all matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for c in str:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # Find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Initialize the result and count of rotations\n    result = 0\n    count = 0\n    \n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the frequency of each character is the same\n            if freq[str[i]] == freq[str[j]]:\n                # Increment the count of rotations\n                count += 1\n                # Check if the count is greater than the result\n                if count > result:\n                    result = count\n    \n    # If the result is 0, there is only one possible rotation\n    if result == 0:\n        result = 1\n    \n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    dp = [0] * n  # precompute the dp[i] for all i\n    for i in range(n):\n        dp[i] = 1 + dp[i-1]  # count the number of rotations needed to get the first i characters\n        for j in range(1, i):\n            if s[i-j] == s[j]:  # if the two characters are the same, count the number of rotations needed to get the first i-j characters\n                dp[i] = min(dp[i], dp[j-1] + 1)\n    return dp[n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the maximum count of each character in the string\n    max_count = max(char_count.values())\n\n    # Find the count of each character in the string after each rotation\n    rotated_char_count = {}\n    for char in char_count:\n        rotated_char_count[char] = char_count[char]\n\n    # Rotate the character counts to get the same string\n    for i in range(max_count):\n        # Find the maximum count of each character after each rotation\n        max_rotated_count = max(rotated_char_count.values())\n\n        # Rotate the character counts\n        for char in rotated_char_count:\n            rotated_char_count[char] += max_rotated_count - 1\n\n        # Decrement the maximum count of each character after each rotation\n        for char in rotated_char_count:\n            if rotated_char_count[char] == 0:\n                max_rotated_count -= 1\n                rotated_char_count[char] = max_rotated_count\n\n    # Count the number of rotations required to get the same string\n    rotations_required = 0\n    for char in char_count:\n        if char_count[char]!= rotated_char_count[char]:\n            rotations_required += 1\n\n    return rotations_required"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    # Iterate over all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the two substrings are equal\n            if str[i] == str[j]:\n                # If they are, increment the number of rotations\n                rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Traverse through all possible rotations of the string\n    min_rotations = float('inf')\n    for i in range(1, n+1):\n        # Calculate the number of rotations required for each substring\n        num_rotations = n // i\n        # Update the minimum rotations if the current substring has fewer rotations\n        if num_rotations < min_rotations:\n            min_rotations = num_rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Remove spaces and convert to lowercase\n    str = str.replace(\" \", \"\").lower()\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Create a list of tuples containing the frequency of each character and the index of that character in the string\n    char_freq_list = [(freq[char], i) for i, char in enumerate(str)]\n    # Sort the list of tuples based on the frequency of the characters\n    char_freq_list.sort()\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n    # Traverse the sorted list of tuples\n    for freq, index in char_freq_list:\n        # If the frequency of the current character is greater than 1, then we can rotate the string by 1 character to get the same string\n        if freq > 1:\n            # Get the frequency of the character to be rotated\n            rotated_char_freq = char_freq_list[char_freq_list.index((freq - 1, index))][0]\n            # Update the minimum number of rotations required if the rotated character frequency is greater than the original character frequency\n            min_rotations = max(min_rotations, rotated_char_freq)\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j] and str[i+1:]!= str[:j]:\n                return j-i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    length = len(str)\n    # Check if the string is already a palindrome\n    for i in range(length // 2):\n        if str[i]!= str[length - 1 - i]:\n            return count\n    return count + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1: \n        return 0 \n    min_rotations = len(str) # assuming that the minimum number of rotations is equal to the length of the string.\n    for i in range(len(str)): \n        for j in range(i+1, len(str)): \n            # checking if the two substrings are equal after rotating by i and j positions.\n            if str[i:i+j] == str[(i+j)%len(str):(i+j)%len(str)+j]: \n                # updating the minimum number of rotations if we found a rotation that makes the two substrings equal.\n                if j-i < min_rotations: \n                    min_rotations = j-i\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    n = len(str)\n    min_rotations = n # Assuming that the original string is already a palindrome\n\n    # Check if the original string is already a palindrome\n    for i in range(n // 2):\n        if str[i]!= str[n - 1 - i]:\n            return 0\n\n    # Find the minimum number of rotations required to get the same string\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            # Check if the substring of length i and j is a palindrome\n            if str[j - i]!= str[j - i][::-1]:\n                # If it is not a palindrome, then we need to rotate the substring to get the same string\n                if j - i == n // 2:\n                    min_rotations = min(min_rotations, i)\n                else:\n                    min_rotations = min(min_rotations, i + 1)\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the string contains the character to be removed\n    if ch in s:\n        # check if the string has only one character\n        if len(s) == 1:\n            return None\n        # check if the string has two characters\n        elif len(s) == 2:\n            if s == ch:\n                return None\n            else:\n                return s\n        # if the string has more than two characters\n        else:\n            # find the index of the first occurrence of the character\n            index = s.find(ch)\n            # if the character is the first occurrence, remove it from the string and return the modified string\n            if index == 0:\n                return s[1:]\n            # if the character is not the first occurrence, find the index of the last occurrence of the character\n            else:\n                index2 = s.rfind(ch)\n                # if the character is the last occurrence, remove it from the string and return the modified string\n                if index == index2:\n                    return s[:index]\n                # if the character is not the last occurrence, return the original string\n                else:\n                    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Split the string into list of characters\n    char_list = list(s)\n\n    # Find the index of first occurrence of the character\n    first_index = char_list.index(ch)\n\n    # If first occurrence is found, remove it and shift all the indices to the right by 1\n    if first_index > 0:\n        char_list[first_index] = None\n        for i in range(first_index, len(char_list)):\n            char_list[i] = char_list[i+1]\n        char_list = [i for i in char_list if i is not None]\n\n    # Find the index of last occurrence of the character\n    last_index = char_list.index(ch, first_index)\n\n    # If last occurrence is found, remove it\n    if last_index!= len(char_list) - 1:\n        char_list[last_index] = None\n        char_list = [i for i in char_list if i is not None]\n\n    # Join the list of characters back into a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) > 1 and s[0] == ch and s[-1] == ch:\n        return s[1:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s: \n        return s \n    if s[0] == ch: \n        return remove_Occ(s[1:], ch) \n    if s[-1] == ch: \n        return remove_Occ(s[:-1], ch) \n    return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, \"\").replace(ch, \"\", 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Removing the first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n\n    # Removing the last occurrence of the character\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return \"Character not found in string.\"\n    elif s.count(ch) == 1:\n        return s[1:-1]\n    else:\n        return s[:s.find(ch)-1] + s[s.find(ch)+len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s: \n        # split the string into list of characters\n        lst = list(s) \n        # check if the first occurrence of the character is present \n        if s.find(ch) == 0: \n            # remove the first occurrence of the character from the list \n            lst.remove(ch) \n            # join the list into a string and return the result \n            return ''.join(lst) \n        # check if the last occurrence of the character is present \n        elif s.rfind(ch) == len(s)-1: \n            # remove the last occurrence of the character from the list \n            lst.remove(ch) \n            # join the list into a string and return the result \n            return ''.join(lst) \n        else: \n            # if the character is not present in the string, return the string as it is \n            return s \n    else: \n        # if the character is not present in the string, return the string as it is \n        return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    # Find the first and last occurrences of the given character in the string\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    # If there are no occurrences of the character, return the original string\n    if first_occurrence == -1 and last_occurrence == -1:\n        return s\n    \n    # If the first occurrence is at the beginning of the string\n    elif first_occurrence == 0:\n        return s[first_occurrence+1:]\n    \n    # If the last occurrence is at the end of the string\n    elif last_occurrence == len(s)-1:\n        return s[:last_occurrence]\n    \n    # If there are both first and last occurrences\n    else:\n        return s[:first_occurrence]+s[last_occurrence+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    # Initialize the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row_sums in ascending order\n    row_sums.sort()\n    # Use the row_sums to sort the matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = M[i][j][0] # Keep only the first element of each row\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables\n    n = len(M)\n    sum_rows = [0] * n\n    \n    # compute the sum of each row\n    for i in range(n):\n        for j in range(n):\n            sum_rows[i] += M[i][j]\n    \n    # sort the rows in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum_rows[i] > sum_rows[j]:\n                sum_rows[i], sum_rows[j] = sum_rows[j], sum_rows[i]\n    \n    # return the sorted matrix\n    return sum_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix according to the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order based on the sum\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = []\n    for row in sorted_rows:\n        sorted_matrix.append(row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize a list to store the sorted matrix\n    sorted_M = []\n    \n    # sort each row of the matrix in ascending order\n    for row in M:\n        sorted_row = sorted(row)\n        sorted_M.append(sorted_row)\n    \n    # sort the sorted matrix in ascending order\n    sorted_M = sorted(sorted_M)\n    \n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # initialize a boolean array to keep track of which rows have been processed\n    processed = [False] * n\n    # initialize a variable to keep track of the row index of the next row to process\n    next_row = 0\n    \n    # keep processing rows until all rows have been processed\n    while next_row < n:\n        # initialize a variable to keep track of the maximum sum so far\n        max_sum = 0\n        # find the index of the next unprocessed row\n        for i in range(n):\n            if not processed[i]:\n                max_sum = max(max_sum, M[i][next_row])\n                # mark the row as processed\n                processed[i] = True\n                # stop searching for the next unprocessed row\n                break\n        \n        # set the next row to process\n        next_row += 1\n    \n    # return the sorted matrix\n    return sorted(M, key=lambda x: sum(x))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Find the sum of the row\n        row_sum = sum(M[i])\n        # Loop through the remaining rows of the matrix\n        for j in range(i+1, len(M)):\n            # If the current row sum is smaller than the next row sum, swap the rows\n            if row_sum < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n                # Find the new row sum\n                row_sum = sum(M[i])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the maximum value in the first column\n    max_val = max(row[0] for row in M)\n    # Sort the matrix according to the sum of its rows\n    sorted_M = sorted(M, key=lambda x: sum(x))\n    # Rearrange the matrix by changing the values of the cells with the maximum value to the minimum value\n    for i in range(len(sorted_M)):\n        for j in range(1, len(sorted_M[i])):\n            if sorted_M[i][j] == max_val:\n                sorted_M[i][j] = min(sorted_M[i][k] for k in range(len(sorted_M[i])) if k!= j)\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Find the sum of the row\n        row_sum = sum(row)\n        \n        # Check if the sum is less than or equal to 0, in which case it is already sorted\n        if row_sum <= 0:\n            sorted_M.append(row)\n            continue\n        \n        # Initialize a boolean variable to keep track of whether the row is sorted or not\n        sorted_flag = True\n        \n        # Loop through each column of the row\n        for i in range(1, len(row)):\n            # Check if the current column is less than the previous column\n            if row[i] < row[i-1]:\n                # If it is, swap the elements\n                row[i], row[i-1] = row[i-1], row[i]\n                # Set the sorted_flag to False to indicate that the row needs to be sorted again\n                sorted_flag = False\n        \n        # Check if the row is sorted or not\n        if sorted_flag:\n            sorted_M.append(row)\n            \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            # find the smallest element in the submatrix\n            min_val = M[j][j]\n            for k in range(j+1, j+i+1):\n                if M[j][k] < min_val:\n                    min_val = M[j][k]\n            # swap the submatrix with the row that contains the minimum value\n            if min_val!= M[j][j]:\n                for k in range(j, j+i+1):\n                    M[j][k], M[k][j] = M[k][j], M[j][k]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula for volume of a triangular prism: V = (1/2) * l * b * h\n    volume = (1/2) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3 #formula for volume of triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    \"\"\"\n    Write a Python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters - length of the sides of the prism, breadth, and height.\n    It returns the volume of the triangular prism.\n    '''\n\n    # formula for volume of triangular prism\n    volume = 0.5 * l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6 #formula to calculate the volume \n    return volume #returns the volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l * b * h) / 2\n    volume = area * l\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism using the formula V = (1/3)ab.\n    '''\n    V = (1 / 3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters, l, b, and h, representing the length, width, and height of a triangular prism.\n    It calculates and returns the volume of the prism.\n    '''\n    V = (l * b * h) / 6\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('([a-z])_([a-z])')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z][a-z]*_?)+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]*[_][a-z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])_+(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+(_[a-z]+)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'(?<=\\w)(?=[a-z])(?=[A-Z])|(?<=[a-z])(?=[A-Z][a-z])|(?<=[A-Z])(?=[0-9])|(?<=[a-z])(?=[0-9][a-z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match lowercase letters with underscores\n    pattern = re.compile(r'([a-z])_([a-z])')\n\n    # Use the pattern to search for matches in the input string\n    match = pattern.search(text)\n\n    # Check if a match was found and return the result\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z](?:(?!.*[a-z])[a-z]+)*_')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define the pattern to match lowercase sequences with underscore\n    pattern = re.compile(r'([a-z]+)_([a-z]+)')\n    \n    # Match the pattern in the input text\n    match = pattern.search(text)\n    \n    # If match is not None, then return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # convert the string to a list\n    lst = list(string)\n\n    # create a list to store the result\n    result = []\n\n    # iterate over the list and remove characters from the first string which are present in the second string\n    for i in range(len(lst)):\n        if lst[i] not in string:\n            result.append(lst[i])\n\n    # convert the list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the second string\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a new string that contains only unique characters from the first string\n    unique_str = ''\n    for char in string:\n        if char not in freq:\n            unique_str += char\n    \n    # Convert the new string to a list and return it\n    return list(unique_str)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string) # convert string to set of unique characters\n    for i in range(NO_OF_CHARS): # loop through each character in the alphabet\n        if i not in char_set: # if character not present in the set of unique characters\n            string = string.replace(chr(i), '') # remove character from string\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Split the string into a list of characters\n    lst = list(string)\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the first string\n    for char in lst:\n        # Check if the character is not in the second string\n        if char not in string:\n            # Add the character to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        char_list.append(chr(i))\n\n    string_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if char_list[i] in string_list:\n            string_list.remove(char_list[i])\n\n    final_string = ''.join(string_list)\n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    first_str = string[:NO_OF_CHARS]\n    second_str = string[NO_OF_CHARS:]\n\n    result = []\n    for char in first_str:\n        if char not in second_str:\n            result.append(char)\n\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    set1 = set(string)\n    set2 = set(\"abcdefghijklmnopqrstuvwxyz\") # set of all possible characters in the alphabet\n    \n    for char in string:\n        if char in set2:\n            set1.discard(char)\n\n    return ''.join(list(set1))\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    # Create a list of all possible characters in the alphabet\n    alphabet = [chr(i) for i in range(NO_OF_CHARS)]\n    # Convert the string to a set to remove duplicates\n    string_set = set(string)\n    # Create a list of characters that are present in the first string but not in the second string\n    common_chars = [char for char in alphabet if char not in string_set]\n    # Remove the common characters from the first string\n    final_string = ''.join([char for char in string if char not in common_chars])\n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Converting the input string into a list\n    list_string = list(string)\n\n    # Removing characters from the list\n    for char in list_string:\n        if char in string:\n            list_string.remove(char)\n\n    # Joining the list back into a string\n    output_string = \"\".join(list_string)\n\n    return output_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique numbers in the array\n    unique_nums = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    return len(unique_nums) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Convert the array to a set to remove any duplicate elements\n    array_set = set(arraynums)\n    # Check if the length of the set is less than the length of the original array\n    if len(array_set) < len(arraynums):\n        print(\"The given array contains duplicate elements.\")\n        return True\n    else:\n        print(\"The given array doesn't contain duplicate elements.\")\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a set to store unique elements\n    unique_elements = set()\n\n    # Iterate through each element in the array\n    for element in arraynums:\n        # If the element is already in the set, return True\n        if element in unique_elements:\n            return True\n        # Otherwise, add the element to the set\n        unique_elements.add(element)\n\n    # If we've iterated through the entire array and haven't found any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    element_count = {}\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in element_count:\n            return True\n        # Otherwise, add the element to the dictionary\n        else:\n            element_count[num] = True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_nums = set(arraynums)\n    \n    # Check if the length of the unique_nums set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n    # Check if the length of the set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through each element in the array\n    for element in arraynums:\n        # Check if the element is already in the set\n        if element in unique_set:\n            # If the element is already in the set, return True\n            return True\n        # If the element is not in the set, add it to the set\n        else:\n            unique_set.add(element)\n\n    # If the loop completes without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Using a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Checking if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = set(arraynums)\n    if len(arraynums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for num in woodball_numbers:\n        if num == x:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'woodball'\n    else:\n        return 'not a woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 23 or x == 34 or x == 45: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 7 or x == 13:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1 and x <= 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 0:\n        return \"Not a woodball.\"\n    elif x < 0:\n        return \"A woodball.\"\n    else:\n        return \"Invalid input.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0 or x % 100 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100:\n        return \"Woodall\"\n    else:\n        return \"Not Woodall\"\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if num < reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num = num // 10\n    return rev_num\n\ndef check_less_than_twice_reverse(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num % 2 == 0:\n        return check_less_than_twice_reverse(num - 2)\n    if num % 2!= 0:\n        return check_less_than_twice_reverse(num - 1)\n\nnum = int(input(\"Enter a number: \"))\nif check_less_than_twice_reverse(rev(num)):\n    print(\"The number is one less than twice its reverse.\")\nelse:\n    print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n\n    return reverse < 2*reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num == 2 * num + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    reverse_str = num_str[::-1]\n    # Convert the reverse string to an integer\n    reverse_num = int(reverse_str)\n    # Calculate the difference between the input number and its reverse\n    diff = num - reverse_num\n    # Check if the difference is one less than twice its reverse\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    str_num = str(num)\n\n    # Reverse the string\n    rev_str = str_num[::-1]\n\n    # Convert the reversed string back to a number\n    rev_num = int(rev_str)\n\n    # Check if the reversed number is one less than twice the original number\n    if rev_num < num*2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    if reverse == 2*reverse+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    return num == reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    while temp!= 0:\n        rev_num = rev_num*10 + temp%10\n        temp //= 10\n    return num - 2*rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n    # Calculate the difference between the input number and its reverse\n    diff = num - reversed_num\n    # Check if the difference is one less than twice its reverse\n    if diff < 2 * reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, int(digit))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Initialize a list to store the power of 2 for each digit\n    power_of_2 = [0] * 10\n\n    # Loop through each digit and calculate its power of 2\n    for digit in arr:\n        power_of_2[digit] += 1\n\n    # Calculate the maximum value that can be formed with the given digits\n    max_value = 0\n    for i in range(10):\n        max_value += (2**power_of_2[i])\n\n    return max_value"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if i+1 < len(arr):\n            max_num += arr[i]*10**(len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed with the given list of digits.\n\n    For example, if the input list is [1, 2, 3], the function should return 999.\n    '''\n    n = len(arr)\n    max_num = 0\n\n    # Iterate through each digit in the list\n    for digit in arr:\n        # Multiply the maximum number with the power of the digit\n        max_num *= 10\n        max_num += digit\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Sorting the array in descending order\n    arr = sorted(arr, reverse=True)\n\n    # Initializing the maximum number with the first digit\n    max_num = arr[0]\n\n    # Initializing the count of digits for the current maximum number\n    count = 1\n\n    # Looping through the array from second digit to last digit\n    for i in range(1, len(arr)):\n        # Checking if the current digit can form a number with the current maximum number\n        if arr[i] <= max_num + 9:\n            # Adding the current digit to the current maximum number\n            max_num += arr[i]\n            # Incrementing the count of digits for the current maximum number\n            count += 1\n        # If the current digit can't form a number with the current maximum number, then we need to consider the next digit\n        else:\n            # Checking if the current digit can form a number with the previous maximum number\n            if arr[i] <= max_num:\n                # Adding the current digit to the current maximum number\n                max_num += arr[i]\n                # Incrementing the count of digits for the current maximum number\n                count += 1\n            # If the current digit can't form a number with the previous maximum number, then we need to consider the next digit\n            else:\n                # Checking if the current digit can form a number with the next maximum number\n                if arr[i] <= max_num + 9:\n                    # Adding the current digit to the current maximum number\n                    max_num += arr[i]\n                    # Incrementing the count of digits for the current maximum number\n                    count += 1\n                # If the current digit can't form a number with the next maximum number, then we need to consider the next digit\n                else:\n                    # Checking if the current digit can form a number with the previous maximum number and the next maximum number\n                    if arr[i] <= max_num + 10:\n                        # Adding the current digit to the current maximum number\n                        max_num += arr[i]\n                        # Incrementing the count of digits for the current maximum number\n                        count += 1\n\n    # Returning the maximum number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the given list in ascending order\n    arr.sort()\n\n    # Initialize the max number with 0\n    max_num = 0\n\n    # Traverse the sorted list\n    for i in range(len(arr)):\n        # Initialize the current number with the current element\n        curr_num = arr[i]\n\n        # Calculate the sum of the digits of the current number\n        digit_sum = sum(int(digit) for digit in str(curr_num))\n\n        # If the sum of the digits is greater than the current max number, update it\n        if digit_sum > max_num:\n            max_num = digit_sum\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in descending order\n    arr = sorted(arr, reverse=True)\n    \n    # Initialize a variable to store the maximum number that can be formed\n    max_num = 0\n    \n    # Iterate through each digit in the sorted list of digits\n    for digit in arr:\n        # Multiply the current digit by 10^i (where i is the index of the digit in the sorted list)\n        current_num = digit * 10**arr.index(digit)\n        \n        # Update the maximum number if the current number is greater than the current maximum number\n        if current_num > max_num:\n            max_num = current_num\n    \n    # Return the maximum number that can be formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    result = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result += arr[i] * count\n        else:\n            result += arr[i] * (count + 1)\n        count += 1\n\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the largest number to 0\n    largest = 0\n    # Initialize the current number to the first element of the array\n    current = arr[0]\n    # Traverse through the array and find the largest possible number\n    for i in range(1, len(arr)):\n        # Add the current number to the next element of the array\n        current += arr[i]\n        # If the current number is greater than the largest number, update the largest number\n        if current > largest:\n            largest = current\n        # If the current number is the largest possible number, reset the current number to the next element of the array\n        elif current == largest:\n            current = arr[i]\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num *= 10\n            max_num += arr[i]\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0: \n        return True\n    elif x < 0 and y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and returns True if they have opposite signs and False otherwise.\n    \"\"\"\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0:\n        return \"The two integers have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n\n    Parameters:\n    x - an integer value\n    y - another integer value\n\n    Returns:\n    True if the two integers have opposite signs, False otherwise.\n    '''\n\n    # Check if the signs are different\n    if ((x >= 0 and y >= 0) or (x <= 0 and y <= 0)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == 0:\n        if y == 0:\n            return True\n        else:\n            return False\n    elif y == 0:\n        return False\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if their opposite signs are not equal and False otherwise.\n    '''\n    # check if the signs of x and y are opposite or not\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    #checking if both numbers have same sign or not\n    if x>=0 and y>=0:\n        return True\n    elif x<=0 and y<=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == y:\n        return \"Both numbers are equal\"\n    elif x < 0 and y > 0 or x > 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n    else:\n        return \"The two numbers have the same sign\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = n * (3 * n - 1) // 2\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n and returns True if it is an octagonal number and False otherwise.\n    An octagonal number is a positive integer equal to the sum of the squares of its adjacent numbers.\n    '''\n    # Define a function to calculate the sum of squares of two numbers\n    def sum_of_squares(a, b):\n        return a ** 2 + b ** 2\n\n    # Calculate the sum of squares of the first n positive integers\n    sum_of_squares_of_first_n = sum([i ** 2 for i in range(1, n+1)])\n\n    # Calculate the sum of squares of the first n octagonal numbers\n    sum_of_squares_of_octagonal_numbers = sum([sum_of_squares(i, j) for i in range(1, n+1) for j in range(1, n+1)])\n\n    # Check if the sum of squares of the first n octagonal numbers is equal to the sum of squares of the first n positive integers\n    if sum_of_squares_of_octagonal_numbers == sum_of_squares_of_first_n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Base case: If n is 1, the first octagonal number is 1\n    if n == 1:\n        return 1\n    # Base case: If n is 2, the second octagonal number is 8\n    elif n == 2:\n        return 8\n    # Calculate the value of nth octagonal number by adding the square of the previous two octagonal numbers\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n - (2 * i ** 2)!= 8 * i ** 2:\n                return False\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Define the base of the octagon\n    base = 10\n\n    # Initialize the sum of the first two digits to 0\n    oct_sum = 0\n\n    # Iterate through each digit of the nth octagonal number\n    for i in range(1, n+1):\n\n        # Calculate the value of the nth octagonal number\n        oct_num = base ** i\n\n        # Calculate the sum of the first two digits\n        oct_sum += oct_num // 10\n\n        # Calculate the value of the second digit\n        second_digit = oct_num % 10\n\n        # Add the value of the second digit to the sum\n        oct_sum += second_digit\n\n    # Check if the nth octagonal number is divisible by 11\n    if oct_sum % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def is_valid_octagonal(num):\n        return num == 2 * (num ** 2)\n\n    for i in range(1, 2 * n + 1):\n        if is_valid_octagonal(i):\n            return i"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number and False otherwise. \n    An octagonal number is a positive integer that is equal to the sum of the cubes of its digits. \n    For example, 125 is an octagonal number because 1^3 + 2^3 + 5^3 = 125. \n    To check if a number is octagonal, we first need to determine its digits. We can do this by converting the number to a string and then splitting it into individual digits. If the sum of the cubes of the digits is equal to the original number, then the number is octagonal.\n    '''\n\n    # convert the number to a string\n    num_str = str(n)\n\n    # split the string into individual digits\n    digits = [int(digit) for digit in num_str]\n\n    # sum of cubes of digits\n    sum_cubes = sum([digit**3 for digit in digits])\n\n    # check if the sum of cubes is equal to the original number\n    if n == sum_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    This function determines if a given integer is an octagonal number or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return (n * (10 * n + 1)) ** 0.5 == int((n * (10 * n + 1)) ** 0.5)\n\ndef nth_octagonal(n):\n    '''\n    This function finds the nth octagonal number.\n    '''\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer.')\n    elif n < 1:\n        raise ValueError('n must be greater than or equal to 1.')\n    elif n > 1000000000:\n        raise ValueError('n must be less than or equal to 1000000000.')\n    else:\n        for i in range(1, n + 1):\n            if is_octagonal(i):\n                return i"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    a = 1\n    b = 2\n    c = 1\n    i = 2\n    while i <= n:\n        if i == 1 or i == n:\n            print(i, end=\" \")\n        elif (i + a)**2 == (i + b)**2 and (i + b)**2 == (i + c)**2 and (i + c)**2 == (i + a)**2:\n            print(i, end=\" \")\n        else:\n            return False\n        a += 1\n        b += 2\n        c += 1\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input! Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 2 * is_octagonal(n-1) + 1\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Create a dictionary to store the count of substrings with specific sum of digits\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n\n            # Check if the substring has a sum of digits equal to its length\n            if substring_sum == len(s):\n                count_dict[substring_sum] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            curr = int(s[i:j+1])\n            if len(curr) == curr.sum():\n                count += dp[j-i+1]\n                if curr in dp:\n                    count -= dp[curr]\n                if curr not in dp:\n                    dp[curr] = 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the counts of each substring length\n    counts = defaultdict(int)\n\n    # Loop through the string and calculate the sum of digits for each substring length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            counts[len(substring)] += sum(int(digit) for digit in substring)\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(count for count in counts.values() if count == len(s))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum([int(d) for d in s[i:j]]) == j-i:\n                # Increment the count of substrings in the dictionary\n                count_dict[j-i] += 1\n\n    # Return the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with the sum of digits as key and its length as value\n    counts = defaultdict(int)\n    # Loop through each character of the string\n    for i in range(len(s)):\n        # Calculate the sum of digits of the substring starting from the current index\n        substring_sum = sum(int(digit) for digit in s[i:])\n        # If the sum of digits of the substring is equal to the length of the substring, increment the count of substrings\n        if substring_sum == len(s[i:]):\n            counts[len(s[i:])] += 1\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings of each length\n    substrings = defaultdict(int)\n    n = len(s)\n    \n    # Iterate over all possible substrings of length from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in s[i-1:i])\n        # Add the count of the substring to the dictionary\n        substrings[i] += substring_sum\n    \n    # Return the count of all substrings with sum of digits equal to their length\n    return substrings[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with sum of digits equal to their length\n    substring_counts = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each substring starting from the current index\n        for j in range(i, len(s)):\n            # check if the sum of digits in the substring is equal to its length\n            if sum([int(digit) for digit in s[i:j+1]]) == j-i+1:\n                # increment the count of substrings with the same sum of digits\n                substring_counts[j-i+1] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return sum(substring_counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings for each length of substring\n    substrings = defaultdict(int)\n\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Get the current substring\n        substring = s[i:i+5]\n\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n\n        # Update the count of substrings with the sum of digits equal to their length\n        substrings[substring_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # create a dictionary to store the count of substrings\n    substrings = defaultdict(int)\n    # loop through each character in the string\n    for i in range(len(s)):\n        # create a substring from the current position\n        substring = s[i:i+len(s)-i]\n        # loop through each character in the substring\n        for j in range(len(substring)):\n            # if the digit sum of the current character and the next character is equal to its length, increment the count in the dictionary\n            if sum(int(c) for c in substring[j:]) == len(substring):\n                substrings[substring] += 1\n    # return the count of substrings\n    return substrings"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # initialize variable to store smallest number\n    smallest = xs[0]\n    # iterate over the list to find smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # return smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Initialize the smallest number variable to be the first element of the list\n    smallest = xs[0]\n    # Loop through the list\n    for num in xs[1:]:\n        # If the current number is smaller than the smallest, update the smallest variable\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as an argument and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number as maximum value of int data type\n    smallest = float('inf')\n    # iterate over the list and compare each number with the current smallest number\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference as 0\n    max_diff = 0\n    \n    # Iterate over each tuple in the list\n    for i in range(len(test_list)-1):\n        # Find the sum of the first element and the difference between the second and the last element\n        sub_sum = test_list[i][0] + test_list[i][1] - test_list[i][2]\n        \n        # Find the minimum value between the first and the second element and the sum of the first and last element\n        min_value = min(test_list[i][0], test_list[i][1]) + test_list[i][0] + test_list[i][1]\n        \n        # Update the maximum difference if the current sub_sum is greater than the minimum value\n        if sub_sum > min_value:\n            max_diff = max(sub_sum, max_diff)\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the input list\n    test_list = sorted(test_list)\n\n    # Initialize variables\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate over the sorted list and calculate the difference between adjacent pairs\n    for i in range(len(test_list) - 1):\n        current_diff = test_list[i + 1] - test_list[i]\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    # Initialize the maximum difference variable\n    max_diff = 0\n    # Loop through the list\n    for i in range(len(test_list) - 1):\n        # Check if the difference between the current index and the next index is greater than the maximum difference\n        if abs(test_list[i][1] - test_list[i + 1][1]) > max_diff:\n            max_diff = abs(test_list[i][1] - test_list[i + 1][1])\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n\n    max_diff = 0\n    current_diff = 0\n\n    for i in range(1, len(test_list)):\n        current_diff = abs(test_list[i][0] - test_list[i-1][1])\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # Sorting the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Recursively flatten the list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    sum_of_flattened_list = sum(flattened_list)\n    return sum_of_flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 0:\n        return 0\n    # Recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Recursively flatten a list and return a flat list.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    '''\n    This function takes a list and recursively flattens it and sums all of its elements.\n    '''\n    if index >= len(data_list):\n        return total\n    else:\n        if isinstance(data_list[index], list):\n            return recursive_list_sum(data_list[index], 0, recursive_list_sum(data_list, index+1, total))\n        else:\n            return recursive_list_sum(data_list, index+1, total+data_list[index])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        \"\"\"\n        Flattens a list using recursion.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return lst[0] + flatten_list(lst[1:])\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes in a list of numbers as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return 2**n - 1\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    a = n\n    b = 1\n    count = 0\n    while b <= a:\n        # Calculate the maximum number to partition the set of Bell numbers\n        a = 2 * b - 1\n\n        # Calculate the number of ways to partition the set of Bell numbers\n        count += 1\n\n        # Update the variables for the next iteration\n        b += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (1 + 2 * bell_number(n-1)) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the count variable to 1\n    count = 1\n\n    # Loop through all numbers from 0 to n-1\n    for i in range(n):\n        # Calculate the value of the next Bell number\n        next_bell = (n - i) + 1\n\n        # If the next Bell number is less than or equal to n, increment the count variable\n        if next_bell <= n:\n            count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def count_ways(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return count_ways(n//2) + count_ways((n+1)//2)\n        else:\n            return count_ways(n//2) + count_ways((n-1)//2)\n\n    return factorial(n) * count_ways(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    :param n: The number of Bell numbers to partition.\n    :type n: int\n    :return: The number of ways to partition the set of Bell numbers.\n    :rtype: int\n    \"\"\"\n    # Initialize the count variable and the set of Bell numbers\n    count = 0\n    bell_set = set([0])\n\n    # Iterate through all Bell numbers\n    for i in range(1, n + 1):\n        # Iterate through all previous Bell numbers in the set\n        for j in range(1, i + 1):\n            # Check if the current Bell number can be formed by adding the jth previous Bell number\n            if i - j >= 0 and bell_set.count(i - j) > 0:\n                # Add the new Bell number to the set and increment the count\n                bell_set.add(i)\n                count += 1\n                break\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a variable to store the number of ways to partition\n    ways = 0\n\n    # Loop through all possible values of n\n    for i in range(2, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers with length i\n        ways += (n // i) * (i - 1)\n\n    # Return the number of ways to partition the set of Bell numbers with length n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n=0, there is only 1 partition\n    if n == 0:\n        return 1\n\n    # Base case: if n=1, there is only 1 partition\n    if n == 1:\n        return 1\n\n    # Initialize variables\n    bell = [0]*(n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = 0\n        for j in range(1, i):\n            if i%j == 0:\n                bell[i] += bell[j]\n\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic\n    and False otherwise.\n\n    An array A is said to be monotonic if the difference between any two adjacent elements is non-negative or zero.\n    For example, [1, 2, 3, 4, 5] is monotonic, as the difference between adjacent elements is non-negative.\n    However, [1, 2, -1, 4, 5] is not monotonic, as the difference between adjacent elements is negative.\n    '''\n\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    # check if the array is empty or not\n    if len(A) == 0: \n        return True\n    # check if all elements are the same or not\n    if A[0] == A[-1]: \n        return True\n    # check if the array is monotonic or not\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # check if array is increasing or decreasing\n    if all(A[i] <= A[i+1] for i in range(n-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(n-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return True\n    if A[0]<A[1] and A[-1]>A[-2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A and returns True if it is monotonic, False otherwise.\n    A monotonic array is an array where each element is either the same as the next element or the previous element.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or not\n    if len(A) == 0:\n        return True\n    # check if array has only one element\n    if len(A) == 1:\n        return True\n    # check if array has two or more elements\n    # check if all elements are greater than or equal to the first element\n    if A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    # check if all elements are less than or equal to the last element\n    if A[-1] <= A[-2]:\n        for i in range(len(A)-2, -1, -1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    # if above conditions are not met, return False\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    for i in range(n):\n        if i == 0 or A[i] >= A[i-1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    # check if all elements are increasing or decreasing\n    if A[1] - A[0] == 0: \n        return is_Monotonic(A[1:])\n    elif A[1] - A[0] > 0: \n        for i in range(1, len(A)): \n            if A[i] - A[i-1] <= 0: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] - A[i-1] >= 0: \n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # check if l is a sublist of s\n    for i in range(len(l)):\n        if l[i] in s:\n            # if yes, check if l[i:] is a sublist of s[i+1:]\n            if is_sublist(l[i:], s[i+1:]):\n                return True\n    # if not, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # convert s to list if it's not already\n    if type(s)!= list:\n        s = list(s)\n\n    # check if s is a sublist of l\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l[i:]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for tuple1 in Input:\n        if len(tuple1)!= len(set(tuple1)):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    # loop through all tuples in the input\n    for tup in Input:\n        # check if each tuple has the same length as the first tuple\n        if len(tup) == len(Input[0]):\n            # if all tuples have the same length, return True\n            return True\n    # if no tuples have the same length, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # check if all tuples have the same length\n    lengths = []\n    for tup in Input:\n        lengths.append(len(tup))\n    if len(set(lengths))!= 1:\n        return False\n    \n    # check if all tuples have equal values\n    for tup in Input:\n        if len(tup)!= lengths[0]:\n            return False\n        for val in tup:\n            if tup.count(val)!= 1:\n                return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple\n    len_first = len(Input[0])\n\n    # Loop through all the tuples in the input list\n    for i in range(len(Input)):\n        # If the length of the i-th tuple is not equal to len_first, return False\n        if len(Input[i])!= len_first:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i < gap:\n            j = i + gap\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n\n        while gap > 1:\n            gap = (gap * 10) // 10\n            for i in range(gap, n):\n                if nums[i] < nums[i - gap]:\n                    nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                    swapped = True\n        n = gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        gap = max(gap // 2, 1)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    # initialize variables\n    n = len(nums)\n    gap = n\n    i = 0\n\n    # while gap is not equal to 1\n    while gap!= 1:\n        # find the largest gap in the array\n        for i in range(gap, n):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n        # reduce the gap size by one\n        gap = int(gap/1.3)\n\n        # if gap is less than 1, reset it to 1\n        if gap < 1:\n            gap = 1\n\n        # reset i to 0\n        i = 0\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The algorithm works as follows:\n\n    1. Start with a gap of 1.\n    2. While the gap is greater than 1, do the following:\n        a. Calculate the new gap by halfing it.\n        b. Insertion sort the unsorted portion of the array using the gap as the step size.\n    3. Repeat steps 1 and 2 until the gap is less than or equal to 1.\n\n    The time complexity of the algorithm is O(n^2), and it is not suitable for large lists or partially sorted lists.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n\n    # while the gap is greater than 1\n    while gap > 1:\n        # calculate the new gap by halfing it\n        gap = (gap * 10) // 10\n\n        # insertion sort the unsorted portion of the array using the gap as the step size\n        for i in range(gap, n):\n            temp = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > temp:\n                nums[j + gap] = nums[j]\n                j -= gap\n            nums[j + gap] = temp\n\n        # if the gap has not been reduced, stop iterating\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = min(gap//2, n)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    The sorted list.\n    \"\"\"\n\n    # Set the initial gap to half of the list length\n    gap = len(nums) // 2\n\n    # While the gap is greater than 1, perform the Comb Sort algorithm\n    while gap > 1:\n\n        # Step 1: Sort adjacent elements in unsorted part of list\n        for i in range(gap, len(nums)):\n\n            # Find the smallest element in the unsorted part of the list\n            j = i\n            while j - gap >= 0 and nums[j] < nums[j - gap]:\n                j -= gap\n\n            # Swap the smallest element with the current element\n            nums[i], nums[j] = nums[j], nums[i]\n\n        # Decrease the gap size by one\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n // 2\n        \n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        \n        n = gap\n        \n        if gap == 1:\n            break\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # Check if the number is divisible by 9\n    if n % 9 == 0:\n        return False\n\n    # Check if the number is divisible by 16\n    if n % 16 == 0:\n        return False\n\n    # Check if the number is divisible by 25\n    if n % 25 == 0:\n        return False\n\n    # Check if the number is divisible by 36\n    if n % 36 == 0:\n        return False\n\n    # Check if the number is divisible by 49\n    if n % 49 == 0:\n        return False\n\n    # Check if the number is divisible by 64\n    if n % 64 == 0:\n        return False\n\n    # Check if the number is divisible by 81\n    if n % 81 == 0:\n        return False\n\n    # Check if the number is divisible by 100\n    if n % 100 == 0:\n        return False\n\n    # Check if the number is divisible by 121\n    if n % 121 == 0:\n        return False\n\n    # Check if the number is divisible by 144\n    if n % 144 == 0:\n        return False\n\n    # Check if the number is divisible by 169\n    if n % 169 == 0:\n        return False\n\n    # Check if the number is divisible by 196\n    if n % 196 == 0:\n        return False\n\n    # Check if the number is divisible by 225\n    if n % 225 == 0:\n        return False\n\n    # Check if the number is divisible by 256\n    if n % 256 == 0:\n        return False\n\n    # Check if the number is divisible by 289\n    if n % 289 == 0:\n        return False\n\n    # Check if the number is divisible by 324\n    if n % 324 == 0:\n        return False\n\n    # Check if the number is divisible by 361\n    if n % 361 == 0:\n        return False\n\n    # Check if the number is divisible by 400\n    if n % 400 == 0:\n        return False\n\n    # Check if the number is divisible by 441\n    if n % 441 == 0:\n        return False\n\n    # Check if the number is divisible by 484\n    if n % 484 == 0:\n        return False\n\n    # Check if the number is divisible by 529\n    if n % 529 == 0:\n        return False\n\n    # Check if the number is divisible by 576\n    if n % 576 == 0:\n        return False\n\n    # Check if the number is divisible by 625\n    if n % 625 == 0:\n        return False\n\n    # Check if the number is divisible by 676\n    if n % 676 == 0:\n        return False\n\n    # Check if the number is divisible by 729\n    if n % 729 == 0:\n        return False\n\n    # Check if the number is divisible by 784\n    if n % 784 == 0:\n        return False\n\n    # Check if the number is divisible by 841\n    if n % 841 == 0:\n        return False\n\n    # Check if the number is divisible by 900\n    if n % 900 == 0:\n        return False\n\n    # Check if the number is divisible by 961\n    if n % 961 == 0:\n        return False\n\n    # Check if the number is divisible by 1024\n    if n % 1024 == 0:\n        return False\n\n    # Check if the number is divisible by 1089\n    if n % 1089 == 0:\n        return False\n\n    # Check if the number is divisible by 1156\n    if n % 1156 == 0:\n        return False\n\n    # Check if the number is divisible by 1225\n    if n % 1225 == 0:\n        return False\n\n   "
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # square root of n\n    sqrt_n = n ** 0.5\n\n    # difference of squares\n    diff_sq = (sqrt_n + sqrt_n - n) / (2 * sqrt_n)\n\n    # check if the difference of squares is integer or not\n    if diff_sq.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(num):\n        '''\n        Helper function to check whether the given number is a square or not.\n        '''\n        return num == int(num**0.5)**2\n\n    def has_square_diff(num):\n        '''\n        Helper function to check whether the given number can be represented as the difference of two squares or not.\n        '''\n        for i in range(1, int(num**0.5)+1):\n            if is_square(num-i*i) or is_square(num+i*i):\n                return True\n        return False\n\n    return has_square_diff(n)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the square of the number\n    square = n ** 2\n\n    # check if the square is a perfect square or not\n    for i in range(int(square ** 0.5) + 1):\n        if square % i == 0 and i ** 2 == square:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1, int(n**0.5)+1):\n        if (n-i*i) % (2*i) == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a perfect square\n    if int(n**0.5)**2!= n:\n        return False\n\n    # check if n-1 is a perfect square\n    if (int(n-1)**0.5)**2!= n-1:\n        return False\n\n    # check if n-4 is a perfect square\n    if (int(n-4)**0.5)**2!= n-4:\n        return False\n\n    # check if n-9 is a perfect square\n    if (int(n-9)**0.5)**2!= n-9:\n        return False\n\n    # check if n-16 is a perfect square\n    if (int(n-16)**0.5)**2!= n-16:\n        return False\n\n    # check if n-25 is a perfect square\n    if (int(n-25)**0.5)**2!= n-25:\n        return False\n\n    # check if n-36 is a perfect square\n    if (int(n-36)**0.5)**2!= n-36:\n        return False\n\n    # check if n-49 is a perfect square\n    if (int(n-49)**0.5)**2!= n-49:\n        return False\n\n    # check if n-64 is a perfect square\n    if (int(n-64)**0.5)**2!= n-64:\n        return False\n\n    # check if n-81 is a perfect square\n    if (int(n-81)**0.5)**2!= n-81:\n        return False\n\n    # check if n-100 is a perfect square\n    if (int(n-100)**0.5)**2!= n-100:\n        return False\n\n    # if all checks pass, n is a difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"The number should be non-negative\")\n        return\n    for i in range(int(n**0.5)):\n        for j in range(i+1, int(n**0.5)+1):\n            if i*i+j*j == n:\n                print(\"The number can be represented as the difference of two squares\")\n                return\n            elif i*i+j*j < n:\n                print(\"The number can't be represented as the difference of two squares\")\n                return"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n ** 0.5) + 1):\n        if n == i ** 2 + i ** 2:\n            return True\n        if n == i ** 2 - i ** 2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # square root of n\n    sqrt_n = n ** 0.5\n\n    # check whether n can be represented as the difference of two squares\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(num):\n        '''\n        Helper function to check whether a number is a square or not.\n        '''\n        return num == int(num**0.5)**2\n    \n    for i in range(1, n+1):\n        if is_square(i) and is_square(n-i):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Get the length of the colors array\n    n = len(colors)\n\n    # Check if the length of patterns array is equal to n\n    if len(patterns)!= n:\n        return False\n\n    # Check if all elements in patterns array are the same length as colors array\n    for pattern in patterns:\n        if len(pattern)!= n:\n            return False\n\n    # Check if there are any repeating patterns in the patterns array\n    for i in range(n):\n        for j in range(i+1, n):\n            if patterns[i] == patterns[j]:\n                return False\n\n    # Check if the patterns are a sequence\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if colors[i] == colors[j] and patterns[i] == patterns[j]:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a dictionary to store the count of each color in the pattern\n    pattern_counts = {}\n\n    # Iterate over the colors in the pattern and update the count in the dictionary\n    for pattern in patterns:\n        for color in pattern:\n            if color in pattern_counts:\n                pattern_counts[color] += 1\n            else:\n                pattern_counts[color] = 1\n\n    # Iterate over the colors in the colors list and check if the pattern counts for each color match the count in the dictionary\n    for color in colors:\n        if color in pattern_counts and pattern_counts[color]!= colors.count(color):\n            return False\n\n    # If all the colors in the colors list are present in the patterns array and their counts are equal to the count in the dictionary, it follows the pattern\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize variables\n    count = 0\n    prev_color = None\n    # loop through the colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # check if the color is the same as the previous one\n        if color == prev_color:\n            # if it is, increment the count\n            count += 1\n        else:\n            # otherwise, reset the count to 0\n            count = 0\n        # update the previous color\n        prev_color = color\n        # check if the count matches the pattern\n        if count == pattern:\n            # if it does, return True\n            return True\n    # if the function reaches this point, it means the colors do not follow the patterns\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return True\n    if len(colors)!= len(patterns[0]):\n        return False\n    for i in range(len(patterns)):\n        if colors.count(patterns[i][0])!= len(patterns[i]):\n            return False\n        if colors.count(patterns[i][-1])!= len(patterns[i]):\n            return False\n    for i in range(len(colors)-len(patterns[0])):\n        if patterns[0][0]!= colors[i]:\n            return False\n        if patterns[0][-1]!= colors[i+len(patterns[0])-1]:\n            return False\n    return is_samepatterns(colors[len(patterns[0]):], patterns[1:])"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if the colors follow the given patterns.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    pattern = ''\n    # Loop through the colors\n    for color in colors:\n        # Check if the current color matches the current pattern\n        if color == pattern[-1]:\n            count += 1\n        else:\n            # If the current color doesn't match the current pattern, reset the count\n            count = 0\n            # Update the pattern with the current color\n            pattern = pattern[:len(pattern)-1] + color\n    # Check if all patterns have been used up\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    # Loop through the patterns array\n    for pattern in patterns:\n        # If the pattern is not a string or if it contains more than one character, return False\n        if not isinstance(pattern, str) or len(pattern) > 1:\n            return False\n        # Loop through the colors array and check if the current color matches the first character of the pattern\n        for color in colors:\n            if pattern[0] == color:\n                # If a match is found, remove the first character of the pattern and continue to the next color\n                pattern = pattern[1:]\n                break\n        # If the pattern is still not empty, return False\n        if len(pattern)!= 0:\n            return False\n    # If all the patterns are checked and no match is found, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if patterns[i] not in colors:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the variables to keep track of the current pattern and the last color\n    current_pattern = 0\n    last_color = colors[0]\n    # Loop through the colors array\n    for color in colors:\n        # Check if the current color matches the last color in the pattern\n        if color == last_color:\n            current_pattern += 1\n        else:\n            # If the current color does not match the last color in the pattern,\n            # check if the current pattern matches the corresponding pattern in the patterns array\n            if current_pattern == patterns[current_pattern-1]:\n                # If the current pattern matches the corresponding pattern in the patterns array,\n                # reset the current pattern and last color to 0\n                current_pattern = 0\n                last_color = color\n            else:\n                # If the current pattern does not match the corresponding pattern in the patterns array,\n                # return False to indicate that the colors do not follow the sequence given in the patterns array\n                return False\n    # If we have reached the end of the loop without returning False, return True to indicate that the colors follow the sequence given in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n\n    :param colors: list of colors to check\n    :param patterns: list of patterns to check against\n    :return: True if it follows the sequence given in the patterns array, False otherwise\n    \"\"\"\n    if len(colors)!= len(patterns):\n        raise ValueError(\"colors and patterns must have the same length\")\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(filter(lambda x: x % K == 0, t)) for t in test_list]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples_list = []\n    for item in test_list:\n        if all(x % K == 0 for x in item):\n            tuples_list.append(item)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a list of tuples \n    which have all elements divisible by K from the input list.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                output_list.append(test_list[i] + test_list[j])\n    return output_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                tuples_list.append((test_list[i], test_list[j]))\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find all tuples that have all elements divisible by K from the given list of tuples.\n    \"\"\"\n    result = set()\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.add(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as an input and returns True if it is divisible by 11, False otherwise.\n    '''\n\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, False otherwise.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #splitting the sentence into individual words\n    for word in words: #iterating over each word\n        if len(word)%2 == 0: #checking if the length of the word is even or not\n            print(word + \" is an even length word\")\n        else:\n            print(word + \" is an odd length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return word\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    if len(words) == 1:\n        return False\n    else:\n        return len(words[1]) % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word)%2!= 0:\n            print(word, \"is odd-length\")\n        else:\n            print(word, \"is even-length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: # checking if length of word is even\n        print(\"The word length is even.\")\n    else:\n        print(\"The word length is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 1: # check if the length is odd\n            return word # return the odd length word\n    return \"No odd length word found.\" # return a message if no odd length word is found"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2!= 0:\n            return word"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip()  # remove leading and trailing whitespaces\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:  # if length of word is even\n            print(f'{word} is an even length word.')\n        else:\n            print(f'{word} is an odd length word.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Splitting the string into words\n    word_lengths = []  # Creating an empty list to store the length of each word\n    for word in words:\n        word_lengths.append(len(word))  # Appending the length of each word to the list\n    even_lengths = [length for length in word_lengths if length % 2 == 0]  # Filtering the even length words\n    if len(even_lengths) > 0:\n        return True  # If the list is not empty, it means that there is at least one even length word\n    else:\n        return False  # If the list is empty, it means that there is no even length word"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    # Function to calculate the nth tetrahedral number\n    def nth_tetra(n, a=0, b=0, c=0, d=0):\n        # Base case: when n=0, return a\n        if n == 0:\n            return a\n\n        # Recursive case: calculate the nth tetrahedral number by adding the nth tetrahedral number of the (n-1)th and nth tetrahedral number of the (n-2)th\n        return nth_tetra(n-1, a+nth_tetra(n-2), b+nth_tetra(n-3), c+nth_tetra(n-4), d+nth_tetra(n-5))\n\n    # Call the nth_tetra function to calculate the nth tetrahedral number\n    return nth_tetra(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Convert n to base 4 (binary)\n    binary_n = bin(n)[2:]\n\n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n\n    # Iterate over the binary number and add the corresponding digit to the sum\n    for digit in binary_n:\n        sum_of_digits += int(digit)\n\n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a, b, c, d = 1, 1, 1, 1\n    for i in range(n):\n        a, b, c, d = b + a, c + a, d + a, a + b + c + d\n    return d - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n-1)\n    \n    def power(base, exponent):\n        if exponent == 0:\n            return 1\n        return base * power(base, exponent-1)\n    \n    return factorial(n - 1) * power(3, n - 1) // power(2, n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return 4*n*n - 3*n + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the sum of the tetrahedral numbers\n    tetra_sum = 0\n\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Find the nth tetrahedral number\n        tetra_num = i*(4*i-1) // 2\n        \n        # Add the nth tetrahedral number to the sum\n        tetra_sum += tetra_num\n\n    # Return the sum of the tetrahedral numbers\n    return tetra_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize a variable to store the tetrahedral number\n    tetrahedral = 0\n    # Initialize a variable to store the index of the number\n    index = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Increment the tetrahedral number by i times the index\n        tetrahedral += i * index\n        # Increment the index by 1\n        index += 1\n\n    # Return the tetrahedral number\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return (n * 4) - 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define a function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Calculate the sum of the factorials of even integers from 0 to n\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += factorial(i)\n\n    # Calculate the sum of the factorials of odd integers from 1 to n\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += factorial(i)\n\n    # Return the sum of the two sums\n    return even_sum + odd_sum"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: volume of the sphere\n    \"\"\"\n\n    # Calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r * r\n\n    # Calculate the volume of the sphere\n    volume = surface_area * (math.pi / 3)\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the character variable\n    char = \"\"\n    \n    # Loop through each character of the string\n    for char_num in strr:\n        # Convert the character to ASCII value\n        char_ascii = ord(char_num)\n        \n        # Add the ASCII value of the current character to the sum of all characters\n        char_sum = (char_ascii % 26) + ord('A')\n        \n        # Convert the sum to character and add it to the character variable\n        char += chr(char_sum)\n    \n    # Return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ASCII_value = 0\n    for char in strr:\n        ASCII_value += ord(char)\n    return chr((ASCII_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    # Initialize a variable to store the character made by adding the ASCII value of all the characters of the string\n    char = \"\"\n    # Loop through each character of the string\n    for i in strr:\n        # Convert the character to ASCII value and add it to the variable \"char\"\n        char += chr(ord(i) % 26 + ord('a'))\n    # Return the final character made by adding the ASCII value of all the characters of the string modulo 26\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(strr)\n    # Initialize the sum of ASCII values of characters to zero\n    sum_ascii = 0\n    # Iterate through the characters of the string and add their ASCII values to the sum\n    for char in str_list:\n        sum_ascii += ord(char)\n    # Find the character made by adding the ASCII values of all the characters modulo 26\n    char_ascii = (sum_ascii % 26) + 65\n    # Convert the ASCII value of the character to its character equivalent\n    char = chr(char_ascii)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # initialize an empty string to store the ASCII values of the characters\n    ascii_values = ''\n    \n    # loop through each character in the input string\n    for char in strr:\n        # convert the character to its ASCII value and append it to the 'ascii_values' string\n        ascii_values += str(ord(char))\n    \n    # calculate the sum of the ASCII values and get the character made by adding the ASCII value of all the characters modulo 26\n    result = chr((sum(int(ascii_value) for ascii_value in ascii_values) % 26) + 65)\n    \n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char_sum %= 26\n    char_ascii = chr(ord('a') + char_sum)\n    return char_ascii"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_values = [ord(char) for char in strr]\n    sum_ascii = sum(ascii_values) % 26\n    return chr(sum_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # initialize an empty string to store the character\n    char = \"\"\n    # iterate over each character of the given string\n    for i in range(len(strr)):\n        # get the ASCII value of the character\n        ascii_value = ord(strr[i])\n        # add the ASCII value to the current character\n        char += chr(ascii_value % 26 + 65)\n    # return the final character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * sequence(n//2)\n    else:\n        return 2 * sequence(n//2) + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    # initialize the sequence\n    sequence = [1, 1]\n    # loop through the sequence and find the nth number\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(1, n+1):\n        sequence.append(sequence[i-1] + 2*sequence[i-1] + sequence[i-1] + 1)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    sequence = []\n    while i <= n:\n        sequence.append(i)\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1] # start with the first two numbers in the sequence\n    \n    for i in range(2, n+1): # iterate from 2 to n\n        next_number = (sequence[i-1] + sequence[i-2]) % 2 # calculate the next number\n        sequence.append(next_number) # add the next number to the sequence\n    \n    return sequence[n] # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        next_num = (sequence[-1] + sequence[-2]) % 2\n        sequence.append(next_num)\n    return sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere using the formula A = 4 * \u03c0 * r^2\n    area = (4 * math.pi * r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function calculates the surface area of a sphere with the given radius r.\n    \"\"\"\n    pi = math.pi\n    area = 4 * pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the area of a circle with radius r\n    area_circle = math.pi * r ** 2\n\n    # Find the surface area of a sphere using Heron's formula\n    surface_area = 4 * math.pi * r ** 2\n\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4.0/3.0) * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # Calculate the first centered hexagonal number\n    c = (3 * n + 1) // 2\n    \n    # Calculate the second centered hexagonal number\n    d = (5 * n - 3) // 2\n    \n    return c + d - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n - 1) * (2 * n - 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be greater than or equal to 1\")\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_helper(x):\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 1\n        else:\n            return centered_hexagonal_helper(x//2) + centered_hexagonal_helper(x//2) - centered_hexagonal_helper(x//3)\n    \n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Centered hexagonal numbers are positive integers of the form:\n    # x^2 + y^2 = z^2\n    # x = sqrt(3) / 2 * (z + sqrt(3) / 2)\n    # y = sqrt(3) / 2 * (z - sqrt(3) / 2)\n    # where z is the input argument n.\n    # We can calculate x and y using the Pythagorean theorem:\n    # x^2 + y^2 = z^2\n    # x^2 = y^2 - z^2\n    # y = sqrt(3) / 2 * (sqrt(3) / 2 * z - sqrt(3) / 2)\n    # x = sqrt(3) / 2 * (sqrt(3) / 2 * z + sqrt(3) / 2)\n    # Here, we use the fact that z is a positive integer.\n    import math\n    \n    sqrt3 = math.sqrt(3)\n    z = n\n    \n    x = sqrt3 / 2 * (z + sqrt3 / 2)\n    y = sqrt3 / 2 * (z - sqrt3 / 2)\n    \n    return int(x + y + 1) # We add 1 to center the hexagonal number."
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a = 1.0\n    b = 0.5\n    c = 0.3333333333333333\n    \n    # first centered hexagonal number\n    centered_hex = a**n\n    \n    # iterate to calculate remaining centered hexagonal numbers\n    for i in range(2, n):\n        centered_hex = centered_hex + a**i + b**i - (a**i - b**i)**2 - c**i\n        \n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the hexagonal number of n\n    hexagonal_n = (1/2)*((5*n*n) - (3*n) + 1)\n    # Find the number of spaces needed to center the number\n    spaces = 2*n - 1\n    # Return the centered hexagonal number with spaces\n    return hexagonal_n.rjust(spaces)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 2\n    c = a + b\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # Calculate the next centered hexagonal number\n        for i in range(2, n // 2 + 1):\n            a += b\n            b += c\n            c = a + b\n    else:\n        # Calculate the previous centered hexagonal number\n        for i in range(2, (n - 1) // 2 + 1):\n            a -= b\n            b -= c\n            c = a + b\n\n    # Return the centered hexagonal number\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 2\n    e = 1\n    \n    # Calculate centered hexagonal numbers\n    while n > 1:\n        if n % 2 == 1:\n            a = a + b + c + d\n            n = n // 2\n        else:\n            a = a + b + c + d - e\n            n = (n - 1) // 2\n        b = 2 * a - b\n        c = 3 * a - c\n        d = b - c\n        e = a - c\n    \n    # Return centered hexagonal number\n    return a"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and returns a single dictionary that contains all the key-value pairs from the three dictionaries.\n    '''\n    # create an empty dictionary to store the final merged dictionary\n    merged_dict = {}\n    # loop through each key in the first dictionary\n    for key in dict1:\n        # if the key is in the second and third dictionaries, add their values as a list to the merged dictionary\n        if key in dict2 and key in dict3:\n            merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        # if the key is only in the first dictionary, add its value as a list to the merged dictionary\n        elif key in dict1:\n            merged_dict[key] = [dict1[key]]\n        # if the key is only in the second dictionary, add its value as a list to the merged dictionary\n        elif key in dict2:\n            merged_dict[key] = [dict2[key]]\n        # if the key is only in the third dictionary, add its value as a list to the merged dictionary\n        elif key in dict3:\n            merged_dict[key] = [dict3[key]]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    # Iterate through each dictionary\n    for key in dict1.keys():\n        # Add the key-value pairs from the first dictionary to the merged dictionary\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        # Add the key-value pairs from the second dictionary to the merged dictionary\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        # Add the key-value pairs from the third dictionary to the merged dictionary\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    \n    # iterate over each key in the dictionaries\n    for key in dict1.keys():\n        # check if the key is already present in the merged dictionary\n        if key in merged_dict:\n            # if it is, check if the values are lists or not\n            if isinstance(merged_dict[key], list):\n                # if the values are lists, append the new values to the existing values\n                merged_dict[key].extend(dict1[key])\n            else:\n                # if the values are not lists, create a new list containing the existing and new values\n                merged_dict[key] = [merged_dict[key], dict1[key]]\n        else:\n            # if the key is not present in the merged dictionary, just add the key and values\n            merged_dict[key] = dict1[key]\n\n    # iterate over each key in the dictionaries\n    for key in dict2.keys():\n        # check if the key is already present in the merged dictionary\n        if key in merged_dict:\n            # if it is, check if the values are lists or not\n            if isinstance(merged_dict[key], list):\n                # if the values are lists, append the new values to the existing values\n                merged_dict[key].extend(dict2[key])\n            else:\n                # if the values are not lists, create a new list containing the existing and new values\n                merged_dict[key] = [merged_dict[key], dict2[key]]\n        else:\n            # if the key is not present in the merged dictionary, just add the key and values\n            merged_dict[key] = dict2[key]\n\n    # iterate over each key in the dictionaries\n    for key in dict3.keys():\n        # check if the key is already present in the merged dictionary\n        if key in merged_dict:\n            # if it is, check if the values are lists or not\n            if isinstance(merged_dict[key], list):\n                # if the values are lists, append the new values to the existing values\n                merged_dict[key].extend(dict3[key])\n            else:\n                # if the values are not lists, create a new list containing the existing and new values\n                merged_dict[key] = [merged_dict[key], dict3[key]]\n        else:\n            # if the key is not present in the merged dictionary, just add the key and values\n            merged_dict[key] = dict3[key]\n\n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged dictionary\n    merged_dict = {}\n\n    # loop through each dictionary and add its values to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary that contains all the key-value pairs from the three dictionaries.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge the three dictionaries into one\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency\n    freq_dict = collections.Counter()\n    \n    # Iterate over the list and update the frequency count\n    for item in list1:\n        freq_dict[item] += 1\n    \n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate over each element in the list\n    for elem in list1:\n        # Check if the element is already in the dictionary\n        if elem in freq:\n            # Increment the frequency of the element\n            freq[elem] += 1\n        else:\n            # Add the element to the dictionary with a frequency of 1\n            freq[elem] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements in the list and the values are their frequency.\n    '''\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Find the smallest number\n    min_num = min(N)\n    # Find the largest number\n    max_num = max(N)\n    # Calculate the closest smaller number\n    closest_smaller = min_num + 1 if N[0] >= min_num else max_num - 1\n    # Calculate the distance between the closest smaller number and n\n    distance = abs(closest_smaller - N[0])\n    # Return the closest smaller number\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    n = int(input(\"Enter a number: \"))\n    while True:\n        if N - n < n - N:\n            return n - N\n        else:\n            N -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 0\n    n = N\n    while n >= 1:\n        if (n-1) % 2 == 0:\n            closest = n\n            break\n        n -= 1\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter the number: \"))\n    smallest_num = 0\n    smallest_dist = abs(N-smallest_num)\n    for i in range(1, N):\n        dist = abs(N-i)\n        if dist < smallest_dist:\n            smallest_num = i\n            smallest_dist = dist\n    return smallest_num\n\nprint(\"The closest smaller number is:\", closest_num(10))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(2, N):\n        if abs(i - N) < abs(closest - N):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        # Odd number\n        return 1\n    else:\n        # Even number\n        return N - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if abs(i - N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    # Initialize variables for current number and closest smaller number\n    curr_num = 0\n    closest_small = float('inf')\n\n    # Iterate through all numbers in the range [0, N]\n    for num in range(N+1):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(num - N)\n\n        # If the current number is smaller than N and its absolute difference is smaller than the closest smaller number, update closest smaller number\n        if num < N and diff < closest_small:\n            closest_small = diff\n            curr_num = num\n\n    # Return the current number as the closest smaller number\n    return curr_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    closest = N\n    diff = N - closest\n    \n    # loop through numbers from 1 to N\n    for i in range(1, N+1):\n        # calculate the difference between i and closest\n        current_diff = abs(i - closest)\n        \n        # if the difference is smaller than the current closest, update closest\n        if current_diff < diff:\n            closest = i\n            diff = current_diff\n    \n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables to store the length of the longest word and the word itself\n    max_length = 0\n    longest_word = ''\n    \n    # loop through the list of strings\n    for word in list1:\n        # check if the current word is longer than the current longest word\n        if len(word) > max_length:\n            # update the length and the word if it is\n            max_length = len(word)\n            longest_word = word\n    \n    # return the length of the longest word\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    # Find the length of the first word in the list\n    length = len(list1[0])\n    \n    # Iterate through the list of words and update the length if a word is longer than the current length\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    \n    return length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    lst = [x for x in str1 if x in sub_str]\n    return lst\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the list of strings to a set for faster search\n    str_set = set(str1)\n\n    # Check if any substring of the list of strings is present as a substring of the given string\n    for string in str_set:\n        if sub_str in string:\n            return True\n\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return False\n    else:\n        for s in str1:\n            if sub_str in s:\n                return True\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of strings and a substring as input, and returns a boolean value indicating\n    whether the substring is present in at least one of the strings in the list.\n    '''\n    # Loop through each string in the list\n    for string in str_list:\n        # Check if the substring is present in the string\n        if sub_str in string:\n            return True\n    # If we make it through the entire loop without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return \"The number is not undulating.\"\n    elif n > 0:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    :param n: the number to check\n    :return: True if the number is undulating, False otherwise\n    \"\"\"\n    if n > 0:\n        for i in range(1, n+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Checking for even parity\n    if n % 2 == 0: \n        return False\n    # Checking for odd parity\n    else: \n        # Counting the number of odd digits in the number\n        count = 0\n        while n > 0: \n            if n % 10 == 1: \n                count += 1\n            n //= 10\n        # Checking for odd parity\n        if count % 2 == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Not a perfect number\"\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return \"Not a perfect number\"\n        return \"Perfect number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Parameters:\n    n (int): A number to be checked for undulating.\n\n    Returns:\n    (bool): True if the number is undulating, False otherwise.\n\n    Examples:\n    >>> is_undulating(4)\n    True\n    >>> is_undulating(7)\n    False\n    \"\"\"\n    if n > 0:\n        for i in range(1, n):\n            if i % 2 == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n\n    Parameters:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n\n    # Check whether the given number is divisible by 23\n    if n % 23 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is undulating, and False otherwise.\n    An undulating number is a number whose square is divisible by 10, for example 9, 81, 729, 6561, etc.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        return n == (n**2) % 10"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b-1)\n    else:\n        return 1/power(a, -b)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n\n    # sort the list by second value in ascending order\n    test_list.sort(key=itemgetter(1))\n\n    # return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second value (index 1) of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize min_length to the length of the first list in the list of lists\n    min_length = len(lst[0])\n\n    # loop through all the lists in the list of lists\n    for i in range(1, len(lst)):\n        # check if the length of the current list is smaller than min_length\n        if len(lst[i]) < min_length:\n            # update min_length to the length of the current list\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n\n    min_length = float('inf')   #initialize the minimum length variable to a large value\n    for i in lst:   #iterate through each list in the input list\n        if len(i) < min_length:   #if the length of the list is less than the current minimum length, update the minimum length\n            min_length = len(i)\n\n    return min_length   #return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize min_length to infinity\n    for i in range(len(lst)):  # iterate through each list in the list of lists\n        if len(lst[i]) < min_length:  # if the length of the current list is less than the current min_length\n            min_length = len(lst[i])  # update min_length to the length of the current list\n    return min_length  # return the length of the smallest list"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = 1000000000\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000  # initial value of minimum length\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of the given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 0\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                count += 1\n                while n % i == 0:\n                    n /= i\n        if n > 1:\n            count += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate over the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # Check if the item is already in the dictionary\n        if item in freq_dict:\n            # Increment the count for the item in the dictionary\n            freq_dict[item] += 1\n        else:\n            # If the item is not in the dictionary, add it and set its count to 1\n            freq_dict[item] = 1\n\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the input list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Iterate over each element in the flattened list\n    for item in flat_list:\n        # Check if the element is already in the dictionary\n        if item in freq_dict:\n            # If it is, increment its frequency by 1\n            freq_dict[item] += 1\n        else:\n            # If it is not, add it to the dictionary with a frequency of 1\n            freq_dict[item] = 1\n    \n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list\n    for item in flat_list:\n        # if the element is already in the dictionary, increment its frequency\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Iterate through the flattened list\n    for item in flat_list:\n        # Check if the item is already in the dictionary\n        if item in freq_dict:\n            # Increment the frequency count for the item in the dictionary\n            freq_dict[item] += 1\n        else:\n            # Add the item to the dictionary with a frequency count of 1\n            freq_dict[item] = 1\n            \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # iterate through each element in the flattened list of lists\n    for elem in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if elem in freq:\n            freq[elem] += 1\n        # if the element is not in the dictionary, add it with frequency 1\n        else:\n            freq[elem] = 1\n    \n    # return the dictionary of frequency of each element in the flattened list of lists\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # flatten the input list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # loop through the flattened list and update the frequency of each element in the dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n\n    # Convert the decimal number to binary using bitwise operations\n    while n > 0:\n        # Get the last digit of the decimal number\n        digit = n % 2\n\n        # Append the last digit to the binary string\n        binary_str = str(digit) + binary_str\n\n        # Divide the decimal number by 2 and discard the last digit\n        n = n // 2\n\n    # Remove any leading zeros from the binary string\n    while binary_str[0] == '0':\n        binary_str = binary_str[1:]\n\n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # Convert decimal to binary\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n\n    # Reverse the binary string\n    binary = binary[::-1]\n\n    # Remove leading zeros\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function converts the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert decimal number to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n\n    # Remove leading zeros\n    while binary.startswith(\"0\") and len(binary) > 1:\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize the variable result as an empty string\n    result = ''\n    # loop until the decimal number is zero\n    while n > 0: \n        # get the last digit of the decimal number\n        last_digit = n % 2\n        # convert the last digit to its binary equivalent\n        binary_digit = bin(last_digit)[2:]\n        # add the binary equivalent to the result string\n        result = binary_digit + result\n        # remove the last digit of the decimal number\n        n //= 2\n    # return the result string\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Checks if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a given number.\n    \"\"\"\n    if num < 10:\n        return next_smallest_palindrome(num*10+1)\n    elif is_palindrome(num):\n        return next_smallest_palindrome(num+1)\n    else:\n        return num+1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    try:\n        num = int(sys.argv[1])\n    except ValueError:\n        print(\"Invalid input. Please enter an integer.\")\n        sys.exit(1)\n    next_num = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_num)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while True:\n        num -= 1\n        if is_palindrome(num):\n            return num\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(f\"{num} is the next smallest palindrome.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the given number to a string\n    str_num = str(num)\n    # Reverse the string\n    rev_str_num = str_num[::-1]\n    # Find the length of the reversed string\n    length = len(rev_str_num)\n    # If the length of the string is odd, add a zero to the beginning of the string to make it even\n    if length % 2 == 1:\n        rev_str_num = \"0\" + rev_str_num\n    # Reverse the string again to get the next smallest palindrome\n    next_smallest = int(rev_str_num[::-1])\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Define a function to check if a number is a palindrome\n    def is_palindrome(n):\n        \"\"\"\n        Check if a number is a palindrome\n        \"\"\"\n        num_str = str(n)\n        return num_str == num_str[::-1]\n\n    # Iterate through all numbers starting from num + 1\n    for i in range(num + 1, 10 ** 7):\n        # Check if the number is a palindrome\n        if is_palindrome(i):\n            # Check if the number is smaller than the next smallest palindrome\n            if i < next_smallest_palindrome(i):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # find the smallest palindrome that is greater than or equal to the specified number\n    smallest_palindrome = 10**(num-1)\n\n    # find the smallest palindrome that is greater than or equal to half the specified number\n    half_specified_num = int(specified_num/2)\n    half_smallest_palindrome = 10**half_specified_num\n\n    # check if the smallest palindrome is greater than or equal to the specified number\n    if smallest_palindrome >= specified_num:\n        # return the smallest palindrome\n        return smallest_palindrome\n\n    # check if the smallest palindrome is greater than or equal to half the specified number\n    elif smallest_palindrome >= half_specified_num:\n        # find the largest palindrome that is less than or equal to half the specified number\n        largest_palindrome = 10**specified_num\n        for i in range(half_specified_num, 0, -1):\n            largest_palindrome = i*largest_palindrome\n\n        # if the largest palindrome is greater than or equal to half the specified number, return the next smallest palindrome\n        if largest_palindrome >= half_specified_num:\n            return smallest_palindrome\n        else:\n            return largest_palindrome\n\n    # if the smallest palindrome is less than or equal to half the specified number, return the next smallest palindrome\n    else:\n        return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num + 1\n    while True:\n        if is_palindrome(n):\n            return n\n        n += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize variables\n    is_next_palindrome = True\n    next_num = num + 1\n\n    while is_next_palindrome:\n        # Check if the next palindrome is smaller than the current number\n        if is_palindrome(next_num):\n            return next_num\n\n        # Increment the next number and check again\n        next_num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Get the list of digits of the input number\n    digits = [int(digit) for digit in str(num)]\n    # Reverse the digits\n    digits.reverse()\n    # Calculate the next smallest palindrome\n    next_palindrome = 0\n    for i in range(len(digits)):\n        if digits[i] == 9:\n            digits[i] = 0\n        else:\n            digits[i] += 1\n            break\n    for digit in digits:\n        next_palindrome = next_palindrome * 10 + digit\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Base case: if num is already a palindrome, return it\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # Recursive case: if num is less than its reverse, append num to the end of itself and find its next smallest palindrome\n    else:\n        temp = str(num)\n        reversed_temp = temp[::-1]\n        if int(reversed_temp) < int(temp):\n            return int(reversed_temp) + int(temp)\n        else:\n            return next_smallest_palindrome(int(temp) + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return -1\n    \n    # find the largest possible palindrome less than the given number\n    largest_palindrome = 0\n    while largest_palindrome*largest_palindrome > num:\n        largest_palindrome += 1\n    \n    # find the smallest palindrome that is greater than the given number\n    smallest_palindrome = largest_palindrome - 1\n    while smallest_palindrome*smallest_palindrome < num:\n        smallest_palindrome -= 1\n    \n    # take the difference between the two numbers and return it as the next smallest palindrome\n    return smallest_palindrome - num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"Invalid index\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is 1-based or 0-based indexing\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        # find the length of the array and the kth index\n        n = len(arr)\n        index = k - 1\n        # find the left and right pointers\n        left = 0\n        right = n - 1\n        # loop until the left pointer is less than the right pointer\n        while left < right:\n            # find the middle index\n            mid = (left + right) // 2\n            # check if the element at the kth index is smaller than the element at the middle index\n            if arr[mid] < arr[index]:\n                left = mid + 1\n            else:\n                right = mid\n        # if the element at the kth index is smaller than the element at the right pointer, return the element at the right pointer\n        if arr[right] < arr[index]:\n            return arr[right]\n        # if the element at the kth index is larger than the element at the right pointer, return the element at the left pointer\n        else:\n            return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is valid\n    if k < 1 or k > len(arr):\n        return \"Invalid input. k should be between 1 and the length of the array.\"\n\n    # find the kth element using binary search\n    low = 1\n    high = len(arr)\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k:\n            return f\"The {k}th element is {k}.\"\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # if k is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    left = 1\n    right = len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    primes = [True] * (n + 1)\n    p = 2\n    while p**2 <= n:\n        if primes[p]:\n            for i in range(p**2, n + 1, p):\n                primes[i] = False\n        p += 1\n    \n    kth = 0\n    for i in range(1, n + 1):\n        if primes[i]:\n            kth += 1\n            if kth == k:\n                return i\n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the word to lower case\n    word = word.lower()\n    # Split the word into words by underscores\n    words = word.split('_')\n    # Convert the first word to upper case\n    words[0] = words[0][0].upper() + words[0][1:]\n    # Join the words back together with camel case\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words[0] = words[0].capitalize()\n    # Join the words back into a single string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Parameters:\n    word (str): The snake case string to be converted to camel case.\n\n    Returns:\n    The camel case string converted from the input snake case string.\n\n    Example:\n    >>> snake_to_camel('a_snake_case_string')\n    'aSnakeCaseString'\n    \"\"\"\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0 or word[i] == '_':\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    capitalize_next = True\n\n    for char in word:\n        if char.isupper():\n            if capitalize_next:\n                result += char.lower()\n                capitalize_next = False\n            else:\n                result += char\n        else:\n            if capitalize_next:\n                result += char.upper()\n                capitalize_next = False\n            else:\n                result += char\n\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    result = []\n    for w in words:\n        result.append(w.capitalize())\n    # Join the words with a hyphen\n    return '-'.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the word to a list of words\n    words = word.split('_')\n    # Initialize an empty list to store the camel case words\n    camel_case = []\n    # Convert the first word to camel case and add it to the list\n    camel_case.append(words[0].capitalize())\n    # Convert the remaining words to camel case and add them to the list\n    for i in range(1, len(words)):\n        camel_case.append(words[i].capitalize())\n    # Join the list of camel case words into a string and return it\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            if letter.isupper():\n                camel_case += \"_\" + letter.lower()\n            else:\n                camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if i == 0 else x.lower() for i, x in enumerate(word.split('_')))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert the first letter to uppercase\n    word = word[0].upper() + word[1:]\n    # convert the remaining letters to lowercase\n    return word.replace('_', '')"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables for the first row and first column\n    a = 1\n    b = 1\n\n    # Initialize a list to store the intermediate values\n    interm = []\n\n    # Iterate n times to fill the list with values\n    for i in range(1, n + 1):\n        interm.append(b)\n        a, b = b, a + b\n\n    # Find the Eulerian number a(n, m)\n    for j in range(m):\n        a = b = 1\n        for i in range(n):\n            a, b = b, a + b\n        a = a + interm[i]\n        if a == 1:\n            return b\n\n    # If the Eulerian number is not found, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Create first row and first column of matrix\n    for i in range(1,n+1):\n        matrix[i][1] = i\n\n    for j in range(1,m+1):\n        matrix[1][j] = j\n\n    # Fill in the rest of the matrix\n    for i in range(2,n+1):\n        for j in range(2,m+1):\n            if matrix[i-1][j] % 2 == 0:\n                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n            else:\n                matrix[i][j] = matrix[i-1][j-1]\n\n    # Find the maximum element in the matrix\n    max_val = max(matrix[i][m] for i in range(1,n+1))\n\n    # Return the Eulerian number\n    return max_val"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first row as 1 and all other rows as 0\n    a = [1] * (n+1)\n    for i in range(1, m+1):\n        a.append(0)\n\n    # Fill the first row with 1\n    for i in range(1, n+1):\n        a[i] = 1\n\n    # Fill the remaining rows with the Lagrange multipliers\n    for i in range(2, m+1):\n        for j in range(1, n+1):\n            a[j] += (a[j] - (i-1)*a[j-1]) / i\n\n    return a[-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check for valid input\n    if n < 1 or m < 1:\n        print(\"Invalid input. Please enter positive integers.\")\n        return None\n    \n    # Initialize variables\n    A = [0] * (m+1)\n    B = [0] * (m+1)\n    C = [0] * (m+1)\n\n    # Fill the matrices with the values\n    for i in range(n+1):\n        A[0] += 1\n        for j in range(m):\n            A[j+1] += 1\n            B[j+1] += 1\n        C[0] += 1\n        for j in range(m-1):\n            B[j+1] += 1\n            C[j+1] += 1\n    \n    # Find the Eulerian number\n    for i in range(m+1):\n        A[i] += n\n        B[i] += n\n        C[i] += n\n    \n    for i in range(m+1):\n        for j in range(i+1):\n            A[i] += B[j]\n            C[i] += B[j]\n    \n    for i in range(m+1):\n        for j in range(i):\n            A[i] += C[j]\n    \n    # Return the result\n    return A[m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            if i+j == n:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > 0 and m > 0:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1)\n    else:\n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # create a list of factors of n and m\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0 and m % i == 0:\n            factors.append(i)\n\n    # find the Eulerian number for n and m\n    if factors:\n        a = n * m // max(factors)\n    else:\n        a = n * m\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers, n and m, as input and returns the Eulerian number a(n, m).\n    The Eulerian number is the smallest number such that there exists a permutation of {1, 2,..., n} such that the value of a(i) is equal to the value of i.\n    For example, if n = 3 and m = 4, then the Eulerian number is 2 because there exist two permutations of {1, 2, 3} and {2, 3, 1} such that the value of a(1) is equal to 1 and the value of a(2) is equal to 2.\n    '''\n    if n == m:\n        return 1\n    for i in range(1, n+1):\n        if (i + m) % i == 0:\n            return i\n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 1\n    for i in range(1, m+1):\n        result *= (n-i+1)\n    return result"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the `sort` method\n        sublist.sort()\n    # Return the input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order using the sort() method\n        sublist.sort()\n    # Return the modified input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    This function counts the number of true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using the tuple() function to convert the given list to a tuple\n    test_tup = tuple(test_list)\n    # Using the + operator to concatenate the two tuples\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert list to tuple\n    test_tup = tuple(test_list)\n    # Append list to the tuple\n    test_tup = test_tup + test_list\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for num in test_list:\n        test_tup += (num,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = tuple(test_tup + test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Combine the lists and tuples into a single list\n    combined_list = test_list + test_tup\n    # Convert the combined list to a tuple\n    combined_tup = tuple(combined_list)\n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list to store the result\n    result = []\n    \n    # iterate over the given tuples\n    for tup in test_tup:\n        # append the given list to the tuple\n        tup += test_list\n        # add the tuple to the result list\n        result.append(tup)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for i in test_list:\n        test_tup = test_tup + (i,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and tuples\n    result = test_list + test_tup\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Merges three sorted lists into a single sorted list.\n    '''\n    # Combine all three lists into one\n    all_numbers = num1 + num2 + num3\n    # Sort the combined list using heapify\n    heapq.heapify(all_numbers)\n    # Create an empty list to store the sorted numbers\n    sorted_numbers = []\n    # Extract the sorted numbers from the heap\n    while all_numbers:\n        sorted_numbers.append(heapq.heappop(all_numbers))\n    # Return the sorted list\n    return sorted_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap to store the indices of the merged list\n    min_heap = []\n    \n    # Iterate through the merged list and add each index to the min heap\n    for i in range(len(merged_list)):\n        heapq.heappush(min_heap, i)\n    \n    # Create a new list to store the sorted merged list\n    sorted_list = []\n    \n    # Iterate through the merged list and pop the smallest index from the min heap\n    while min_heap:\n        index = heapq.heappop(min_heap)\n        sorted_list.append(merged_list[index])\n    \n    # Return the sorted merged list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n\n    Args:\n    num1 (list): List of integers.\n    num2 (list): List of integers.\n    num3 (list): List of integers.\n\n    Returns:\n    list: A single list that contains all the elements of the three input lists.\n    \"\"\"\n    # Merge the two input lists\n    merged_list = sorted(num1 + num2)\n\n    # Merge the three lists\n    for num in num3:\n        heapq.heappush(merged_list, num)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the two lists\n    merged_list = heapq.merge(heapq.merge([1,2,3],num1),num2)\n    \n    # Merge the two merged lists with the third list\n    merged_list = heapq.merge(merged_list,num3)\n    \n    # Return the sorted merged list\n    return sorted(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as inputs and returns a single sorted list.\n    \"\"\"\n    # Merge two lists into a single list\n    merged_list = num1 + num2\n    # Sort the merged list\n    sorted_list = heapq.merge(num1, num2)\n    # Merge the sorted list with the third list\n    merged_list = heapq.merge(merged_list, num3)\n    # Sort the merged list\n    sorted_list = heapq.merge(sorted_list, num3)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge two lists into one\n    merged_list = num1 + num2\n    # sort the merged list\n    merged_list.sort()\n    # merge the merged list with the third list\n    merged_list = heapq.merge(merged_list, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one sorted list\n    merged_list = []\n    for i in range(len(num1)):\n        heapq.heappush(merged_list, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(merged_list, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(merged_list, num3[i])\n\n    # Extract the elements from the heap\n    sorted_list = []\n    while len(merged_list) > 0:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min heap of size 3 and add the first three elements from num1\n    min_heap = []\n    heapq.heappush(min_heap, num1[0])\n    heapq.heappush(min_heap, num1[1])\n    heapq.heappush(min_heap, num1[2])\n    \n    # Iterate through the second and third lists\n    for i in range(3, len(num1) + len(num2) + len(num3)):\n        # Remove the smallest element from the min heap\n        smallest = heapq.heappop(min_heap)\n        \n        # If the smallest element from the second list is smaller than the smallest element from the min heap, add it to the min heap\n        if num2[i-3] < smallest:\n            heapq.heappush(min_heap, num2[i-3])\n        \n        # If the smallest element from the third list is smaller than the smallest element from the second list, add it to the min heap\n        if num3[i-3] < smallest:\n            heapq.heappush(min_heap, num3[i-3])\n        \n        # Add the smallest element from the min heap to the result list\n        result.append(smallest)\n        \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two first lists\n    merged_list = heapq.merge(num1, num2)\n\n    # Merge the merged list with the third list\n    return heapq.merge(merged_list, num3)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables to count odd and even numbers\n    odd = 0\n    even = 0\n\n    # Convert string to binary\n    binary = bin(int(s))[2:]\n\n    # Rotate the binary string the given number of times\n    for i in range(n):\n        binary = binary[-1:] + binary[:-1]\n\n    # Iterate through the rotated binary string and count odd and even numbers\n    for bit in binary:\n        if int(bit) == 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Return the count of odd and even numbers\n    return odd, even"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Count the number of '1' and '0' in the binary string\n    count1 = s.count('1')\n    count0 = s.count('0')\n\n    # Initialize variables for the odd value count\n    odd_count = 0\n\n    # If the binary string has an odd number of '1' or '0', rotate it n times to get a string with an even number of '1' and '0'\n    if count1 % 2!= count0 % 2:\n        s = s + '0' * (count0 // 2)\n        s = s[::-1] + '0' * (count0 % 2)\n        s = s + '1' * (count1 // 2)\n        s = s[::-1] + '1' * (count1 % 2)\n\n    # Loop through the string, counting the odd values\n    for i in range(len(s)):\n        if s[i] == '0':\n            odd_count += 1\n        else:\n            break\n\n    # Return the odd value count\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Check if the given string is valid binary string or not\n    if not s.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '').replace('(', '').replace(')', '').replace(',', '').replace('.', '').replace(':', '').replace(';','').replace('\"', '').replace('=','').isdecimal():\n        print(\"Invalid binary string.\")\n        return\n\n    # Convert binary string to list of digits\n    binary_string = [int(x) for x in s]\n\n    # Find the number of digits in the binary string\n    num_digits = len(binary_string)\n\n    # Initialize the count variable\n    count = 0\n\n    # Initialize the current rotation index\n    rotation_index = 0\n\n    # Loop through each rotation index\n    while rotation_index < n:\n\n        # Find the next rotation index\n        next_rotation_index = (rotation_index + 1) % num_digits\n\n        # Find the sum of digits in the rotated binary string\n        rotated_binary_string = binary_string[next_rotation_index:] + binary_string[:next_rotation_index]\n        rotated_sum = sum(rotated_binary_string)\n\n        # If the sum of digits is odd, increment the count variable\n        if rotated_sum % 2!= 0:\n            count += 1\n\n        # Rotate the binary string by one digit\n        rotated_binary_string.pop(0)\n        binary_string = rotated_binary_string\n\n        # Increment the rotation index\n        rotation_index += 1\n\n    # Return the count of odd numbers with rotated binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables\n    odd_count = 0\n    odd_indices = []\n\n    # iterate over each character in the string\n    for i, char in enumerate(s):\n        # if the character is odd, add its index to the list of odd indices\n        if int(char) % 2!= 0:\n            odd_indices.append(i)\n\n    # iterate over each rotation of the string\n    for _ in range(n):\n        # rotate the odd indices by 1 position to the right\n        odd_indices = odd_indices[1:] + [odd_indices[0]]\n\n        # check if any odd indices have been rotated beyond the end of the string\n        if len(odd_indices) > len(s):\n            odd_indices = odd_indices[1:]\n\n    # count the number of odd indices\n    for index in odd_indices:\n        if int(s[index]) % 2!= 0:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n): \n    s_list = list(s) \n    n_rot = n % len(s_list) \n    rotated_list = s_list[-n_rot:] + s_list[:-n_rot] \n    odd_count = sum(1 for i in rotated_list if i % 2!= 0) \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the input string to binary\n    bin_str = bin(int(s))[2:]\n\n    # Initialize variables\n    odd_count = 0\n    parity = 0\n    length = len(bin_str)\n\n    # Loop through each character in the binary string\n    for i in range(length):\n        # If the current character is odd, increment the odd count and set parity to 1\n        if bin_str[i] == '1':\n            odd_count += 1\n            parity = 1\n        # If the current character is even, set parity to 0\n        else:\n            parity = 0\n\n        # If parity is 1, rotate the character to the right and add it to the binary string\n        if parity == 1:\n            # Check if the current character is the last character in the binary string\n            if i == length - 1:\n                # If it is, rotate it to the left and add it to the binary string\n                bin_str = '0' + bin_str[::-1]\n            else:\n                # If it isn't, rotate it to the right and add it to the binary string\n                bin_str = bin_str[:i] + bin_str[i+1:]\n\n    # Convert the binary string back to decimal and return the count of odd numbers\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Convert the binary string to a list of bits\n    s_list = [int(i) for i in s]\n\n    # Initialize the result counter\n    result = 0\n\n    # Loop through the given number of rotations\n    for i in range(n):\n        # Create a new list by rotating the original list\n        new_list = s_list[-1:] + s_list[:-1]\n\n        # Loop through the new list and check if there are any odd values\n        for j in new_list:\n            if j % 2 == 1:\n                # Increment the result counter\n                result += 1\n\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    :param s: The binary string to be rotated.\n    :param n: The number of rotations to be performed.\n    :return: The number of odd numbers after rotating the binary string n times.\n    \"\"\"\n    \n    # convert the binary string to an integer\n    s_int = int(s, 2)\n    \n    # initialize the count of odd numbers to 0\n    count = 0\n    \n    # perform n rotations\n    for _ in range(n):\n        \n        # rotate the binary string by one bit to the right\n        s_int = (s_int >> 1) | (s_int & 1)\n        \n        # check if the rotated bit is odd\n        if s_int & 1 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    binary = bin(int(s))[2:]\n    for i in range(n):\n        binary = binary[-1:] + binary[:-1]\n    binary = ''.join([str(int(i)) for i in binary])\n    count = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n\n    def find_common(list1, list2):\n        \"\"\"\n        Helper function to find common elements in two lists.\n        \"\"\"\n\n        common = []\n\n        for item in list1:\n            if item in list2 and item not in common:\n                common.append(item)\n\n        return common\n\n    if len(nestedlist) == 0:\n        return []\n\n    common_lists = []\n    for i in range(len(nestedlist)):\n        if isinstance(nestedlist[i], list):\n            common_lists.append(find_common(nestedlist[i], common_lists[i] if i > 0 else []))\n\n    return common_lists[0]"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate over each nested list in the input list\n    for lst in nestedlist:\n        # Iterate over each element in the nested list and add it to the set\n        common_elements.update(set(lst))\n\n    # Return the set of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        set1 = set(nestedlist[0])\n        for i in range(1, len(nestedlist)):\n            set2 = set(nestedlist[i])\n            set1 = set1.intersection(set2)\n        return list(set1)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n\n    # Create a set of common elements between all lists in nestedlist\n    common_elements = set.intersection(*(set(lst) for lst in nestedlist))\n\n    # Convert the set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set of all elements in the first list\n    set1 = set(nestedlist[0])\n    \n    # iterate through the rest of the lists\n    for i in range(1, len(nestedlist)):\n        # create a set of all elements in the current list\n        set2 = set(nestedlist[i])\n        \n        # find the intersection of the two sets\n        common_elements = set1.intersection(set2)\n        \n        # add the common elements to a set of all common elements\n        common_elements = set(common_elements)\n        common_elements.add(None) # add the None value to the set\n        \n        # update the set of all elements in the first list to include the common elements\n        set1 = set1.union(common_elements)\n        \n    # return the list of common elements\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # create a set of common elements\n    common_elements = set()\n    # loop through the nested lists\n    for lst in nestedlist:\n        # loop through the list and add elements to the set if they are present in both lists\n        for elem in lst:\n            if elem in common_elements:\n                common_elements.remove(elem)\n            else:\n                common_elements.add(elem)\n    # return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty list to store common elements\n    common = []\n    # Loop through each nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for item in lst:\n            # If the element is already in the common list, add it to the result\n            if item in common:\n                continue\n            # If the element is not in the common list, add it to the result\n            else:\n                common.append(item)\n    # Return the common list of all nested lists\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_list.append(nestedlist[i])\n            if nestedlist[j] in nestedlist[i]:\n                common_list.append(nestedlist[j])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for dictionary in list1:\n        if dictionary:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n        return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Calculate sum of list elements\n    total = sum(nums_list)\n    # Convert sum to integer\n    total = int(total)\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    converted_list = []\n    for row in test_list:\n        converted_row = []\n        for element in row:\n            if isinstance(element, (int, float)):\n                converted_row.append(float(element))\n            else:\n                try:\n                    converted_row.append(float(str(element)))\n                except ValueError:\n                    converted_row.append(element)\n        converted_list.append(converted_row)\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float)):\n                result.append(float(element))\n            elif isinstance(element, list):\n                result.append(list_to_float(element))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        float_sublist = []\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                float_sublist.append(float(element))\n            else:\n                float_sublist.append(element)\n        float_list.append(float_sublist)\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                new_list.append(float(item))\n            except ValueError:\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str, complex)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except:\n                    pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    # convert the list of words to a list of lists of characters\n    new_list = [[char for char in word] for word in words]\n    # flatten the list of lists of characters into a single list\n    flattened_list = [item for sublist in new_list for item in sublist]\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    # Split the string on space character and store in list\n    list_string = string.split(' ')\n    return list_string"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return list(string.split())"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # convert the string to a list of characters\n    chars = list(string)\n    # initialize an empty list to store the substrings\n    substrings = []\n    # loop through each character in the list\n    for i in range(len(chars)):\n        # if the current character is a space, append the substring to the list of substrings\n        if chars[i] =='':\n            substrings.append(''.join(chars[i:]))\n            # remove the space character from the list of characters\n            del chars[i]\n        # otherwise, move on to the next character\n        else:\n            pass\n    # append the last substring to the list of substrings\n    substrings.append(''.join(chars))\n    # return the list of substrings\n    return substrings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return \"Array is empty\"\n    elif n == 1:\n        return \"Array contains only one element\"\n    else:\n        i = 0\n        j = n-1\n        while i < j:\n            mid = (i + j) // 2\n            if arr[i] == arr[mid]:\n                j = mid\n            elif arr[i] < arr[mid]:\n                i = mid+1\n            else:\n                j = mid\n        return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array\n    for element in arr:\n        # If the element is already in the dictionary, increment its count\n        if element in count_dict:\n            count_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[element] = 1\n\n    # Iterate through the dictionary to find the element that appears only once\n    for element in count_dict:\n        if count_dict[element] == 1:\n            return element\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    This function takes an array as input and returns the element that appears only once in the array.\n    '''\n    # Initialize two variables to keep track of the count and the element\n    count = 1\n    element = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the element at the current index is not equal to the element at the previous index,\n        # then we have found a new element\n        if arr[i]!= element:\n            # Update the count and element variables\n            count = 1\n            element = arr[i]\n        else:\n            # Otherwise, increment the count of the current element\n            count += 1\n    \n    # If the count of the last element is 1, then the element only appears once and we return it\n    if count == 1:\n        return element\n    \n    # If we reach this point, then the element only appears once but is not the only element in the array\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the counts of elements in the array\n    count_dict = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the dictionary, decrement its count by 1\n        if num in count_dict:\n            count_dict[num] -= 1\n            \n            # If the count becomes negative, remove the number from the dictionary\n            if count_dict[num] < 0:\n                del count_dict[num]\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the dictionary and return the first key with a count of 1\n    for key, value in count_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least 2 elements.\"\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return \"No element appears only once.\"\n    else:\n        if arr[0] == arr[1]:\n            for i in range(2, len(arr)):\n                if arr[i] == arr[1]:\n                    return \"No element appears only once.\"\n            return arr[1]\n        elif arr[len(arr)-1] == arr[len(arr)-2]:\n            for i in range(len(arr)-2, -1, -1):\n                if arr[i] == arr[len(arr)-2]:\n                    return \"No element appears only once.\"\n            return arr[len(arr)-2]\n        else:\n            return \"No element appears only once.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Store the frequency of each element in a dictionary\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the element with frequency 1\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element with frequency 1 is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return None\n    else:\n        # initialize variables for the current and next elements\n        curr = arr[0]\n        next = arr[1]\n        # loop through the array until the next element is smaller than the current one\n        while next < curr:\n            curr = next\n            next = arr[curr + 1]\n        # return the current element if it's the only element that appears only once\n        if next == curr:\n            return curr\n        else:\n            return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        raise ValueError('Input array must have at least two elements.')\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize count and element variables\n    count = 1\n    element = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is equal to the previous element, increment count and reset element to current element\n        if arr[i] == element:\n            count += 1\n            element = arr[i]\n        # If the current element is not equal to the previous element, reset count to 1 and reset element to current element\n        else:\n            count = 1\n            element = arr[i]\n\n    # If the loop completes without finding an element that appears only once, return None\n    if count == len(arr):\n        return None\n\n    # Otherwise, return the element that appears only once\n    else:\n        return element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        # If the number is already in the dictionary, increment its frequency by 1\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with frequency 1\n        else:\n            freq[num] = 1\n    \n    # Find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables to store the maximum absolute product and the current absolute product\n    max_product = 0\n    curr_product = 1\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        \n        # Calculate the absolute value of the first number in the tuple and the absolute value of the second number in the tuple\n        num1 = abs(tup[0])\n        num2 = abs(tup[1])\n        \n        # Update the current absolute product\n        curr_product = num1 * num2\n        \n        # Update the maximum absolute product if the current product is greater\n        if curr_product > max_product:\n            max_product = curr_product\n        \n        # If the current product is negative, reset the variables to calculate the next pair of numbers\n        if curr_product < 0:\n            max_product = 0\n            curr_product = 1\n            \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = tuple(sorted([list1[i], list1[j]]))\n            if abs(pair[0] * pair[1]) > max_product:\n                max_product = abs(pair[0] * pair[1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    max_sum = float('-inf')\n    current_product = 1\n    current_sum = 0\n\n    # Iterate through the list\n    for i in range(len(list1)):\n        # Update current product and sum\n        current_product *= list1[i]\n        current_sum += list1[i]\n\n        # Check if the current product is greater than the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Update the current product and sum for the next iteration\n        current_product = 1\n        current_sum = 0\n\n    return max_product, max_sum"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_product_tuple = None\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if j!= i:\n                product = abs(list1[i] * list1[j])\n                if product > max_product:\n                    max_product = product\n                    max_product_tuple = (list1[i], list1[j])\n\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Create an empty list to store the maximum absolute product for each pair of tuples\n    max_products = []\n\n    # Loop through the list of tuples\n    for pair in list1:\n        # Calculate the product of the elements in the tuple\n        product = pair[0] * pair[1]\n\n        # Check if the product is greater than the current maximum absolute product\n        if product > max(max_products):\n            # Update the maximum absolute product for the tuple\n            max_products = [product]\n        elif product < 0:\n            # If the product is negative, add it to the maximum absolute product for the tuple\n            max_products[0] += product\n        else:\n            # If the product is zero, do nothing\n            pass\n\n    # Return the maximum absolute product for each pair of tuples\n    return max_products"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the maximum absolute product of all pairs of tuples in the list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    max_sum = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n                max_sum = list1[i] + list1[j]\n    return max_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(24 - i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nif __name__ == \"__main__\":\n    limit = int(input(\"Enter the limit: \"))\n    result = sum_amicable_numbers(limit)\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store the amicable numbers and their sum\n    amicable = []\n    amicable_sum = 0\n    \n    # Iterate from 1 to the limit (exclusive)\n    for num in range(1, limit+1):\n        # Check if the number is amicable by iterating from 1 to the square root of the number\n        for i in range(1, num):\n            if num % i == 0:\n                # If the number is divisible by i, it cannot be a factor for any other number\n                break\n        else:\n            # If the loop completes without finding any divisors, the number is amicable\n            amicable.append(num)\n            amicable_sum += num\n    \n    # Return the sum of the amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i!= 1:\n            a = i\n            b = 0\n            while a!= b:\n                if a % 2 == 0:\n                    a = a // 2\n                else:\n                    a = 3 * a + 1\n                b = i - a\n            if i == b:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    amicable_numbers = []\n\n    for num in range(2, limit):\n        if num == sum(set(range(1, num)) - set(range(1, num//2+1))):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store amicable numbers and their sum\n    amicable = set()\n    sum_of_amicable = 0\n\n    # Loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num == sum_of_amicable(num):\n            amicable.add(num)\n            sum_of_amicable += num\n\n    # Return the sum of amicable numbers\n    return sum_of_amicable\n\ndef sum_of_amicable(num):\n    '''\n    Write a function to calculate the sum of all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store amicable numbers and their sum\n    amicable = set()\n    sum_of_amicable = 0\n\n    # Loop through all numbers from 1 to limit\n    for i in range(1, num):\n        # Check if the current number is divisible by the number we are looking for\n        if num % i == 0:\n            if i!= num//i and i!= num//i + 1:\n                # If the number is not divisible by both the current number and its divisor, add it to the set and the sum\n                amicable.add(i)\n                sum_of_amicable += i\n\n    # Return the sum of amicable numbers\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a list of all prime numbers up to the limit\n    primes = [True] * (limit+1)\n    primes[0] = primes[1] = False\n    for num in range(2, int(limit**0.5)+1):\n        if primes[num]:\n            for i in range(num*num, limit+1, num):\n                primes[i] = False\n\n    # Initialize variables\n    sum_of_amicable = 0\n    amicable_set = set()\n\n    # Find all pairs of amicable numbers up to the limit\n    for num1 in range(2, limit+1):\n        if num1 in amicable_set:\n            continue\n        for num2 in range(2, limit+1):\n            if num2 in amicable_set:\n                continue\n            if num1+num2 == limit and is_prime(num1) and is_prime(num2):\n                amicable_set.add(num1)\n                amicable_set.add(num2)\n                sum_of_amicable += num1 + num2\n\n    return sum_of_amicable\n\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if the given number is an amicable number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    sum_of_divisors = sum(divisor for divisor in range(1, num // 2 + 1) if (num - divisor) % divisor == 0)\n    return sum_of_divisors == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the given limit.\n    \"\"\"\n    return sum(num for num in range(1, limit + 1) if is_amicable(num))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum to 0\n    sum_amicable = 0\n    # loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if the number is amicable\n        if num == sum_amicable(num):\n            # if it is, add it to the sum\n            sum_amicable += num\n    \n    # return the sum\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a limit as an argument and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    def sum_of_divisors(n):\n        \"\"\"\n        This function takes a positive integer n as an argument and returns the sum of its divisors.\n        \"\"\"\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i!= n // i:\n                    divisors.append(i)\n                if n // i!= i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i == sum_of_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i == sum_of_divisors(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of divisors of a given number.\n    '''\n    sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            sum += i\n            if n//i!= i:\n                sum += n//i\n    return sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the modulus and phase of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    phase = cmath.phase(a + b*1j)\n    \n    # Calculate the angle in degrees\n    angle = (phase / (2 * cmath.pi)) * 180\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Parameters:\n    a (float or complex): The real part of the complex number.\n    b (float or complex): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number.\n    \"\"\"\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    # Calculate the angle of the complex number in radians\n    angle_rad = cmath.phase(modulus)\n    # Convert the angle from radians to degrees\n    angle_deg = cmath.degrees(angle_rad)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    # Get the magnitude and phase of the complex number\n    mag = cmath.sqrt(a.real**2 + a.imag**2)\n    phase = cmath.phase(a)\n    \n    # Convert the phase to degrees\n    degrees = phase * 180.0 / cmath.pi\n    \n    # Return the angle as a float in degrees\n    return degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the phase of the complex number\n    phase = cmath.phase(a + b*1j)\n    \n    # Convert the phase to degrees\n    angle = phase * 180 / cmath.pi\n    \n    # Return the angle in degrees\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in radians.\n    \"\"\"\n    return cmath.phase(a + b) / (2 * cmath.pi)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers (a + bi) and returns the angle of the complex number in degrees.\n    '''\n\n    # Calculating the angle of the complex number in radians\n    angle_rad = cmath.phase(a + b*1j)\n\n    # Converting the angle in radians to degrees\n    angle_deg = angle_rad * 180 / cmath.pi\n\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return round(angle.real, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    diff_max = 0\n    diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            diff += 1\n        else:\n            diff = 0\n\n        diff_max = max(diff_max, diff)\n\n    return diff_max"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables to store the count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Loop through the string and update the count of 0s and 1s\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n    # Initialize the maximum difference between the number of 0s and number of 1s\n    max_diff = 0\n\n    # Loop through all possible substrings of the string\n    for i in range(1, len(string)):\n        for j in range(i+1, len(string)+1):\n            # Calculate the difference between the count of 0s and 1s in the substring\n            diff = abs(zero_count - one_count)\n\n            # Update the maximum difference if the current substring has a higher difference\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # Initialize variables for count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    # Loop through each character in the binary string\n    for char in string:\n        # Check if the character is a 0 or a 1\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        # Calculate the difference between the counts and store it if it's greater than the current max\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_diff = 0\n    length = len(string)\n\n    for i in range(length):\n        for j in range(i+1, length+1):\n            diff = sum([int(bit) for bit in string[i:j]]) - (length - j)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n        \n        if count_0s > 0 and count_1s > 0:\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n            \n        if count_0s > 0:\n            count_0s -= 1\n        if count_1s > 0:\n            count_1s -= 1\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    prev_diff = 0\n    for i in range(1, len(string)):\n        if string[i] == '0' and string[i-1] == '0':\n            prev_diff = max(prev_diff, 0)\n            max_diff = max(max_diff, prev_diff+1)\n        elif string[i] == '1' and string[i-1] == '1':\n            prev_diff = max(prev_diff, 1)\n            max_diff = max(max_diff, prev_diff)\n        else:\n            prev_diff = 0\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initialize variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # check if the character is a 0 or 1\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n        \n        # update the maximum difference\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_1 - count_0 > max_diff:\n            max_diff = count_1 - count_0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    zeros = 0\n    ones = 0\n    max_difference = 0\n    # Loop through the string\n    for char in string:\n        # If the character is a 0, increment the count of zeros\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the count of ones\n        else:\n            ones += 1\n        # Calculate the difference between the count of zeros and ones\n        difference = abs(zeros - ones)\n        # Update the maximum difference if the current difference is greater than the current maximum\n        if difference > max_difference:\n            max_difference = difference\n    # Return the maximum difference\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    # Initialize the maximum difference and the count of 0s and 1s in the string\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is 0, update the count of 0s\n        if char == '0':\n            count_0s += 1\n        # If the character is 1, update the count of 1s\n        else:\n            count_1s += 1\n        \n        # Calculate the maximum difference between the count of 0s and 1s\n        diff = abs(count_0s - count_1s)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    common_list = []\n    divisor = 2\n\n    while divisor <= num1 and divisor <= num2:\n        if num1 % divisor == 0 and num2 % divisor == 0:\n            common_list.append(divisor)\n        divisor += 1\n\n    return sum(common_list)\n\n\ndef sum(lst):\n    \"\"\"\n    Returns the sum of a list of numbers.\n    \"\"\"\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n\n    print(\"Sum of common divisors of\", num1, \"and\", num2, \"is:\", common_divisors(num1, num2))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to calculate the sum of common divisors of two numbers\n    def sum_divisors(num1, num2):\n        # Create a list of common divisors of num1 and num2\n        divisors = []\n        for i in range(1, num1 + 1):\n            if num1 % i == 0 and num2 % i == 0:\n                divisors.append(i)\n        # Return the sum of common divisors\n        return sum(divisors)\n    \n    # Calculate the sum of common divisors of a and b\n    return sum_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n\n    Parameters:\n    a (int): An integer.\n    b (int): An integer.\n\n    Returns:\n    sum (int): The sum of common divisors of a and b.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n\n    i = 1\n    while i <= b:\n        if a % i == 0 and b % i == 0:\n            a = a // i\n            b = b // i\n        else:\n            i += 1\n\n    return a + b"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of common divisors using a for loop\n    sum_of_common_divisors = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum_of_common_divisors += i\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes in two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Function to find the sum of common divisors of two numbers\n    def find_sum_of_common_divisors(a, b):\n        \"\"\"\n        This function takes in two numbers as input and returns the sum of their common divisors.\n        \"\"\"\n        # Finding the maximum common divisor\n        max_common_divisor = max(a, b)\n        sum_of_common_divisors = 0\n        # Looping through all numbers from 1 to the maximum common divisor\n        for i in range(1, max_common_divisor + 1):\n            # If the number is divisible by both a and b, add it to the sum\n            if i % a == 0 and i % b == 0:\n                sum_of_common_divisors += i\n        return sum_of_common_divisors\n    \n    # Finding the sum of common divisors of num1 and num2\n    sum_of_common_divisors1 = find_sum_of_common_divisors(num1, num2)\n    sum_of_common_divisors2 = find_sum_of_common_divisors(num2, num1)\n    # Returning the sum of common divisors of num1 and num2\n    return sum_of_common_divisors1 + sum_of_common_divisors2"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_sum = 0\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n        i += 1\n    return divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Given two numbers, return their common divisors.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sorted(divisors)\n\n\ndef sum(a, b):\n    \"\"\"\n    Given two numbers, return their sum of common divisors.\n    \"\"\"\n    divisors = common_divisors(a, b)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(\"Sum of common divisors:\", sum(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_sum = 0\n    \n    # loop through each number from 1 to the larger of the two input numbers\n    for i in range(1, max(a, b) + 1):\n        # check if the input number is divisible by i\n        if a % i == 0 and b % i == 0:\n            # if so, add i to the divisor sum\n            divisor_sum += i\n    \n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # finding common divisors of two numbers\n    common = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            common.append(i)\n    # sum of common divisors\n    return sum(common)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(max(x, y)):\n        result += x if i < x else 0\n        result += y if i < y else 0\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters in a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    \n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and returns a list of words that are longer than n characters.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix contains only distinct values\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n\n    # check if the matrix is a magic square\n    magic_number = my_matrix[0][0]\n    for row in my_matrix:\n        for num in row:\n            if num!= magic_number:\n                return False\n    for col in range(len(my_matrix[0])):\n        if my_matrix[row][col]!= magic_number:\n            return False\n    for i in range(len(my_matrix)-1):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[i][j+1]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # define the size of the matrix\n    n = len(my_matrix)\n\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # initialize the sum of the rows and the columns\n    row_sum = [0] * n\n    col_sum = [0] * n\n\n    # loop through the matrix and calculate the row and column sums\n    for i in range(n):\n        for j in range(n):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n\n    # check if the row and column sums are equal\n    if row_sum!= col_sum:\n        return False\n\n    # check if the matrix has the same elements in every row and column\n    for i in range(n):\n        row_set = set(my_matrix[i])\n        if len(row_set)!= n:\n            return False\n\n    for j in range(n):\n        col_set = set(my_matrix[:,j])\n        if len(col_set)!= n:\n            return False\n\n    # if all checks pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the size of the matrix\n    size = len(my_matrix)\n\n    # Initialize a boolean variable to keep track of whether the matrix is a magic square\n    is_magic = False\n\n    # Initialize a list to store the sum of each row and column\n    row_sums = [0] * size\n    col_sums = [0] * size\n\n    # Loop through each element in the matrix\n    for i in range(size):\n        # If the current element is equal to the sum of its row and column, mark that the matrix is not a magic square\n        if my_matrix[i][i] + row_sums[i] == col_sums[i] + i:\n            is_magic = False\n            break\n\n        # If the current element is equal to the sum of its row and column and the index of its row, mark that the matrix is not a magic square\n        if my_matrix[i][i] + row_sums[i] == col_sums[i] + size - i - 1:\n            is_magic = False\n            break\n\n        # If the current element is equal to the sum of its row and column and the index of its column, mark that the matrix is not a magic square\n        if my_matrix[i][i] + row_sums[i] == col_sums[i] + size - i - 1:\n            is_magic = False\n            break\n\n        # If the current element is equal to the sum of its row and column, mark that the matrix is not a magic square\n        if my_matrix[i][i] + row_sums[i] == col_sums[i] + i:\n            is_magic = False\n            break\n\n        # Update the row and column sums for the next iteration\n        row_sums[i] = my_matrix[i][i] + row_sums[i]\n        col_sums[i] = my_matrix[i][i] + col_sums[i]\n\n    # If the matrix is a magic square, return True\n    if is_magic:\n        return True\n    # If the matrix is not a magic square, return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables to keep track of row sums, column sums, and diagonals\n    row_sums = []\n    col_sums = []\n    diag_sum_1 = 0\n    diag_sum_2 = 0\n    \n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Check if all columns have the same length\n    for col in range(len(my_matrix[0])):\n        col_sums.append(sum([row[col] for row in my_matrix]))\n        if col_sums[-1]!= sum([row[i] for i in range(len(my_matrix[0])) if i!= col]):\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sums.append(sum([my_matrix[i][j] for j in range(len(my_matrix))]))\n        col_sums.append(sum([my_matrix[j][i] for j in range(len(my_matrix))]))\n        diag_sum_1 += my_matrix[i][i]\n        diag_sum_2 += my_matrix[i][len(my_matrix)-1-i]\n    \n    # Check if the row sums are equal to the column sums\n    for sum_1, sum_2 in zip(row_sums, col_sums):\n        if sum_1!= sum_2:\n            return False\n    \n    # Check if the diagonal sums are equal\n    if diag_sum_1!= diag_sum_2:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the elements in the matrix are unique\n    if len(set(sum(my_matrix, [])))!= len(my_matrix) * len(my_matrix[0]):\n        return False\n\n    # Check if the matrix has the magic square pattern\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_sum += my_matrix[i][j]\n\n    for i in range(len(my_matrix) - 3):\n        for j in range(len(my_matrix) - 3):\n            if my_matrix[i][j]!= magic_sum:\n                return False\n            if my_matrix[i][j + 1]!= magic_sum + 1:\n                return False\n            if my_matrix[i][j + 2]!= magic_sum + 2:\n                return False\n            if my_matrix[i + 1][j]!= magic_sum + 3:\n                return False\n            if my_matrix[i + 1][j + 1]!= magic_sum + 4:\n                return False\n            if my_matrix[i + 1][j + 2]!= magic_sum + 5:\n                return False\n            if my_matrix[i + 2][j]!= magic_sum + 6:\n                return False\n            if my_matrix[i + 2][j + 1]!= magic_sum + 7:\n                return False\n            if my_matrix[i + 2][j + 2]!= magic_sum + 8:\n                return False\n            magic_sum += 9\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i==j: #check if a number is repeated in a row\n                if my_matrix[i][j] in my_matrix[i][:j] or my_matrix[i][j] in my_matrix[i][j+1:]:\n                    return False\n            if j==n-i-1: #check if a number is repeated in a column\n                if my_matrix[i][j] in my_matrix[:j,i] or my_matrix[i][j] in my_matrix[j+1:,i]:\n                    return False\n            magic_sum += my_matrix[i][j] #accumulate the sum of the numbers in the matrix\n            \n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                if my_matrix[i][j]!= magic_sum - my_matrix[i][:j].sum() and my_matrix[i][j]!= magic_sum - my_matrix[i][j+1:].sum():\n                    return False\n            if j==n-i-1:\n                if my_matrix[i][j]!= magic_sum - my_matrix[:j,i].sum() and my_matrix[i][j]!= magic_sum - my_matrix[j+1:,i].sum():\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    \n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    \n    if magic_sum == n*n*(n*n+1)/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check that the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check that each row, column, and diagonal is a magic square\n    for i in range(n):\n        # Check if the row is a magic square\n        row_sum = sum(my_matrix[i])\n        if row_sum!= n * (n + 1) // 2:\n            return False\n\n        # Check if the column is a magic square\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if col_sum!= n * (n + 1) // 2:\n            return False\n\n        # Check if the diagonal is a magic square\n        diagonal_sum = sum(my_matrix[i][j] for j in range(n))\n        if diagonal_sum!= n * (n + 1) // 2:\n            return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows, cols = len(my_matrix), len(my_matrix[0])\n    square_sum = sum([sum(row) for row in my_matrix])\n    n = rows * cols\n    return square_sum == n * (n + 1) // 2"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix is not square\"\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return \"Matrix contains non-integer elements\"\n    \n    # Check if the matrix contains the numbers 1 through n^2\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 1 + n*(i+j):\n                return \"Matrix does not contain the numbers 1 through n^2\"\n    \n    # Check if the matrix contains the numbers n^2 through 2n^2\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= n*n + n*(i-j+n-1):\n                return \"Matrix does not contain the numbers n^2 through 2n^2\"\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and increment the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Create a list of tuples with the items and their frequencies\n    freq_list = freq_dict.items()\n\n    # Sort the list in descending order based on the frequencies\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the item with the highest frequency\n    return freq_list[0][0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_num = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int) # defaultdict to store frequency of each item in the list\n    \n    for num in nums:\n        freq_dict[num] += 1 # increase frequency of the item in the dictionary\n    \n    max_freq = max(freq_dict.values()) # find maximum frequency of any item in the dictionary\n    \n    for num in nums:\n        if freq_dict[num] == max_freq: # check if frequency of current item is equal to maximum frequency\n            return num\n    \n    # if no item has frequency equal to maximum frequency, return None\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the given list\n    for num in nums:\n        # Increment the frequency of the current item by 1\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_num = None\n\n    # Iterate through the dictionary and update the maximum frequency item\n    for num, f in freq.items():\n        if f == max_freq:\n            max_num = num\n\n    # Return the maximum frequency item\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int) # defaultdict to store frequency of each item\n    \n    # count frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_freq_item = [item for item, freq in freq_dict.items() if freq == max_freq]\n    \n    # return the item with maximum frequency\n    return max_freq_item[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int) # create a defaultdict to store frequency of each item\n\n    # iterate through the list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with maximum frequency\n    max_num = max(freq_dict, key=freq_dict.get)\n\n    # return the item with maximum frequency\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    str2 = \"\"\n    for char in str1:\n        if char.upper() not in vowels:\n            str2 += char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_reverse = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowels_reverse += str1[i]\n    return vowels_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    vowels_reverse = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_reverse.append(str1[i])\n    vowels_reverse.reverse()\n    result = ''.join(vowels_reverse)\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for char in str1:\n        if char not in vowels:\n            str2 = char + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels and str1[i] not in vowel_index:\n            vowel_index.append(i)\n    vowel_index.reverse()\n    reversed_str = \"\"\n    for i in vowel_index:\n        reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    str2 = ''\n    for char in str1:\n        if char in vowels_set:\n            str2 = char + str2\n        else:\n            str2 = str2 + char\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in string:\n        if char in vowels and char.lower()!= 'y':\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    \n    for char in str1:\n        if char in vowels:\n            if len(reversed_str) == 0:\n                reversed_str = char\n            else:\n                reversed_str = char + reversed_str\n                \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = []\n    for char in str1:\n        if char in vowels:\n            reversed_str.append(char)\n    return ''.join(reversed_str)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_list = []\n    for item in tup1:\n        if isinstance(item, str):\n            string_list.append(item)\n        else:\n            string_list.append(str(item))\n    return \", \".join(string_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    :param tup1: Tuple to be converted to a string.\n    :type tup1: tuple\n    :return: A string representation of the input tuple.\n    :rtype: str\n    \"\"\"\n    string_rep = \"\"\n    for item in tup1:\n        string_rep += str(item) + \" \"\n    return string_rep.strip()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    # Return the string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = str(tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Join the elements of the tuple into a string\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        print(\"Invalid input.\")\n        return\n    elif n == 0:\n        return 0\n    else:\n        hexagonal_num_sum = 0\n        for i in range(1, n+1):\n            hexagonal_num_sum += (2*i-1)**2\n        return hexagonal_num_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Convert n to integer\n    n = int(n)\n    \n    # Initialize a variable to store the hexagonal number\n    hex_num = 0\n    \n    # Initialize a variable to store the number of rows\n    num_rows = 0\n    \n    # Loop until the required number of rows is reached\n    while num_rows < n:\n        # Loop through each row\n        for i in range(num_rows + 1):\n            # Calculate the current row number\n            row_num = (i + 1) // 2\n            \n            # Calculate the current hexagonal number\n            hex_num += (2 * row_num) - 1\n            \n            # If the current hexagonal number is equal to n, exit the loop\n            if hex_num == n:\n                return hex_num\n            \n            # If the current hexagonal number is greater than n, increment the row number\n            elif hex_num > n:\n                num_rows += 1\n                break\n        # If the required number of rows has been reached, exit the loop\n        if num_rows == n:\n            return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 0\n    b = 1\n    \n    while n > 0:\n        print(a)\n        a, b = b, a + b\n        n -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(n):\n        hex_num += (2*i + 1)\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(n+1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: if n is 1, return 1 (base case)\n    if n == 1:\n        return 1\n    \n    # Recursive case: sum of the previous two hexagonal numbers\n    return 2 * hexagonal_num(n-1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n    \"\"\"\n    hex_sum = 1\n    for i in range(1, n + 1):\n        hex_sum += i * i * 6\n    return hex_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(2*n-1))//2)+1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = 0\n    for i in range(n):\n        hex_num += 2 * i * (i + 1)\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = non_zero_count / zero_count[0]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize an array of non-zero integers\n    arr = array('i', [x for x in nums if x!= 0])\n    \n    # Calculate the count of non-zero integers\n    count = len(arr)\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = (count - sum(arr))/count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the list to an array\n    arr = array('i', nums)\n\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Loop through the array\n    for num in arr:\n\n        # Check if the number is zero\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Use an array to store the binary representation of each integer\n    arr = array('I', nums)\n\n    # Count the number of ones and zeros\n    ones = arr.count(1)\n    zeros = arr.count(0)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeros / (ones + zeros)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    non_zeros = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)+1] += 1\n        else:\n            non_zeros[non_zeros.index(num)+1] += 1\n\n    num_zeros = len(zeros)\n    num_non_zeros = len(non_zeros)\n\n    if num_zeros == 0:\n        return 0\n    else:\n        return num_non_zeros/num_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in arr:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    ratio = count_zeros / count_non_zeros if count_non_zeros!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(zero_count)\n    if non_zero_count == 0:\n        return 0\n    return sum(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n\n    if len(non_zeros) == 0:\n        return 0\n\n    zeros_ratio = len(zeros) / len(non_zeros)\n    return zeros_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    # Iterate through the list and count the number of zeroes and non-zeroes\n    for num in nums_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_non_zero_ratio = zero_count / non_zero_count\n    # Return the ratio as a float value\n    return float(zero_non_zero_ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    zero_to_non_zero_ratio = non_zero_count / zero_count\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(num):\n        \"\"\"\n        Helper function to check if a number is a power of two.\n        \"\"\"\n        return (num & (num - 1)) == 0\n\n    def count_set_bits(num):\n        \"\"\"\n        Helper function to count the number of set bits in a number.\n        \"\"\"\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count\n\n    # Check if the number is a power of two\n    if is_power_of_two(n):\n        # Check if the number can be written as sum of powers of 2\n        if count_set_bits(n) <= 1:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return False\n\n    # Calculate the sum of powers of 2 from 2 to sqrt(n)\n    power_of_two_sum = 0\n    for i in range(2, int(n**0.5) + 1):\n        power_of_two_sum += i\n\n    if power_of_two_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Iterate through all the bits of the binary representation of n\n    for i in range(32):\n        # Check if the ith bit is 1\n        if (n & (1 << i))!= 0:\n            # Calculate the power of 2 that is raised to the power of ith bit\n            power = 1 << i\n            # Check if the sum of the powers of 2 is equal to n\n            if (n - power) % power == 0:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1: \n        return False\n\n    # Check if n is a power of 2\n    if n & (n - 1)!= 0: \n        return False\n\n    # Find the sum of powers of 2\n    total = 0\n    while n > 0:\n        if n & 1 == 1:\n            total += n\n        n >>= 1\n\n    # Check if the sum is a power of 2\n    if total & (total - 1)!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # We will check if the given number can be represented as sum of powers of 2 or not\n    # If the number can be represented as sum of powers of 2, then we will return True\n    # If the number can not be represented as sum of powers of 2, then we will return False\n    \n    # If the number is 0, then it can not be represented as sum of powers of 2\n    if n == 0:\n        return False\n    \n    # If the number is 1, then it can be represented as sum of powers of 2\n    if n == 1:\n        return True\n    \n    # If the number is odd, then we will check if it can be represented as sum of powers of 2 or not\n    if n % 2 == 1:\n        # We will use a loop to check if the given number can be represented as sum of powers of 2 or not\n        for i in range(1, int(n/2)+1):\n            # If the given number can be represented as sum of powers of 2 then we will return True\n            if (n == 2**i) or (n == 2**i + 2**i):\n                return True\n        \n        # If the given number can not be represented as sum of powers of 2, then we will return False\n        return False\n    \n    # If the number is even, then we will check if it can be represented as sum of powers of 2 or not\n    if n % 2 == 0:\n        # We will use a loop to check if the given number can be represented as sum of powers of 2 or not\n        for i in range(1, int(n/2)+1):\n            # If the given number can be represented as sum of powers of 2 then we will return True\n            if (n == 2**i) or (n == 2**i + 2**i):\n                return True\n        \n        # If the given number can not be represented as sum of powers of 2, then we will return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is divisible by 2\n    if n % 2!= 0:\n        return False\n    \n    # Initialize variables\n    count = 0\n    total = 0\n    \n    # Traverse through all the bits of n\n    while n > 0:\n        # Check if bit is set\n        if n & 1 == 1:\n            # Check if total is greater than or equal to 2^(count)\n            if total >= 2**(count):\n                return False\n            else:\n                # Add 2^(count) to total and increment count\n                total += 2**(count)\n                count += 1\n        # Shift bits to right\n        n >>= 1\n        \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Define a function to check whether a number is power of 2 or not\n    def is_power_of_2(num):\n        return (num & (num-1)) == 0\n\n    # Define a function to check whether a number is sum of powers of 2 or not\n    def is_sum_of_powers_of_2(num):\n        return all(is_power_of_2(i) for i in range(1, num+1))\n\n    # Check if the number is power of 2\n    if is_power_of_2(n):\n        return True\n\n    # Check if the number is sum of powers of 2\n    if is_sum_of_powers_of_2(n):\n        return True\n\n    # Check if the number can be represented as sum of powers of 2\n    if n % 2 == 0:\n        return is_sum_of_powers_of_2(n/2)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether a given number can be represented as the sum of non-zero powers of 2 or not.\n    \"\"\"\n    for i in range(1, n+1):\n        if n == 2**i:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_powers_of_2 = 0\n\n    # Initialize a variable to keep track of the power of 2 in the number\n    power_of_2 = 1\n\n    # Loop until the power of 2 is less than or equal to the square root of the number\n    while power_of_2 <= int(n ** 0.5):\n        # Check if the power of 2 is present in the number\n        if n % power_of_2 == 0:\n            # If it is, add it to the sum of powers of 2\n            sum_powers_of_2 += power_of_2\n\n            # Check if the power of 2 is the last power of 2 in the number\n            if power_of_2 == int(n ** 0.5):\n                # If it is, check if the remaining part of the number can be represented as sum of powers of 2\n                if n % power_of_2 == 0:\n                    return True\n\n            # If it is not the last power of 2 in the number, reduce the number by the power of 2\n            n //= power_of_2\n\n        # Increment the power of 2 by 1\n        power_of_2 *= 2\n\n    # If no power of 2 can be found in the number, return False\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    return circumference\n\nprint(circle_circumference(5)) # Output: 31.4159265359"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # Formula for the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list += extract_singly(item)\n        elif isinstance(item, (int, float)):\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    flattened = []\n    for item in test_list:\n        if type(item) == list:\n            flattened.extend(extract_singly(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten(nested_list):\n        '''\n        Helper function to flatten the nested list.\n        '''\n        flattened_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flat_list = flatten(test_list)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Initialize an empty set to store the flattened list\n    flattened_set = set()\n\n    # Loop through each item in the test_list\n    for item in test_list:\n        # If the item is not a list, add it to the flattened_set\n        if not isinstance(item, list):\n            flattened_set.add(item)\n        # If the item is a list, recursively flatten it and add it to the flattened_set\n        else:\n            flattened_set.update(extract_singly(item))\n\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = [num for sublist in test_list for num in sublist]\n    return flatten_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Flatten the list using the chain() function from itertools\n    flat_list = list(chain.from_iterable(test_list))\n    # Remove duplicates using set() function from collections module\n    unique_list = list(set(flat_list))\n    return unique_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_index = i\n        for j in range(i-1, 0, -1):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the largest element\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # starting from the largest number, move it to the front of the list\n    for i in range(n-1, 0, -1):\n        # find the index of the smallest element in the remaining unsorted part of the list\n        min_idx = i\n        for j in range(i):\n            if nums[j] > nums[min_idx]:\n                min_idx = j\n        # swap the two elements\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n\n    # Bubble sort algorithm to sort the list\n    for i in range(len(nums)):\n        for j in range(0, len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n\n    # Reverse the sorted list to get the desired output\n    nums = nums[::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the element at the beginning of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the part of the list from i+1 to n-1\n        for j in range(i+1, n):\n            nums[i+1+j-i], nums[n-j-1] = nums[n-j-1], nums[i+1+j-i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] < pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1], nums[high] = nums[high], nums[i + 1]\n        return i + 1\n\n    def pancake_sort_helper(nums, low, high):\n        if low < high:\n            pivot_index = partition(nums, low, high)\n            pancake_sort_helper(nums, low, pivot_index - 1)\n            pancake_sort_helper(nums, pivot_index + 1, high)\n\n    pancake_sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the largest element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # reverse the unsorted part of the list\n        for j in range(i+1, n):\n            nums[j], nums[j-1] = nums[j-1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the maximum element in the list\n    max_val = max(nums)\n    # loop through each element in the list\n    for i in range(len(nums)):\n        # find the index of the maximum element in the unsorted section of the list\n        max_idx = nums.index(max_val)\n        # swap the maximum element with the first element of the unsorted section\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # find the new maximum element in the unsorted section of the list\n        max_val = max(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Initialize the maximum pancake size to the length of the list\n    max_pancake_size = n\n    \n    # Loop until the maximum pancake size becomes 1\n    while max_pancake_size > 1:\n        # Find the maximum element in the list\n        max_index = 0\n        for i in range(1, max_pancake_size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        \n        # Swap the maximum element with the last element in the list\n        nums[max_index], nums[max_pancake_size-1] = nums[max_pancake_size-1], nums[max_index]\n        \n        # Decrement the maximum pancake size\n        max_pancake_size -= 1\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    # Iterate through each element in the first list\n    for i in range(len(list1)):\n        # Check if the same element exists in the second list\n        if list1[i] in list2:\n            # Check if the same element exists in the third list\n            if list1[i] in list3:\n                count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and counts the number of items in the same position that are identical.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    num_lists = 0\n    for element in Input:\n        if type(element) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize max_diff to the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n    # Loop through the rest of the array\n    for i in range(2, len(arr)):\n        # Calculate the difference between the current and previous element\n        diff = abs(arr[i] - arr[i-1])\n        # Update max_diff if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Initialize the maximum difference to be the difference between the first two elements in the array\n    max_diff = abs(arr[1] - arr[0])\n    \n    # Loop through the array from the second element to the last element\n    for i in range(1, len(arr)-1):\n        # Calculate the absolute difference between the current element and the next element in the array\n        current_diff = abs(arr[i+1] - arr[i])\n        \n        # Update the maximum difference if the current difference is greater than the maximum difference\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = float('-inf') # Initialize max_diff to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j]) # Calculate absolute difference between elements\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0 # Initialize the maximum difference variable to 0\n    \n    # Loop through the array and calculate the difference between each adjacent pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j]) # Calculate the absolute difference between the two elements\n            if diff > max_diff: # If the difference is greater than the current maximum difference, update the maximum difference\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are 0\n    if a == 0 or b == 0:\n        return None\n\n    # check if n is divisible by a and b\n    if n % a == 0 and n % b == 0:\n        # calculate x and y\n        x = n // a\n        y = n // b\n\n        # check if x and y are positive integers\n        if x.is_integer() and y.is_integer() and x > 0 and y > 0:\n            return (x, y)\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Step 1: Check if the equation has only one solution\n    if a == 0 and b == 0:\n        return None\n\n    # Step 2: Find the two solutions\n    if a!= 0:\n        x1 = -b/a\n        x2 = n/a\n    else:\n        x1 = -n/b\n        x2 = n/b\n\n    # Step 3: Check if the two solutions satisfy the equation\n    if a*x1 + b*x2 == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use quadratic formula to find root of equation ax^2 + bx + c = 0\n    c = b*b - 4*a*n\n    if c < 0:\n        return None\n    elif c == 0:\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        x1 = (-b + (b*b - 4*a*n)**0.5)/(2*a)\n        x2 = (-b - (b*b - 4*a*n)**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # create two lists of possible solutions\n    xs = [x for x in range(-1000, 1001)]\n    ys = [y for y in range(-1000, 1001)]\n\n    # loop through all possible combinations of x and y\n    for x in xs:\n        for y in ys:\n            # check if the combination satisfies the equation\n            if a*x + b*y == n:\n                # return the combination as a tuple\n                return (x, y)\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (n // b, 0)\n    elif b == 0:\n        return (0, n // a)\n    else:\n        x1 = (n - b * b) / (2 * a)\n        y1 = x1 - b / a\n        x2 = (n + b * b) / (2 * a)\n        y2 = x2 - b / a\n        if x1 >= 0 and y1 >= 0 and x2 >= 0 and y2 >= 0 and x1 <= 1 and x2 <= 1 and y1 <= 1 and y2 <= 1:\n            return (int(x1), int(y1))\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Solve for x using the formula x = (-b +/- sqrt(b^2 - 4ac)) / (2a)\n    if a == 0:\n        return None\n    elif a > 0:\n        x1 = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n        return (int(x1), int(x2))\n    else:\n        x1 = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n        return (int(x2), int(x1))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a, b, and n are integers\n    if not all(isinstance(x, int) for x in (a, b, n)):\n        return None\n\n    # initialize variables\n    x = 0\n    y = 0\n    count = 0\n\n    # iterate through all values of x and y\n    while count < n:\n        # if the equation is true, return the values of x and y\n        if a * x + b * y == n:\n            return (x, y)\n        # if the equation is false, increment x and y\n        else:\n            x += 1\n            y += 1\n            count += 1\n\n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return (None, None)\n        else:\n            x = -n / b\n            y = 0\n            return (x, y)\n    else:\n        if b == 0:\n            y = -n / a\n            x = 0\n            return (x, y)\n        else:\n            x1 = -b / (a + b)\n            x2 = -b / (a - b)\n            y1 = x1\n            y2 = x2\n            if x1 == x2:\n                return (None, None)\n            else:\n                return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # check if a is invertible (i.e. b!= 0)\n    if b == 0:\n        return None\n    \n    # compute the discriminant (b^2 - 4*a*c)\n    c = n // b\n    disc = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if disc < 0:\n        return None\n    \n    # compute the two solutions (x1 and x2)\n    x1 = (-b + disc**0.5) // (2*a)\n    x2 = (-b - disc**0.5) // (2*a)\n    \n    # check if both solutions satisfy the equation\n    if x1*a + x2*b == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given equation has a solution\n    x_1 = (b**2 - 4*a*n) / (2*a)\n    x_2 = (-b**2 + 4*a*n) / (2*a)\n    # Check if both solutions exist and return the first one found\n    for x in [x_1, x_2]:\n        if x >= -n and x <= n:\n            return (int(x), n//x)\n    # If no solution found, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a new list to store the elements present in both the given lists\n    result_list = []\n    # loop through each element in the given list1\n    for element in list1:\n        # if the element is not present in list2, append it to the result_list\n        if element not in list2:\n            result_list.append(element)\n    # return the result_list\n    return result_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through each element in the first list\n    for item in list1:\n        # Check if the element is present in the second list\n        if item in list2:\n            # If it is, remove it from the first list\n            list1.remove(item)\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through each element in list2\n    for element in list2:\n        # Loop through each element in list1 and remove the element from list2 if present\n        for i in range(len(list1)):\n            if list1[i] == element:\n                list1.pop(i)\n                break"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Creating a new list to store the elements from list1 that are not present in list2.\n    new_list = [x for x in list1 if x not in list2]\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    where n is an even integer.\n    \"\"\"\n    if n % 2!= 0:\n        raise ValueError(\"n must be an even integer\")\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while i <= n // 2:\n        total += (n - 2 * i)\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n - 1\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2 * (n // 2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    i = 0\n    while i <= n // 2:\n        total += (n - 2 * i)\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_even_series(n)\n    else:\n        return sum_odd_series(n)\n\ndef sum_even_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n + 2 * (n // 2)\n\ndef sum_odd_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n + 2 * ((n - 1) // 2) + n - 2 * ((n - 1) // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2 * i)\n    return total_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0\n    for i in range(l):\n        area += s * (tan(pi/l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the value of half perimeter\n    h = s / l\n    \n    # calculate the value of half circumference\n    a = 2 * pi * h\n    \n    # calculate the value of area\n    area = l * (s + a) / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area * s / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area of a polygon given the number of sides and length of one side\n    area = (s * (s-1)) / 2 * l\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    n = l\n    r = (s / n) / 2\n\n    A = 0\n    for i in range(n):\n        A += tan(pi/n * i) * (s - r)\n\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += ((s * tan(pi/l))**2)\n    area *= (s**2)/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s * tan(2*pi/l)) ** 2\n    return area / (4 * tan(pi/l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Calculate the side length\n    side_length = s / l\n    \n    # Calculate the area using the formula for a regular polygon\n    area = (s * (s - side_length) * (s - 2 * side_length)) ** 0.5\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += 0.5 * s * tan((pi/l) * (i-1))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Formula for the area of a regular polygon\n    # area = (s * (s - 1) * tan(pi/l)) / 2\n    area = (s * (s - 1) * tan(pi/l)) / 2\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = sum(int(i) for i in str(n))\n    return divisors_sum == sum(math.factorial(i) for i in range(1, n+1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Get the divisors of n\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    \n    # Calculate the sum of the divisors\n    divisor_sum = sum(divisors)\n    \n    # Check if the sum of the divisors is the same as n\n    if divisor_sum == n:\n        print(\"The sum of the divisors of\", n, \"is\", divisor_sum)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not equal to\", divisor_sum)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n            \n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function takes an integer n as input and determines if the sum of the divisors of two integers\n    are the same or not.\n    \"\"\"\n    # find the sum of divisors of n\n    div_sum = sum(divisor for divisor in range(1, int(math.sqrt(n))+1) if n % divisor == 0)\n    # calculate the sum of n and its divisors\n    num_sum = sum(range(1, n+1))\n    # check if the sum of divisors is equal to the sum of n and its divisors\n    if div_sum == num_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(num):\n        \"\"\"\n        Helper function to calculate the sum of its divisors.\n        \"\"\"\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    div1, div2 = divmod(n, 2)\n    if div1 == 1:\n        div1 = 0\n\n    if div2 == 1:\n        div2 = 0\n\n    div_sum1 = sum_of_divisors(div1)\n    div_sum2 = sum_of_divisors(div2)\n\n    return div_sum1 == div_sum2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    # Function to calculate the sum of the divisors of a number\n    def sum_of_divisors(num):\n        divs = [1]\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divs.append(i)\n                if num // i!= i:\n                    divs.append(num // i)\n        return sum(divs)\n\n    # Check if the sum of the divisors of n is equal to the sum of the divisors of n - 1\n    if sum_of_divisors(n) == sum_of_divisors(n-1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = sum(range(1, n+1))\n    # Find the sum of the divisors of n+1\n    div_sum2 = sum(range(1, n+2))\n    # Compare the two sums and return the result\n    if div_sum == div_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while True:\n        if i * i > n:\n            break\n        if n % i:\n            i += 1\n        else:\n            break\n\n    while True:\n        if i * i > n:\n            break\n        if n % i:\n            i += 1\n        else:\n            break\n\n    if i * i == n:\n        print(\"The sum of the divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    \n    # get the list of divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    \n    # check if the sum of divisors is the same for both n and its negation\n    return sum(divisors) == n + n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    char_count = {}\n\n    for char in str1:\n        if char.isalpha():\n            # Convert the character to lowercase to make it case insensitive\n            lowercase_char = char.lower()\n            if lowercase_char in char_count:\n                char_count[lowercase_char] += 1\n            else:\n                char_count[lowercase_char] = 1\n\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character\n    count_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter (ignoring spaces and special characters)\n        if char.isalpha():\n            # If it is a letter, check if it is in the English alphabet (ignoring case)\n            if char in count_dict:\n                # If it is, increment the count in the dictionary\n                count_dict[char] += 1\n            else:\n                # If it is not, add it to the dictionary with a count of 1\n                count_dict[char] = 1\n\n    # Loop through each character in the English alphabet and count the number of occurrences in the string\n    count = 0\n    for i in range(ord('a'), ord('z') + 1):\n        # Convert the ASCII code to a character\n        char = chr(i)\n        # Check if the character is in the dictionary\n        if char in count_dict:\n            # If it is, increment the count\n            count += count_dict[char]\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n\n    # Iterate over each character in the string\n    for i in range(len(str1)):\n        # Get the current character\n        char = str1[i]\n\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # Increment the count for this character\n            char_count[char] += 1\n        else:\n            # Add the character to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # Initialize a counter variable to keep track of the number of unique characters\n    count = 0\n\n    # Iterate over each character in the dictionary\n    for char in char_count:\n        # If the character occurs at the same position in the English alphabet, increment the counter variable\n        if char == char_count[char]:\n            count += 1\n\n    # Return the number of unique characters that occur at the same position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower() == alphabet[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(i+97)] = 0\n    for char in str1.lower():\n        if char in count_dict:\n            count_dict[char] += 1\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # create a dictionary to store the count of each character in the English alphabet\n    alphabet_count = {}\n    for i in range(97, 123):\n        alphabet_count[chr(i)] = 0\n\n    # iterate through the string and increment the count of each character in the alphabet dictionary\n    for char in str1:\n        if char.isalpha():\n            index = ord(char.lower()) - 97\n            if index < 0 or index >= len(alphabet_count):\n                continue\n            alphabet_count[chr(index)] += 1\n\n    # return the count of each character in the alphabet dictionary\n    return alphabet_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # Iterate through the alphabet\n    for i in range(26):\n        # Check if the current character is already in the dictionary\n        if chr(i+97) in char_count:\n            # If it is, increment the count for that position\n            char_count[chr(i+97)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            char_count[chr(i+97)] = 1\n    # Iterate through the input string and count the number of characters at each position in the English alphabet\n    count = 0\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If it is, increment the count for that position\n            count += char_count[char]\n    # Return the total count of characters\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Iterate over all characters in the string\n    for i, char in enumerate(str1):\n        # If the character is a vowel, add 1 to the count for its position in the English alphabet\n        if char.lower() in 'aeiou':\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower() == alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of each character in the English alphabet (case insensitive)\n    english_alphabet = {chr(i).lower(): i for i in range(ord('a'), ord('z')+1)}\n\n    # Create an empty dictionary to store the count of each character at the same position in the string\n    result = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # Check if the character is a lowercase English letter\n        if char.lower() in english_alphabet:\n            # If it is, check if it is already in the result dictionary\n            if char in result:\n                # If it is, increment the count\n                result[char] += 1\n            else:\n                # If it isn't, add the character and count to the result dictionary\n                result[char] = 1\n\n    # Return the count of each character at the same position in the string\n    return result"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and i!= j:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return None\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    # find the next power of 2 using binary exponentiation\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the next power of 2 greater than or equal to that number.\n    '''\n    # Convert n to a binary string and pad with leading 0's to make it 32 bits\n    binary_string = bin(n)[2:].zfill(32)\n\n    # Convert the binary string to an integer and shift it to the right by 1 bit\n    exponent = int(binary_string, 2) >> 1\n\n    # Combine the integer exponent with a 1 in the least significant bit\n    exponent |= 1\n\n    # Convert the integer exponent back to binary and pad with leading 0's to make it 32 bits\n    exponent_binary = bin(exponent)[2:].zfill(32)\n\n    # Convert the binary exponent to an integer and add it to the original number\n    next_power_of_2 = int(binary_string, 2) + int(exponent_binary, 2)\n\n    return next_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a flag variable to keep track of whether n is a power of 2 or not.\n    is_power_of_2 = True\n    \n    # Loop through all the integers between 1 and n/2.\n    for i in range(1, n//2+1):\n        # Check if n is a power of 2 or not.\n        if n % i == 0:\n            is_power_of_2 = False\n            break\n    \n    # If n is a power of 2, return n itself.\n    if is_power_of_2:\n        return n\n    \n    # Otherwise, loop through all the integers between 2 and n/2.\n    for i in range(2, n//2+1):\n        # Check if n is a power of 2 or not.\n        if n % i == 0:\n            is_power_of_2 = True\n            break\n    \n    # If n is a power of 2, return n itself.\n    if is_power_of_2:\n        return n\n    \n    # Otherwise, return the next power of 2 greater than or equal to n.\n    return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**int(math.log2(n))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize power to 1\n    power = 1\n    \n    # loop while power is less than or equal to n\n    while power <= n:\n        # increment power\n        power <<= 1\n    \n    # return power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n    n: An integer value.\n\n    Returns:\n    The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return n.\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the smallest power of 2 that is greater than or equal to n.\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Return the power.\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use a bitwise AND operation to find the least significant bit set to 1 in n.\n    # The result is the number of times we need to multiply n by 2 to get the next power of 2.\n    pow2_bits = n & -n\n    \n    # Use a bitwise right shift operation to find the next power of 2.\n    # We multiply pow2_bits by 2 and then add 1 to get the result.\n    result = pow2_bits * 2 + 1\n    \n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 2\n    else:\n        return 2**(int(log2(n))+1)\n\n\ndef log2(n):\n    '''\n    Write a python function to calculate the base-2 logarithm of a number.\n    '''\n    return int(log(n, 2))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary and count the number of set bits\n    bits = sum(int(digit) for digit in bin(n)[2:])\n    # Calculate the exponent of 2 raised to the power of the number of set bits\n    exponent = bits - 1\n    # Calculate the next power of 2\n    next_power = 1 << exponent\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # find the smallest power of 2 greater than or equal to n\n        power = 1\n        while power <= n:\n            power *= 2\n        # return the smallest power of 2 greater than or equal to n\n        return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the input list is empty\n    if not list1:\n        return 0\n\n    # Initialize the sum variable to 0\n    sum_value = 0\n\n    # Iterate through the list using a for loop\n    for i in range(m, n + 1):\n        # Check if the current index is within the range\n        if i >= len(list1):\n            break\n        sum_value += list1[i]\n\n    return sum_value\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Define a function to check if the given index is valid\n    def is_valid_index(index):\n        return (index >= 0 and index < len(list1))\n\n    # Initialize variables for sum and current index\n    sum = 0\n    index = m\n\n    # Check if the given range is valid\n    if not is_valid_index(m) or not is_valid_index(n):\n        return \"Invalid range\"\n\n    # Add numbers from the given range to the sum\n    while index <= n:\n        sum += list1[index]\n        index += 1\n\n    # Return the sum of numbers in the given range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j+1] for i, j in zip(range(m, n+1), range(m, n+1)))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"The starting index should be less than the ending index.\"\n    elif n > len(list1):\n        return \"The ending index should be less than or equal to the length of the list.\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid range\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1) or m > n:\n        return 'Invalid range'\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of the pentagon using the formula for the perimeter of a right-angled triangle\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a) / 4\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Define the radius of the pentagon\n    r = a/2\n    # Use the Pythagorean theorem to calculate the length of each side of the pentagon\n    s = math.sqrt(5)*a\n    # Use the formula for the perimeter of a regular polygon to calculate the perimeter of the pentagon\n    perimeter = 5*s + 5*r + 5*r\n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = 5 * a\n    return math.sqrt(s * (s - a * math.tan(math.pi / 5)) / (2 * a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n\n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element's data type is same as the first element\n        if type(element)!= first_element:\n            return False\n\n    # if the loop completes without returning False, it means all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the tuple is empty\n    if not test_tuple:\n        return False\n    # get the type of the first element of the tuple\n    first_element_type = type(test_tuple[0])\n    # loop through all the elements of the tuple\n    for element in test_tuple:\n        # if any element is not of the same type as the first element, return False\n        if type(element)!= first_element_type:\n            return False\n    # if all the elements are of the same type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    data_type = type(test_tuple[0])\n\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize a count variable to keep track of the frequency of x\n    count = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n            \n    # Return True if the count is greater than or equal to n/2, False otherwise\n    return count >= n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize a counter and a count variable\n    counter = 0\n    count = 0\n\n    # Iterate through the array\n    for i in arr:\n\n        # If the current element is equal to the target element, increment the count\n        if i == x:\n            count += 1\n\n        # If the count is greater than n/2, return True\n        if count > n // 2:\n            return True\n\n        # If the current element is less than the target element, decrement the count\n        else:\n            count -= 1\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables\n    count = 0\n    majority = False\n\n    # Traverse the array\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == n//2:\n            majority = True\n            break\n\n    return majority"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in that number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    # Initialize count variable\n    count = 0\n\n    # Convert input number to binary string\n    binary_str = bin(n)[2:]\n\n    # Loop through each binary digit and count the set bits\n    for digit in binary_str:\n        if digit == '1':\n            count += 1\n\n    # Return count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the even-indexed characters\n    even_str = ''\n    # iterate over the characters in the given string\n    for char in str:\n        # if the index value of the character is odd, append it to the even_str\n        if str.index(char) % 2 == 1:\n            even_str += char\n    # return the even_str as the output\n    return even_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_values.append(str[i])\n    return \"\".join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = [i for i in range(len(str)) if i % 2!= 0]\n    return ''.join([str[i] for i in odd_index_values])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(string):\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Loop through the list and remove characters with odd index values\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            char_list.pop(i)\n    \n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Finding the minimum of the three numbers\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, min(b, c))"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes in three numbers and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the number of unset bits in the range\n    unset_bits = 0\n\n    # Iterate through the bits of n from l to r and check if all the bits are set or not\n    for i in range(l, r + 1):\n        # Check if the i-th bit is 1 or not\n        if n & (1 << i):\n            # If the bit is 1, increment the unset_bits variable\n            unset_bits += 1\n            # If the unset_bits variable becomes greater than 1, return False\n            if unset_bits > 1:\n                return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l,r+1):\n        if n & (1<<i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the input values to binary strings\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n\n    # find the number of unset bits in the binary strings\n    unset_bits = len(n) - len(set(n) & set(l)) - len(set(n) & set(r))\n\n    # check if the number of unset bits is equal to 0\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert n to binary string\n    n_binary = bin(n)[2:]\n    # Get the length of the binary string\n    n_binary_length = len(n_binary)\n    # Calculate the number of bits between l and r (inclusive)\n    n_bits_between_l_and_r = (r - l) + 1\n    # Calculate the maximum number of bits that can be set to 1\n    max_bits_to_set = min(n_bits_between_l_and_r, n_binary_length)\n    # Check if all the bits are set to 1\n    all_bits_set = all(n_binary[i] == '1' for i in range(max_bits_to_set))\n    # Return the result\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if all bits are set or unset in the given range\n    count = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            count += 1\n        else:\n            count -= 1\n    return (count == 0)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << r) - 1 # mask for upper r bits\n    if l & mask == 0: # check if lth bit is unset\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to binary string\n    binary_range = bin(l)[2:] + '-' + bin(r)[2:]\n\n    # Initialize an empty list to store the unset bits\n    unset_bits = []\n\n    # Iterate through each bit in the binary range\n    for i in range(len(binary_range)):\n\n        # Check if the current bit is set or unset\n        if binary_range[i] == '1':\n            unset_bits.append(i)\n\n    # Check if all the bits are unset in the given range\n    if len(unset_bits) == 0:\n        return 'All bits are unset in the given range.'\n    else:\n        return 'The given range contains unset bits.'"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a variable to keep track of the unset bits\n    unset_bits = 0\n\n    # Loop through the range of bits\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if (n >> i) & 1 == 1:\n            # If it's set, add the corresponding power of 2 to the unset_bits variable\n            unset_bits += 1 << i\n\n    # Check if all the bits are unset\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        print(\"Input should be a positive integer.\")\n        return\n\n    # Check if l and r are positive integers and l <= r\n    if type(l)!= int or type(r)!= int or l <= 0 or r <= 0 or l > r:\n        print(\"Input should be positive integers greater than 0 and l <= r.\")\n        return\n\n    # Calculate the difference between r and l\n    diff = r - l\n\n    # Iterate through the bits from left to right\n    for i in range(diff, -1, -1):\n        # If the i-th bit is 1, return False\n        if (n & (1 << i)) == (1 << i):\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the result\n    result = True\n\n    # Iterate over all bits in the range\n    for i in range(l, r+1):\n        # If a bit is set, set the result to False\n        if n & (1 << i):\n            result = False\n\n    # Return the result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_index = []\n    pos_index = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index.append(i)\n        else:\n            pos_index.append(i)\n    for i in range(n):\n        if i in neg_index:\n            arr[i], arr[neg_index.index(i)] = arr[neg_index.index(i)], arr[i]\n        elif i in pos_index:\n            arr[i], arr[pos_index.index(i)] = arr[pos_index.index(i)], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    neg_start = 0\n    pos_start = 0\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n            if neg_count == 1:\n                neg_start = i\n        elif arr[i] > 0:\n            pos_count += 1\n            if pos_count == 1:\n                pos_start = i\n\n    if neg_start < 0:\n        neg_start = 0\n\n    if pos_start < 0:\n        pos_start = 0\n\n    arr[neg_start:pos_start] = sorted(arr[neg_start:pos_start])\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the index of each element\n    index_dict = {}\n    for i, x in enumerate(arr):\n        index_dict[x] = i\n    \n    # sort the dictionary by value (i.e., index) in ascending order\n    sorted_dict = dict(sorted(index_dict.items()))\n    \n    # re-arrange the first n elements of the array\n    result = []\n    for i in range(n):\n        if i in sorted_dict:\n            result.append(arr[sorted_dict[i]])\n        else:\n            result.append(arr[i])\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[n+i] = arr[n+i], arr[i]\n            i += 1\n        else:\n            i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create a dictionary to store the negative and positive elements\n    neg_dict = {}\n    pos_dict = {}\n    \n    # Iterate over the array and add the negative and positive elements to their respective dictionaries\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            if arr[i] in neg_dict:\n                neg_dict[arr[i]].append(i)\n            else:\n                neg_dict[arr[i]] = [i]\n        else:\n            if arr[i] in pos_dict:\n                pos_dict[arr[i]].append(i)\n            else:\n                pos_dict[arr[i]] = [i]\n    \n    # Create an empty list to store the re-arranged elements\n    result = []\n    \n    # Iterate over the first n elements of the array and add them to the result list\n    for i in range(n):\n        if i in neg_dict:\n            result.extend(neg_dict[i])\n        else:\n            result.append(pos_dict[i][0])\n            result.extend(pos_dict[i][1:])\n    \n    # Iterate over the remaining elements in the array and add them to the result list in the correct order\n    for i in range(len(arr)-n):\n        if arr[i] < 0:\n            if arr[i] in neg_dict:\n                result.extend(neg_dict[arr[i]])\n            else:\n                result.append(arr[i])\n        else:\n            if arr[i] in pos_dict:\n                result.extend(pos_dict[arr[i]])\n            else:\n                result.append(arr[i])\n    \n    # Return the re-arranged array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Separate the positive and negative elements\n    positive_elements = [x for x in arr[:n] if x >= 0]\n    negative_elements = [x for x in arr[:n] if x < 0]\n\n    # Sort the positive and negative elements\n    positive_elements.sort()\n    negative_elements.sort(reverse=True)\n\n    # Concatenate the positive and negative elements\n    re_arr = positive_elements + negative_elements\n\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two empty lists to hold the positive and negative elements\n    pos = []\n    neg = []\n\n    # iterate over the input array and append elements to their respective lists\n    for element in arr:\n        if element >= 0:\n            pos.append(element)\n        else:\n            neg.append(element)\n\n    # sort the positive and negative lists in ascending order\n    pos.sort()\n    neg.sort()\n\n    # combine the sorted positive and negative lists into a single list\n    combined = pos + neg\n\n    # iterate over the combined list and copy elements to the output array\n    for i in range(n):\n        arr[i] = combined.pop(0)\n\n    # return the output array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # create an empty list to store the negative elements\n    neg_list = []\n    \n    # iterate over the array and add negative elements to the neg_list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n            \n    # iterate over the array and add positive elements to the array in their original order\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            arr[i-n] = arr[i]\n            \n    # iterate over the neg_list and add them to the end of the array\n    for i in range(len(neg_list)):\n        arr[i+n] = neg_list[i]\n            \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = [x for i, x in enumerate(arr[:n]) if x < 0]\n    pos = [x for i, x in enumerate(arr[:n]) if x >= 0]\n    return neg + pos + arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n    \n    # Iterate over the array and add negative and positive elements to their respective lists\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    # Sort negative elements in reverse order and then append them to the positive list\n    negative.sort(reverse=True)\n    positive += negative\n    \n    # Return the re-arranged array\n    return positive"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace all blank spaces in the string with the character\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if c =='' else c for c in str1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # get the first n elements of the sorted list\n    return sorted_list[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -heapq.heappushpop(list1))\n    # Extract the n largest items from the min heap\n    return [-heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[i] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i]) # convert the list to a min heap and push the negative values to the heap\n\n    # Remove and return the largest n items from the heap\n    for i in range(n, len(list1)):\n        if list1[i] >= -heap[0]: # if the next element is greater than or equal to the smallest element in the heap\n            heapq.heappush(heap, -list1[i]) # push the next element to the heap and maintain the heap property\n        else:\n            heapq.heappop(heap) # remove the smallest element from the heap and maintain the heap property\n\n    # Convert the heap back to a list\n    result = []\n    for i in range(n):\n        result.append(heap[0]) # append the smallest element to the result list\n        heapq.heappop(heap) # remove the smallest element from the heap and maintain the heap property\n\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use max heap to store n largest elements\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Convert max heap to a list and return it\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Using max-heap to store the n largest items\n    max_heap = []\n    for item in lst:\n        heapq.heappush(max_heap, item)\n        # If the size of the heap exceeds n, remove the smallest item from the heap\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the list containing the n largest items from the list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Creating a min heap to store the n largest elements\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n    \n    # Popping the elements from the heap and appending to the result list\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n    \n    # Reverse the result list to get the n largest elements\n    return result[::-1]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and get the largest n items\n    largest_n_items = heapq.nlargest(n, set(list1))\n    return list(largest_n_items)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[i] for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    # calculate the lateral surface area of the cylinder\n    area = 2 * r * h\n    \n    # return the lateral surface area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h + 2*r*r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 2*r*h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * (r+h)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    lateral_surface_area = 2 * math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1 << (n % 32) # set the even bit to 1\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result \n    result = 0\n    \n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # If it is even, set the corresponding bit in the result to 1\n            result |= 1 << i\n            \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n\n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append it to the even_bits list\n        if int(bit) == 0:\n            even_bits.append(0)\n        else:\n            even_bits.append(1)\n\n    # Convert the even_bits list to an integer\n    even_bits_integer = int(''.join(str(bit) for bit in even_bits), 2)\n\n    # Return the even_bits_integer\n    return even_bits_integer"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Traverse through each bit of the given number\n    for i in range(32):\n        # Get the current bit of the number\n        bit = n & 1\n\n        # If the current bit is even, set it in the result variable\n        if bit == 0:\n            result |= 1 << i\n\n        # Shift the number to the right by 1 bit\n        n >>= 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0:\n        if n & 1 == 0:\n            result |= 1 << (n & -1)\n        n >>= 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits\n    even_bits = []\n    \n    # Iterate through each bit of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n & (1 << i)) == 0:\n            # If not, add it to the even_bits list\n            even_bits.append(0)\n        else:\n            # If it is, add it to the even_bits list\n            even_bits.append(1)\n            \n    # Join the even_bits list into a single integer\n    even_bits_int = int(\"\".join(map(str, even_bits)), 2)\n    \n    # Return the even_bits_int\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n!= 0:\n        if n & 1 == 0:\n            result |= 1 << (n & 1)\n        n >>= 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result \n    result = 0\n    # loop through each bit of the number \n    for i in range(32):\n        # check if the i-th bit is even \n        if (n & (1 << i)) > 0:\n            # if it is even, set the corresponding bit in the result \n            result |= (1 << i)\n    # return the result \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty set to store the even bits\n    even_bits = set()\n\n    # Iterate over each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, add it to the set of even bits\n        if bin(n)[2:].count('0') % 2 == 0:\n            even_bits.add(2 ** i)\n\n    # Return the sum of the even bits\n    return sum(even_bits)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(16):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter class to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter()\n    for tup in test_list:\n        counts[tup] += 1\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n\n    # Convert the Counter object to a dictionary of tuples and counts\n    result = dict(counter)\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize a dictionary to store the occurrence count of each tuple\n    counts = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if tup in counts:\n            counts[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n    \n    # Return the dictionary of occurrence counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n\n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the unique tuples and their occurrences\n    count_dict = {}\n    \n    # Iterate through the list of tuples and update the count_dict\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n    \n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    # Initialize count variable\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Loop through each possible ending index for the current substring\n        for j in range(i+1, len(str)+1): \n            # Check if the current substring is not empty\n            if str[i:j]!= '': \n                # Increment count variable by 1\n                count += 1\n                \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    # Initialize a counter variable to keep track of the number of substrings\n    count = 0\n    # Loop through all possible substrings of the given string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is non-empty and add it to the count if it is\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize variables to count non-empty substrings\n    non_empty_count = 0\n    length = len(str)\n\n    # Iterate through each character in the string\n    for i in range(length):\n        # Check if the current character is a letter or number\n        if str[i].isalpha() or str[i].isdigit():\n            # Initialize variables to count the current substring\n            count = 0\n            start = i\n\n            # Iterate through the remaining characters in the substring\n            while i < length:\n                if str[i].isalpha() or str[i].isdigit():\n                    count += 1\n                else:\n                    break\n                i += 1\n\n            # If the count is greater than zero, increment the non-empty count\n            if count > 0:\n                non_empty_count += 1\n\n    return non_empty_count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j]!= '': \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the counter variable\n    count = 0\n\n    # Iterate over all possible sequences of length n\n    for i in range(1, n+1):\n        # Initialize the current sequence to be the first element\n        current_seq = [i]\n\n        # Iterate over all possible previous elements in the sequence\n        for j in range(1, len(current_seq)):\n            # Compute the current element in the sequence\n            current_element = current_seq[j-1] + current_seq[j]\n\n            # Check if the current element is valid and within the range\n            if 2*current_element <= m and current_element <= m:\n                # Add the current sequence to the count\n                count += 1\n\n                # Add the current element to the sequence\n                current_seq.append(current_element)\n\n        # Add the current sequence to the count\n        count += 1\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m + 1):\n        for j in range(2, n + 1):\n            if i >= 2 * j and i <= m:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all possible sequences of length n\n    for i in range(2, m+1):\n        # Check if each element is a positive integer and greater than or equal to twice the previous element\n        if i >= 2 * (n-1):\n            # Add 1 to the count variable\n            count += 1\n    \n    # Return the count variable\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m + 1):\n        for j in range(i, m + 1, i):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2:\n        return 0\n    total = 0\n    for i in range(2, m + 1):\n        total += (n - 1) // (i - 1)\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    current_sequence = [2]\n    for i in range(2, n):\n        if current_sequence[-1] + 2 <= m:\n            current_sequence.append(current_sequence[-1] + 2)\n        else:\n            current_sequence = [current_sequence[-1] + 2]\n        count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the total number of sequences to 0\n    total_sequences = 0\n\n    # Loop through each element from m to n\n    for i in range(m, n + 1):\n        # Initialize a variable to keep track of the number of sequences of length n\n        count = 0\n\n        # Loop through each element from i to n\n        for j in range(i, n + 1):\n            # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            if j >= 2 * i <= m:\n                # Increment the count if it is\n                count += 1\n\n        # Multiply the count by the number of sequences of length i-1\n        total_sequences += count * (i - 1)\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m + 1):\n        if i % 2 == 1:\n            count += get_number_of_sequences_with_element(i, n)\n    return count\n\n\ndef get_number_of_sequences_with_element(element, n):\n    count = 0\n    for i in range(element, m + 1, element):\n        if i <= m and i % 2 == 0:\n            count += 1\n    return count\n\n\nm = 20\nn = 2\nprint(get_total_number_of_sequences(m, n))"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(m, n+1):\n        if i % 2 == 1:\n            total += get_number_of_sequences(i, m)\n    return total\n\n\ndef get_number_of_sequences(n, m):\n    count = 0\n    for i in range(2, m+1):\n        if i <= n // 2 and i % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        if i == 0:\n            if m % 2 == 0:\n                count += (m - 2) // 2\n            else:\n                count += (m - 1) // 2\n        else:\n            count += (m - (2 * i)) // 2\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    list2[-1] = last_element\n    return list1, list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1.append(list2[-1])\n        list2.pop()\n    else:\n        list2.append(list1[-1])\n        list1.pop()\n    return list1, list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n    \n    # loop through the first list and replace the last element with the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = list2[0]\n        list2 = list2[1:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n\n    # Determine the length of the first list\n    length = len(list1)\n\n    # Loop through the first list from the end to the second element\n    for i in range(length-2, -1, -1):\n        # Replace the last element of the first list with the elements of the second list\n        list1[i] = list2[i]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # create an empty list to store the combined list\n    combined_list = []\n    # loop through each element in the first list\n    for element in list1:\n        # append the element to the combined list\n        combined_list.append(element)\n    # loop through each element in the second list and append it to the combined list\n    for element in list2:\n        combined_list.append(element)\n    # set the last element of the combined list to be the last element of the first list\n    combined_list[-1] = list1[-1]\n    # return the combined list\n    return combined_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Loop through the first list and replace the last element with the elements of the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2 = list2[1:]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    while True:\n        root += 1\n        sq = root * root\n        if sq > N:\n            return sq\n        elif sq == N:\n            return sq\n        else:\n            continue"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # take square root of N\n    sqrt_N = math.sqrt(N)\n    # subtract 1 from sqrt_N\n    sqrt_N = sqrt_N - 1\n    # check if sqrt_N is an integer\n    if sqrt_N.is_integer():\n        # if it is an integer, add 1 to sqrt_N\n        sqrt_N = sqrt_N + 1\n    # multiply sqrt_N by itself and add 1\n    next_sqrt = sqrt_N * sqrt_N + 1\n    # check if next_sqrt is greater than N\n    if next_sqrt > N:\n        # if it is, return the square root of next_sqrt\n        return math.sqrt(next_sqrt)\n    else:\n        # if not, return next_sqrt\n        return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # function to check if a number is a perfect square or not\n    def is_perfect_square(num):\n        return num == int(num**0.5)**2\n\n    # function to find the next perfect square greater than a given number\n    def next_square(num):\n        if is_perfect_square(num):\n            return num + 1\n        else:\n            i = 1\n            while True:\n                square = num + (i**2)\n                if is_perfect_square(square):\n                    return square\n                else:\n                    i += 1\n\n    # call the function to find the next perfect square greater than N\n    next_square_greater_than_N = next_square(N)\n\n    # print the result\n    print(\"The next perfect square greater than\", N, \"is\", next_square_greater_than_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n    # Initialize variables\n    left = 1\n    right = N\n    result = None\n\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Use binary search to find the next perfect square greater than sqrt_N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid > N:\n            # If the middle square is greater than N, then we need to find the next perfect square\n            if mid + 1 <= sqrt_N:\n                result = mid + 1\n            else:\n                # If the middle square is greater than sqrt_N but less than or equal to sqrt_N, then we need to find the next perfect square greater than sqrt_N\n                result = int(math.sqrt(N)) + 1\n            break\n        else:\n            # If the middle square is less than or equal to N, then we need to find the next perfect square greater than N\n            result = mid\n            break\n\n    return result"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # initialize variables\n    curr_num = N\n    next_num = curr_num\n    \n    # find the closest square number to the current number\n    while curr_num**2 <= next_num <= N:\n        curr_num = (curr_num + next_num) // 2\n        next_num = curr_num + 1\n    \n    # check if the next number is greater than the given number\n    if next_num > N:\n        return next_num\n    \n    # if the next number is less than the given number, find the closest perfect square number greater than the given number\n    else:\n        while next_num**2 <= N:\n            next_num = (curr_num + next_num) // 2\n        return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Get the square root of the input number\n    sqrt_N = math.sqrt(N)\n    # Calculate the next perfect square using the formula for the next prime number\n    next_prime = math.isqrt(sqrt_N) + 1\n    # Calculate the square of the next prime number\n    square_next_prime = next_prime ** 2\n    # Check if the square of the next prime number is greater than the input number\n    if square_next_prime > N:\n        # Return the next perfect square greater than the input number\n        return next_prime\n    else:\n        # Otherwise, calculate the square root of the input number\n        sqrt_N = math.sqrt(N)\n        # Calculate the next perfect square using the formula for the next prime number\n        next_prime = math.isqrt(sqrt_N) + 1\n        # Calculate the square of the next prime number\n        square_next_prime = next_prime ** 2\n        # Return the square of the next prime number\n        return square_next_prime"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N)) + 1\n    return int(sqrtN * sqrtN)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    root = math.sqrt(N)\n    # round the square root to the nearest integer\n    root = int(root + 0.5)\n    # calculate the next perfect square by doubling the root\n    next_square = root*root\n    # check if the next perfect square is greater than N\n    while next_square > N:\n        root += 1\n        # calculate the next perfect square by doubling the root\n        next_square = root*root\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if the given number is greater than 1\n    if N <= 1:\n        return 2\n\n    # Initialize a variable to store the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Initialize a variable to store the minimum integer greater than the square root of the given number\n    next_sqrt = math.ceil(sqrt_N)\n\n    # Check if the square of the minimum integer greater than the square root of the given number is greater than the given number\n    if next_sqrt * next_sqrt > N:\n        return next_sqrt + 1\n\n    # Otherwise, return the minimum integer greater than the square root of the given number\n    else:\n        return next_sqrt\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_sqrt_N = sqrt_N + 1\n\n    return int(next_sqrt_N**2)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    # Find the maximum subsequence sum that is increasing or decreasing\n    max_sum = float('-inf')\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_sum = max(max_sum, arr[i] + arr[i - 1])\n        else:\n            max_sum = max(max_sum, arr[i - 1] + arr[i])\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    if arr[0] < arr[1]:\n        return max_sum_increasing(arr[1:])\n    else:\n        return max_sum_decreasing(arr[1:])\n\ndef max_sum_increasing(arr):\n    '''\n    Write a function that takes an increasing array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    if arr[0] < arr[1]:\n        return arr[0] + max_sum_increasing(arr[1:])\n    else:\n        return arr[n-1] + max_sum_increasing(arr[:n-2])\n\ndef max_sum_decreasing(arr):\n    '''\n    Write a function that takes a decreasing array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    if arr[0] < arr[1]:\n        return max_sum_decreasing(arr[1:])\n    else:\n        return arr[0] + max_sum_decreasing(arr[1:])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    if n < 3:\n        return 0\n\n    left = 0\n    right = n - 1\n\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return arr[left]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    dp = [0] * n\n    \n    # Initialize the first row of dp\n    for i in range(n):\n        if i == 0 or arr[i-1] < arr[i]:\n            dp[i] = arr[i]\n        else:\n            dp[i] = dp[i-1] + arr[i]\n    \n    # Calculate the rest of dp\n    for i in range(n-2, -1, -1):\n        if i == n-3 or arr[i+1] > arr[i+2]:\n            dp[i] = max(dp[i], dp[i+1])\n        else:\n            dp[i] = max(dp[i], dp[i+1] + arr[i+2])\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(n):\n        if arr[i] < dp[i]:\n            max_sum = max(max_sum, dp[i])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    dp = [[0] * 2 for _ in range(n)] # dp[i][0] stores the maximum sum of a decreasing subsequence ending at index i, and dp[i][1] stores the maximum sum of an increasing subsequence ending at index i\n    \n    # Compute dp[i][0] for decreasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i][0] = max(dp[i][0], dp[j][0] + arr[i])\n            else:\n                dp[i][0] = max(dp[i][0], dp[j][1] - arr[i])\n                \n    # Compute dp[i][1] for increasing subsequences\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[j] > arr[i]:\n                dp[i][1] = max(dp[i][1], dp[j][0] + arr[i])\n            else:\n                dp[i][1] = max(dp[i][1], dp[j][1] - arr[i])\n                \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, dp[i][0] + dp[i][1])\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Initialize variables\n    inc = 0\n    dec = 0\n    max_sum = 0\n    \n    # Traverse through the array\n    for i in range(n):\n        # If the element is increasing, add it to the sum of increasing subsequence\n        if i == 0 or arr[i] > arr[i-1]:\n            inc += arr[i]\n        else:\n            # If the element is decreasing, add it to the sum of decreasing subsequence\n            dec += arr[i]\n        # Update the maximum sum\n        max_sum = max(max_sum, inc - dec)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize two pointers - left and right - to the first and last elements of the array, respectively\n    left = 0\n    right = n - 1\n    # Initialize two variables - max_left and max_right - to store the maximum sum of a left and right subsequence\n    max_left = max_right = arr[left]\n    # Initialize a variable - sum - to store the current sum of a subsequence\n    sum = 0\n    # Traverse through the array from left to right\n    for i in range(1, n):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # If it's increasing, add it to the current sum\n            sum += arr[i]\n        else:\n            # If it's decreasing, subtract the current element from the current sum\n            sum -= arr[i]\n        # Update the maximum sum of the left subsequence\n        if sum > max_left:\n            max_left = sum\n        # Update the maximum sum of the right subsequence\n        if sum - arr[i] > max_right:\n            max_right = sum - arr[i]\n    # Return the maximum sum of a bitonic subsequence\n    return max(max_left, max_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # check if the array is already bitonic\n    if is_bitonic(arr):\n        return bitonic_max_sum(arr)\n    # check if the array is already non-decreasing\n    if is_non_decreasing(arr):\n        return non_decreasing_max_sum(arr)\n    # check if the array is already non-increasing\n    if is_non_increasing(arr):\n        return non_increasing_max_sum(arr)\n    # if the array is neither bitonic, non-decreasing or non-increasing, we need to find the maximum subsequence of increasing and decreasing numbers and then find the maximum sum of the subsequence\n    max_sum_increasing = non_decreasing_max_sum(arr)\n    max_sum_decreasing = non_increasing_max_sum(arr)\n    max_sum_bitonic = max_sum_increasing + max_sum_decreasing\n    return max_sum_bitonic\n\ndef is_bitonic(arr):\n    \"\"\"\n    Check if the given array is bitonic or not. A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef is_non_decreasing(arr):\n    \"\"\"\n    Check if the given array is non-decreasing or not. A sequence is non-decreasing if the elements are in non-decreasing order.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n\ndef is_non_increasing(arr):\n    \"\"\"\n    Check if the given array is non-increasing or not. A sequence is non-increasing if the elements are in non-increasing order.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True\n\ndef non_decreasing_max_sum(arr):\n    \"\"\"\n    Find the maximum subsequence of increasing numbers in the given array.\n    \"\"\"\n    max_sum_increasing = 0\n    max_sum_ending_at_i = 0\n    for i in range(len(arr)):\n        max_sum_ending_at_i = max(max_sum_ending_at_i + arr[i], 0)\n        max_sum_increasing = max(max_sum_increasing, max_sum_ending_at_i)\n    return max_sum_increasing\n\ndef non_increasing_max_sum(arr):\n    \"\"\"\n    Find the maximum subsequence of decreasing numbers in the given array.\n    \"\"\"\n    max_sum_decreasing = 0\n    max_sum_ending_at_i = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_sum_ending_at_i = max(max_sum_ending_at_i + arr[i], 0)\n        max_sum_decreasing = max(max_sum_decreasing, max_sum_ending_at_i)\n    return max_sum_decreasing"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    prev = float('-inf')  # initialize prev to negative infinity\n    for i in range(len(arr)): \n        if arr[i] < prev:  # if current element is increasing\n            if arr[i] + prev > max_sum:  # if the current element and previous element contribute to the maximum sum\n                max_sum = arr[i] + prev\n        else:  # if current element is decreasing\n            if prev + arr[i] > max_sum:  # if the current element and previous element contribute to the maximum sum\n                max_sum = prev + arr[i]\n        prev = arr[i]  # update the previous element\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty\n    if not arr:\n        return 0\n    \n    # Initialize variables for the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]: # If the element is increasing\n            current_sum += arr[i] # Add the element to the current sum\n        else: # If the element is decreasing\n            if current_sum > max_sum: # If the current sum is greater than the maximum sum\n                max_sum = current_sum # Update the maximum sum\n            current_sum = arr[i] # Reset the current sum to the element\n            \n    # Check if the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number\n    y = (x + number//x) // 2\n    z = (x + y) // 2\n    \n    # loop until the difference between x and the square of z is less than epsilon\n    while abs(x - z*z) >= 1e-6:\n        x = z\n        y = (x + number//x) // 2\n        z = (x + y) // 2\n        \n    # return the square root\n    return z"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error: square root of a negative number is not defined\")\n        return None\n    \n    guess = 1\n    prev_guess = 1\n    \n    while abs(guess * guess - number) > 0.0001:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n    \n    return prev_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while guess * guess > number:\n        guess = (number / guess) + guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1.0\n    x1 = number / x0\n    x2 = (x1 + number / x1) / 2\n    x3 = (x2 + number / x2) / 2\n    x4 = (x3 + number / x3) / 2\n    x5 = (x4 + number / x4) / 2\n    x6 = (x5 + number / x5) / 2\n    x7 = (x6 + number / x6) / 2\n    x8 = (x7 + number / x7) / 2\n    x9 = (x8 + number / x8) / 2\n    x10 = (x9 + number / x9) / 2\n    x11 = (x10 + number / x10) / 2\n    x12 = (x11 + number / x11) / 2\n    x13 = (x12 + number / x12) / 2\n    x14 = (x13 + number / x13) / 2\n    x15 = (x14 + number / x14) / 2\n    x16 = (x15 + number / x15) / 2\n    x17 = (x16 + number / x16) / 2\n    x18 = (x17 + number / x17) / 2\n    x19 = (x18 + number / x18) / 2\n    x20 = (x19 + number / x19) / 2\n    x21 = (x20 + number / x20) / 2\n    x22 = (x21 + number / x21) / 2\n    x23 = (x22 + number / x22) / 2\n    x24 = (x23 + number / x23) / 2\n    x25 = (x24 + number / x24) / 2\n    x26 = (x25 + number / x25) / 2\n    x27 = (x26 + number / x26) / 2\n    x28 = (x27 + number / x27) / 2\n    x29 = (x28 + number / x28) / 2\n    x30 = (x29 + number / x29) / 2\n    x31 = (x30 + number / x30) / 2\n    x32 = (x31 + number / x31) / 2\n    x33 = (x32 + number / x32) / 2\n    x34 = (x33 + number / x33) / 2\n    x35 = (x34 + number / x34) / 2\n    x36 = (x35 + number / x35) / 2\n    x37 = (x36 + number / x36) / 2\n    x38 = (x37 + number / x37) / 2\n    x39 = (x38 + number / x38) / 2\n    x40 = (x39 + number / x39) / 2\n    x41 = (x40 + number / x40) / 2\n    x42 = (x41 + number / x41) / 2\n    x43 = (x42 + number / x42) / 2\n    x44 = (x43 + number / x43) / 2\n    x45 = (x44 + number / x44) / 2\n    x46 = (x45 + number / x45) / 2\n    x47 = (x46 + number / x46) / 2\n    x48 = (x47 + number / x47) / 2\n    x49 = (x48 + number / x48) / 2\n    x50 = (x49 + number / x49) / 2\n\n    if x50 == x50:\n        return x50\n    else:\n        return babylonian_squareroot(number)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number/guess) / 2\n        if abs(next_guess - guess) < 0.0001:\n            return guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 0.5\n    y = number / x\n    while abs(x - y) > 1e-10:\n        x = y\n        y = (number / x) + (x / y)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number\n    y = 0\n    i = 1\n    while abs(y**2 - x) > 1e-9:\n        x_prev = x\n        y = y - (x_prev**2 - number) / (2 * x_prev)\n        i += 1\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1.0\n    x1 = number / x0\n    for i in range(2, 50):\n        x2 = (x1 + number/x1) / 2.0\n        x0 = x1\n        x1 = x2\n    return x1\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Number must be a positive number.')\n    i = 0\n    x = 0.5\n    while True:\n        y = x - (number / x)\n        i += 1\n        if abs(y) < 0.00001:\n            break\n        x = y\n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(s) < 2:\n        return len(s)\n    \n    dp = [[0] * len(s) for _ in range(len(s))]\n    \n    max_len = 1\n    start = 0\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = 0\n                \n    return s[start:start+max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D table to store the lengths of palindromic subsequences for every substring of the string\n    table = [[0] * (len(str)) for _ in range(len(str)+1)]\n    \n    # Initialize the first column and the first row of the table\n    for i in range(1, len(str)+1):\n        table[i][0] = 1\n    \n    # Fill the rest of the table using dynamic programming\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    n = len(str)\n    # Initialize two variables to store the longest palindromic subsequence ending at each index\n    max_len = 1\n    start = 0\n\n    # Iterate through the string\n    for i in range(n):\n        # Calculate the length of the longest palindromic subsequence ending at i\n        left, right = i, i\n        while left >= 0 and right < n and str[left] == str[right]:\n            left -= 1\n            right += 1\n        len_left = right - left - 1\n\n        # Update the longest palindromic subsequence ending at i\n        if len_left > max_len:\n            max_len = len_left\n            start = i\n\n    # Return the length of the longest palindromic subsequence\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(string):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a 2D array to store the lengths of longest palindromic subsequences of all substrings\n    # of length i\n    lengths = [[0] * (len(string) + 1) for _ in range(len(string) + 1)]\n\n    # Initialize all values in the 2D array as 0\n    for i in range(len(string) + 1):\n        for j in range(len(string) + 1):\n            lengths[i][j] = 0\n\n    # Fill the 2D array with the lengths of longest palindromic subsequences of all substrings\n    # of length i\n    for i in range(1, len(string) + 1):\n        for j in range(1, len(string) + 1):\n            if string[i-1] == string[j-1]:\n                lengths[i][j] = lengths[i-1][j-1] + 1\n            else:\n                lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return lengths[len(string)][len(string)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store the length of longest palindromic subsequence of all prefixes of the given string\n    table = [[0 for i in range(len(str)+1)] for j in range(len(str)+1)]\n\n    # Initialize the table with 0 for all cells except the first row and first column\n    for i in range(1, len(str)+1):\n        table[i][0] = 0\n        table[0][i] = 0\n\n    # Fill the table with the length of longest palindromic subsequences of all prefixes of the given string\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence in the given string\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(s):\n    max_length = 1\n    start = 0\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_palindrome(s[i:j+1]):\n                if j-i+1 > max_length:\n                    max_length = j-i+1\n                    start = i\n    \n    return s[start:start+max_length]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables to store length of longest palindromic subsequence ending at each index\n    longest = [1] * len(str)\n    prev = [0] * len(str)\n\n    # Initialize variables to store the longest palindromic subsequence ending at each index\n    end = [0] * len(str)\n\n    # Iterate through the string\n    for i in range(len(str)): \n        # If the current character is a palindrome, update the longest palindromic subsequence ending at that index\n        if str[i] == str[i][::-1]: \n            longest[i] = 1\n            end[i] = i\n\n        # If the current character is not a palindrome, find the longest palindromic subsequence ending at that index by considering all the previous indices\n        else: \n            max_len = 0\n            for j in range(i): \n                if str[i] == str[j][::-1]: \n                    if longest[j] + 2 > max_len: \n                        max_len = longest[j] + 2\n                        prev[i] = j\n\n            # Update the longest palindromic subsequence ending at the current index\n            if max_len > longest[i]: \n                longest[i] = max_len\n                end[i] = i\n\n    # Print the length of the longest palindromic subsequence\n    print(\"Length of the longest palindromic subsequence is:\", longest[len(str)-1])\n\n    # Print the indices of the longest palindromic subsequence\n    print(\"Indices of the longest palindromic subsequence:\", end[len(str)-1])\n    while end[len(str)-1]!= 0:\n        print(end[len(str)-1], end=\" \")\n        end[len(str)-1] = prev[end[len(str)-1]]\n    print()"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [1] * n\n    max_len = 1\n\n    # Check for odd length palindromes\n    for i in range(1, n // 2 + 1):\n        if str[i-1] == str[i]:\n            dp[i] = 2\n            if i > max_len:\n                max_len = i\n\n    # Check for even length palindromes\n    for i in range(n // 2, 0, -1):\n        if str[i-1] == str[i]:\n            dp[i] = 2 + dp[i-2]\n            if i + dp[i] > max_len:\n                max_len = i + dp[i]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize two variables to store the length of the longest palindromic subsequence and the start index of the subsequence\n    length, start = 1, 0\n\n    # Iterate through the string and for each character, check if it is a palindrome or not\n    for i in range(1, len(str)): \n        if str[i] == str[i-1]: \n            length += 1\n        else: \n            # If the character is not a palindrome, update the length and start index if the current subsequence is longer\n            if length > start: \n                length = 1\n                start = i-1\n\n    # Return the length of the longest palindromic subsequence\n    return length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the lengths of palindromic subsequences.\n    # The subsequence of length i will have length 2*i-1.\n    dp = [[0]*n for i in range(n)]\n\n    # Initialize the first row and first column of the 2D array with 1.\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the remaining entries of the 2D array using dynamic programming.\n    for i in range(1, n):\n        for j in range(1, n-i+1):\n            # If the characters at positions i and j are the same,\n            # then the length of the subsequence will be 2*dp[i-1][j-1] + 1.\n            if str[j-1] == str[j+i-1]:\n                dp[j][j+i-1] = 2*dp[j-1][j-1] + 2\n            else:\n                dp[j][j+i-1] = max(dp[j-1][j+i-2], dp[j][j+i-2])\n\n    # Return the length of the longest palindromic subsequence.\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + (1/n)) / (1 - (1/n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum/n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/(n-1) + 1/(n-2) +... + 1/(n-n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1 / n\n    for i in range(2, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(2, n+1):\n        harmonic = (harmonic * i) / (i - 1)\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (2 * n - 1) / (n + 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1.0 / n\n    for i in range(1, n):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the intersection of the two arrays\n    intersection = set()\n\n    # Iterate through each element in the first array\n    for num in array_nums1:\n        # If the element is also in the second array, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set to store unique elements of array_nums1\n    set_nums1 = set(array_nums1)\n    # create a set to store unique elements of array_nums2\n    set_nums2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two dictionaries to store the elements of each array\n    dict1 = {}\n    dict2 = {}\n    # iterate through the first array and add each element to the dictionary\n    for num in array_nums1:\n        if num not in dict1:\n            dict1[num] = 1\n    # iterate through the second array and add each element to the dictionary\n    for num in array_nums2:\n        if num not in dict2:\n            dict2[num] = 1\n    # create an empty list to store the common elements\n    common_nums = []\n    # iterate through the first dictionary and check if each element is in the second dictionary\n    for key in dict1:\n        if key in dict2:\n            common_nums.append(key)\n    # return the common elements as a list\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create an empty set to store the intersection\n    intersection = set()\n\n    # iterate over both arrays\n    for num in array_nums1:\n        # check if the number is present in the second array\n        if num in array_nums2 and num not in intersection:\n            # add the number to the intersection set\n            intersection.add(num)\n\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_set = set(array_nums1).intersection(set(array_nums2))\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # initialize an empty set to store the intersection\n    intersection = set()\n    # iterate through the first array\n    for num in array_nums1:\n        # check if the number exists in the second array\n        if num in array_nums2 and num not in intersection:\n            # add the number to the intersection set\n            intersection.add(num)\n    # return the intersection set as a list\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create two empty dictionaries to store the frequency of each element\n    freq1 = {}\n    freq2 = {}\n\n    # Loop through the first array and count the frequency of each element\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # Loop through the second array and count the frequency of each element\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # Loop through the keys of the two dictionaries and create a new list to store the intersection\n    intersection = []\n    for key in freq1.keys():\n        if key in freq2 and freq1[key] == freq2[key]:\n            intersection.append(key)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Combine the two arrays into a single set to find the intersection\n    combined_set = set(array_nums1 + array_nums2)\n\n    # Return a list of the elements in the combined set\n    return list(combined_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    # create a new list to store the result\n    result = []\n    # iterate through the input list\n    for i in range(len(list)):\n        # insert the element before the current element in the list\n        result.insert(i, element)\n        # add the current element to the result list\n        result.append(list[i])\n    # return the result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        else:\n            new_list.append(list[i-1])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the modified list\n    new_list = []\n    # Loop through each element in the original list\n    for i in range(len(list)):\n        # If the current element is not the first one, insert the element before it\n        if i > 0:\n            new_list.append(element)\n        # Append the original element to the new list\n        new_list.append(list[i])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # create a list to store the polar coordinates\n    polar_coords = []\n    # loop through each complex number in the list\n    for num in numbers:\n        # use the polar() function from the cmath module to convert the complex number to polar coordinates\n        r, theta = cmath.polar(num)\n        # append the polar coordinate to the list\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_numbers.append((r, theta))\n    return polar_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert to complex number\n        num = complex(num)\n        \n        # calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        \n        # convert the magnitude and angle to polar coordinates\n        polar_num = (magnitude, angle)\n        \n        # print the polar coordinates\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of polar coordinates.\n    Polar coordinates are represented by a tuple containing the magnitude and phase of the complex number.\n    '''\n\n    polar_coordinates = []\n    for number in numbers:\n        # calculate magnitude and phase of the complex number\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n\n        # convert magnitude to polar coordinate system\n        polar_coord = (magnitude, phase)\n        polar_coordinates.append(polar_coord)\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # loop through the input list of numbers\n    for num in numbers:\n\n        # convert the complex number to polar coordinates\n        mag = abs(num)\n        arg = cmath.phase(num)\n\n        # print the result\n        print(f\"Number: {num}\")\n        print(f\"Magnitude: {mag}\")\n        print(f\"Argument: {arg}\")\n        print(f\"Polar coordinates: {mag} + {arg}i\")\n        print()"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            # convert the complex number to polar coordinates\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            # print the polar coordinates in the format (radius, angle)\n            print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        x, y = cmath.polar(number)\n        result.append((x, y))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    The polar coordinates are returned as a tuple containing the real and imaginary parts of each complex number.\n    '''\n    polar_list = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        phi = cmath.phase(num)\n        polar_list.append((r, phi))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    # initialize empty list to store the polar coordinates\n    polar_coordinates = []\n\n    # iterate through the list of complex numbers\n    for number in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n\n        # calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n\n        # append the polar coordinate to the list\n        polar_coordinates.append((magnitude, angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = abs(number)\n        argument = cmath.phase(number)\n        polar_coordinates.append((magnitude, argument))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of n elements from a list of colors.\n    '''\n    colors = set(l)\n    color_combinations = combinations_with_replacement(colors, n)\n    result = []\n    for combination in color_combinations:\n        result.append(tuple(combination))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combo = tuple(l[i:i+n])\n        result.append(combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    i = 2\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than a given number n.\n    \"\"\"\n    count = 0\n    num = 2\n    \n    while num <= n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n\n    # Use tuple unpacking to unpack the tuples\n    a, b = test_tup1\n    c, d = test_tup2\n\n    # Initialize the maximum element to be negative infinity\n    max_val = float('-inf')\n\n    # Loop through each element of the tuples\n    for num in a, b, c, d:\n        # If the current element is greater than the maximum element, update the maximum element\n        if num > max_val:\n            max_val = num\n\n    # Return the maximum element\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value1 = max(test_tup1)\n    max_value2 = max(test_tup2)\n    \n    if max_value1 > max_value2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns the tuple with the maximum element(s) from each tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    elif test_tup2 > test_tup1:\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup2\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize the result tuple with the first tuple values\n    result = test_tup1\n    # loop through the second tuple and compare each value with the first tuple values\n    for value in test_tup2:\n        # if the second value is greater than the first value in the result, update the result\n        if value > result[0]:\n            result = (value, )\n    return result"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 2: \n        return None \n    prime = False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            prime = True \n            break \n    if prime == True: \n        return None \n    else: \n        return n "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_williams_prime(n):\n        \"\"\"\n        Find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        count = 0\n        candidate = 2\n        while count < n:\n            if is_prime(candidate):\n                count += 1\n            candidate += 1\n        return candidate - 1\n\n    return newman_williams_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 2\n\n    # Check if n is an integer greater than or equal to 2\n    if not isinstance(n, int) or n < 2:\n        return \"Invalid input. Please enter an integer greater than or equal to 2.\"\n\n    # Loop through numbers up to sqrt(n)\n    while prime <= int(n**0.5):\n        # Check if n is divisible by prime\n        if n % prime == 0:\n            count += 1\n            if count == n:\n                return prime\n            # Continue loop if count is less than n\n            elif count < n:\n                prime += 1\n                count = 1\n        else:\n            # Increment prime\n            prime += 1\n\n    # If no newman prime was found, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 1\n    num = 2\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    count = 0\n    while count < n:\n        if is_prime(a):\n            count += 1\n        a += 1\n    return a - 1\n\ndef is_prime(num): \n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a boolean array to keep track of whether each number is prime or not\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n\n    # Iterate over all numbers from 2 to n (excluding n)\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            # If i is prime, mark all multiples of i as composite\n            for j in range(i**2, n+1, i):\n                is_prime[j] = False\n\n    # Iterate over all numbers from 2 to n (excluding n) again and find the nth prime number\n    for i in range(2, n+1):\n        if is_prime[i]:\n            # If i is prime, it's the nth prime number\n            if i == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function calculates the nth Newman-Shanks-Williams prime number.\n\n    Args:\n        n (int): The nth Newman-Shanks-Williams prime number to find.\n\n    Returns:\n        int: The nth Newman-Shanks-Williams prime number.\n    \"\"\"\n\n    # Initialize the count to 0\n    count = 0\n\n    # Calculate the sum of the first n integers\n    sum = 1\n    for i in range(1, n + 1):\n        sum += i\n\n    # Calculate the quotient of the sum by the number of primes less than or equal to n\n    quotient = sum // (n + 1)\n\n    # Initialize the previous prime to 2\n    previous_prime = 2\n\n    # Iterate through the primes up to n\n    for i in range(2, n + 1):\n        # Calculate the current prime by finding the next prime greater than the previous prime\n        current_prime = previous_prime + 1\n\n        # Check if the current prime is prime by checking if the sum of its digits is divisible by 11\n        if sum_of_digits(current_prime) % 11 == 0:\n            count += 1\n\n        # If the count reaches n, stop iterating through the primes and return the current prime\n        if count == n:\n            return current_prime\n\n        # Update the previous prime to the current prime\n        previous_prime = current_prime\n\n    # If the count did not reach n, the nth Newman-Shanks-Williams prime number does not exist\n    return None\n\n\ndef sum_of_digits(number):\n    \"\"\"\n    This function calculates the sum of the digits of a given number.\n\n    Args:\n        number (int): The number whose digits are to be summed.\n\n    Returns:\n        int: The sum of the digits of the given number.\n    \"\"\"\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate through each digit of the number\n    while number > 0:\n        # Add the current digit to the total\n        total += number % 10\n\n        # Remove the last digit of the number\n        number //= 10\n\n    # Return the total\n    return total"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Initialize the variables\n    prime_count = 0\n    prime = 2\n    prime_list = []\n\n    # Iterate through the numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If i is a prime number, add it to the prime list and increment the prime count\n            prime_list.append(i)\n            prime_count += 1\n\n            # Check if the prime count is equal to n\n            if prime_count == n:\n                return prime_list[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Check if n is a valid input\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize variables\n    i = 2\n    prime_count = 0\n    prime = False\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    while prime_count < n:\n        if i % 2 == 0:\n            prime = False\n        else:\n            prime = True\n        j = 3\n        while j <= i/2 and prime:\n            if i % j == 0:\n                prime = False\n            else:\n                prime = True\n            j += 2\n        if prime:\n            prime_count += 1\n        i += 1\n\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 0\n    prime = 2\n    i = 3\n    while i <= n:\n        if i % 2!= 0:\n            a += 1\n        i += 2\n        while (prime * i) <= n:\n            prime += 1\n            i += 2\n    return prime - a"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be the same.\")\n        return\n    \n    # Perform element-wise division\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of two tuples should be equal.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == float and type(test_tup2[i]) == float:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    return tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different number of elements.\")\n        return None\n    \n    # Perform element-wise division operation across the two tuples\n    result = [x / y for x, y in zip(test_tup1, test_tup2)]\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            raise ValueError(\"The second tuple element cannot be zero.\")\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two tuples must be equal.\")\n        return\n    \n    # perform element-wise division operation on the two tuples\n    result_tup = tuple(x/y for x, y in zip(test_tup1, test_tup2))\n    \n    # print the result tuple\n    print(\"Result: \", result_tup)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # splitting the list into two parts using the slice function\n    list1_1 = list1[:L]\n    list1_2 = list1[L:]\n    # returning the two resulting lists in a tuple\n    return (list1_1, list1_2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize the two parts of the list\n    part1 = []\n    part2 = []\n    \n    # Split the list into two parts based on the length of L\n    for i in range(L):\n        part1.append(list1[i])\n    for i in range(L, len(list1)):\n        part2.append(list1[i])\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        raise ValueError('The length of the list should be greater than or equal to L.')\n    mid = len(lst) // 2\n    first_part = lst[:mid]\n    second_part = lst[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return (list1, [])\n    \n    # check if L is greater than or equal to the length of the list\n    if L >= len(list1):\n        return ([], list1)\n    \n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Use slicing to split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the number of elements in the first part\n    first_part_size = len(list1) // 2\n    # calculate the number of elements in the second part\n    second_part_size = len(list1) - first_part_size\n    # create two new lists for the first and second parts\n    first_part = list1[:first_part_size]\n    second_part = list1[first_part_size:]\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 1:\n        return (list1[:L], list1[L:])\n    else:\n        return (list1[:(L//2)], list1[L//2:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age / 3\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # calculate dog's years\n    dog_years = 12 * h_age + 5\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_yrs = 7 * h_age # Formula to calculate dog age in years\n    return dog_age_yrs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(height_cm):\n    '''\n    Calculate a dog's age in dog's years based on their height in centimeters.\n    '''\n    height_in = height_cm / 2.54\n    age_years = height_in / 0.46\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's years based on human age\n    dog_years = h_age * 7\n    \n    # Return dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + int(h_age/365)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return []\n    \n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    results = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        results.append(sublist)\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # convert the list to a set to remove duplicates and convert back to a list\n    S_set = list(set(S))\n    result = []\n    for i in range(0, len(S_set), step):\n        result.append(S_set[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list, splitting it every nth element\n    for i in range(0, len(S), step):\n        # Create a new list containing the current element and the next nth element\n        sublist = S[i:i+step]\n        # Add the sublist to the result list\n        result.append(sublist)\n    # Return the resulting list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Calculate the surface area of the cube using Heron's formula\n    s = (l*l + l*l + l*l) ** (1/2)\n    #Return the lateral surface area of the cube\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l ** 2  # Cube's surface area is just its side length squared\n    lateral_area = 6 * area  # Cube's lateral surface area is 6 times the cube's surface area\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2 # cube has 6 faces"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop over the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the square of i and add it to the total\n        total += i**2\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    # initialize sum variable to 0\n    sum = 0\n    # iterate over odd natural numbers up to n\n    for i in range(1, n+1, 2):\n        # add the square of i to sum\n        sum += i*i\n    # return the sum of squares of odd natural numbers up to n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    else:\n        return n * (n + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define a string of stars\n    stars = '*' * n\n    \n    # Print the stars\n    print(stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a string to hold the star numbers\n    star_numbers = \"\"\n\n    # Loop n times to generate the star numbers\n    for i in range(1, n+1):\n        # Check if i is a multiple of 3, 5 or 7\n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\n            # If it is, add a star to the string\n            star_numbers += \"*\"\n        else:\n            # If it's not, add spaces to the string\n            star_numbers += \" \"\n\n    # Return the star numbers string\n    return star_numbers"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the first star\n    num = \"*\"\n    \n    # loop to generate the next stars\n    for i in range(n):\n        # print the current star\n        print(num)\n        \n        # generate the next star\n        num = \"*\" + \"*\" + \" \" + \"*\" + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n\n    Args:\n        n: an integer representing the index of the star number to find.\n\n    Returns:\n        Then'th star number.\n    \"\"\"\n    # Initialize a variable to keep track of the current star number\n    current_num = 1\n\n    # Loop through each number from 1 to n and multiply it by the current number\n    for i in range(1, n+1):\n        current_num *= i\n\n    # Return the final result\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Increment the result by 1 for each iteration\n        result += 1\n        \n        # Print the current value of the result\n        print(result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n-1) + find_star_num(n-2))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable to 1\n    count = 1\n    # loop through the range from 1 to n\n    for i in range(1, n+1):\n        # add the count variable to the result\n        result += count\n        # increment the count variable\n        count += 1\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        result = ''\n        for i in range(1, n+1):\n            result += '*'\n        return result\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return \"0\"\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num *= 2\n        return num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k) # Convert character to its ASCII value\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    return ascii_dict.get(k.lower())"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0:  \n            if arr[i] % 2 == 0:  \n                even_sum += arr[i]  \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    count = 0\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            sum_even += num\n            count += 1\n            if count % 2 == 0:\n                break\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = []\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n            if count % 2 == 0:\n                print(f\"The sum of even numbers at even positions is: {sum_even}\")\n                break"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even_at_even_pos = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_at_even_pos += arr[i]\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even_at_even_pos += arr[i]\n    return sum_even_at_even_pos"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    if even_count == 0:\n        return \"The list contains no even numbers at even positions.\"\n    else:\n        return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if i % 2 == 0:\n                print(\"The even number at even position {} is {}\".format(i, arr[i]))\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_pow = 0\n    for i in range(2, n+1, 2):\n        sum_even_pow += i**5\n    return sum_even_pow"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0 \n    for i in range(2, n+1): \n        sum_of_powers += i**5 \n    return sum_of_powers\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(n):\n\n        # Check if the current number is even\n        if i % 2 == 0:\n\n            # Calculate the sum of the current number raised to the fifth power\n            sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [rear for tup in test_list for rear in tup]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for item in test_list:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # loop through the tuples and subtract the elements at the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # iterate over the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples must have the same number of elements.\")\n        return\n    \n    # Loop through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    sum = 0\n    # Loop through all even indices from 0 to n-2\n    for i in range(0, n-2, 2):\n        # Calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum += coeff\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_binomial_sum = 0\n\n    # Calculate the factorial of n\n    factorial = math.factorial(n)\n\n    # Iterate through the range of even indices\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient of i and n\n        binomial_coeff = math.comb(n, i)\n\n        # If the binomial coefficient is even, add it to the sum\n        if i % 2 == 0 and binomial_coeff % 2 == 0:\n            even_binomial_sum += binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeff = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_coeff += math.comb(n, i)\n\n    return sum_even_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        coeff_sum = 0\n        for i in range(2, n+1):\n            coeff = math.binomial(n, i)\n            if i % 2 == 0:\n                coeff_sum += coeff\n        return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # calculate the sum of even index binomial coefficients\n    even_sum = 0\n    for i in range(n):\n        even_sum += math.comb(n, i)\n    \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    even_binomial_coeffs = []\n    for i in range(2, n+1):\n        coeff = math.binom(i, 2)\n        if coeff % 2 == 0:\n            even_binomial_coeffs.append(coeff)\n\n    return sum(even_binomial_coeffs)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_coeffs += math.comb(n, i)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    i = 0\n    while i <= n:\n        if i == 0:\n            sum_even_binomial += 1\n        else:\n            sum_even_binomial += math.comb(n, i)\n        i += 2\n    return sum_even_binomial\n\nn = 10\nprint(even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nresult = volume_cylinder(radius, height)\nprint(\"The volume of the cylinder is:\", result)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14159 * r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    # Filter the dictionary to only include entries with values greater than or equal to n\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Initialize an empty list to hold the filtered entries\n    filtered_dict = []\n\n    # Loop through each key-value pair in the input dictionary\n    for key, value in dict.items():\n        # If the value is greater than or equal to n, add the entry to the filtered list\n        if value >= n:\n            filtered_dict.append((key, value))\n\n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif i == 1:\n            count += 1\n        else:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        elif test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i - 1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            return count\n        elif test_tup[i]!= test_tup[i+1]:\n            count += 1"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < test_tup.index(test_tup[i]):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, 0, -1):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return False\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 5\n    else: \n        return 5 * (is_num_decagonal(n-1) + is_num_decagonal(n-2))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 0\n    while count < n:\n        decagonal += count*count\n        count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Convert n to a string and calculate the length of the string\n    length = len(str(n))\n\n    # Calculate the decagonal number by summing the digits of the n in reverse order\n    decagonal = 0\n    for i in range(length, 0, -1):\n        decagonal += int(str(n)[i-1])\n\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the row and column of the n-th number\n    row = (n - 1) // 2\n    col = n - 2 * row - 1\n\n    # Check if the number is a decagonal number\n    if col == 0:\n        return True\n    elif row == 0:\n        return col == 1\n    else:\n        return is_num_decagonal(row - 1) and is_num_decagonal(col - 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        decagonal = 5 * i * (3*i-1) // 2\n        if decagonal == n:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            num += i * i\n        i += 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += (i**2+1) // 2\n    return decagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Initialize index to one\n    i = 1\n    # Loop until n is reached\n    while i <= n:\n        # Add the current index to the sum\n        sum += i\n        # Add the square of the current index to the sum\n        sum += i*i\n        # Increment the index by one\n        i += 1\n    # Return the sum\n    return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the maximum value of n for which the nth decagonal number can be calculated\n    max_value = n * (n + 1) // 2\n    # Iterate from 1 to max_value and check if each number is a decagonal number\n    for i in range(1, max_value + 1):\n        if i * (3 * i - 1) // 2 == n:\n            return True\n    return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n    Args:\n        dlist (list): An array of elements to search through.\n        item (object): The element to search for in the array.\n\n    Returns:\n        tuple: A tuple containing a boolean indicating if the element is in the array (True) and the index position of the element in the array (or -1 if the element is not found).\n    \"\"\"\n\n    # Initialize variables\n    found = False\n    index = -1\n\n    # Loop through the array until we find the element or reach the end of the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    # Return the result as a tuple\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (True, index) if index!= -1 else (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Check if the elements of a given list are unique or not.\n\n    Returns:\n    True if all elements are unique, False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an input and returns True if all the elements in the list are unique,\n    and False otherwise.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a dictionary to store unique elements of the list\n    unique_dict = {}\n    # Loop through the list and add unique elements to the dictionary\n    for element in test_list:\n        if element not in unique_dict:\n            unique_dict[element] = True\n        else:\n            return False\n    # If all elements in the list are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = [x - y for x, y in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A new list with the elements of nums1 subtracted from nums2.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # Subtract the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Loop through each digit in the integer\n    for i in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if i in freq:\n            freq[i] += 1\n        # Otherwise, add the digit to the dictionary with a frequency of 1\n        else:\n            freq[i] = 1\n\n    # Loop through the dictionary to check if the frequency of each digit is less than or equal to itself\n    for digit, freq_digit in freq.items():\n        if freq_digit > digit:\n            return False\n\n    # If all digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # iterate through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Check if the number is positive\n    if n < 0:\n        return False\n\n    # Get the digits of the number\n    digits = [int(digit) for digit in str(n)]\n\n    # Calculate the frequency of each digit\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n\n    # Check if the frequency of each digit is less than or equal to its value\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n // i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert integer to string and split into individual digits\n    digits = list(str(n))\n    \n    # Initialize dictionary to keep track of digit frequencies\n    freq = {}\n    \n    # Iterate over digits and update frequencies in dictionary\n    for d in digits:\n        freq[d] = freq.get(d, 0) + 1\n        \n    # Iterate over digits and check frequency against digit itself\n    for d in digits:\n        if freq[d] > d:\n            print(\"Invalid input. Frequency of digit {} is greater than itself.\".format(d))\n            return False\n    \n    # If all digits are valid, return True\n    print(\"Valid input.\")\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    num_digits = len(str(n))\n    freq = [0] * 10\n    for i in range(num_digits):\n        freq[int(str(n)[i])] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # convert the integer to a string\n    num = str(n)\n    \n    # loop through each digit in the string\n    for digit in num:\n        # get the digit as an integer\n        digit = int(digit)\n        \n        # calculate the frequency of the digit in the string\n        freq = num.count(str(digit))\n        \n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq < digit:\n            return False\n    \n    # if all digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit in the number\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # Create an array to store frequency of each digit\n    for i in range(1,n+1): # Iterate through all possible digits from 1 to n\n        freq[int(i/10)] += 1 # Increment the frequency of the digit in the integer by 1\n        if freq[int(i/10)] > int(i): # If the frequency of the digit is greater than the digit itself, return False\n            return False\n    return True # If all digits have a frequency less than or equal to the digit itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    n = str(n)\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # Loop through each digit in the string\n    for digit in n:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n    # Loop through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    # If all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string and split it into individual digits\n    digits = [int(d) for d in str(n)]\n\n    # Initialize a dictionary to store the frequency of digits\n    freq = {}\n\n    # Iterate over the digits in the integer and update the frequency dictionary\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n\n    # Iterate over the digits in the integer and check if their frequency is greater than or equal to the digit itself\n    for d in digits:\n        if freq[d] >= d:\n            return False\n\n    # If no digit has a frequency greater than or equal to the digit itself, the integer is valid\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for i in range(len(list)-1):\n            if list[i+1]!= element:\n                return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    elif len(list) > 1:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        print(f\"All elements in the list are equal to {element}.\")\n    else:\n        print(f\"All elements in the list are not equal to {element}.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab(b){1,2}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{2,3}' # matches the 'a' character followed by 2 or 3 'b' characters\n    return bool(re.search(pattern, text)) # returns True if the pattern is found in the text, otherwise False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a{2,3}b'\n    matches = re.findall(pattern, text)\n    return any(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"ab{2,3}a\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a(?=bb)(?=bb){2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the subarray\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Loop through all the elements of the array\n    for i in range(1, n):\n        # If the current element is greater than or equal to k, add it to the current sum\n        if a[i] >= k:\n            current_sum += a[i]\n        else:\n            # If the current element is less than k, subtract the minimum value from the current sum\n            min_value = min(a[i], k - a[i])\n            current_sum -= min_value\n\n        # Update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the largest sum and the current sum\n    largest_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the array k times\n    for i in range(k):\n        # Add the first element of the array\n        current_sum += a[0]\n\n        # Loop through the rest of the array\n        for j in range(1, n):\n            # Add the element to the current sum\n            current_sum += a[j]\n\n            # Update the largest sum if the current sum is greater\n            if current_sum > largest_sum:\n                largest_sum = current_sum\n\n    # Return the largest sum\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    temp_sum = 0\n    \n    # Loop through each element in the array\n    for i in range(n):\n        # If the current element is greater than the current maximum sum, update the maximum sum\n        if a[i] > max_sum:\n            max_sum = a[i]\n        \n        # If the current element is not part of the current subarray, add it to the current subarray sum\n        if i >= k:\n            curr_sum -= a[i-k]\n        \n        # Add the current element to the current subarray sum\n        curr_sum += a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    # If the final maximum sum is negative, return 0\n    if max_sum < 0:\n        return 0\n    \n    # Return the final maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # repeat the array k times and store it in a new array\n    a_repeated = [a[0]] * k + a\n    # initialize the maximum sum of the repeated array and the current sum\n    max_sum_repeated = a_repeated[0]\n    max_sum_current = a_repeated[0]\n    # use Kadane's algorithm to find the maximum sum of a contiguous subarray in the modified array\n    for i in range(1, n):\n        max_sum_current = max(max_sum_current + a_repeated[i], a_repeated[i])\n        max_sum_repeated = max(max_sum_repeated, max_sum_current)\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the original array\n    total_sum = sum(a)\n\n    # Calculate the sum of the modified array\n    modified_sum = total_sum * k\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n\n    # Loop through the array and calculate the sum of the current sub-array\n    for i in range(n):\n        sub_sum = a[i]\n        for j in range(k):\n            if i + j < n:\n                sub_sum += a[i+j]\n            else:\n                break\n        current_sum = sub_sum * (k - j) + modified_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create the modified array by repeating the original array k times\n    modified_array = []\n    for i in range(k):\n        modified_array = modified_array + a\n    # calculate the maximum sum of the original and modified array\n    max_sum = max(sum(a), sum(modified_array))\n    # calculate the maximum sum of any contiguous subarray in the original array\n    max_subarray_sum = max_sum\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray_sum = sum(a[i:j])\n            max_subarray_sum = max(max_subarray_sum, subarray_sum)\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If current_sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n        # Add the next element to the current_sum\n        current_sum += a[i]\n\n        # If the current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current_sum is greater than k times max_sum, reset max_sum to current_sum\n        if current_sum > k * max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the given array k times\n    modified_array = a*k\n    \n    # initialize variables to keep track of the maximum sum and its starting index\n    max_sum = float('-inf')\n    max_index = 0\n    \n    # iterate over the modified array and calculate the sum and its starting index for each subarray\n    for i in range(len(modified_array)):\n        current_sum = sum(modified_array[i:i+n])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize variables for the current subarray sum and the largest sum\n    curr_sum = a[0]\n    largest_sum = curr_sum\n\n    # loop through the array to find the maximum subarray sum\n    for i in range(1, n):\n        # add the current element to the current subarray sum\n        curr_sum += a[i]\n\n        # if the current subarray sum is greater than the largest sum so far, update the largest sum\n        if curr_sum > largest_sum:\n            largest_sum = curr_sum\n\n        # if the current subarray sum is greater than the sum of the first k elements, update the current subarray sum\n        if curr_sum > k * a[0]:\n            curr_sum = a[0]\n\n    # return the largest sum of a contiguous array in the modified array\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a new array that will contain the original array repeated k times\n    repeated_array = a * k\n\n    # Initialize two variables to keep track of the maximum sum and the last index\n    max_sum = float('-inf')\n    last_index = 0\n\n    # Iterate over the repeated array and for each element, update max_sum if it's greater\n    for i in range(len(repeated_array)):\n        current_sum = repeated_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            last_index = i\n\n    # Slice the original array from the last index to the end and return its sum\n    return sum(a[last_index:])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    i = 1\n    while i <= n:\n        total += i*i\n        i += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initializing the sum of squares of even natural numbers as 0\n    sum = 0\n    # iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # adding the square of the even natural number to the sum of squares of even natural numbers\n        sum += i*i\n    # returning the sum of squares of even natural numbers\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum_squares += count**2\n\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store maximum lengths\n    max_lengths = []\n    # loop through each sublist in the first list\n    for sublist in list1:\n        # initialize a variable to keep track of the current maximum length\n        current_max_length = 0\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the current length of the sublist is greater than the current maximum length, update the maximum length\n            if len(str(element)) > current_max_length:\n                current_max_length = len(str(element))\n        # add the current maximum length to the max_lengths list\n        max_lengths.append(current_max_length)\n    # find the maximum value in the max_lengths list and return it\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), len(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        if length > len(max_lengths):\n            max_lengths = sublist\n        elif length == len(max_lengths):\n            max_lengths.extend(sublist)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list = []\n    for sublist in list1:\n        length_list.append(len(sublist))\n    return max(length_list)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Create a dictionary to store the length of each sublist\n    lengths = {}\n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # Check if the length of the sublist is already in the dictionary\n        if len(sublist) in lengths:\n            # If it is, increment its value by 1\n            lengths[len(sublist)] += 1\n        else:\n            # If it's not, add it as a new key with a value of 1\n            lengths[len(sublist)] = 1\n    # Find the list of maximum length\n    max_lengths = []\n    for length in lengths:\n        if lengths[length] == max(lengths.values()):\n            max_lengths.append(length)\n    # Return the list of maximum length\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [1] * (k + 1)\n    ways[0] = 0\n    ways[1] = 0\n\n    for i in range(2, k + 1):\n        ways[i] = ways[i - 1]\n        ways[i] += ways[i - 2]\n\n    for i in range(n + 1):\n        for j in range(k):\n            if j == 0 or i == 0 or j == i:\n                ways[j + 1] += ways[j]\n\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a dictionary to store the count of ways for each combination of colors\n    ways_dict = {}\n    # Initialize the count as 1\n    ways_dict[0] = 1\n    \n    # Iterate through all possible combinations of colors\n    for i in range(k):\n        # Calculate the number of ways to paint the fence using the current color\n        ways_dict[i+1] = 0\n        for j in range(n):\n            # Check if the current color is adjacent to the previous color\n            if (j!= 0 and i == k-1) or (j!= n-1 and i < k-1):\n                # If so, add the count of ways for the previous color to the count of ways for the current color\n                ways_dict[i+1] += ways_dict[i]\n        # If there are more than 2 adjacent colors, increase the count of ways for that color by 1\n        if ways_dict[i+1] > 2:\n            ways_dict[i+1] -= 2\n    \n    # Return the count of ways for k colors\n    return ways_dict[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a dictionary to store the number of ways for each color combination\n    ways = {}\n\n    # Base case: if n is 0 or k is 0, the number of ways is 1\n    if n == 0 or k == 0:\n        return 1\n\n    # Base case: if n is 1, the number of ways is k\n    if n == 1:\n        return k\n\n    # Base case: if k is 1, the number of ways is n\n    if k == 1:\n        return n\n\n    # Initialize the number of ways for the first color combination\n    first_color = (0, 0)\n    ways[first_color] = 1\n\n    # Iterate through the remaining color combinations\n    for i in range(2, k+1):\n        second_color = (i, 0)\n        third_color = (0, i)\n\n        # Check if the second and third colors are the same\n        if first_color == third_color:\n            continue\n\n        # If the second and third colors are not the same, add the number of ways for the first color combination to the dictionary\n        if second_color not in ways:\n            ways[second_color] = count_no_of_ways(n-1, i)\n        if third_color not in ways:\n            ways[third_color] = count_no_of_ways(n-1, i)\n\n        # Add the number of ways for the second and third colors to the dictionary\n        ways[first_color] += ways[second_color] + ways[third_color]\n\n    return ways[first_color]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(curr_posts, curr_colors, used_colors, target_posts, target_colors):\n        if curr_posts == target_posts:\n            ans += 1\n            return\n        if curr_posts > target_posts:\n            return\n        if len(used_colors) > k:\n            return\n        for color in range(k):\n            if used_colors[color]:\n                continue\n            used_colors[color] = True\n            backtrack(curr_posts + 1, curr_colors | (1 << color), used_colors, target_posts, target_colors)\n            used_colors[color] = False\n\n    target_posts = 2\n    target_colors = (1 << k) - 1\n    ans = 0\n    backtrack(0, 0, [False] * k, target_posts, target_colors)\n    return ans"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return 1\n    elif n == k:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the count of ways for each combination of colors\n    # First row and first column will always be 1\n    # Other rows and columns will be initialized to 0\n    count = [[1]*(k+1) for _ in range(n+1)]\n    \n    # Loop through the array and fill in the values\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the current combination of colors has 1 post, it will always be unique\n            if i == 1:\n                count[i][j] = 1\n            else:\n                # Check if the previous combination of colors has 2 adjacent posts with the same color\n                # If it does, we can paint the current post with the same color as the previous post\n                if count[i-1][j] > 0 and count[i-1][j] == count[i-2][j]:\n                    count[i][j] = count[i-1][j]\n                # If the previous combination of colors has 1 adjacent post with a different color, we can paint it with any color\n                else:\n                    count[i][j] = 0\n    \n    # Return the count of ways for the given combination of colors\n    return count[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    This function takes in two integers n and k as input and returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Base case: If n is less than or equal to 0, then there is only 1 way of painting the fence.\n    if n <= 0:\n        return 1\n\n    # Base case: If k is less than or equal to 0, then there is only 1 way of painting the fence.\n    if k <= 0:\n        return 0\n\n    # Initialize the dp array to store the count of ways for different values of n and k.\n    dp = [0] * (n + 1)\n\n    # Initialize the first row of the dp array to 1.\n    dp[0] = 1\n\n    # Initialize the second row of the dp array to 0.\n    dp[1] = 0\n\n    # Fill in the remaining rows of the dp array.\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if j >= i:\n                dp[i] += dp[i - j]\n\n    # Return the count of ways of painting the fence.\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # recursion to count the number of ways for each possible color combination\n        ways1 = count_no_of_ways(n-1, k)\n        ways2 = count_no_of_ways(n-2, k-1)\n        ways3 = count_no_of_ways(n-2, k)\n        return ways1 + ways2 + ways3"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k <= 2 or n <= 2:\n        return 0\n    \n    dp = [0] * (k+1)\n    dp[0] = dp[1] = 1\n    \n    for i in range(2, k+1):\n        dp[i] = (dp[i] + dp[i-1]) % 1000000007\n    \n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if i-j >= 2:\n                dp[j] = (dp[j] + dp[j-1] - dp[j-2]) % 1000000007\n    \n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Creating a 2D list to store the count of ways for each color\n    ways = [[0]*(k+1) for _ in range(n+1)]\n\n    # Base case: If the fence has only one post, then there is only one way to paint it with the given colors\n    ways[1][1] = 1\n\n    # Loop through all possible combinations of colors\n    for color1 in range(1,k+1):\n        for color2 in range(1,k+1):\n            if color1 == color2:\n                # If the two colors are the same, then there is only one way to paint the fence with one color\n                ways[1][color1] = 1\n            else:\n                # If the two colors are different, then there are two ways to paint the fence with the same color but two different colors\n                ways[1][color1] = 1\n                ways[1][color2] = 1\n\n    # Loop through all possible combinations of fence sizes\n    for i in range(2, n+1):\n        for color in range(1, k+1):\n            # If the two colors are the same, then there is only one way to paint the fence with one color\n            ways[i][color] = ways[i-1][color]\n\n            # If the two colors are different, then there are two ways to paint the fence with the same color but two different colors\n            ways[i][color] += ways[i-1][color-1]\n\n    # Return the count of ways for the given fence and colors\n    return ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m   # calculates the quotient of two numbers using integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient, rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if n is positive\n    if n <= 0:\n        return None\n    \n    # check if m is positive\n    if m <= 0:\n        return None\n    \n    # if both n and m are positive, then the quotient is n//m\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w*h)\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n    \n    # calculate the third side of the triangle\n    b = A / math.sin(math.acos(w / A))\n    \n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle using Heron's formula\n    s = (w+h)/2\n    # Calculate the area of the triangle\n    A = math.sqrt(s*(s-w)*(s-h))\n    # Calculate the length of the other side of the triangle\n    b = math.sqrt(w**2+h**2-2*w*h)\n    # Return the third side of the triangle\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sqrt_w = math.sqrt(w)\n    sqrt_h = math.sqrt(h)\n    side_a = sqrt_w + sqrt_h\n    side_b = sqrt_w - sqrt_h\n    side_c = sqrt_h - sqrt_w\n\n    return side_c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the length of the base (w) and height (h) of a right angle triangle and returns the length of the third side.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the cotangent of the angle\n    cot = (w / h) ** 2\n\n    # Calculate the square root of the cotangent\n    sqrt_cot = math.sqrt(cot)\n\n    # Calculate the length of the third side\n    third_side = s * sqrt_cot\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n    # return the third side of the triangle\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Calculate the semi-perimeter of the triangle\n    a = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the third side of the triangle\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the side of the right triangle\n    s = (w**2 + h**2)**0.5\n\n    # calculate the semi-perimeter of the right triangle\n    sp = (w + h + s)**0.5\n\n    # calculate the area of the triangle\n    area = 0.5 * w * h\n\n    # calculate the other side of the triangle\n    other_side = sp * math.sin(math.acos((area/(2*sp**2))))\n\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the length of the base\n    base = math.sqrt(w**2 + h**2)\n\n    # calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2 + base**2)\n\n    # return the third side (base^2 - hypotenuse^2)\n    return base**2 - hypotenuse**2"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == type(max_num):\n            if listval[i] > max_num:\n                max_num = listval[i]\n        elif type(listval[i]) == float or type(listval[i]) == int:\n            if listval[i] > max_num:\n                max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # initialize the maximum value\n    max_val = None\n    \n    # iterate over each value in the list\n    for val in listval:\n        # if the current value is greater than the maximum value so far, update the maximum value\n        if val > max_val:\n            max_val = val\n    \n    # return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(lst):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = float('-inf')\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n    if not listval:\n        raise ValueError(\"Input list is empty\")\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize variables to store the maximum value and type\n    max_val = None\n    max_type = None\n\n    # Loop through the list and compare each value to the current maximum value\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n            max_type = type(val)\n\n    # Return the maximum value and its type\n    return max_val, max_type"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value to first element in the list\n    max_val = listval[0]\n    # loop through remaining elements in the list\n    for i in range(1, len(listval)):\n        # check if current element is greater than maximum value\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize the sum variable to 0\n    sum_div = 0\n    # loop through the number from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n        # check if the number is divisible by the current number in the loop\n        if number % i == 0:\n            # add the current number to the sum_div variable\n            sum_div += i\n    # return the sum_div variable\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    # Create a flag array to keep track of the inversions\n    inv_count = [0] * len(arr)\n\n    # Sort the array in increasing order\n    arr.sort()\n\n    # Iterate through the array and count the inversions\n    for i in range(1, len(arr)):\n        j = i - 1\n        while j >= 0 and arr[j] > arr[i]:\n            # If the element at j is greater than the current element, increment the inversion count\n            inv_count[j] += i - j\n            # Decrement j to find the first element greater than the current element\n            j -= 1\n        # Increment the count for the first element greater than the current element\n        inv_count[j + 1] += i - j\n\n    # Return the total inversion count\n    return inv_count[-1]"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # step 1: find the length of the array\n    n = len(arr)\n\n    # step 2: check if the array is already sorted\n    if n <= 1:\n        return 0\n\n    # step 3: partition the array into two halves\n    # partition the array around the middle element\n    mid = n // 2\n    arr1 = arr[:mid]\n    arr2 = arr[mid:]\n\n    # step 4: recursively count inversions in each half\n    inversion1 = get_Inv_Count(arr1)\n    inversion2 = get_Inv_Count(arr2)\n\n    # step 5: count inversions in the two halves\n    i = j = k = 0\n    inv_count = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            arr[k] = arr1[i]\n            i += 1\n        else:\n            arr[k] = arr2[j]\n            j += 1\n            inv_count += i\n        k += 1\n\n    # step 6: copy the remaining elements of the first half\n    while i < len(arr1):\n        arr[k] = arr1[i]\n        i += 1\n        k += 1\n\n    # step 7: copy the remaining elements of the second half\n    while j < len(arr2):\n        arr[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return inv_count + inversion1 + inversion2"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    # create a copy of the array to avoid modifying original array\n    arr_copy = arr.copy()\n    inv_count = 0\n    for i in range(len(arr_copy)):\n        # find the maximum element in the array\n        max_index = i\n        for j in range(i+1, len(arr_copy)):\n            if arr_copy[j] > arr_copy[max_index]:\n                max_index = j\n        # swap the elements at i and max_index\n        arr_copy[i], arr_copy[max_index] = arr_copy[max_index], arr_copy[i]\n        # count the inversions\n        inv_count += i - max_index\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += (j - i - 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Calculate the number of inversions\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                inv_count += n - j - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Define a function to merge two sorted arrays into a single sorted array\n    def merge_arrays(arr1, arr2): \n        i, j = 0, 0 \n        sorted_arr = [] \n        while i < len(arr1) and j < len(arr2): \n            if arr1[i] <= arr2[j]: \n                sorted_arr.append(arr1[i]) \n                i += 1 \n            else: \n                sorted_arr.append(arr2[j]) \n                j += 1 \n        sorted_arr += arr1[i:] \n        sorted_arr += arr2[j:] \n        return sorted_arr \n  \n    # Define a function to count inversions in two sorted arrays\n    def merge_sort(arr): \n        if len(arr) <= 1: \n            return arr \n        mid = len(arr) // 2 \n        left = arr[:mid] \n        right = arr[mid:] \n        left = merge_sort(left) \n        right = merge_sort(right) \n        return merge_arrays(left, right) \n  \n    # Sort the array in ascending order\n    arr = merge_sort(arr) \n  \n    # Initialize the inversion count to 0\n    inversion_count = 0 \n  \n    # Traverse the sorted array and count the inversions\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] > arr[j]: \n                inversion_count += 1 \n  \n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j-i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    # initialize two variables to keep track of the current index and the number of inversions\n    i, inv_count = 0, 0\n    n = len(arr)\n    \n    # sort the array in ascending order using bubble sort algorithm\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                inv_count += (n-j-1) # updating the inversion count\n    \n    # return the final inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(0, i):\n            if arr[j] > arr[i]:\n                inv_count += i - j\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    '''\n    Flatten a nested list structure.\n\n    Example:\n    >>> lst = [[1, 2], [3, 4], [5, [6, 7], 8]]\n    >>> flatten_list(lst)\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    '''\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single list.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # convert the list of tuples into a dictionary where each key is a product name and its corresponding value is the quantity\n    st_dict = defaultdict(int)\n    for item in stdata:\n        st_dict[item[0]] += item[1]\n\n    # calculate the maximum aggregate of all products\n    max_agg = max(st_dict.values())\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_list = defaultdict(int)\n    max_aggregate = 0\n\n    for sale in stdata:\n        for item, price in sale:\n            aggregate_list[item] += price\n        if max(aggregate_list.values()) > max_aggregate:\n            max_aggregate = max(aggregate_list.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    It takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for key, value in item:\n            if key in max_dict:\n                max_dict[key] += value\n            else:\n                max_dict[key] = value\n    max_sum = 0\n    for key, value in max_dict.items():\n        max_sum += value\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for store, data in stdata:\n        for item, quantity in data:\n            max_agg[item] = max(max_agg[item], quantity)\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer.\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        customer, amount = item\n        max_aggr[customer] = max(max_aggr[customer], amount)\n    # Calculate the maximum aggregate across all customers.\n    max_agg = 0\n    for value in max_aggr.values():\n        max_agg = max(max_agg, value)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each product\n    max_aggr = defaultdict(int)\n    # Loop through the list of tuples\n    for item in stdata:\n        # Extract the product name and its corresponding aggregate\n        product, aggregate = item\n        # Update the maximum aggregate for the product\n        max_aggr[product] = max(max_aggr[product], aggregate)\n    # Find the maximum aggregate from the dictionary\n    max_agg = max(max_aggr.values())\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg_dict = defaultdict(int)\n    for tup in stdata:\n        # Calculate the aggregate and update the maximum aggregate for the transaction\n        max_agg = sum(tup[1])\n        max_agg_dict[tup[0]] = max(max_agg, max_agg_dict[tup[0]])\n    # Return the maximum aggregate for all transactions\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each transaction\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list of tuples and update the frequency dictionary\n    for item in stdata:\n        freq_dict[item[0]] += item[1]\n\n    # Calculate the maximum aggregate by finding the maximum frequency in the dictionary\n    max_freq = max(freq_dict.values())\n\n    # Calculate the maximum amount of money spent by iterating over the dictionary and finding the\n    # maximum frequency times the price\n    max_amount = 0\n    for item, freq in freq_dict.items():\n        max_amount = max(max_amount, freq * item)\n\n    # Return the maximum amount spent\n    return max_amount"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_ag = defaultdict(int)\n\n    for i, (name, price, quantity) in enumerate(stdata):\n        max_ag[name] += price * quantity\n\n    return max(max_ag.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for x, y in stdata:\n        max_dict[x] += y\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # initialize the count to 0\n    count = 0\n\n    # loop through all possible combinations of the first n bits\n    for i in range(2 ** n):\n        # extract the first n bits\n        first_n = bin(i)[2:].zfill(n)\n        # extract the last n bits\n        last_n = bin(i & ((1 << n) - 1))[-n:].zfill(n)\n        # check if the sum of the first n bits is same as the sum of the last n bits\n        if first_n == last_n:\n            # increment the count if both conditions are true\n            count += 1\n\n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2**n):\n        first_bits = i // 2**n\n        second_bits = i % 2**n\n\n        if (first_bits + second_bits) % 2 == 0:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        first_half = bin(i)[2:]\n        last_half = bin(i >> (2 ** (n - 1)))[2:].zfill(n)\n        if int(first_half, 2) == int(last_half, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # get the sum of first n bits\n        first_sum = sum([int(bit) for bit in bin(i)[2:]][:n])\n        # get the sum of last n bits\n        last_sum = sum([int(bit) for bit in bin(i)[2:]][-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        bits = [int(j) for j in bin(i)[2:]]\n        if sum(bits[:n]) == sum(bits[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_bits = int(binary_str[:n])\n        last_bits = int(binary_str[n:])\n        if first_bits == last_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    # Initialize variables\n    count = 0\n    bit1 = 0\n    bit2 = 0\n    \n    # Calculate the sum of first n bits\n    sum1 = 0\n    while bit1 < n:\n        sum1 += bit1\n        bit1 <<= 1\n    \n    # Calculate the sum of last n bits\n    sum2 = 0\n    while bit2 < n:\n        sum2 += bit2\n        bit2 <<= 1\n    \n    # Compare the sums and count the number of sequences\n    if sum1 == sum2:\n        count = 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # Convert the binary number to a list of bits\n        bits = bin(i)[2:].zfill(n)\n        # Calculate the sum of first n bits\n        first_sum = int(bits[:n])\n        # Calculate the sum of last n bits\n        last_sum = int(bits[-n:])\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    # Find the sum of the first n bits\n    sum_first_n = sum([int(digit) for digit in bin(sum(range(2**n)) % (2**n))[2:].zfill(2*n)])\n    # Find the sum of the last n bits\n    sum_last_n = sum([int(digit) for digit in bin(sum(range(2**n)) % (2**n))[2:].zfill(2*n)[::-1]])\n    # Count the number of binary sequences of length 2n such that the sum of first n bits is same as the sum of last n bits\n    count = sum([1 for i in range(2**2*n) if sum([int(digit) for digit in bin(i)[2:].zfill(2*n)]) == sum_first_n and sum([int(digit) for digit in bin(i)[2:].zfill(2*n)[::-1]]) == sum_last_n])\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        binary_seq = bin(i)[2:]\n        sum_left = sum(int(bit) for bit in binary_seq[:n])\n        sum_right = sum(int(bit) for bit in binary_seq[n:])\n        if sum_left == sum_right:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, current_depth)\n                    current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: empty dictionary\n    if not d:\n        return 0\n    \n    # Recursive case: iterate over keys and find depth of each value\n    depth = 0\n    for v in d.values():\n        new_depth = dict_depth(v)\n        if new_depth > depth:\n            depth = new_depth\n    \n    # Add 1 to depth for the current dictionary\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            count += 1 + dict_depth(value)\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize a counter variable to keep track of the depth\n    depth = 0\n    # loop through the dictionary keys\n    for key in d:\n        # check if the key is a dictionary itself\n        if isinstance(d[key], dict):\n            # recursively call the function to get the depth of the nested dictionary\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            # increment the depth counter\n            depth += 1\n    # return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n            dict_depth(value)\n            current_depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        for key in d:\n            depth = max(depth, dict_depth(d[key], depth+1))\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges and rotations as input and an index as the output index.\n    It then finds the element at the given index after rotations of the array.\n\n    Args:\n    arr: the array to be rotated.\n    ranges: a list of tuples where each tuple contains the lower and upper bound of the range to be rotated.\n    rotations: the number of rotations to be done on the array.\n    index: the output index at which the element should be found.\n\n    Returns:\n    The element at the given index after rotations of the array.\n    \"\"\"\n    for i in range(rotations):\n        for j in range(len(ranges)):\n            lower_bound, upper_bound = ranges[j]\n            if lower_bound <= index < upper_bound:\n                index -= (upper_bound - lower_bound)\n                index += (upper_bound - lower_bound)\n                lower_bound, upper_bound = ranges[j]\n                arr.rotate(lower_bound, upper_bound)\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for _ in range(rotations):\n        # iterate through the ranges\n        for i in range(len(ranges)):\n            # find the range containing the element at the given index\n            if ranges[i][0] <= index < ranges[i][1]:\n                # find the index of the element in the range\n                range_index = (index - ranges[i][0]) // (ranges[i][1] - ranges[i][0]) + ranges[i][0]\n                # return the element at the found index\n                return arr[range_index]\n    # if no element is found after rotating the array, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize the variables\n    start = 0\n    end = len(arr) - 1\n\n    # iterate through the rotations\n    for i in range(rotations):\n        # calculate the middle index\n        mid = (start + end) // 2\n\n        # if the middle index is equal to the index, return the element at that index\n        if mid == index:\n            return arr[index]\n\n        # if the middle index is less than the index, we need to search in the right half of the array\n        elif mid < index:\n            start = mid + 1\n\n        # if the middle index is greater than the index, we need to search in the left half of the array\n        else:\n            end = mid - 1\n\n    # if we reach this point, the index is not present in the array after rotations\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations and an index as input.\n    It then finds the element at the given index after number of rotations.\n    \"\"\"\n\n    # Initialize the index of the current element\n    current_index = index\n\n    # Loop through the ranges and rotations\n    for i in range(len(ranges)):\n        current_index += rotations[i] % len(arr)\n\n    # Return the element at the final index\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array and a list of ranges and rotations, and an index, return the element at that index after\n    the specified rotations.\n\n    Args:\n        arr (list[int]): The input array.\n        ranges (list[tuple[int, int]]): A list of tuples indicating the range of each element in the array.\n        rotations (list[int]): The number of rotations to apply to each element in the array.\n        index (int): The index of the element to find after rotations.\n\n    Returns:\n        int: The element at the specified index after the specified rotations.\n    \"\"\"\n\n    # Calculate the total number of rotations to apply\n    total_rotations = sum(rotations)\n\n    # Calculate the number of elements in the original array that we have to skip before the index we are looking for\n    skip_elements = sum(rotations[:index])\n\n    # Calculate the final index based on the total number of rotations and the skip elements count\n    final_index = (index + total_rotations + skip_elements) % len(arr)\n\n    # Find the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize variables\n    element = None\n    count = 0\n\n    # loop through each element in the array\n    for i in range(len(arr)):\n\n        # check if the element is in the range of rotations\n        if i >= rotations:\n\n            # check if the element is in the given range\n            if i % (len(ranges) + 1) in ranges:\n\n                # check if the element has not been found yet\n                if element is None:\n\n                    # if yes, set the element and its index\n                    element = arr[i]\n                    count = i\n\n                # if the element has already been found, check if the current index is greater than the found index\n                if i > count:\n\n                    # if yes, return the element and its index\n                    return element, i\n\n    # if the element has not been found yet, return None\n    return None, None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr = shift(arr, ranges[i][0], ranges[i][1])\n    return arr[index]\n\n\ndef shift(arr, start, end):\n    '''\n    Shifts an array of integers from start index to end index.\n    '''\n    for i in range(start, end):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a list of rotations, and an index as input.\n    It then finds the element at the given index after rotating the array by the given number of rotations.\n\n    :param arr: The original array.\n    :param ranges: A list of ranges to apply to the array.\n    :param rotations: A list of rotations to apply to the array.\n    :param index: The index of the element to find after rotations.\n    :return: The element at the given index after rotations.\n    \"\"\"\n\n    # Apply the ranges to the array\n    for i in range(len(ranges)):\n        arr = [arr[r[0]:r[1]+1] if r[0] < r[1] else [] for r in ranges[i]]\n\n    # Apply the rotations to the array\n    for i in range(len(rotations)):\n        arr = arr[rotations[i]:] + arr[:rotations[i]]\n\n    # Return the element at the given index\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, a number of rotations, and an index\n    and returns the element that will be found after the given number of rotations.\n    \"\"\"\n    # initialize variables to keep track of the current element, its index, and the range it belongs to\n    current_element = arr[index]\n    current_index = index\n    current_range = ranges[0]\n    \n    # iterate through each range and find the next element that belongs to the same range\n    for range_index, range_length in enumerate(ranges):\n        # if the current index is within the range\n        if current_index >= range_index and current_index < range_index + range_length:\n            # find the index of the next element in the range\n            next_index = current_index + range_length - 1\n            # if the next index is within the range\n            if next_index >= range_index and next_index < range_index + range_length:\n                # find the next element in the range\n                next_element = arr[next_index]\n                # check if the next element belongs to the same range as the current element\n                if next_index - range_index == current_index - range_index:\n                    # if so, return the next element\n                    return next_element\n    \n    # if no next element is found, return the current element\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations and index as input.\n    It finds the element at the given index after the specified number of rotations.\n    The function returns the element at the given index.\n    '''\n    # Calculate the element at the given index after rotations\n    rotated_index = (index + rotations) % len(arr)\n    result = arr[(rotated_index + ranges) % len(arr)]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    p_words = re.findall(pattern, words)\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p[a-z]*$') # regex pattern to match words starting with 'p'\n    p_words = []\n    for word in words:\n        if p_pattern.match(word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    for word in words:\n        if re.search(pattern, word):\n            return word, word.replace('p', '')\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'\\b(p)\\w+(\\b)')\n    matches = pattern.findall(words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern for matching words starting with letter 'p'\n    pattern = re.compile(r'\\bp\\w+')\n    \n    # Find all words starting with 'p' in the list\n    matches = re.findall(pattern,''.join(words))\n    \n    # Return the two words starting with 'p' found in the list\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-zA-Z]+$', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes an array a, its length n, the index i and the kth element after i as input. It returns the maximum sum of increasing subsequence from prefix until index i and including kth element.\n    '''\n    if index == 0:\n        return a[0]\n    elif index == n:\n        return 0\n    \n    # If the index is not k, return the sum of the previous element and the maximum sum of increasing subsequence from prefix until index i-1\n    if index!= k:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k))\n    \n    # If the index is k, return the sum of the previous element and the maximum sum of increasing subsequence from prefix until index i-1\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k) + a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_subseq = [0]*n\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] < a[j]:\n                max_sum = max(max_sum, a[i]+max_subseq[j])\n                max_subseq[i+1] = max(max_subseq[i+1], a[i]+max_sum)\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    curr_sum = a[index]\n\n    for i in range(index + 1, n):\n        if i == k:\n            curr_sum += a[i]\n        elif a[i] > a[index]:\n            curr_sum += a[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            curr_sum = a[i]\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    :param a: the given array\n    :param n: the size of the array\n    :param index: the index where the subsequence starts from\n    :param k: the kth element which is after index\n    :return: the maximum sum of increasing subsequence and its length\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing_subseq = []\n    length = 0\n\n    # Iterate through the array starting from the given index\n    for i in range(index, n):\n\n        # Check if the current element is greater than or equal to k\n        if a[i] >= k:\n\n            # If yes, add it to the increasing subsequence and update the current sum\n            increasing_subseq.append(a[i])\n            current_sum += a[i]\n\n            # If the current sum is greater than the maximum sum so far, update the maximum sum and its length\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = len(increasing_subseq)\n\n        # If the current element is less than k, update the current sum with 0 and start a new increasing subsequence\n        else:\n            current_sum = 0\n            increasing_subseq = []\n\n    # Return the maximum sum of increasing subsequence and its length\n    return max_sum, length"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    if index == 0:\n        if a[0] < k:\n            return 0\n        else:\n            return 0\n    else:\n        max_so_far = 0\n        curr_sum = 0\n        for i in range(index, n):\n            if a[i] < k:\n                curr_sum = max(curr_sum + a[i], 0)\n                max_so_far = max(max_so_far, curr_sum)\n            else:\n                curr_sum = 0\n        return max_so_far\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == n:\n        return 0\n\n    # Initialize variables\n    max_ending_here = a[index]\n    max_so_far = a[index]\n    max_ending_here_with_k = a[index]\n    max_so_far_with_k = 0\n\n    # Initialize variables for kth element\n    kth_element = a[k]\n    kth_element_index = k\n\n    for i in range(index+1, n):\n        if a[i] > max_ending_here + a[index]:\n            max_ending_here_with_k = max_ending_here\n            max_ending_here = a[i]\n            max_ending_here_index = i\n        elif a[i] > max_ending_here_with_k + a[kth_element_index]:\n            max_ending_here_with_k = a[i]\n            max_ending_here_index = i\n        if a[i] > max_so_far_with_k + kth_element:\n            max_so_far_with_k = max_so_far\n            max_so_far = a[i]\n            max_so_far_index = i\n        elif a[i] > max_so_far_with_k + kth_element:\n            max_so_far_with_k = a[i]\n            max_so_far_index = i\n\n    # Find the maximum sum of increasing subsequence including kth element\n    max_sum_including_k = max_so_far_with_k + kth_element\n\n    return max_sum_including_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return 0\n\n    dp = [-float('inf')] * n\n    dp[index - 1] = 0\n\n    for i in range(index, n):\n        if a[i] > a[index - 1]:\n            dp[i] = dp[index - 1] + a[i]\n        else:\n            dp[i] = max(dp[i - 1], dp[index - 1]) + a[i]\n\n    return max(dp[k], dp[index - 1])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_subseq = []\n\n    # Traverse the array starting from 0 to i\n    for i in range(n):\n        # If the element is greater than or equal to k, add it to the current subsequence\n        if a[i] >= k:\n            current_subseq.append(a[i])\n\n            # If the length of the current subsequence is greater than or equal to i+1,\n            # update the maximum sum and current sum\n            if len(current_subseq) >= index + 1:\n                current_sum = sum(current_subseq)\n                max_sum = max(max_sum, current_sum)\n\n            # Remove the first element from the current subsequence\n            current_subseq.pop(0)\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (n + 1)\n    max_sum = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i - j <= index:\n                dp[i] = max(dp[i], dp[i - j] + a[i - j])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize max_sum to 0\n    max_sum = 0\n\n    # Initialize prefix_sum to 0\n    prefix_sum = 0\n\n    # Initialize max_sum_k to 0\n    max_sum_k = 0\n\n    # Initialize max_sum_prefix_sum_k to 0\n    max_sum_prefix_sum_k = 0\n\n    # Initialize prefix_sum_k to 0\n    prefix_sum_k = 0\n\n    # Loop through the array from 0 to n-1\n    for i in range(n):\n\n        # If the current element is greater than or equal to k\n        if a[i] >= k:\n\n            # If the prefix_sum_k is greater than max_sum_prefix_sum_k\n            if prefix_sum_k > max_sum_prefix_sum_k:\n\n                # Initialize max_sum_k to prefix_sum_k\n                max_sum_k = prefix_sum_k\n\n                # Initialize max_sum_prefix_sum_k to prefix_sum\n                max_sum_prefix_sum_k = prefix_sum\n\n            # If the prefix_sum_k is equal to max_sum_prefix_sum_k\n            elif prefix_sum_k == max_sum_prefix_sum_k:\n\n                # If the prefix_sum_k is greater than max_sum_k\n                if prefix_sum_k > max_sum_k:\n\n                    # Set max_sum_k to prefix_sum_k\n                    max_sum_k = prefix_sum_k\n\n                    # Set max_sum_prefix_sum_k to prefix_sum\n                    max_sum_prefix_sum_k = prefix_sum\n\n        # Add the current element to prefix_sum\n        prefix_sum += a[i]\n\n        # If the current element is greater than or equal to index\n        if a[i] >= index:\n\n            # If the prefix_sum is greater than max_sum\n            if prefix_sum > max_sum:\n\n                # Initialize max_sum to prefix_sum\n                max_sum = prefix_sum\n\n    # If the prefix_sum_k is greater than max_sum_prefix_sum_k\n    if prefix_sum_k > max_sum_prefix_sum_k:\n\n        # Set max_sum_k to prefix_sum_k\n        max_sum_k = prefix_sum_k\n\n        # Set max_sum_prefix_sum_k to prefix_sum\n        max_sum_prefix_sum_k = prefix_sum\n\n    # If the prefix_sum_k is equal to max_sum_prefix_sum_k\n    elif prefix_sum_k == max_sum_prefix_sum_k:\n\n        # Set max_sum_k to prefix_sum_k\n        max_sum_k = prefix_sum_k\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum_k\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Check if the tuple is of length m\n    if len(tuplex)!= m:\n        raise ValueError(\"The tuple is of length {} but the required length is {}.\".format(len(tuplex), m))\n\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slice the tuple to get the colon\n    colon = tuple(tuplex_copy[i:i+n] for i in range(0, len(tuplex), n))\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Using deepcopy() function to create a new tuple with the same elements as original tuple\n    colon = deepcopy(tuplex)\n    # Using slicing to get a colon from the original tuple\n    colon = colon[m:n]\n    # Returning the colon tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n        tuplex (tuple): A tuple to get a colon from.\n        m (int): The number of rows to include in the colon.\n        n (int): The number of columns to include in the colon.\n\n    Returns:\n        list: A list containing the specified number of columns from the input tuple.\n    \"\"\"\n\n    # Create a copy of the input tuple to avoid modifying it\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slice the tuple to get the desired number of columns\n    colon = tuplex_copy[:m][::n]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n\n    # If m is greater than n, swap the values of m and n\n    if m > n:\n        m, n = n, m\n\n    # Find the indexes of the values that should be in the colon\n    colon_indexes = []\n    for i in range(m, n+1):\n        colon_indexes.append(i-1)\n\n    # Create a list of the values that should be in the colon\n    colon_vals = [tuplex_copy[i] for i in colon_indexes]\n\n    # Create a tuple with the colon values\n    colon_tuplex = tuple(colon_vals)\n\n    return colon_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(len(tuplex)):\n        new_tuplex.append(tuplex[i:i+m])\n    new_tuplex = tuple(new_tuplex)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Create a colon of a tuple.\n    '''\n    # Make a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get the length of the tuple\n    length = len(tuplex)\n    \n    # Check if the length of the new tuple is greater than the desired length\n    while len(new_tuplex) > m * n:\n        # Remove the last element from the new tuple\n        new_tuplex = new_tuplex[:-1]\n    \n    # Iterate through the new tuple to create the colon\n    i = 0\n    while i < length and i < m * n:\n        # Add the i-th element to the colon\n        colon_tuplex.append(new_tuplex[i])\n        i += 1\n    \n    # Return the colon tuple\n    return tuple(colon_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        copy_tuplex = (copy_tuplex[0],) + copy_tuplex[1:]\n    for i in range(n):\n        copy_tuplex = copy_tuplex + (copy_tuplex[1],)\n    return copy_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colons = []\n    i = 0\n    while i < len(tuplex):\n        j = 0\n        while j < len(tuplex[i]) and j < m:\n            colons.append(deepcopy(tuplex[i][j]))\n            j += 1\n        i += 1\n    return tuple(colons)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying the original\n    tuplex = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(tuplex)\n    # calculate the number of columns and rows\n    rows = m\n    cols = n\n    # calculate the number of elements in a row\n    elems_per_row = length // rows\n    # get the columns of the colon\n    colon = []\n    for i in range(rows):\n        # get the index of the first element in the row\n        index = i*elems_per_row\n        # add the elements of the row to the colon\n        colon.extend(tuplex[index:index+elems_per_row])\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get a deep copy of the tuple\n    col = deepcopy(tuplex)\n    \n    # Colonize the tuple\n    for i in range(m):\n        col = col[1:]\n        col = (col,)+col\n    \n    # Transpose the colon\n    col = tuple(zip(*col))\n    \n    # Truncate the colon to the desired length\n    col = col[:n]\n    \n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Compute the product of the first N elements of each list\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n\n    # Find the largest product\n    largest_product = max(product1, product2)\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # create a list to store the largest products\n    largest_products = []\n\n    # sort the first list in descending order\n    nums1.sort(reverse=True)\n\n    # loop through the first list\n    for num1 in nums1:\n        # create a list to store the products of the factor with num1 and the rest of the list\n        factor_products = []\n\n        # loop through the second list\n        for num2 in nums2:\n            # calculate the product of the factor with num1 and num2\n            product = num1 * num2\n\n            # add the product to the factor_products list\n            factor_products.append(product)\n\n        # sort the factor_products list in descending order\n        factor_products.sort(reverse=True)\n\n        # add the first N products to the largest_products list\n        for i in range(N):\n            largest_products.append(factor_products[i])\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Loop through each combination of factors\n    for i in range(len(nums1)):\n        for j in range(i + 1, len(nums1) + 1):\n            # Find the largest product for each combination\n            product1 = nums1[i] * nums2[j - 1]\n            product2 = nums1[j - 1] * nums2[i]\n\n            # If the product is larger than the current maximum, add it to the list\n            if product1 > product2 and product1 > largest_products[-1] or product2 > largest_products[-1]:\n                largest_products.append(product1)\n\n    # Return the list of largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    temp_product = 1\n    \n    # iterate through each factor from the two lists\n    for i in range(N):\n        # find the maximum product of the two lists, excluding the current factor\n        max_product = max(max_product, nums1[i]*nums2[i])\n        temp_product = 1\n        \n        # iterate through the two lists to find the product of the current factor\n        for j in range(i+1, N):\n            temp_product *= max(nums1[j], nums2[j])\n        \n        # update the maximum product with the product of the current factor\n        max_product = max(max_product, temp_product)\n    \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Calculate the product of the first N elements of each list\n    product1 = nums1[0] * nums1[1] * nums1[2] *... * nums1[N-1]\n    product2 = nums2[0] * nums2[1] * nums2[2] *... * nums2[N-1]\n    # Compare the products and return the larger one\n    if product1 > product2:\n        return product1\n    else:\n        return product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the largest products as negative infinity\n    largest1 = largest2 = float('-inf')\n    \n    # Loop through the specified number of products\n    for i in range(N):\n        # Calculate the product of the first factor from each list\n        product1 = nums1[i] * nums1[i]\n        \n        # Calculate the product of the second factor from each list\n        product2 = nums2[i] * nums2[i]\n        \n        # Update the largest products if necessary\n        if product1 > largest1:\n            largest1 = product1\n        if product2 > largest2:\n            largest2 = product2\n    \n    # Return the largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a dictionary to store the products of the two given lists\n    product_dict = {}\n    \n    # Calculate the products of all possible pairs of factors from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            \n            if product in product_dict:\n                product_dict[product] += 1\n            else:\n                product_dict[product] = 1\n    \n    # Find the N largest products and return their indices\n    return sorted(product_dict, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the product of the first N numbers in nums1 and nums2\n    product = nums1[0] * nums2[0]\n    # Initialize an empty list to store the N largest products\n    largest_products = []\n    # Loop through the remaining N-1 numbers in each list\n    for i in range(1, N):\n        # Calculate the product of the next N-i numbers in nums1 and nums2\n        new_product = nums1[i] * nums2[i]\n        # If the new product is greater than the current product, update the product and the largest products list\n        if new_product > product:\n            product = new_product\n            largest_products = [new_product]\n        # If the new product is not greater than the current product, append it to the largest products list\n        elif new_product!= product:\n            largest_products.append(new_product)\n    # Return the largest products list\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N % 2 == 0:\n        raise ValueError(\"N must be odd\")\n    \n    max_product = float('-inf')\n    \n    for i in range(N):\n        max_product = max(max_product, nums1[i] * nums2[N - 1 - i])\n    \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    i, j = 0, 0\n    product1, product2 = 1, 1\n\n    # Loop through each index in the lists\n    for k in range(N):\n        # Calculate the largest product for the first list\n        if i < len(nums1) and j < len(nums2):\n            if nums1[i] > nums2[j]:\n                product1 = max(nums1[i], nums1[i] * product2)\n            else:\n                product1 = max(nums2[j], nums2[j] * product1)\n            i += 1\n        # If the first list is exhausted, calculate the largest product for the second list\n        elif i == len(nums1):\n            product1 = max(nums2[j], nums2[j] * product1)\n        # If the second list is exhausted, calculate the largest product for the first list\n        else:\n            product1 = max(nums1[i], nums1[i] * product1)\n            j += 1\n\n        # Calculate the largest product for the second list\n        if i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                product2 = max(nums1[i], nums1[i] * product2)\n            else:\n                product2 = max(nums2[j], nums2[j] * product1)\n            i += 1\n        # If the second list is exhausted, calculate the largest product for the first list\n        elif i == len(nums1):\n            product2 = max(nums1[i], nums1[i] * product1)\n        # If the first list is exhausted, calculate the largest product for the second list\n        else:\n            product2 = max(nums2[j], nums2[j] * product1)\n            j += 1\n\n        # Update the maximum product found so far\n        if product1 > max_product:\n            max_product = product1\n        if product2 > max_product:\n            max_product = product2\n\n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of these numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Convert the list to a tuple of characters\n    return tuple(str_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple\n    tuple_of_chars = tuple(char_list)\n    return tuple_of_chars"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # Keep moving the leftmost unset bit to the right\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    i = 0\n    while i < 32 and (n & (1 << i)):\n        i += 1\n    return i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:  # while the last bit is zero\n        n >>= 1  # shift the last bit to the left\n    return n | 1  # OR the shifted bit with 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary representation of n to a list of digits\n    binary_representation = [int(digit) for digit in bin(n)[2:]]\n    # Loop through the list and set the left most unset bit to 1\n    for i in range(len(binary_representation)):\n        if binary_representation[i] == 0:\n            binary_representation[i] = 1\n            # Convert the list of digits back to a binary string and convert it to an integer\n            left_most_unset_bit_n = int(''.join(map(str, binary_representation)), 2)\n            return left_most_unset_bit_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize a boolean variable to keep track of whether a bit is set or not\n    bit_set = False\n    # Initialize a counter variable to keep track of the number of set bits\n    num_set_bits = 0\n    # Loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the bit is unset (not set), set the bit_set variable to True and increment the num_set_bits\n        if bin(n)[2:].count('0') == i:\n            bit_set = True\n            num_set_bits += 1\n        # If the bit is already set, break out of the loop\n        elif bit_set:\n            break\n    # If there are no unset bits, return n\n    if num_set_bits == 0:\n        return n\n    # If there is only one unset bit, set it to 1 and return n\n    elif num_set_bits == 1:\n        return n | 1\n    # If there are more than one unset bits, return n shifted left by the number of set bits\n    else:\n        return n << num_set_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate over the set bits in n from the left\n    for i in range(32):\n        # Check if the i-th bit is set\n        if n & (1 << i):\n            # If it is set, set the corresponding bit in the result to 1\n            result |= 1 << i\n            # Stop iterating\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Set all bits to 1\n    n = n | (n - 1)\n\n    # Find the leftmost unset bit\n    left_most_unset = -1\n    while n:\n        n = n & (n - 1)\n        left_most_unset += 1\n\n    # Set the leftmost unset bit to 1\n    n = n | (1 << left_most_unset)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the input integer to binary string\n    binary_str = bin(n)[2:]\n\n    # Find the left most unset bit index\n    left_most_unset_bit_index = binary_str.find('0')\n\n    # If the left most unset bit is not at index 0, set the leftmost unset bit to 1\n    if left_most_unset_bit_index!= 0:\n        binary_str = binary_str[:left_most_unset_bit_index] + '1' + binary_str[left_most_unset_bit_index:]\n        n = int(binary_str, 2)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the variable to keep track of the unset bits\n    unset = 0\n    # Loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is set, unset the corresponding bit in unset\n        if bin(n)[2:].index(str(i))!= -1:\n            unset |= 1 << i\n    \n    # Return the unset bits shifted to the left by the number of unset bits\n    return (unset << len(bin(n)[2:])) & n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:  # check if the rightmost bit is 0\n        n = n >> 1  # shift to the right by 1 position\n    n = n | 1  # set the leftmost bit to 1\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    # Using formula for cone volume\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    vol = pi * r ** 2 * h / 3\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input parameters,\n    and returns the volume of the cone.\n    '''\n    \n    # Calculating the volume of the cone using Heron's formula\n    volume = (1/3) * math.pi * r * r * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    # Calculate the base of the cone\n    base = math.pi * r * r * h\n    \n    # Calculate the volume of the cone\n    volume = (1/3) * base * r * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone with given radius r and height h.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: radius and height of the cone.\n    It returns the volume of the cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two inputs, r, the radius of the base of the cone and h, the height of the cone.\n    It returns the volume of the cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Convert n to binary representation\n    bin_str = bin(n)[2:]\n\n    # Initialize variables\n    highest_power_of_2 = 1\n    power = 0\n\n    # Iterate through each digit of the binary representation\n    for digit in bin_str:\n        if digit == '1':\n            # If the current digit is 1, then the power of 2 is equal to the current power plus one\n            power += 1\n        else:\n            # If the current digit is 0, then we need to update the highest power of 2\n            if power > highest_power_of_2:\n                highest_power_of_2 = power\n            # Reset the power to 0\n            power = 0\n\n    # If there is a power remaining after iterating through all the digits, we need to update the highest power of 2\n    if power > highest_power_of_2:\n        highest_power_of_2 = power\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    # initialize variables\n    highest_power = 0\n    current_power = 1\n\n    # loop through powers of 2 up to n\n    while current_power <= n:\n        if current_power > highest_power:\n            highest_power = current_power\n\n        # increment current power\n        current_power *= 2\n\n    # return highest power of 2 less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while n > i:\n        i <<= 1\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # If n is already a power of 2, return n.\n    if n & (n-1) == 0:\n        return n\n\n    # Find the highest power of 2 that is less than or equal to n.\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 to -1 (since we have not found any yet)\n    highest = -1\n    \n    # Loop through all powers of 2 from 0 to n\n    for power in range(0, n+1):\n        # If the power is greater than the current highest power, update the highest power\n        if power > highest:\n            highest = power\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 found so far\n    highest_power_of_2 = 1\n    \n    # Loop through all powers of 2 from 1 to n\n    for power_of_2 in range(1, n+1):\n        # If the current power of 2 is less than the highest power of 2 found so far,\n        # update the highest power of 2 found so far\n        if power_of_2 < highest_power_of_2:\n            highest_power_of_2 = power_of_2\n    \n    # Return the highest power of 2 found so far\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a power of 2\n        if i == 2**i:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initialize variables\n    highest = 1\n    power = 0\n    \n    # loop while n is greater than highest power of 2\n    while n > highest:\n        highest *= 2\n        power += 1\n        \n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function calculates the nth Lucas number using the formula:\n    Lucas(n) = 2^n - 1\n    \n    Args:\n    n (int): the nth number of the Lucas sequence to find\n    \n    Returns:\n    int: then'th Lucas number\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_prev = 2\n        lucas_curr = 1\n        for i in range(2, n+1):\n            lucas_next = lucas_prev + lucas_curr\n            lucas_prev = lucas_curr\n            lucas_curr = lucas_next\n        return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    This function finds the nth lucas number using a recursive approach.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th Lucas number using a simple formula.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for i in range(len(list_)):\n        formatted_list.append(string % list_[i])\n    return formatted_list\n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string % element)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n    list_ (list): the list to apply the format string to\n    string (str): the format string to apply\n\n    Returns:\n    list_: the list with all elements formatted according to the given format string.\n    '''\n\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i, lst in enumerate([l1, l2, l3]):\n        for j, item in enumerate(lst):\n            key = f\"{i}-{j}\"\n            result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create a dictionary for each list and append it to a list\n    dictionary_list = []\n    for i in range(len(l1)):\n        dictionary_list.append({'list1': l1[i], 'list2': l2[i], 'list3': l3[i]})\n\n    # convert the list of dictionaries to nested dictionary\n    nested_dict = {}\n    for dictionary in dictionary_list:\n        for key, value in dictionary.items():\n            if key in nested_dict:\n                if isinstance(nested_dict[key], list):\n                    nested_dict[key].append(value)\n                else:\n                    nested_dict[key] = [nested_dict[key], value]\n            else:\n                nested_dict[key] = value\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert first list to dictionary\n    dict1 = dict(zip(l1[0], l1[1]))\n    # Convert second list to dictionary\n    dict2 = dict(zip(l2[0], l2[1]))\n    # Convert third list to dictionary\n    dict3 = dict(zip(l3[0], l3[1]))\n    # Convert dictionary to list of dictionaries\n    return [dict1, dict2, dict3]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n\n    # Loop through each list and add items to the result dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for item in lst:\n            # If the item is a string, convert it to a list of characters\n            if isinstance(item, str):\n                item = list(item)\n            \n            # Add the item to the result dictionary with the current list index as the key\n            result.setdefault(i, []).append(item)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data_dict = {}\n    for i in range(len(l1)):\n        data_dict[l1[i]] = {l2[i]: l3[i]}\n    return data_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # define a dictionary to store the data\n    data = {}\n    # loop through the lists\n    for i in range(len(l1)):\n        # loop through the sub-lists in the lists\n        for j in range(len(l1[i])):\n            # add the sub-lists data to the dictionary\n            data[l1[i][j]] = l2[i][j]\n    # loop through the third list and add the data to the dictionary\n    for i in range(len(l3)):\n        # add the data to the dictionary\n        data[l3[i]] = l3[i]\n    # return the dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to hold the final result\n    final_dict = {}\n    \n    # iterate over the input lists\n    for i in range(len(l1)):\n        # create a new sub-dictionary for each element in the input list\n        sub_dict = {l1[i]: l2[i], l3[i]: l2[i]}\n        # add the sub-dictionary to the final dictionary\n        final_dict[i] = sub_dict\n    \n    # return the final dictionary\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1: List of numbers\n    l2: List of strings\n    l3: List of tuples\n\n    Returns:\n    A nested dictionary where the keys are lists of numbers, strings, or tuples, and the values are lists of the corresponding elements from the input lists.\n    \"\"\"\n\n    result = {}\n\n    for item in l1:\n        if type(item) in [list, tuple]:\n            for subitem in item:\n                if type(subitem) in [int, float]:\n                    if subitem not in result:\n                        result[subitem] = []\n                    result[subitem].append(l1.index(item))\n        elif type(item) in [int, float]:\n            if item not in result:\n                result[item] = []\n            result[item].append(l1.index(item))\n\n    for item in l2:\n        if item not in result:\n            result[item] = []\n        result[item].append(l2.index(item))\n\n    for item in l3:\n        if item not in result:\n            result[item] = []\n        result[item].append(l3.index(item))\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2[i])):\n            inner_dict[l2[i][j]] = l3[i][j]\n        nested_dict[l1[i]] = inner_dict\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary\n    nested_dict = {}\n\n    # Iterate over the list of lists\n    for sublist in [l1, l2, l3]:\n\n        # Iterate over the sublist and add each element as a key in the nested dictionary\n        for element in sublist:\n            nested_dict[element] = None\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    def helper(n):\n        if n == 1:\n            return n\n        else:\n            return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(i, current_sum):\n        if i == 1:\n            return n + current_sum\n        elif i % 2 == 0:\n            return helper(i/2, current_sum + helper(i/2, 0))\n        else:\n            return helper(i/2, current_sum + helper(i/2, 0))\n\n    return max(helper(n, 0), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        if max_sum > n:\n            return max_sum\n        else:\n            return n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    if n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//2) + n\n\n    if n % 3 == 0:\n        return get_max_sum(n//3) + get_max_sum(n//3) + get_max_sum(n//3) + n\n\n    if n % 4 == 0:\n        return get_max_sum(n//4) + get_max_sum(n//4) + get_max_sum(n//4) + get_max_sum(n//4) + n\n\n    if n % 5 == 0:\n        return get_max_sum(n//5) + get_max_sum(n//5) + get_max_sum(n//5) + get_max_sum(n//5) + get_max_sum(n//5) + n\n\n    return n + get_max_sum(n-1)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    # Recursive calls to find the maximum sum of the first n terms of the sequence\n    max_sum_1 = get_max_sum(n/2)\n    max_sum_2 = get_max_sum(n/3)\n    max_sum_3 = get_max_sum(n/4)\n    max_sum_4 = get_max_sum(n/5)\n\n    # Calculate the maximum sum of the current term and the maximum sum of the remaining terms\n    max_sum_current = max(max_sum_1 + n, max_sum_2 + max_sum_3 + max_sum_4 + n)\n\n    # Return the maximum sum of the current term and the maximum sum of the remaining terms\n    return max(max_sum_current, max_sum_4 + max_sum_2 + max_sum_1 + n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        return fibonacci(n-1) + fibonacci(n-2)\n\n    def max_sum(n):\n        if n <= 1:\n            return n\n        else:\n            return max(fibonacci(n) + max_sum(n//2), max_sum(n//3)) + max_sum(n//4) + max_sum(n//5)\n\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 6:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n <= 1:\n            return n\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n    \n    return f(n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    return [i for i in input_list if len(i) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Initialize a variable to store the maximum length\n    max_length = 0\n\n    # Loop through the input list and update the max_length variable\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n\n    # Return the list with the maximum length\n    return [item for item in input_list if len(item) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            result = [item]\n        elif len(str(item)) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Iterate through the list of input lists\n    for item in input_list:\n        # Find the length of the current list\n        length = len(item)\n        \n        # Check if the length is greater than the current maximum length\n        if length > max_length:\n            max_length = length\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_len = 0\n    result = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            result = [i]\n        elif len(i) == max_len:\n            result.append(i)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = set(test_tup)\n    if len(test_tup) == len(unique):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        # If the length is equal, then there are no duplicates\n        return True\n    else:\n        # If the length is not equal, then there are duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to lowercase and remove any non-alphabetic characters\n    str1 = str1.lower().replace(\" \", \"\")\n\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Find the first character in the dictionary that has a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character\n    first_non_repeated_char = None\n    for char in str1:\n        if freq[char] == 1:\n            first_non_repeated_char = char\n            break\n\n    return first_non_repeated_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to lowercase to make it case-insensitive\n    str1 = str1.lower()\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the characters of the string and check if the count of each character is 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Find the first non-repeating character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n            \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their counts\n    char_count = {}\n\n    # Loop through the string and update the character counts\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return 'There is no non-repeating character in the string.'"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character by iterating over the dictionary and finding the first element with a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the middle index\n    middle_index = len(sorted_list) // 2\n\n    # If the middle index is even, return the average of the two middle numbers\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    # If the middle index is odd, return the middle number\n    else:\n        return sorted_list[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    a, b, c = sorted([a, b, c])\n    \n    # Find the length of the sorted array\n    n = len(a)\n    \n    # Check if the array has an odd or even length\n    if n % 2 == 0:\n        # Find the average of the two middle elements\n        median = (a[n//2-1] + a[n//2]) / 2\n    else:\n        # Find the middle element\n        median = a[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    n = len(sorted_numbers)\n\n    # If the length of the list is odd, the median is the middle number\n    if n % 2 == 1:\n        median = sorted_numbers[n//2]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        mid1 = n//2 - 1\n        mid2 = n//2\n        median = (sorted_numbers[mid1] + sorted_numbers[mid2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the three numbers\n    num_list = sorted([a,b,c])\n    \n    # calculating the median\n    if len(num_list) % 2 == 0:\n        # if the list has even number of elements\n        median = (num_list[len(num_list)//2] + num_list[len(num_list)//2-1]) / 2\n    else:\n        # if the list has odd number of elements\n        median = num_list[len(num_list)//2]\n    \n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    The median of three numbers is the middle number if the numbers are sorted in ascending order.\n    If the numbers are not sorted, the function returns the mean of the three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Find the length of the sorted list\n    length = len(sorted_numbers)\n\n    # If the length of the list is odd, the median is the middle number\n    if length % 2!= 0:\n        median = sorted_numbers[length//2]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[length//2-1] + sorted_numbers[length//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the given three numbers in ascending order\n    sorted_list = sorted([a,b,c])\n    \n    # Find the index of the middle number\n    mid_index = len(sorted_list) // 2\n    \n    # If the length of the list is odd, then the middle number is the average of the two middle numbers\n    if len(sorted_list) % 2 == 1:\n        median = (sorted_list[mid_index-1] + sorted_list[mid_index])/2\n    \n    # If the length of the list is even, then the median is the middle number\n    else:\n        median = sorted_list[mid_index]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    n = len(numbers)\n    # check if the length of the sorted list is odd or even\n    if n % 2 == 1:\n        # find the middle number\n        mid = n // 2\n        # return the middle number\n        return numbers[mid]\n    else:\n        # find the two middle numbers\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n        # return the average of the two middle numbers\n        return (numbers[mid1] + numbers[mid2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a, b, c = sorted([a, b, c])\n    n = len(a)\n    if n % 2 == 0:\n        return (a[n//2-1] + a[n//2])/2\n    else:\n        return a[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Determine the size of the list\n    size = len(sorted_numbers)\n\n    # If the size is odd, the median is the middle number\n    if size % 2 == 1:\n        median = sorted_numbers[size // 2]\n    # If the size is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[size // 2 - 1] + sorted_numbers[size // 2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Checking if the numbers are in ascending or descending order\n    if sorted_numbers[0] <= sorted_numbers[1] <= sorted_numbers[2]:\n        return sorted_numbers[1]\n    else:\n        return sorted_numbers[2]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        result += sum(digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        digits_sum.append(digit_sum)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        \n        # Loop through each digit in the number string\n        for digit in num_str:\n            # Convert the digit to an integer\n            digit_int = int(digit)\n            \n            # Add the digit to the sum of digits\n            sum_of_digits += digit_int\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to store the sum of digits\n    total = 0\n    \n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string to extract the digits\n        digits = str(num)\n        \n        # iterate over each digit in the string\n        for digit in digits:\n            # convert the digit to an integer and add it to the total\n            total += int(digit)\n    \n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        for digit in str(num):\n            sum += int(digit)\n    return sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Iterate over each element in the first tuple\n    for element1 in test_tup1:\n        # Iterate over each element in the second tuple\n        for element2 in test_tup2:\n            # Perform the bitwise xor operation on the two elements\n            result_list.append(element1 ^ element2)\n    \n    # Return the list of results\n    return result_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with all zeros\n    result_tup = (0,)*len(test_tup1)\n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation between the current elements of the tuples\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize variables to store the result of the bitwise xor operation\n    result_tup = ()\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n\n        # Perform the bitwise xor operation between the elements of the two tuples at the current index\n        xor_result = test_tup1[i] ^ test_tup2[i]\n\n        # Append the xor result to the result tuple\n        result_tup += (xor_result,)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1), len(test_tup2)):\n            result += ((test_tup1[i] ^ 0),)\n    elif len(test_tup2) > len(test_tup1):\n        for i in range(len(test_tup2), len(test_tup1)):\n            result += ((0 ^ test_tup2[i]),)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return True\n    return False"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(bin(x ^ y)[2:].zfill(len(bin(x)[2:]) + len(bin(y)[2:])))\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate through the list\n    for item in test_list:\n        # Convert the item to a tuple and add it to the set\n        unique_tuples.add(tuple(item))\n\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # create an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n\n    # iterate through the list and count the frequency of each tuple\n    for i in test_list:\n        if tuple(sorted(i)) not in freq_dict:\n            freq_dict[tuple(sorted(i))] = 1\n        else:\n            freq_dict[tuple(sorted(i))] += 1\n\n    # return the total number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if (item, tuple(item)) not in freq:\n            freq[(item, tuple(item))] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    # Create a dictionary to store the counts of unique tuples\n    freq_dict = {}\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in freq_dict:\n            # Increment its count by 1\n            freq_dict[tup] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            freq_dict[tup] = 1\n\n    # Return the dictionary with the counts of unique tuples\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        for key in item:\n            unique_tuples.add((key, item[key]))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list and returns the number of unique tuples in the list.\n    '''\n    # Create a set to store the unique tuples\n    unique_tuples = set()\n    \n    # Loop through the list and add each tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    \n    # Return the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup2[0])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] + test_tup2[i])\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tup = (test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1])\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize a new empty tuple to store the result of the addition operation\n    result_tup = ()\n    # Check if both input tuples have equal number of elements\n    if len(test_tup1) == len(test_tup2):\n        # Iterate over each element in the two input tuples\n        for i in range(len(test_tup1)):\n            # Add the elements at the corresponding index positions and append the result to the new tuple\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    else:\n        # Raise an error if the number of elements in the input tuples is not equal\n        raise ValueError(\"Both input tuples must have the same number of elements.\")\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # unpack the nested tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len!= tup2_len:\n        print(\"Error: The tuples must have same length!\")\n        return\n    # create empty lists to store the sum of elements in each tuple\n    sum1 = []\n    sum2 = []\n    # iterate through the tuples and add the elements at each index\n    for i in range(tup1_len):\n        sum1.append(test_tup1[i] + test_tup2[i])\n        sum2.append(test_tup1[i] - test_tup2[i])\n    # return the sum of each tuple\n    return sum1, sum2"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:  \n        return a  \n    else:  \n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"Element exists in the tuple.\")\n    else:\n        print(\"Element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two arguments:\n    - tuplex: The tuple in which we want to check for an element\n    - tuple1: The tuple containing the element we want to check for\n\n    The function returns True if the element exists within the tuple, otherwise, it returns False.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    for i in tuple1:\n        if tuplex == i:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples as arguments and checks whether the first element exists within the second tuple.\n    '''\n    if tuple1[0] in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for item in tuple1:\n        if item in tuplex:\n            print(\"Element exists in tuple.\")\n            break\n    else:\n        print(\"Element does not exist in tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Using bitwise operations to check for parity\n    if x & 1: # if x is odd, the bitwise AND of x with 1 will result in 0\n        return True\n    else: # if x is even, the bitwise AND of x with 1 will result in 1\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = False\n    if x % 2 == 0: # if the number is even\n        parity = True\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of\", x, \"is even.\"\n    else:\n        return \"The parity of\", x, \"is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Calculate the parity of x\n    parity = x % 2\n    \n    # Return the parity\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # If x is even, parity will be even\n        parity = \"even\"\n    else: # If x is odd, parity will be odd\n        parity = \"odd\"\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    # Define a helper function to check whether the parity of a given number is even or odd\n    def parity(n):\n        return n % 2 == 0\n    \n    # Check whether the parity of the given number is odd or even\n    if parity(x):\n        print(x, \"is odd.\")\n    else:\n        print(x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n        return False\n    else:\n        print(f\"{x} is odd\")\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Initialize the next bigger number to 0\n    next_bigger = 0\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Iterate through the digits of the given number\n    for digit in num_str:\n        # Calculate the number of digits that come before the current digit\n        before_digit = num_str.count(digit)\n\n        # Calculate the number of digits that come after the current digit\n        after_digit = num_str.count(digit, 0, before_digit)\n\n        # Calculate the number of digits that come before and after the current digit\n        both_digit = num_str.count(digit, 0, before_digit + 1)\n\n        # Calculate the number of digits that come before the next digit (i.e. the next larger digit)\n        next_larger_digit = (9 - int(digit)) * num_str.count(str(int(digit) + 1))\n\n        # Add the smaller of the two possible options to the next_bigger number\n        if next_larger_digit < both_digit:\n            next_bigger += next_larger_digit\n        else:\n            next_bigger += both_digit\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    reverse_digits = digits[::-1]\n    digits_to_change = [i for i, digit in enumerate(reverse_digits) if digit == 0]\n    if not digits_to_change:\n        return None\n    digit_to_change = digits_to_change[0]\n    next_digit = next(digit for digit in range(10) if digit > digits[digit_to_change])\n    for i in range(len(digits)):\n        if i == digit_to_change:\n            continue\n        if digits[i] > next_digit:\n            digits[i] = next_digit\n            break\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Create a list to store the rearranged digits\n    rearranged = []\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n    # Reverse the digits from the start to the maximum index\n    rearranged.extend(digits[:max_index][::-1])\n    # Add the digits from the maximum index to the end\n    rearranged.extend(digits[max_index:])\n    # Convert the list of digits back into a number\n    return int(''.join(str(digit) for digit in rearranged))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # Find the index of the largest digit\n    max_index = num_list.index(max(num_list))\n\n    # Move the digits to the right side of the list\n    for i in range(max_index + 1, len(num_list)):\n        num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n\n    # Convert the list to a string and return the result\n    return int(\"\".join(num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    number = str(n)\n    \n    # Initialize a variable to store the rearranged digits\n    rearranged_number = ''\n    \n    # Loop through the digits in the given number\n    for digit in number:\n        \n        # If the digit is 9, increment the digit by 1 and append it to the rearranged digits\n        if digit == '9':\n            rearranged_number += str(int(digit) + 1)\n        \n        # If the digit is not 9, append it to the rearranged digits\n        else:\n            rearranged_number += digit\n    \n    # Convert the rearranged digits to an integer and return it\n    return int(rearranged_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    index = digits.index(max_digit)\n    digits[index] = 0\n    for i in range(index):\n        digits[i] += 1\n    for i in range(index, len(digits)):\n        digits[i] = 9\n    big_number = int(''.join(str(d) for d in digits))\n    return big_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    num_list = list(num)\n    i = len(num_list) - 1\n    while i >= 0:\n        if int(num_list[i]) > 0:\n            break\n        i -= 1\n    \n    while i >= 0:\n        if int(num_list[i]) < 9:\n            num_list[i] = str(int(num_list[i]) + 1)\n            break\n        num_list[i] = '0'\n        i -= 1\n        \n    num_str = ''.join(num_list)\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a list of digits of the given number\n    digits = [int(d) for d in str(n)]\n    \n    # Reverse the list\n    digits.reverse()\n    \n    # Add 1 to the last digit\n    digits[-1] += 1\n    \n    # Convert the list back to a string\n    result = ''.join(str(d) for d in digits)\n    \n    # Return the result\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the given number into a string\n    num_str = str(n)\n    \n    # initialize the largest number that can be formed by rearranging the digits\n    max_num = 0\n    \n    # iterate over the digits of the given number\n    for digit in num_str:\n        # convert the digit to integer\n        digit_int = int(digit)\n        \n        # find the next larger digit by rearranging the digits from right to left\n        next_digit = 9 - (digit_int % 10)\n        \n        # create the new number by concatenating the original number with the next digit\n        new_num = num_str[0:digit_int] + str(next_digit) + num_str[digit_int+1:]\n        \n        # check if the new number is greater than the largest number found so far\n        if int(new_num) > max_num:\n            max_num = int(new_num)\n    \n    # return the largest number that can be formed by rearranging the digits of the given number\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    max_digit = max(digits)\n    next_bigger = 0\n    for digit in digits:\n        if int(digit) > max_digit:\n            next_bigger += int(digit)\n        else:\n            next_bigger = 10 * next_bigger + int(digit)\n    \n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n            else:\n                curr_min = heapq.heappop(min_heap)\n                if curr_min[0] > (num1+num2):\n                    heapq.heappush(min_heap, (curr_min[0], curr_min[1]))\n                    heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n\n    result = []\n    while min_heap:\n        result.append(min_heap.pop()[1])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n    # Iterate through the first array and the second array\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the current pair\n            current_sum = nums1[i] + nums2[j]\n            # If the current pair is smaller than the smallest element in the heap or equal to it but the current sum is smaller, add the pair to the heap\n            if len(min_heap) < k or (len(min_heap) < len(nums1) + len(nums2) - len(min_heap) and current_sum < min_heap[0][1]):\n                heapq.heappush(min_heap, (current_sum, (i, j)))\n            # If the heap size exceeds k, remove the smallest element from the heap\n            while len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Return the k smallest pairs in the heap\n    result = []\n    while min_heap:\n        result.append(min_heap[0])\n        heapq.heappop(min_heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    # Use a heap to maintain the smallest k pairs\n    heap = []\n    for num in nums1_set:\n        # Check if there are enough elements in the heap\n        if len(heap) < k:\n            # If not, add the element to the heap\n            heapq.heappush(heap, num)\n        else:\n            # If there are, compare the current element with the smallest element in the heap\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    # Extract the smallest k pairs from the heap\n    pairs = []\n    while heap:\n        pairs.append((heap[0], nums2_set.pop()))\n        heapq.heappop(heap)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heapify the input arrays\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        heapq.heappush(heap1, num)\n    for num in nums2:\n        heapq.heappush(heap2, num)\n    # initialize the min heap for the smallest pairs\n    min_heap = []\n    # iterate over the k-1 smallest pairs and add them to the min heap\n    for i in range(k):\n        pair = (heapq.heappop(heap1), heapq.heappop(heap2))\n        heapq.heappush(min_heap, pair)\n    # iterate over the remaining k smallest pairs and add them to the min heap\n    for i in range(k, len(nums1) + len(nums2)):\n        pair = (heapq.heappop(heap1), heapq.heappop(heap2))\n        if pair[0] < pair[1]:\n            heapq.heappush(min_heap, pair)\n        else:\n            heapq.heappush(heap1, pair[1])\n            heapq.heappush(heap2, pair[0])\n    # return the k smallest pairs from the min heap\n    return [pair for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # Define a custom heapq.Heapify function to compare tuples of (value, index)\n    def custom_heapify(heap, n, i):\n        l = 2 * i + 1\n        r = 2 * i + 2\n        largest = i\n        if l < n and heap[l][0] < heap[largest][0]:\n            largest = l\n        if r < n and heap[r][0] < heap[largest][0]:\n            largest = r\n        if largest!= i:\n            heap[i], heap[largest] = heap[largest], heap[i]\n            custom_heapify(heap, n, largest)\n\n    # Initialize the min-heap with the smallest pair (0, 0)\n    min_heap = [(nums1[0] + nums2[0], (0, 0))]\n    while len(min_heap) < k:\n        # Pop the smallest pair from the heap\n        value, index = heapq.heappop(min_heap)\n        # Add the remaining pairs (nums1[index], nums2[i]) for i in range(len(nums2))\n        for i in range(len(nums2)):\n            heapq.heappush(min_heap, (nums1[index] + nums2[i], (index, i)))\n            # Call the custom_heapify function to maintain the min-heap property\n            custom_heapify(min_heap, len(min_heap), len(min_heap) - 1)\n    # Extract the k smallest pairs from the min-heap\n    result = []\n    while min_heap:\n        value, index = heapq.heappop(min_heap)\n        result.append(index)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store pairs of numbers\n    pairs = []\n    # Use a min-heap to find the k smallest pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            # Create a pair of numbers and add it to the min-heap\n            pair = (num1 + num2, (num1, num2))\n            heapq.heappush(pairs, pair)\n            # If the size of the min-heap exceeds k, remove the smallest pair\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    # Return the k smallest pairs\n    return [pair[1] for pair in pairs]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Sort the first array in non-decreasing order\n    nums1.sort()\n    \n    # Initialize the priority queue to store the minimum number of elements for each element in the second array\n    pq = [0] * len(nums1)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through the first array\n    for i in range(len(nums1)):\n        \n        # Calculate the minimum number of elements for the current element in the second array\n        min_elements = pq[i] + 1\n        \n        # If the current number of elements for this element in the second array is less than k, increment it by one\n        if min_elements < k:\n            min_elements += 1\n        \n        # Update the priority queue\n        heapq.heapify(pq[i+1:len(nums1)])\n        heapq.heapify(pq[:i+1])\n        heapq.heapify(pq)\n        \n        # Add the minimum number of elements to the result list\n        result.append((nums1[i], min_elements))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    heapq.heapify(pq)\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pq) < k:\n                heapq.heappush(pq, (-num1-num2, (num1, num2)))\n            else:\n                diff, pair = heapq.heappop(pq)\n                if -num1-num2 < diff:\n                    heapq.heappush(pq, (-num1-num2, (num1, num2)))\n    \n    result = []\n    while pq:\n        diff, pair = heapq.heappop(pq)\n        result.append(pair)\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a heap of size k\n    heap = []\n    \n    # Loop through the first array\n    for num1 in nums1:\n        # Loop through the second array\n        for num2 in nums2:\n            # Add the current pair to the heap\n            pair = (num1 + num2, (num1, num2))\n            heapq.heappush(heap, pair)\n            \n            # If the heap size exceeds k, remove the smallest pair\n            if len(heap) > k:\n                heapq.heappop(heap)\n                \n    # Extract the k smallest pairs from the heap and return them as a list\n    return [pair[1] for pair in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n    \n    # Calculate the sum of all elements in the first array\n    total_sum = sum(nums1)\n    \n    # Build a min heap of the first array\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Find the k smallest pairs from the first array\n    while len(min_heap) > 0:\n        first_num = -heapq.heappop(min_heap)\n        second_num = total_sum - first_num\n        if second_num in min_heap:\n            heapq.heappop(min_heap)\n            result.append([first_num, second_num])\n            if len(result) == k:\n                return result\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of those tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    list1 (list): A list of tuples.\n\n    Returns:\n    int: The minimum product of any two tuples in the list.\n    \"\"\"\n    # Initialize the minimum product to be the maximum value possible\n    min_product = float('inf')\n    \n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare to the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize the minimum product to be the product of any two numbers in the list\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two numbers and check if it is smaller than the current minimum product\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_product_pairs = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_product_pairs = [(list1[i], list1[j])]\n            elif product == min_product:\n                min_product_pairs.append((list1[i], list1[j]))\n    return min_product_pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product of two tuples from a list of tuples.\n\n    Parameters:\n    list1 (list): A list of tuples.\n\n    Returns:\n    int: The minimum product of two tuples in list1.\n    \"\"\"\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables for minimum product and current product\n    min_product = float('inf')\n    current_product = 1\n\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Calculate the product of the tuple\n        product = 1\n        for num in tup:\n            product *= num\n\n        # Check if the product is smaller than the current minimum product\n        if product < min_product:\n            min_product = product\n            current_product = product\n        # Otherwise, update the current product\n        else:\n            current_product *= product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for x in lst:\n        if x < min_val:\n            min_val = x\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if isinstance(listval, list):\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val\n    elif isinstance(listval, str):\n        return min_val(list(listval))\n    else:\n        return listval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # check if current element is smaller than minimum value\n        if listval[i] < min_val:\n            # update minimum value if current element is smaller\n            min_val = listval[i]\n    # return minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first value of the list\n    min_val = listval[0]\n\n    # Iterate through the list and compare each value to the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List is empty\")\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # Loop through the list and compare each element with the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Find the minimum value\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    # Return the minimum value\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = float('inf')\n    \n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove underscores from the word\n    word = re.sub('_', '', word)\n    # capitalize the first letter of the word\n    return word[0].upper() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'[A-Z][a-z]*', word)\n    \n    # Convert the first word to camel case\n    camel_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_word += '_' + words[i].lower()\n    \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # replace all underscores with spaces\n    word = re.sub(r'(?<!^)(?=[A-Z])','', word)\n\n    # convert first character to uppercase and the rest to lowercase\n    return word[0].upper() + word[1:].lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return word.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to snake case\n    snake_word = re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\n    # Split the snake case word into words\n    words = snake_word.split('_')\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    # Convert the list of words to a camel case string\n    camel_word = ''.join(camel_words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with underscores\n    camel_case_word = '_'.join(words)\n    # Remove leading and trailing underscores\n    camel_case_word = camel_case_word.strip('_')\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove leading and trailing underscores\n    word = word.strip('_')\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the capitalized words with underscores\n    camel_case_word = '_'.join(capitalized_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list with odd numbers removed.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # if n is greater than the length of the list, return None\n    if n > len(list1):\n        return None\n    \n    # initialize variable to store the nth element\n    nth_element = None\n    \n    # loop through each tuple in the list\n    for tup in list1:\n        # if the current tuple contains the nth element, store it in the nth_element variable\n        if n == 1:\n            nth_element = tup\n        # decrement n by 1 and continue looping\n        n -= 1\n    \n    # return the nth_element\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print('The list does not have enough elements.')\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input list is a list of tuples\n    if not isinstance(list1, list) or not all(isinstance(t, tuple) for t in list1):\n        raise TypeError('Input list should be a list of tuples.')\n    # Check if the input n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input n should be a positive integer.')\n    # Check if the index n is within the range of the list\n    if n > len(list1):\n        raise IndexError('Index n is out of range of the list.')\n    \n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize variables\n    nth_element = None\n    index = 0\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Check if the current index is equal to the nth element\n        if index == n-1:\n            nth_element = tup[1]\n            break\n        # Increment the index\n        index += 1\n\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize a variable to store the nth element\n    nth_element = None\n    \n    # Loop through the list of tuples and extract the nth element\n    for i, tup in enumerate(list1):\n        if i == n-1:\n            nth_element = tup[1]\n            break\n    \n    # Return the nth element\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    '''\n    # check if the input is valid\n    if not isinstance(list1, list) or not all(isinstance(x, tuple) for x in list1):\n        raise ValueError('Input must be a list of tuples.')\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('n must be a positive integer.')\n    # check if the list contains at least n elements\n    if len(list1) < n:\n        raise ValueError('List must contain at least n elements.')\n\n    # extract the nth element and return it\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if type(list1[0]) == tuple:\n        for i in list1:\n            if i[0] == n:\n                return i[1]\n        return \"Element not found\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) >= n:\n        return list1[n-1]\n    else:\n        print(\"List should contain at least\", n, \"elements\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Parameters:\n    list1 (list of tuples): A list of tuples.\n    n (int): The index of the element to extract.\n\n    Returns:\n    The nth element from the list of tuples.\n\n    \"\"\"\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list or type(n)!= int:\n        return 'Invalid input'\n    elif n > len(list1):\n        return 'Invalid index'\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether any value exists in the first list which also exists in the second list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of values in list1\n    set1 = set(list1)\n    # Loop through list2 and check if any of the values exist in set1\n    for value in list2:\n        if value in set1:\n            return True\n    # If no value in list2 exists in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for item in list1:\n        if item in list2:\n            return True\n            \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Use a dictionary to store the frequency of each value in the first list\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # Iterate through the second list and check if any value exists in the dictionary\n    for item in list2:\n        if item in freq and freq[item] > 0:\n            return True\n    \n    # If no values in the second list exist in the first list, return False\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            print(\"The value {} exists in both lists\".format(value))\n            return True\n    print(\"The value {} does not exist in the second list\".format(value))\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences (list1 and list2) as input and checks whether there exists any value in the first sequence that exists in the second sequence or not.\n    Returns True if there is a value in the first sequence that exists in the second sequence and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize variables to store the two maximum values\n    max1 = arr[0]\n    max2 = arr[1]\n    # Initialize variables to store the pair of maximum values\n    max_pair = (max1, max2)\n    # Loop through the array and check if the current value is greater than both the maximum values\n    for i in range(2, len(arr)):\n        if arr[i] > max1 and arr[i] > max2:\n            max1 = arr[i]\n            max2 = max1\n        elif arr[i] < max1 and arr[i] < max2:\n            max1 = max2\n            max2 = arr[i]\n        else:\n            continue\n        # Update the pair of maximum values if the new pair is greater\n        if max_pair[0] * max_pair[1] < max1 * max2:\n            max_pair = (max1, max2)\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_pair = [0, 0]\n    max_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        temp_pair = [0, 0]\n        temp_product = arr[i] * arr[0]\n        \n        if temp_product > max_product:\n            max_pair[0] = arr[i]\n            max_pair[1] = arr[0]\n            max_product = temp_product\n        \n        if temp_product < max_product:\n            temp_pair[0] = arr[i]\n            temp_pair[1] = arr[0]\n            if temp_pair[0] * temp_pair[1] > max_pair[0] * max_pair[1]:\n                max_pair = temp_pair\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the pair of integers that have the highest product.\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first and last elements of the sorted array as the pair with highest product\n    return arr[0], arr[-1]\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and finds the pair with the highest product.\n    '''\n\n    # Sorting the array in decreasing order\n    arr.sort(reverse=True)\n\n    # Initializing two variables\n    max1 = max2 = arr[0]\n\n    # Looping through the array\n    for i in range(1, len(arr)):\n\n        # Updating the values of max1 and max2\n        if arr[i] * max1 > max1 * arr[i]:\n            max2 = max1\n            max1 = arr[i]\n        else:\n            max2 = max(max2, arr[i])\n\n    # Returning the pair with the highest product\n    return [max1, max2]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple of two integers that form the pair with the highest product.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the pair with the highest product\n    pair = arr[0], arr[1]\n\n    # Return the pair\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the\n    maximum and minimum values of the array.\n    '''\n    max_val = max(arr)\n    min_val = min(arr)\n    return (max_val, min_val)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    max3 = arr[0]\n    min3 = arr[0]\n    max4 = arr[0]\n    min4 = arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max4 = max3\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max4 = max3\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max4 = max3\n            max3 = arr[i]\n        elif arr[i] > max4:\n            max4 = arr[i]\n\n        if arr[i] < min1:\n            min4 = min3\n            min3 = min2\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min4 = min3\n            min3 = min2\n            min2 = arr[i]\n        elif arr[i] < min3:\n            min4 = min3\n            min3 = arr[i]\n        elif arr[i] < min4:\n            min4 = arr[i]\n\n    return max1 * max2 * max3 * max4"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    product1 = max1 * min1\n    product2 = max2 * min2\n    return max(product1, product2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    max_product = float('-inf')\n    \n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    \n    if max1 * max2 > max_product:\n        max_product = max1 * max2\n    \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = 0\n    max_product_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n\n    return max_product_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = set()\n    for item in Input:\n        if item[0] in common_first:\n            common_first.remove(item[0])\n        else:\n            common_first.add(item[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if item[0] == common_element:\n            return common_element\n        else:\n            common_element = item[0]\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the common elements and their counts\n    common = {}\n\n    # Loop through the list of tuples\n    for t in Input: \n        # Get the first element of the tuple\n        f = t[0]\n\n        # If the first element is already in the dictionary, increment its count by 1\n        if f in common: \n            common[f] += 1 \n        # Otherwise, add the first element to the dictionary with a count of 1\n        else: \n            common[f] = 1 \n\n    # Create a list of tuples for the result\n    result = []\n\n    # Loop through the dictionary and add the common elements to the result list\n    for k,v in common.items(): \n        if v == len(Input): \n            result.append((k,v))\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuple = None\n    for tup in Input:\n        if tup[0] == common_tuple[0]:\n            if common_tuple is None:\n                common_tuple = tup\n            else:\n                common_tuple = (common_tuple[0], common_tuple[1] + tup[1])\n        else:\n            common_tuple = None\n            break\n    return common_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Sort the list of tuples in ascending order\n    Input.sort()\n\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(Input)):\n        # If the current element is not the common first element, break out of the loop\n        if i > 0 and Input[i][0]!= Input[i-1][0]:\n            break\n        # Add the common first element to the set\n        common.add(Input[i][0])\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    common_groups = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if not (Input[i][0] in common_groups[i] or Input[i][0] in common_groups[j]):\n                    common_groups[i].append(Input[i][0])\n                    common_groups[j].append(Input[j][0])\n    result = []\n    for i in range(len(common_groups)):\n        result.append(tuple(common_groups[i]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_elements = []\n\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for item in Input:\n        if len(common_first) == 0:\n            common_first.append(item[0])\n        elif item[0] == common_first[-1]:\n            common_first.append(item[0])\n        else:\n            break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n\n    for element in Input:\n        if common_first_element is None:\n            common_first_element = element[0]\n        elif element[0] == common_first_element:\n            common_first_element = None\n            break\n\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for tuple_ in Input:\n        if tuple_[0] not in common:\n            common.append(tuple_[0])\n    return common"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst[1:]:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = max(len(x) for x in lst)\n    return [x for x in lst if len(x) == max_len][0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = \"\"\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_len = len(lst[0]) # initialize the maximum length variable to the length of the first element\n    max_elem = lst[0] # initialize the maximum element variable to the first element\n\n    # traverse through the list and find the maximum element and its length\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n\n    # return the maximum element and its length\n    return max_elem, max_len"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Calculate the total sum of the list\n    total_sum = sum(list1)\n\n    # Round every number in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Calculate the product of the rounded list and the length of the list\n    product = round(total_sum * len(list1))\n\n    # Print the product\n    print(product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**3\n        i += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(2, n+1, 2):\n        cube_num = i*i*i\n        sum += cube_num\n        count += 1\n\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function finds the cube sum of the first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of cubes\n    cube_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for num in range(2, n+1, 2):\n        # Calculate the cube of the number and add it to the cube sum\n        cube_sum += num ** 3\n    \n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(2, n+1, 2):\n        count += i**3\n    return count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1,n+1,2):\n        sum_cube += i**3\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n\n    Parameters:\n        test_tup (tuple): A tuple of strings or numbers.\n        delimiter (str): A delimiter to use between elements.\n\n    Returns:\n        str: A concatenated string of the elements of the tuple.\n    \"\"\"\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = ', '\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = delimiter.join(map(str, test_tup))\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    average = total/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i*i\n    average = sum/n\n    return average\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    print(\"The average of cubes of the first\", n, \"natural numbers is\", avg)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n\n    average_cube = sum_cube/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [elem[-1] for elem in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return tuple([string[-1] for string in test_tuple])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple:\n        new_item = item[-1]\n        new_tuple += (new_item,)\n    return new_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for element in test_tuple:\n        rear_index_elements.append(element[-1])\n    return rear_index_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i].count(x) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Define a regular expression pattern for matching valid date formats\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.search() function to search for a match in the date string\n    match = re.search(pattern, dt)\n    \n    # Check if a match was found\n    if match:\n        # Use the re.sub() function to replace the matched pattern with a new format\n        new_dt = re.sub(pattern, r'\\g<2>-\\g<1>-\\g<3>', dt)\n        return new_dt\n    else:\n        # If no match was found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() method to search for the pattern in the string\n    match = re.search(pattern, dt)\n    # Check if the pattern was found in the string\n    if match:\n        # Extract the matched groups and convert them to a tuple\n        year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))\n        # Convert the date to dd-mm-yyyy format using tuple unpacking\n        return f'{day}-{month:02d}-{year:04d}'\n    else:\n        # If the pattern was not found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if not match:\n        return None\n\n    year = int(match.group(1))\n    month = int(match.group(2))\n    day = int(match.group(3))\n\n    return f'{day:02}-{month:02}-{year:04}'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Replace the dash with a space\n    dt = re.sub(r'[-]','', dt)\n    # Reverse the order of the month and day\n    dt = dt[6:]+dt[4:]+dt[2:]+dt[0:4]\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert the date string to datetime object\n    dt_obj = datetime.strptime(dt, '%Y-%m-%d')\n    # extract year, month and day from the datetime object\n    year = dt_obj.year\n    month = dt_obj.month\n    day = dt_obj.day\n    # format the date string using the given format\n    formatted_dt = f'{day:02d}-{month:02d}-{year:04d}'\n    return formatted_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    date_str = re.sub(pattern, new_format, dt)\n    return date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern in the input string\n    match = re.match(pattern, dt)\n\n    # Check if the match is successful\n    if match:\n        # Extract the matched groups\n        year, month, day = match.groups()\n\n        # Format the date in dd-mm-yyyy format\n        new_date = f'{day}-{month}-{year}'\n\n        # Return the new date\n        return new_date\n\n    # If the input string does not match the pattern, return None\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern for matching the date format\n    pattern = r\"^(\\d{4})-(\\d{2})-(\\d{2})$\"\n\n    # Use the re.match() function to match the date pattern in the input string\n    match = re.match(pattern, dt)\n\n    # If the match is successful, use the datetime module to convert the date format\n    if match:\n        year = int(match.group(1))\n        month = int(match.group(2))\n        day = int(match.group(3))\n        new_dt = f\"{day:02}-{month:02}-{year:04}\"\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern for date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use re.match() function to check if the input string matches the pattern\n    if re.match(pattern, dt):\n        # extract year, month, and day from the date string\n        year, month, day = re.findall(pattern, dt)[0]\n        # use string formatting to convert the date to dd-mm-yyyy format\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        # if input string does not match the pattern, return the input string as is\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the length of gap\n    gap = n // 2\n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        # Reduce gap size\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Perform insertion sort on smallest gap\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    and_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elements from the two input tuples\n    tup1_elements = test_tup1[0]\n    tup2_elements = test_tup2[0]\n\n    # Check the length of the two tuples\n    if len(tup1_elements)!= len(tup2_elements):\n        return \"The two tuples must have the same length\"\n\n    # Create an empty list to store the elementwise and tuples\n    result_list = []\n\n    # Iterate over each element in the tuples\n    for i in range(len(tup1_elements)):\n        # Extract the corresponding elements from the two tuples\n        tup1_element = tup1_elements[i]\n        tup2_element = tup2_elements[i]\n\n        # Perform the elementwise and operation on the two elements\n        and_result = tup1_element & tup2_element\n\n        # Append the result to the result list\n        result_list.append(and_result)\n\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    test_tup1 (tuple): The first tuple to check for elementwise and.\n    test_tup2 (tuple): The second tuple to check for elementwise and.\n\n    Returns:\n    tuple: A tuple containing the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return\n    \n    # Extract the elementwise and tuples from the two given tuples\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    # Initialize a new tuple to store the result\n    result_tup = []\n\n    # Extract the elementwise and tuples from the given two tuples\n    for i in range(len(test_tup1)):\n        result_tup.append((test_tup1[i] and test_tup2[i]))\n\n    return tuple(result_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters a, b and c which are the coefficients of a polynomial equation of a parabola y = ax^2 + bx + c. \n    It returns the directrix of the parabola.\n    '''\n    x = b/2\n    y = 2*a*x + b\n    return y - 4*c"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The equation of the parabola is not valid.\"\n    else:\n        disc = b**2 - 4*a*c\n        if disc > 0:\n            root1 = (-b + math.sqrt(disc)) / (2*a)\n            root2 = (-b - math.sqrt(disc)) / (2*a)\n            return f\"The directrix of the parabola is {root1} and {root2}.\"\n        elif disc == 0:\n            root = -b / (2*a)\n            return f\"The directrix of the parabola is {root}.\"\n        else:\n            return \"There are no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative, zero or positive\n    if discriminant < 0:\n        # If the discriminant is negative, there is no directrix\n        return \"There is no directrix for this parabola.\"\n    elif discriminant == 0:\n        # If the discriminant is zero, there is one directrix\n        return f\"The directrix for this parabola is {(-b)/2*a:.2f}.\"\n    else:\n        # If the discriminant is positive, there are two directrices\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix for this parabola is {x1:.2f}, and the other directrix is {x2:.2f}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    else:\n        return (-b + discriminant**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        print(\"The directrix of the parabola is between the points\", x1, \"and\", x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        print(\"The directrix of the parabola is at the point\", x)\n    else:\n        print(\"There are no real roots of the equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant < 0:\n        return \"No real roots\"\n    elif discriminant == 0:\n        return \"One real root\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"Two real roots: {x1} and {x2}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n\n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Find the directrix of the parabola\n    directrix = (root1*root2)/(root1 + root2)\n\n    # Return the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    else:\n        return \"There is no real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Define the equation of the parabola y = ax^2 + bx + c\n    equation = 'y = {}x^2 + {}x + {}'.format(a, b, c)\n    # Use sympy to calculate the discriminant and find the root\n    import sympy as sp\n    x = sp.symbols('x')\n    discriminant = b**2 - 4*a*c\n    root = (-b - sp.sqrt(discriminant)) / (2*a)\n    # Find the slope of the parabola using the directrix\n    directrix = -b / (2*a)\n    # Print the directrix and the equation of the parabola\n    print('The directrix of the parabola is:', directrix)\n    print('The equation of the parabola is:', equation)\n    print('The root of the parabola is:', root)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # Create a set to store the elements of the first list\n    set1 = set(list1)\n\n    # Iterate over the second list\n    for element in list2:\n        # If the element exists in the set of first list, return True\n        if element in set1:\n            return True\n\n    # If we reach here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the lists are of equal length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Iterate through each element of the lists\n    for element in list1:\n        # Check if the element exists in the other list\n        if element in list2:\n            return True\n    \n    # If no common elements were found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    # First, convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Then, compare the two sets and return true if they have at least one common element\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the top half of the trapezium\n    top_half = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the bottom half of the trapezium\n    bottom_half = 0.5 * (base1 + base2) * (height - 2 * height)\n\n    # Find the median of the top and bottom halves\n    median = 0.5 * (top_half + bottom_half)\n\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n\n    if base1 == base2:\n        return base1*0.5*height\n    elif base1 + base2 == height:\n        return 0\n    else:\n        return 0.5*base1 + 0.5*base2 + 0.5*height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + math.sqrt(base1**2 + base2**2 + height**2)\n    \n    # Calculate the median of the trapezium\n    median = area / 2\n    \n    # Calculate the difference between the two medians\n    difference = abs(median - perimeter)\n    \n    # Return the median as a float rounded to two decimal places\n    return round(median, 2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium using the trapezoidal rule.\n    '''\n    # Calculate the length of the trapezium\n    length = 0.5 * (base1 + base2)\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height)\n    # Calculate the area of the base 1 half\n    area_half1 = 0.5 * base1 * height\n    # Calculate the area of the base 2 half\n    area_half2 = 0.5 * base2 * height\n    # Find the area of the trapezium that contains the area_half1 and area_half2\n    overlap = area_half1 + area_half2 - area\n    # Find the area of the trapezium that contains the area_half1 and area_half2\n    area_trapez = area - overlap\n    # Calculate the midpoint of the trapezium\n    midpoint = 0.5 * (base1 + base2)\n    # Find the area of the trapezium that contains the area_half1 and area_half2\n    area_trapez_mid = area_trapez * (midpoint - base1)\n    # Calculate the median length\n    median_length = area_trapez_mid / area_trapez\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n\n    # calculate the lengths of each half of the trapezium\n    half1 = base1 * 0.5\n    half2 = base2 * 0.5\n\n    # sort the lengths of both halves in ascending order\n    sorted_halves = sorted([half1, half2])\n\n    # find the median of the lengths of both halves\n    median_length = sorted_halves[1]\n\n    # calculate the length of the trapezium by adding the lengths of both halves\n    trapezium_length = 0.5 * (half1 + half2 + height)\n\n    # calculate the median of the trapezium by dividing the trapezium length by 2\n    median_trapezium = trapezium_length / 2\n\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n    \n    # Calculate the length of the lower half of the trapezium\n    lower_half = 0.5 * (base1 + base2) * height\n    lower_half = lower_half - area\n    \n    # Calculate the length of the upper half of the trapezium\n    upper_half = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median length of the trapezium\n    median = 0.5 * (lower_half + upper_half)\n    \n    # Print the result\n    print(\"The median length of the trapezium is:\", median)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the sides of the trapezium\n    side1 = 0.5 * (base1 + base2)\n    side2 = 0.5 * (base1 + base2) * height - base1\n    \n    # Calculate the height of the trapezium\n    height_trapezium = 0.5 * height\n    \n    # Calculate the length of the trapezium\n    length_trapezium = 0.5 * (side1 + side2)\n    \n    # Calculate the length of the smaller trapezium (half of the longer trapezium)\n    length_smaller = 0.5 * (side1 + length_trapezium)\n    \n    # Calculate the length of the bigger trapezium (half of the shorter trapezium)\n    length_bigger = 0.5 * (side2 + length_trapezium)\n    \n    # Calculate the area of the smaller trapezium\n    area_smaller = 0.5 * (length_smaller * height_trapezium)\n    \n    # Calculate the area of the bigger trapezium\n    area_bigger = 0.5 * (length_bigger * height_trapezium)\n    \n    # Check which area is smaller and calculate the median\n    if area_smaller < area_bigger:\n        median = length_smaller\n    else:\n        median = length_bigger\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the length of the base with the longest side\n    longest_side = max(base1, base2)\n    \n    # Calculate the length of the base with the shortest side\n    shortest_side = min(base1, base2)\n    \n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = longest_side - shortest_side\n    \n    # Calculate the length of the longer side of the trapezium\n    longer_side = longest_side + shortest_side\n    \n    # Calculate the ratio of the shorter side to the longer side of the trapezium\n    ratio = shorter_side / longer_side\n    \n    # Calculate the area of the base with the shortest side\n    area_shortest = shortest_side * height\n    \n    # Calculate the area of the base with the longest side\n    area_longest = longest_side * height\n    \n    # Calculate the area of the area of the trapezium\n    area_trapezium = area_shortest + area_longest\n    \n    # Calculate the distance from the base with the longest side to the midpoint of the trapezium\n    midpoint = longest_side / 2\n    \n    # Calculate the height of the base with the longest side\n    height_longest = math.sqrt(longest_side**2 - midpoint**2)\n    \n    # Calculate the height of the base with the shortest side\n    height_shortest = math.sqrt(shortest_side**2 - midpoint**2)\n    \n    # Calculate the distance from the midpoint of the trapezium to the base with the shortest side\n    distance_shortest = (shortest_side * height_shortest) / (2 * area)\n    \n    # Calculate the distance from the midpoint of the trapezium to the base with the longest side\n    distance_longest = (longest_side * height_longest) / (2 * area)\n    \n    # Calculate the angle of the base with the longest side\n    angle_longest = math.degrees(math.acos(ratio))\n    \n    # Calculate the angle of the base with the shortest side\n    angle_shortest = math.degrees(math.acos((1 - ratio) / 2))\n    \n    # Calculate the distance of the longest side of the trapezium from the midpoint\n    distance_longest_to_midpoint = longest_side / 2\n    \n    # Calculate the distance of the shortest side of the trapezium from the midpoint\n    distance_shortest_to_midpoint = shortest_side / 2\n    \n    # Calculate the length of the shorter side of the trapezium that intersects the base with the longest side\n    intersection_shortest_to_longest = distance_shortest_to_midpoint * math.cos(math.radians(angle_longest))\n    \n    # Calculate the length of the longer side of the trapezium that intersects the base with the longest side\n    intersection_longest_to_longest = distance_longest_to_midpoint * math.cos(math.radians(angle_longest))\n    \n    # Calculate the length of the shorter side of the trapezium that intersects the base with the shortest side\n    intersection_shortest_to_shortest = distance_shortest_to_midpoint * math.cos(math.radians(angle_shortest))\n    \n    # Calculate the length of the longer side of the trapezium that intersects the base with the shortest side\n    intersection_longest_to_shortest = distance_longest_to_midpoint * math.cos(math.radians(angle_shortest))\n    \n    # Calculate the length of the intersection of the shorter and longest sides of the trapezium with the base with the longest side\n    intersection_shortest_to_longest_longest = (distance_shortest + distance_longest - distance_shortest_to_midpoint) * math.cos(math.radians(angle_longest))\n    \n    # Calculate the length of the intersection of the shorter and longest sides of the trapezium with the base with the shortest side\n    intersection_shortest_to_shortest_shortest = (distance_shortest + distance_shortest_to_midpoint) * math.cos(math.radians(angle_shortest))\n    \n    # Calculate the length of the intersection of the longer and shortest sides of the trapezium with the base with the longest side\n    intersection_longest_to_longest_longest = (distance_longest + distance_shortest_to_midpoint) *"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the length of the shorter base\n    shorter_base = min(base1, base2)\n    \n    # Calculate the length of the longer base\n    longer_base = max(base1, base2)\n    \n    # Calculate the length of the base with longer edge\n    base_with_longer_edge = longer_base / 2\n    \n    # Find the length of the shorter base\n    shorter_base_length = longer_base - shorter_base - base_with_longer_edge\n    \n    # Find the length of the longer base\n    longer_base_length = longer_base + shorter_base + base_with_longer_edge\n    \n    # Calculate the length of the trapezium using the formula:\n    # L = (b1 + b2) / 2h\n    # where L is the length of the trapezium and b1 and b2 are the lengths of the shorter and longer bases, respectively.\n    \n    trapezium_length = (longer_base_length + shorter_base_length) / 2\n    \n    # Find the length of the shorter edge\n    shorter_edge_length = longer_base_length - shorter_base_length\n    \n    # Find the length of the longer edge\n    longer_edge_length = longer_base_length + shorter_base_length\n    \n    # Calculate the height of the trapezium using the formula:\n    # h = (L + b1 + b2) / 2b1\n    # where h is the height of the trapezium and L is the length of the trapezium and b1 is the length of the shorter base.\n    \n    trapezium_height = (trapezium_length + shorter_base_length + longer_base_length) / 2\n    \n    # Calculate the length of the shorter edge using the formula:\n    # l = (L - b1) / 2\n    # where l is the length of the shorter edge and L is the length of the trapezium and b1 is the length of the shorter base.\n    \n    shorter_edge_length = (trapezium_length - shorter_base_length) / 2\n    \n    # Calculate the length of the longer edge using the formula:\n    # l = (L + b1) / 2\n    # where l is the length of the longer edge and L is the length of the trapezium and b1 is the length of the shorter base.\n    \n    longer_edge_length = (trapezium_length + shorter_base_length) / 2\n    \n    # Calculate the area of the shorter edge using the formula:\n    # A = l^2 * h\n    # where A is the area of the shorter edge and l is the length of the shorter edge.\n    \n    area_of_shorter_edge = shorter_edge_length ** 2 * shorter_edge_length\n    \n    # Calculate the area of the longer edge using the formula:\n    # A = l^2 * h\n    # where A is the area of the longer edge and l is the length of the longer edge.\n    \n    area_of_longer_edge = longer_edge_length ** 2 * shorter_edge_length\n    \n    # Find the area of the trapezium using the formula:\n    # A = ((b1 + b2) / 2)^2 * h\n    # where A is the area of the trapezium and b1 and b2 are the lengths of the shorter and longer bases, respectively.\n    \n    area_of_trapezium = (shorter_base_length + longer_base_length) ** 2 * trapezium_height\n    \n    # Calculate the area of the trapezium using the formula:\n    # A = ((b1 + b2) / 2)^2 * h\n    # where A is the area of the trapezium and b1 and b2 are the lengths of the shorter and longer bases, respectively.\n    \n    # Find the median of the three areas using the formula:\n    # median = (A1 + A2 + A3) / 3\n    # where A1, A2, and A3 are the areas of the three parts of the trapezium.\n    \n    A1 = area_of_shorter_edge\n    A2 = area_of_longer_edge\n    A3 = area_of_trapezium\n    \n    median = (A1 + A2 + A3) / 3\n    \n   "
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the area of the base 1 triangle\n    area1 = 0.5 * base1 * height\n\n    # Calculate the area of the base 2 triangle\n    area2 = 0.5 * base2 * height\n\n    # Calculate the ratio of the two areas\n    ratio = area1 / area2\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the median area\n    median_area = area1 + area2 - area\n\n    # Calculate the height of the trapezium\n    height = 0.5 * median_area / ratio\n\n    # Return the median length of the trapezium\n    return height"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    if type(arr) == type(number):\n        if type(arr) == int:\n            if number > max(arr):\n                return True\n            else:\n                return False\n        elif type(arr) == list:\n            if number > max(arr):\n                return True\n            else:\n                return False\n        else:\n            print(\"Invalid input. Please enter an integer or a list.\")\n    else:\n        print(\"Invalid input. Please enter an integer or a list.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # loop through the array and check if the number is greater than each element\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    greater_than = False\n    \n    for num in arr:\n        if num > number:\n            greater_than = True\n            break\n    \n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count == 0:\n        print(\"The number entered is not greater than any element in the array.\")\n    else:\n        print(\"The number entered is greater than\", count, \"elements in the array.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match at index {}'.format(match.start())\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[bB]*'\n    match = re.search(pattern, text)\n    return match.group() if match else None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'[ab]+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    if n >= 10:\n        return n % 10\n    else:\n        return \"Number is less than 10\""
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n/10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    # checking if the input is a number\n    if not isinstance(n, int):\n        return \"Invalid input\"\n    # taking the last digit of the number and returning it\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n\n    # Get the last digit of the string\n    last_digit = num_str[-1]\n\n    # Convert the last digit to an integer and return it\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an argument and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of integers as input and returns the negative numbers in the list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list with all negative numbers in the original list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an argument and returns a new list containing only the negative numbers in the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    return ''.join(char for char in string if char.isalnum())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    '''\n    This function takes a string as input and returns a new string with all odd characters removed.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isdigit():\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is an odd number, add it to the result string\n        if char.isdecimal() and int(char) % 2!= 0:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with odd characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if ord(char) % 2 == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            if int(char) % 2 == 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = []\n    for char in str1:\n        if char.isdigit():\n            odd_chars.append(char)\n        elif int(char) % 2 == 0:\n            odd_chars.append(char)\n    return \"\".join(odd_chars)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs in a list of tuples.\n\n    Parameters:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of bidirectional tuple pairs in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    \n    # Convert the first element to an integer\n    result = int(L[0])\n    \n    # Loop through the rest of the list\n    for num in L[1:]:\n        # Convert the next element to an integer\n        num = int(num)\n        \n        # Add the two numbers\n        result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty list to hold the digits\n    digits = []\n    \n    # iterate over each element in the input list\n    for element in L:\n        # convert each element to a string and split into a list of digits\n        digits.extend(list(str(element)))\n    \n    # join the digits list into a single integer\n    result = int(''.join(digits))\n    \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for x in L:\n        if x == 0:\n            continue\n        result *= x\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        if num % 2 == 0:\n            single_num += num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for i in L:\n        single_integer = single_integer*10 + i\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 0\n    for num in L:\n        single_int = single_int * 10 + num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        if num % 10 == 0:\n            total += num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+(ing|ly|ed|est|ly|ing)\\b', text)\n    \n    # Use a dictionary to store the position of each adverb\n    adverb_positions = {}\n    \n    # Loop through the adverbs and store their positions\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i\n    \n    # Return the adverb and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern to match adverbs\n    pattern = r'\\b(a(dditional)?|another|anotherly|anymore|anyplace|anyway|asap|awhile|backwards|barely|beforehand|below|beneath|beside|besides|between|beyond|but|by|carefully|coldly|combination|concurrently|considerably|considering|continually|continuously|dairy|daily|dearly|definitely|deeply|differently|directly|distinctly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|directly|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the regular expression pattern for finding the adverbs\n    pattern = r'\\b\\w*adv\\w*\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any adverbs in the text\n    if not matches:\n        print(\"No adverbs found.\")\n        return\n\n    # Iterate over the matches and print the positions and words of the adverbs\n    for match in matches:\n        # Split the match into its parts\n        parts = match.split()\n\n        # Extract the position of the adverb\n        pos = int(parts[0][-1]) - 1\n\n        # Extract the adverb itself\n        adv =''.join(parts[1:])\n\n        # Print the position, adverb, and the text before it\n        print(f\"Position: {pos}, Adverb: '{adv}', Text before: '{text[:pos]}'\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find the first adverb in the sentence\n    pattern = r'\\b\\w*[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        # Use string slicing to find the position of the adverb in the sentence\n        position = text.index(adverb)\n        return adverb, position\n    else:\n        return 'No adverb found.', None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # find all adverbs in the sentence\n    adverbs = re.findall('\\b\\w*[a-z]\\w*\\b', text)\n    \n    # check if there are any adverbs in the sentence\n    if len(adverbs) == 0:\n        print(\"No adverbs found.\")\n        return\n    \n    # find the position of the first adverb\n    position = text.find(adverbs[0])\n    \n    # print the adverb and its position\n    print(f\"The first adverb is: {adverbs[0]}\")\n    print(f\"Its position is: {position}.\")\n    \n    # find the position of the second adverb (if any)\n    if len(adverbs) > 1:\n        position2 = text.find(adverbs[1], position+len(adverbs[0])+1)\n        print(f\"The second adverb is: {adverbs[1]}\")\n        print(f\"Its position is: {position2}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the sentences in the text\n    sentences = re.split(r'[.!?]', text)\n    # Iterate through each sentence\n    for i, sentence in enumerate(sentences):\n        # Split the sentence into words\n        words = sentence.split()\n        # Iterate through each word\n        for j, word in enumerate(words):\n            # Check if the word is an adverb\n            match = re.search(r'\\b(?:adv|adv\\w+)(?:\\s|$)', word)\n            # If it is, print the position of the adverb and its type\n            if match:\n                print(f'{i+1}.{j+1}: {match.group()}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern to match the adverb\n    pattern = r'\\b\\w*adverb\\w*\\b'\n    \n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverb and their positions\n    adverbs = []\n    \n    # Loop through the matches and extract the adverb and its position\n    for i, match in enumerate(matches):\n        # Extract the adverb from the match\n        adverb = match.lower()\n        \n        # Extract the position of the adverb in the sentence\n        position = text.lower().find(adverb)\n        \n        # Add the adverb and its position to the list of adverbs\n        adverbs.append((adverb, position))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to find all adverbs and their positions\n    pattern = r\"\\b\\w+(ly|lys|edly|ed|est|estly|lessly|lest|lestly|more|most|mostly|much|mostly|muchly|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rare"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w+ing\\b', text)\n\n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n\n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    position = text.find(first_adverb)\n\n    # Return the adverb and its position\n    return first_adverb, position"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * (l ** 2)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l # Formula for surface area of a cube\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l * l\n    print(\"The surface area of a cube of length\", l, \"is\", s, \"square units.\")\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 # Cube surface area formula\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    volume = l * l * l\n    return area + 2 * volume"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    zero = 0\n\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n\n    positive_ratio = positive / (positive + negative + zero)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_sum = 0\n    count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_sum += num\n            count += 1\n\n    if count == 0:\n        return 0\n    else:\n        return positive_sum / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count.itemset(0, count.item(0) + 1)\n    return count.item(0) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an empty array to store the positive numbers\n    positive = array('i')\n    \n    # loop through the input array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n    \n    # calculate the ration of positive numbers\n    if len(positive) == 0:\n        return 0\n    else:\n        return len(positive) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # convert array to list to perform operations on it\n    nums = list(nums)\n\n    # initialize counters\n    pos_count = 0\n    neg_count = 0\n\n    # iterate over the list and count positive and negative numbers\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    # calculate the ratio of positive to negative numbers\n    ratio = pos_count / neg_count\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0]) # initialize an array of size 1 with value 0\n    \n    for num in nums:\n        if num > 0:\n            count.itemset(0, count[0] + 1) # increment the value at index 0 of the array\n    \n    positive_ratio = count[0] / len(nums)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert array to list to use built-in count function\n    nums_list = list(nums)\n    positive_count = nums_list.count(1) / len(nums_list)\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Count the number of positive integers in an array of integers.\n    \"\"\"\n    # Convert the array to a list to allow for indexing and slicing\n    nums_list = list(nums)\n    \n    # Initialize the count of positive integers to zero\n    count = 0\n    \n    # Loop through the list of integers and count the number of positive integers\n    for num in nums_list:\n        if num > 0:\n            count += 1\n    \n    # Convert the count to a fraction and return it\n    return float(count) / len(nums_list)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    \n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    \n    pos_ratio = pos_count / (pos_count + neg_count)\n    print(\"The ratio of positive numbers in the array is:\", pos_ratio)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers and returns the largest negative number in the list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # Initialize a variable to store the largest negative number\n    largest = -float('inf')\n\n    # Iterate over each element in the list\n    for num in list1:\n        # If the current element is negative, update the largest variable\n        if num < 0:\n            largest = max(largest, num)\n\n    # Return the largest negative number found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([x for x in tup if x is not None])\n        if len(trimmed_tup) <= K:\n            trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i >= len(test_list) - j - 1:\n                break\n            test_list[i] = test_list[i][:len(test_list[i])-j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = (tup[0], tup[1][:K])\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function will trim each tuple in the given list by a given value k.\n\n    :param test_list: A list of tuples.\n    :param K: The value to be trimmed by.\n    :return: A new list with trimmed tuples.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(filter(lambda x: x!= K, tup))\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n\n        # initialize variables to keep track of minimum and maximum values in the tuple\n        min_val = test_list[i][0]\n        max_val = test_list[i][0]\n\n        # loop through each value in the tuple\n        for j in range(1, len(test_list[i])):\n\n            # if the value is less than the current minimum, update it\n            if test_list[i][j] < min_val:\n                min_val = test_list[i][j]\n\n            # if the value is greater than the current maximum, update it\n            if test_list[i][j] > max_val:\n                max_val = test_list[i][j]\n\n        # if the minimum value is greater than K, trim the tuple\n        if min_val > K:\n            new_tuple = tuple(test_list[i][k] for k in range(len(test_list[i])))\n            test_list[i] = new_tuple\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[K:] #trim the tuple by K elements\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns a new list of trimmed tuples.\n    It trims each tuple by k in the given list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) >= K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Create a new tuple with the length of the smaller tuple\n    new_tup = tuple([test_tup1[i] * test_tup2[i] for i in range(min(len(test_tup1), len(test_tup2)))])\n\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # create a new tuple to store the result\n    result_tup = ()\n\n    # iterate through both tuples and multiply each element at each index\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # return the new tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length\")\n        return\n\n    # Perform index wise multiplication\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple length mismatch\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to list to simplify counting\n    lst = list(tup)\n    # count the occurrences of each element in the list\n    count = Counter(lst)\n    # return the dictionary of counts\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary with the count of each element in the list in the tuple.\n    '''\n    count_dict = Counter(tup)\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the occurrence of each element in the tuple and the list\n    count_tup = Counter(tup)\n    count_lst = Counter(lst)\n\n    # Merge the two dictionaries into a single one\n    count = {}\n    for k, v in count_tup.items():\n        count[k] = v\n    for k, v in count_lst.items():\n        count[k] = v if k not in count else count[k]\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the list to set to remove duplicates\n    lst = set(lst)\n    # Count the occurrence of each element in the list in the tuple\n    count = Counter(tup)\n    # Convert the counter object to a dictionary and return it\n    return dict(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary of \n    elements in the tuple and their count in the list. \n    '''\n    # Using Counter to count the occurence of elements in the list in the tuple\n    count = Counter(tup)\n    # Filter out the elements not in the list and return a dictionary of the counts\n    return dict(filter(lambda x: x[0] in lst, count.items()))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert tuple to set to remove duplicates\n    tup = set(tup)\n    # Convert list to set to remove duplicates\n    lst = set(lst)\n    # Get the common elements between the two sets\n    common_elements = tup.intersection(lst)\n    # Count the occurrences of each common element\n    count = Counter(common_elements)\n    # Return the result as a dictionary\n    return dict(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return tuple(tup[i] for i in count_dict if count_dict[i] > 0)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments: a tuple and a list.\n    It returns a dictionary of the form {element:count} where count is the number of times the element appears in the tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        if element in tup:\n            count_dict[element] = count_dict.get(element, 0) + 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Iterate through the range of n numbers\n    for i in range(1, n+1):\n        # Calculate the perrin number and add it to the sum\n        sum += (i * (i + 1))\n    \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += 1 / (2*i - 1)\n    return sum_"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total_sum = 0\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i*i*i)\n        total_sum += i*i*i\n    print(\"The sum of Perrin numbers is:\", total_sum)\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize a variable to store the sum of perrin numbers\n    sum_perrin = 0\n    # Initialize a variable to store the current perrin number\n    current_perrin = 1\n    # Loop n times to add each perrin number to the sum\n    for i in range(1, n+1):\n        sum_perrin += current_perrin\n        current_perrin = current_perrin + 2\n    # Return the sum of perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n        elif i % 7 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through each number in the range of n\n    for i in range(1, n+1):\n        # If the number is prime, add it to the sum\n        if is_prime(i):\n            sum += i\n\n    # Return the sum of all prime numbers up to n\n    return sum\n\ndef is_prime(num):\n    '''\n    A function to check if a number is prime.\n    '''\n    # If the number is less than 2, it is not prime\n    if num < 2:\n        return False\n\n    # Loop through each number from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        # If the number is divisible by any number in that range, it is not prime\n        if num % i == 0:\n            return False\n\n    # If the number is divisible by all numbers in its range, it is prime\n    return True"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i * (i+1) // 2\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][l[i].index(str):l[i].index(str) + l[i].count(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): a list of string values\n    size (int): the size of the strings to extract\n\n    Returns:\n    list: a list of extracted strings of specified size\n    '''\n\n    extracted_strings = []\n\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for s in str_list:\n        if len(s) >= size:\n            extracted_strings.append(s[:size])\n        else:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(l), 1):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a specified size for the extracted strings.\n    It returns a new list containing the extracted strings.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s[0:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from the given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and returns a list of the specified size strings\n    from the input list.\n    '''\n    return [str for str in str_list if len(str) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a given list of string values.\n    \n    Args:\n        str_list (list): A list of string values.\n        size (int): The size of the strings to extract.\n        \n    Returns:\n        list: A list of extracted strings.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    # Return the modified string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount <= actual_cost: \n        return 0\n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount >= actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_ratio = (actual_cost - sale_amount) / sale_amount\n    if loss_ratio >= 0.05:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount * 0.05\n    if actual_cost > sale_amount:\n        loss = (actual_cost - sale_amount) * loss_percentage\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Function to check if a number is even or not\n    def isEven(num):\n        return num % 2 == 0\n\n    # Function to find sum of even factors\n    def sumOfEvenFactors(n):\n        sum = 0\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0 and isEven(i):\n                sum += i\n        return sum\n\n    # Function to find the sum of even factors of n\n    def sumOfEvenFactorsOfN(n):\n        if n == 1:\n            return 0\n        elif n % 2 == 0:\n            return sumOfEvenFactors(n) + n\n        else:\n            return sumOfEvenFactors(n) + sumOfEvenFactorsOfN(n-2)\n\n    # Find the sum of even factors of n\n    sum = sumOfEvenFactorsOfN(n)\n\n    # Print the result\n    print(\"The sum of even factors of\", n, \"is\", sum)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sum_of_even_factors(n):\n    '''\n    This function takes an integer as input and returns the sum of all even factors of the input number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of its even factors.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            n //= i\n            if i % 2 == 0:\n                even_factors.append(i)\n    if n > 1:\n        even_factors.append(n)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(1, int(math.sqrt(n))+1) : \n        if (n % i) == 0 : \n            if (i % 2 == 0) : \n                sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        print('The word containing \"z\" is:', match.group())\n    else:\n        print('No word containing \"z\" was found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Define a regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n\n    # Use the `re.findall` function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w+z\\w+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {'1': 31, '2': 28, '3': 31, '4': 30, '5': 31, '6': 30, '7': 31, '8': 31, '9': 30, '10': 31, '11': 30, '12': 31}\n    if monthnum2 in month_dict:\n        if month_dict[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 2 == 0:\n        return False\n    else:\n        if monthnum2 % 2 == 1 and monthnum2 % 4 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if is_leap_year(year):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 2:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    '''\n    # Check for leap year\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    \n    # Check for February\n    if monthnum == 2:\n        return False\n    \n    # Check for February and years that are not leap years\n    if monthnum % 2 == 0:\n        if monthnum % 4 == 0:\n            if monthnum % 100 == 0:\n                if monthnum % 400 == 0:\n                    return True\n        else:\n            return True\n    \n    # Check for all other months\n    return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if 1 <= monthnum <= 12:\n        if monthnum % 2 == 0:\n            return (30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)[monthnum-1]\n        else:\n            return (31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31)[monthnum-1]\n    else:\n        raise ValueError(\"Invalid month number. The month number should be between 1 and 12.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    # Check if the month number contains 31 days\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # reverse the string using string slicing and indexing\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            sublist = lst[i:j+1]\n            if len(sublist) < min_length: \n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with the minimum length.\n    \"\"\"\n    # Initialize minimum length and index of minimum length sublist\n    min_len = float('inf')\n    min_index = -1\n\n    # Loop through the list\n    for i in range(len(lst)):\n        # Calculate length of current sublist\n        curr_len = len(lst[i])\n\n        # Check if current sublist has minimum length\n        if curr_len < min_len:\n            min_len = curr_len\n            min_index = i\n\n    # Return the sublist with minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    min_length = float('inf')\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n\nlst = [[1, 2, 3], [4, 5, 6, 7], [8], [9, 10], [11, 12, 13, 14, 15]]\nprint(Find_Min(lst))"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) # initialize min_len with first sublist length\n    min_sublist = lst[0] # initialize min_sublist with first sublist\n    \n    # iterate over the remaining sublists\n    for i in range(1, len(lst)):\n        sublist_len = len(lst[i])\n        if sublist_len < min_len: # if sublist length is smaller than min_len\n            min_len = sublist_len\n            min_sublist = lst[i] # update min_sublist with sublist with smallest length\n    \n    return min_sublist # return the sublist with minimum length"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes in the length and breadth of a rectangle and returns the area of the rectangle.\n    \"\"\"\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Find all uppercase substrings in the given string\n    matches = re.findall(pattern, str1)\n\n    # Remove all uppercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '', 1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Replace all uppercase letters with a space\n    string = re.sub('[A-Z]','', string)\n    # Remove all extra spaces\n    string = re.sub(' +','', string)\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\w*\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the given string\n    uppercase_subs = re.findall(r'[A-Z][a-z]*', str1)\n\n    # Loop through each uppercase substring and replace it with an empty string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regex pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]\\w+\\b'\n    \n    # find all occurrences of uppercase substrings in the input string\n    matches = re.findall(pattern, str1)\n    \n    # iterate over each occurrence of an uppercase substring\n    for match in matches:\n        # extract the substring between the uppercase substring and the next uppercase substring\n        sub_str = str1[str1.index(match)+len(match):str1.index(match)+2*len(match)]\n        # remove the uppercase substring from the input string\n        str1 = str1.replace(match, sub_str, 1)\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings using regular expressions\n    str1 = re.sub(r'(?i)[A-Z][a-z]*', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'([A-Z]+)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[^a-z]+[A-Z]+[^a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = r'(?<!\\w)([a-z])(?!\\w)'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if sublist[0]:\n            print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a list of the first elements of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]*len(lst)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # If the sublist is not empty, get the first element and print it\n        if sublist:\n            print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst: \n        first_elements.append(sublist[0]) \n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str = str.lower()\n    # Initialize a counter variable to keep track of the number of upper case characters\n    upper_count = 0\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is uppercase, increment the counter variable\n        if char.isupper():\n            upper_count += 1\n    # Return the count of upper case characters in the string\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i], list1[j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Initialize an empty list to store all possible combinations\n    all_combinations = []\n\n    # Loop through the elements of the list\n    for i in range(len(list1)):\n        # Loop through the remaining elements of the list\n        for j in range(i+1, len(list1)+1):\n            # Add the current combination to the list of all combinations\n            all_combinations.append(list1[i:j])\n\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1_copy = list(list1)\n    result = []\n\n    def helper(start):\n        if start == len(list1_copy):\n            result.append(list1_copy[:])\n            return\n        for i in range(start, len(list1_copy)):\n            list1_copy[start], list1_copy[i] = list1_copy[i], list1_copy[start]\n            helper(start + 1)\n            list1_copy[start], list1_copy[i] = list1_copy[i], list1_copy[start]\n\n    helper(0)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    # Create a list of lists to store the combinations\n    result = []\n\n    # Sort the input list in ascending order\n    lst.sort()\n\n    # Recursively generate all combinations by selecting the first element\n    # and then selecting all the remaining elements and appending them to the result list\n    def helper(prefix, remaining):\n        if not remaining:\n            # If there are no more elements to select, append the current prefix to the result list\n            result.append(prefix)\n            return\n\n        # Select the first element\n        helper(prefix + [remaining[0]], remaining[1:])\n\n        # Recurse with the remaining elements\n        for i in range(len(remaining)):\n            helper(prefix + [remaining[i]], remaining[:i] + remaining[i+1:])\n\n    helper([], lst)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [[list1[0]]]\n    else:\n        result = []\n        for i in range(n):\n            rest = list1[i+1:]\n            for combination in combinations_list(rest):\n                result.append([list1[i]] + combination)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(' '.join(str(x) for x in list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combo = list1[i:j]\n            result.append(combo)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    # Traverse through the array\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], arr[i] * current_product)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    result = 0\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        result = max(result, max_ending_here)\n    \n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n        \n        max_ending_here = max(max_ending_here, max_product)\n        min_ending_here = min(min_ending_here, min_product)\n        \n    return max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for num in arr:\n        if num < 0:\n            curr_product = 1\n        curr_product *= num\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return False\n    else:\n        for key in dict:\n            if dict[key]!= dict[dict.keys()[0]]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value from the dictionary\n    first_value = next(iter(dict.values()))\n    # Check if all values are the same as the first value\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    # If we get here, all values are the same as the first value\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for key, val in dict.items():\n        if value is None:\n            value = val\n        else:\n            if val!= value:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 0 and isinstance(dict, dict):\n        values = list(dict.values())\n        if len(values) > 1:\n            for value in values:\n                if value!= values[0]:\n                    return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for val in dict.values():\n        count += 1\n        if count!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for val in dict.values():\n        if val == dict.values()[0]:\n            count += 1\n        else:\n            break\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize two pointers for the increasing subsequence\n    i = 0\n    j = 0\n    max_product = float('-inf')\n\n    # Find the maximum product using dynamic programming\n    while j < n:\n        while j < n and arr[j] <= arr[i]:\n            j += 1\n\n        while i < j and arr[j] >= arr[i]:\n            i += 1\n\n        if j - i + 1 > 0:\n            temp = arr[i] * arr[j]\n            if temp > max_product:\n                max_product = temp\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    \n    # Initialize the maximum subsequence product\n    max_product = float('-inf')\n    \n    # Initialize the maximum product of all increasing subsequences\n    max_subseq_product = float('-inf')\n    \n    # Initialize the current maximum product\n    curr_max_product = float('-inf')\n    \n    # Initialize the current maximum subsequence product\n    curr_subseq_product = float('-inf')\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the current number is smaller than the previous number, update the maximum subsequence product\n        if arr[i] < arr[i - 1]:\n            curr_subseq_product = arr[i] * dp[i - 1]\n            if curr_subseq_product > max_subseq_product:\n                max_subseq_product = curr_subseq_product\n        \n        # If the current number is greater than the previous number, update the maximum product\n        if arr[i] > arr[i - 1]:\n            curr_max_product = max(arr[i] * curr_subseq_product, arr[i] * max_subseq_product)\n            if curr_max_product > max_product:\n                max_product = curr_max_product\n        \n        # Update the maximum subsequence product\n        dp[i] = curr_subseq_product\n                \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    max_product_ending_here_prev = 1\n    \n    for num in arr:\n        # Calculate the maximum product ending here\n        max_product_ending_here = max(max_product_ending_here_prev * num, max_product_ending_here, max_product_ending_here_prev)\n        # Update the maximum product if necessary\n        max_product = max(max_product, max_product_ending_here)\n        # Update the variables for the next iteration\n        max_product_ending_here_prev = max_product_ending_here\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Traverse through the array and find the maximum product\n    for i in range(len(arr)):\n        if i > 0:\n            current_product *= arr[i]\n            max_product = max(max_product, current_product)\n\n        if i == len(arr) - 1:\n            max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # initialize variables\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # iterate over the array\n    for i in range(1, len(arr)):\n        # update the maximum product ending here\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        # update the minimum ending here\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        # update the maximum product so far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    def increasing_subsequence(arr):\n        n = len(arr)\n        dp = [1] * n\n        max_so_far = arr[0]\n        max_ending_here = 1\n\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                max_ending_here += 1\n                max_ending_here = max(max_ending_here, dp[i - 1])\n            else:\n                max_ending_here = 1\n            dp[i] = max_ending_here\n\n        return max_ending_here\n\n    max_increasing_subsequence = increasing_subsequence(arr)\n    return max_increasing_subsequence * max_increasing_subsequence"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n        for j in range(i+1, n):\n            dp[i][j] = max(arr[i] * arr[j], arr[j] * dp[i+1][j])\n\n    max_product = float('-inf')\n    for i in range(n):\n        max_product = max(max_product, dp[0][i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    \n    max_product = float('-inf')\n    curr_max = arr[0]\n    curr_min = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max*arr[i])\n        curr_min = min(arr[i], curr_min*arr[i])\n        \n        max_product = max(max_product, curr_max)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize max product and min value for the current subarray\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    # Initialize variables for the current subarray and its ending index\n    curr_max = arr[0]\n    curr_min = arr[0]\n    end_index = 0\n\n    # Iterate through the array to find the maximum product\n    for i in range(1, len(arr)):\n        # If the current number is greater than the minimum value in the current subarray, update the min value\n        if arr[i] > curr_min:\n            curr_min = arr[i]\n        # If the current number is less than the maximum value in the current subarray, update the max value\n        elif arr[i] < curr_max:\n            curr_max = arr[i]\n        # If the current number is between the maximum and minimum values in the current subarray, update the max value\n        else:\n            curr_min = arr[i]\n            curr_max = arr[i]\n\n        # Update the maximum product if the current subarray is a longer subarray\n        if i - end_index + 1 > max_so_far:\n            max_so_far = i - end_index + 1\n\n        # Update the ending index for the current subarray\n        end_index = i\n\n    # Return the maximum product\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_left = max_right = arr[0]\n        for i in range(1, n):\n            max_left = max(arr[i], max_left * arr[i])\n            max_right = max(arr[i], max_right * arr[i])\n        return max(max_left, max_right)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = test_tup[0]\n        for i in range(1, len(test_tup) - 1):\n            result += test_tup[i]\n        result += test_tup[-1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    if len(test_tup) <= 1:\n        return test_tup\n\n    # Initialize the first two elements of the tuple\n    sum_1 = test_tup[0] + test_tup[1]\n\n    # Initialize the rest of the tuple\n    for i in range(2, len(test_tup)):\n        sum_i = sum_1 + test_tup[i]\n        sum_1 = sum_i\n\n    # Return the final sum\n    return sum_1"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize an empty list to store the pairwise sums\n    pairwise_sum_list = []\n    \n    # Loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Calculate the pairwise sum between the current element and its adjacent element\n        pairwise_sum = test_tup[i] + test_tup[i+1]\n        # Add the pairwise sum to the list\n        pairwise_sum_list.append(pairwise_sum)\n    \n    # Return the list of pairwise sums\n    return pairwise_sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize the sum variable\n    total = 0\n    \n    # Loop through the tuple and add the pairwise addition to the total variable\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    # Check if the input tuple is empty\n    if n == 0:\n        return None\n    elif n == 1:\n        return test_tup[0]\n    else:\n        # Initialize the sum of neighboring elements\n        sum_neighb = test_tup[1]\n        # Iterate over the remaining elements\n        for i in range(2, n):\n            # Add the current element to the sum of neighboring elements\n            sum_neighb += test_tup[i]\n        # Return the final sum of neighboring elements\n        return sum_neighb"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = test_tup[0]\n        for i in range(1, len(test_tup)-1):\n            result += test_tup[i+1]\n        result += test_tup[-1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables to hold the sum of the first and last elements\n    first_sum = 0\n    last_sum = 0\n    # Loop through the tuple and add the sum of the current and next elements\n    for i in range(len(test_tup) - 1):\n        first_sum += test_tup[i]\n        last_sum += test_tup[i+1]\n    # Return the pairwise addition of the first and last elements\n    return first_sum + last_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for a in arr:\n        product = (product * a) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr: \n        product = (product * num) % n \n    return product "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Convert the array to a string and convert each character to an integer\n    arr_str = ''.join(str(x) for x in arr)\n    # Find the product of the array and the modulo of n\n    product = 1\n    for i in range(len(arr_str)):\n        product = (product * int(arr_str[i])) % n\n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result *= num\n        result %= n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as inputs and returns the remainder of the array multiplication by n.\n    The array is multiplied together and the result is then divided by n to find the remainder.\n    '''\n    \n    result = 1\n    \n    # Multiply the array elements\n    for num in arr:\n        result = (result * num) % n\n        \n    # Divide the result by n to find the remainder\n    return result % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and n as input and returns the product of array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if len(l) < 2: \n        return False\n    \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            print(f\"{l[i]} and {l[i+1]} are consecutive numbers.\")\n        else:\n            print(f\"{l[i]} and {l[i+1]} are not consecutive numbers.\")"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]-1: # if the next element is one more than the current element \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    \n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # iterate through the list\n    for i in range(len(l)-1): \n        # check if the difference between the current and next elements is 1\n        if l[i+1] - l[i]!= 1: \n            # if not, return False\n            return False \n\n    # if all elements are consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0 \n    while i < len(l)-1: \n        if l[i] + 1 == l[i+1]: \n            return True \n        i += 1 \n    return False \n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set to store the unique elements in test_list2\n    unique_elements = set(test_list2)\n    # Create an empty set to store the common elements\n    common_elements = set()\n    # Loop through each element in test_list1\n    for element in test_list1:\n        # Check if the element is in unique_elements\n        if element in unique_elements:\n            # If it is, add it to common_elements\n            common_elements.add(element)\n    # Convert common_elements to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from each list to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize empty list to store the tuple intersection\n    intersection_list = []\n\n    # Iterate over the first tuple list\n    for element in test_list1:\n        # Check if the element is present in the second tuple list\n        if element in test_list2:\n            # Add the element to the intersection list\n            intersection_list.append(element)\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    common_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and sort it\n    common_list = sorted(list(common_set))\n\n    # Return the common list\n    return common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Step 1: Merge the two lists\n    merged_list = test_list1 + test_list2\n    # Step 2: Remove duplicates from the merged list\n    unique_list = list(set(merged_list))\n    # Step 3: Find the intersection of the two lists\n    intersection = [tup for tup in unique_list if tup in test_list1 and tup in test_list2]\n    # Step 4: Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the common elements of both tuple lists\n    common_set = set()\n    # Iterate over the first tuple list and add the elements to the set\n    for element in test_list1:\n        common_set.add(element)\n    # Iterate over the second tuple list and check if the element exists in the set\n    for element in test_list2:\n        if element in common_set:\n            # If the element exists in the set, add it to the common set\n            common_set.add(element)\n    # Convert the common set back to a tuple and return it\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a dictionary to store the count of each element in the first list\n    count_dict = {}\n    for element in test_list1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Create a dictionary to store the count of each element in the second list\n    count_dict2 = {}\n    for element in test_list2:\n        if element in count_dict2:\n            count_dict2[element] += 1\n        else:\n            count_dict2[element] = 1\n\n    # Find the intersection of the two dictionaries\n    intersection = {k: v for k, v in count_dict.items() if k in count_dict2 and count_dict2[k] > 0}\n\n    # Create a list to store the unique elements in the intersection\n    unique_list = []\n    for key, value in intersection.items():\n        if value == 1:\n            unique_list.append(key)\n\n    # Return the unique elements in the intersection list\n    return unique_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Merge the two lists without any order constraints\n    merged_list = list(set(test_list1) & set(test_list2))\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize an empty string to store the modified string\n    new_str = ''\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is not the character to be replaced, append it to the new string\n        if char!= ch:\n            new_str += char\n        # If the character is the character to be replaced, append the new character instead\n        else:\n            new_str += newch\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (string): The input string.\n    ch (string): The character to be replaced.\n    newch (string): The character to replace with.\n\n    Returns:\n    string: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character matches the search character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        # otherwise, append the character to the modified string\n        else:\n            modified_str += char\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string with the new character\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is the target character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter to count the occurrences of values in the dictionary\n    count = Counter(dict1)\n    # Sort the dictionary based on the values using sorted() function\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    # Return the sorted dictionary\n    return dict(sorted_count)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value\n    sorted_counter = counter.most_common()\n\n    # Extract the sorted values as a list\n    sorted_list = [value for value, count in sorted_counter]\n\n    # Return the sorted list as a dictionary\n    return dict(sorted_list)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by values\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # create a dictionary from the sorted Counter object\n    sorted_dict = {}\n    for i in sorted_counter:\n        sorted_dict[i[0]] = i[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts it by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    # Create a new dictionary with sorted key-value pairs\n    sorted_dict = {k: v for k, v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by values\n    sorted_counter = counter.most_common()\n    # convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values to be the first element of the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Iterate over the rest of the elements in the array\n    for num in nums[1:]:\n        # If a number is larger than the current largest value, update it\n        if num > largest:\n            largest = num\n        # If a number is smaller than the current smallest value, update it\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = max(nums)\n    largest = min(nums)\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None, None\n    # Sort the array in descending order\n    sorted_nums = sorted(nums, reverse=True)\n    # Find the largest and smallest values\n    largest = sorted_nums[0]\n    smallest = sorted_nums[-1]\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest, largest - smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Find the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # get the largest and smallest values\n    largest = nums[0]\n    smallest = nums[-1]\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string is in lower case or not.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define the regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # find all the lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    # loop over all the matches and remove them from the given string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Use a regular expression to find all lowercase substrings in the string\n    lower_case_substrings = re.findall(r'[a-z]+', str1)\n\n    # Loop through each lowercase substring and remove it from the string\n    for substring in lower_case_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # Find all lowercase substrings in the input string\n    matches = pattern.findall(string)\n    # Loop through the matches and remove them from the input string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # Compile a regular expression to match lowercase substrings\n    lowercase_pattern = re.compile(r'[a-z]+')\n    # Find all substrings of the string that match the lowercase pattern\n    matches = lowercase_pattern.findall(string)\n    # Replace all matches with an empty string\n    result = lowercase_pattern.sub('', string)\n    # Return the modified string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a string with all lowercase substrings removed.\n    '''\n    \n    # Use regular expressions to find all lowercase substrings in the string\n    matches = re.findall('[a-z]+', string)\n    \n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n        \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    regex = re.compile(r'\\b[a-z]\\w*\\b')\n    return regex.sub('', str2)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_regex = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return re.sub(lowercase_regex, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_regex = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return lowercase_regex.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Initialize an empty list to store the non-lowercase words\n    result = []\n    # Iterate over each word in the list\n    for word in words:\n        # If the word is not lowercase, append it to the result list\n        if not word.islower():\n            result.append(word)\n    # Join the words in the result list back into a string and return it\n    return''.join(result)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the regular expression pattern for lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n\n    # Find all occurrences of lowercase substrings in the given string\n    matches = pattern.findall(str1)\n\n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10  \n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # Convert the number to a string\n    n = str(n)\n\n    # Extract the first digit of the string\n    first_digit = n[0]\n\n    # Return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Split the given number into digits\n    digits = list(str(n))\n    # Return the first digit of the list\n    return digits[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is a number\n    try:\n        num = int(n)\n    except ValueError:\n        print(\"Input is not a number\")\n        return\n\n    # Check if the number is zero\n    if num == 0:\n        print(\"The first digit of 0 is 0\")\n        return\n\n    # Find the first digit of the number\n    first_digit = str(num)[0]\n\n    # Print the result\n    print(\"The first digit of\", n, \"is\", first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if isinstance(n, int) and 0 <= n < 10:\n        return n\n    else:\n        raise ValueError(\"Input should be a number between 0 and 9.\")"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer input and returns the first digit of that number.\n    \"\"\"\n    # get the first digit of the number using string indexing\n    first_digit = str(n)[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the length of the string\n    length = len(num_str)\n    # Return the first digit of the number\n    return num_str[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in list if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0: # checks if the number is odd\n            odd_numbers.append(number) # adds the number to the list if it's odd\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd numbers from the list.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n    \n    # Iterate through the list and append the odd numbers to the odd_list\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    \n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes_of_natural_numbers = sum([i**3 for i in range(1, n+1)])\n\n    # difference between the two sums\n    difference_sum = sum_of_cubes_of_natural_numbers - sum_of_natural_numbers\n\n    # return the difference\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n\n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of the first n natural numbers\n    sum_natural_numbers = (n * (n + 1)) // 2\n    \n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Find the difference between the two sums\n    difference = sum_of_cubes - sum_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = n * (n+1) * (2*n+1) / 6\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = n * (n+1) * (n+2) * (n+3) / 10\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    difference = sum_cubes - sum_natural\n    return difference\n\nprint(difference(10))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    total = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = cubes - total\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_cubes(n):\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        sum_of_cubes = 0\n        for i in range(1, n+1):\n            sum_of_cubes += i**3\n        return sum_of_cubes\n\n    def sum_natural_numbers(n):\n        '''\n        Write a python function to find the sum of the first n natural numbers.\n        '''\n        sum_of_natural_numbers = 0\n        for i in range(1, n+1):\n            sum_of_natural_numbers += i\n        return sum_of_natural_numbers\n\n    sum_of_cubes = sum_cubes(n)\n    sum_of_natural_numbers = sum_natural_numbers(n)\n    return sum_of_cubes - sum_of_natural_numbers\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i] ^ A[j]) % 2!= 0):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A and a positive integer N.\n    It returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_value = 0\n        for j in range(N):\n            xor_value ^= A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    odd_pairs = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n\n    :param A: A list of integers representing the elements of the list.\n    :param N: The length of the list.\n    :return: An integer representing the number of pairs whose xor value is odd.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the list and for each element, find all pairs whose xor value is odd\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_val = 0\n        for j in range(N):\n            if i!= j:\n                xor_val ^= A[i] ^ A[j]\n        if xor_val % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each character in the input string\n    for char in string:\n        # Check if the character is uppercase or lowercase\n        if char.isupper():\n            # If it's uppercase, convert it to lowercase\n            result += char.lower()\n        else:\n            # If it's lowercase, convert it to uppercase\n            result += char.upper()\n    \n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create an empty string to hold the modified string\n    modified_string = \"\"\n    # loop through each character in the original string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            modified_string += char.lower()\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            modified_string += char.upper()\n        # if the character is not uppercase or lowercase, add it as is\n        else:\n            modified_string += char\n    # return the modified string\n    return modified_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    while n1!= 0 or n2!= 0:\n        if n1!= 0 and n2!= 0:\n            diff = abs(n1 - n2)\n            n1 //= 10\n            n2 //= 10\n            count += diff\n        elif n1!= 0:\n            n1 //= 10\n        else:\n            n2 //= 10\n    return count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create empty list to store the difference between digits\n    diff_list = []\n    # loop through each digit of the first integer\n    for num in str(n1):\n        # loop through each digit of the second integer\n        for digit in str(n2):\n            # if the digits are equal, append 0 to the list\n            if digit == num:\n                diff_list.append(0)\n            # if the digits are not equal, append the difference between them to the list\n            else:\n                diff_list.append(int(digit) - int(num))\n    # return the sum of the differences\n    return sum(diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers to a string representation\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum of differences to 0\n    difference_sum = 0\n    \n    # Iterate through the digits of both strings and calculate the difference\n    for i in range(len(n1_str)):\n        difference = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        difference_sum += difference\n    \n    # Return the sum of differences\n    return difference_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the input numbers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    \n    # find the per-digit difference between the two lists of digits\n    diff_sum = 0\n    for digit_n1, digit_n2 in zip(n1_digits, n2_digits):\n        diff = abs(digit_n1 - digit_n2)\n        diff_sum += diff\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    total_sum = 0\n    # iterate over each digit in the input numbers\n    for i in range(len(str(n1))):\n        # subtract the corresponding digits from the input numbers and calculate the absolute difference\n        diff = abs(n1 % 10 - n2 % 10)\n        total_sum += diff\n        # divide the input numbers by 10 to remove the rightmost digit\n        n1 //= 10\n        n2 //= 10\n    return total_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Check if both numbers are positive integers\n    if not (isinstance(n1, int) and isinstance(n2, int) and n1 > 0 and n2 > 0):\n        print(\"Both numbers should be positive integers.\")\n        return\n    \n    # Convert both numbers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the numbers\n    diff = 0\n    for digit1, digit2 in zip(digits1, digits2):\n        diff += abs(digit1 - digit2)\n\n    # Return the sum of the differences\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize variables to store the sum of differences and the sum of absolute differences\n    sum_diff = 0\n    sum_abs_diff = 0\n\n    # Convert the two numbers to strings so we can work with individual digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Loop through each digit in the two numbers\n    for i in range(len(n1_str)):\n\n        # Calculate the difference between the two digits\n        diff = int(n1_str[i]) - int(n2_str[i])\n\n        # Add the difference to the sum of differences\n        sum_diff += diff\n\n        # Calculate the absolute difference between the two digits\n        abs_diff = abs(diff)\n\n        # Add the absolute difference to the sum of absolute differences\n        sum_abs_diff += abs_diff\n\n    # Return the sum of differences and the sum of absolute differences\n    return sum_diff, sum_abs_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize variables to store the digit differences\n    digit_diff1 = 0\n    digit_diff2 = 0\n\n    # Loop through each digit of n1 and n2\n    for i in range(10):\n        # Calculate the per-digit difference\n        digit_diff = abs(n1 % 10 - n2 % 10)\n\n        # Add the digit difference to the appropriate variable\n        if n1 < n2:\n            digit_diff1 += digit_diff\n        else:\n            digit_diff2 += digit_diff\n\n        # Shift the numbers to the right by one digit\n        n1 //= 10\n        n2 //= 10\n\n    # Return the sum of the two digit differences\n    return digit_diff1 + digit_diff2"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both integers to strings and split them into lists of digits\n    s1 = str(n1)\n    s2 = str(n2)\n    digits1 = [int(digit) for digit in s1]\n    digits2 = [int(digit) for digit in s2]\n\n    # calculate the absolute difference between the two lists of digits\n    difference = [abs(digit1 - digit2) for digit1, digit2 in zip(digits1, digits2)]\n\n    # calculate the sum of the per-digit differences\n    per_digit_difference = sum(difference)\n\n    # return the total sum of per-digit differences\n    return per_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert both numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # calculate the per-digit difference between the two numbers\n    diff_sum = 0\n    for i in range(max(len(s1), len(s2))):\n        # get the digits at the current position\n        d1 = int(s1[i]) if i < len(s1) else 0\n        d2 = int(s2[i]) if i < len(s2) else 0\n\n        # calculate the per-digit difference between the two digits\n        diff = abs(d1 - d2)\n\n        # add the per-digit difference to the total sum\n        diff_sum += diff\n\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i < len(a) - size + 1:\n            current_sum -= a[i + size]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        max_sum = max(a[0], max_sub_array_sum(a[1:], size - 1))\n        min_sum = min(a[0], max_sub_array_sum(a[1:], size - 1))\n        return max_sum + min_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_sum = a[i]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return 0\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if i >= size - 1:\n            return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize max_sum to the first element of the list\n    max_sum = a[0]\n\n    # Loop through the list and keep track of the sum of the sublist\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    i = 0\n    \n    while i < len(a):\n        if i + size > len(a):\n            current_sum += a[i]\n            i += 1\n        else:\n            current_sum += sum(a[i:i+size])\n            max_sum = max(max_sum, current_sum)\n            i += size\n            \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the list in ascending order\n    union_list.sort()\n    # Output the sorted list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n\n    union_list = sorted(list(union_set))\n\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create an empty set to store the unique elements of the two tuples\n    unique_elements = set()\n    \n    # Add all elements from the first tuple to the set\n    unique_elements.update(test_tup1)\n    \n    # Add all elements from the second tuple to the set\n    unique_elements.update(test_tup2)\n    \n    # Convert the set to a list and sort it in ascending order\n    unique_elements = sorted(list(unique_elements))\n    \n    # Output the sorted list of unique elements\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check if the input tuples are valid\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        print(\"Error: Input tuples must be tuples.\")\n        return\n    \n    # Flatten the tuples\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    \n    # Find the union of the two tuples\n    union = tup1 + tup2\n    \n    # Sort the elements of the union and print them\n    sorted_union = sorted(union)\n    for element in sorted_union:\n        print(element, end=\" \")"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the tuples into one tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Sort the tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n    \n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets and convert back to a list\n    union = sorted(list(set1 | set2))\n    # print the union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # Convert the list to a set to remove duplicates\n    union_set = set(union_tup)\n    \n    # Convert the set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    \n    # Output the sorted union list\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # find the union of the two tuples using set()\n    union = set(test_tup1).union(test_tup2)\n\n    # sort the elements in the union in ascending order\n    sorted_union = sorted(union)\n\n    # output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() to get the unique elements of both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_elements = sorted(list(unique_elements))\n    # Return the sorted list\n    return sorted_elements"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize maximum length to 0\n    max_length = 0\n\n    # Initialize sublist to an empty list\n    sublist = []\n\n    # Loop through each element in the list\n    for i in range(len(lst)):\n\n        # Add the current element to the sublist\n        sublist.append(lst[i])\n\n        # Check if the length of the current sublist is greater than the maximum length\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n        # If the current sublist is greater than 1 element long, remove the first element\n        if len(sublist) > 1:\n            sublist.pop(0)\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of integers as input and returns the length of the longest sublists in the list.\n    '''\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    start = 0\n    end = 0\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            current_length = 0\n            if end - start > max_length:\n                max_length = end - start\n            start = i + 1\n        else:\n            current_length += 1\n            end = i\n    if end - start > max_length:\n        max_length = end - start\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        if i == 0 or lst[i]!= lst[i-1]:  \n            if i == len(lst)-1 or lst[i]!= lst[i+1]:  \n                max_len = max(max_len, 1)  \n            else:  \n                max_len = max(max_len, i+1)  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the length of the longest sublist in the list.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = 1\n        else:\n            max_length = max(max_length, Find_Max_Length(lst[:i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  # initialize max_len to 0\n    for i in range(len(lst)):  # iterate through each element of the list\n        for j in range(i+1, len(lst)+1):  # iterate through each sublist starting from the next element\n            sublist = lst[i:j]  # create a sublist using slice\n            if len(sublist) > max_len:  # if the length of the sublist is greater than max_len\n                max_len = len(sublist)  # update max_len to the length of the sublist\n    return max_len  # return the max_len value"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = len(lst[i])\n        else:\n            if len(lst[i]) > max_length:\n                max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize maximum length to 0\n    max_len = 0\n\n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # Initialize current length to 0\n        cur_len = 1\n\n        # Loop through each element of the list that follows i\n        for j in range(i+1, len(lst)):\n            # If the element at j is in the same sublist as i, increment current length\n            if j+1 in lst[i] and lst[j+1] in lst[i]:\n                cur_len += 1\n            # Otherwise, break out of the inner loop\n            else:\n                break\n\n        # Update maximum length if current length is greater than maximum length\n        max_len = max(max_len, cur_len)\n\n    # Return maximum length\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\"|\\')(\\w+\\s)+(?=\\\")|(?<=\\\"|\\')(\\\"|\\')\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    :param text: The string from which to extract values.\n    :type text: str\n    :return: A list of extracted values.\n    :rtype: list\n    \"\"\"\n    pattern = r'(?<!\\\\)\"[^\"]*\"'  # matches double-quoted values (i.e. values enclosed in double quotes)\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n\n    # use the pattern to find all matches in the text\n    matches = pattern.findall(text)\n\n    # extract the values and return them as a list\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<=[\"\\'])(?P<value>.*)(?=[\"\\'])'\n    matches = re.finditer(pattern, text)\n    values = [match.group('value') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Define the pattern for finding values between quotation marks\n    pattern = re.compile(r'\"([^\"]+)\"')\n\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(text)\n\n    # Return a list of all values between quotation marks found\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Use a regular expression to find all the quotation marks in the text\n    matches = re.findall(r'\"([^\"]*)\"', text)\n\n    # Iterate through the matches and extract the value between the quotes\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        values.append(value)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a variable to store the count of pairs\n    count = 0\n    # Iterate through all possible pairs of integers in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # If the two integers are not equal, increment the count\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the elements are equal\n            if arr[i] == arr[j]:\n                continue\n            # Check if the sum is less than n\n            elif arr[i] + arr[j] < n:\n                count += 1\n\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a given word into its characters.\n\n    Args:\n        word (str): The word to be splitted.\n\n    Returns:\n        list: A list of characters in the word.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    n = str(n)\n    # initialize a variable to store the sum\n    total = 0\n    # loop through each character in the string\n    for digit in n:\n        # convert the character to an integer and add it to the total\n        total += int(digit)\n    # return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    n_str = str(n)\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through each character in the string\n    for char in n_str:\n        # convert the character to an integer and add it to the sum\n        sum += int(char)\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert n to a list of digits\n    digits = list(str(n))\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each digit and add it to the sum_of_digits variable\n    for digit in digits:\n        sum_of_digits += int(digit)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum to zero\n    sum_num = 0\n    # Loop through each character in the string\n    for digit in num_str:\n        # Add the integer value of the character to the sum\n        sum_num += int(digit)\n    # Return the sum of the digits\n    return sum_num"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        # Get the last digit of n\n        digit = n % 10\n        # Add the last digit to sum\n        sum += digit\n        # Remove the last digit from n\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert integer to a string\n    s = str(n)\n    # initialize a variable to hold the sum of digits\n    total = 0\n    # loop through each digit in the string\n    for digit in s:\n        # add the digit to the total\n        total += int(digit)\n    # return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the rightmost digit\n        digit = n % 10\n        # add the digit to the total\n        total += digit\n        # remove the rightmost digit from the number\n        n //= 10\n    # return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) <= 1:\n        return True\n    \n    # Check if the first element is smaller than the last one\n    if list1[0] > list1[-1]:\n        return False\n    \n    # Check if all the elements are in increasing order\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is empty or not\n    if len(list1) <= 1:\n        return True\n    # Check if the first element is smaller than the second element\n    elif list1[0] < list1[1]:\n        return False\n    # If the list is not sorted, recursively call the function on the rest of the list\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(1, len(list1)):\n            if list1[i] <= list1[i-1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[1:] <= list1[:-1]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for i in range(len(list1)):\n        # Sort the sublist using the sorted() function\n        list1[i].sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(list1):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list1 (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A list of lists, where each sublist contains the same strings, but sorted.\n    \"\"\"\n    sorted_lists = []\n    for sublist in list1:\n        sublist = sorted(sublist)\n        sorted_lists.append(sublist)\n    return sorted_lists"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store the unique numbers\n    unique_nums = set()\n    # Loop through each list in the input\n    for num_list in nums:\n        # Add each unique number to the set\n        unique_nums.update(num_list)\n    # Return the list of unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through the lists and add unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    # create a set to remove duplicates\n    nums_set = set(nums)\n    # convert the set back to a list\n    result = list(nums_set)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n    # Loop through each list of numbers\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # If the number is not in the dictionary, add it to the dictionary with its count set to 1\n            if num not in unique_nums:\n                unique_nums[num] = 1\n            # If the number is already in the dictionary, increment its count by 1\n            else:\n                unique_nums[num] += 1\n    # Create a new list to store the unique numbers\n    unique_num_list = []\n    # Loop through each number in the dictionary and append it to the new list if its count is 1\n    for num in unique_nums:\n        if unique_nums[num] == 1:\n            unique_num_list.append(num)\n    # Return the new list of unique numbers\n    return unique_num_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Remove duplicates from each list\n    for i in range(len(nums)):\n        nums[i] = list(set(nums[i]))\n    \n    # Remove duplicates from the final list\n    nums = list(set(sum(nums, [])))\n    \n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and removes duplicate numbers from it while keeping only the first occurrence of each number.\n    The function returns a new list containing only the unique numbers.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_nums = set()\n    # iterate through the input list\n    for num in nums:\n        # if the number is not already in the set, add it to the set\n        if num not in unique_nums:\n            unique_nums.add(num)\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of the unique numbers from the list\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    # remove duplicates from the list\n    list_data = list(set(list_data))\n    # calculate the product of the unique numbers in the list\n    unique_product = 1\n    for num in list_data:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    freq = {}\n    for num in list_data:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    product = 1\n    for num in freq:\n        if freq[num] == 1:\n            product *= num\n        else:\n            pass\n\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n    return 1 if len(unique_list) == 0 else unique_list[0]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # Use set to remove duplicates from the list\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    # initialize the product to 1\n    product = 1\n    # iterate over the unique numbers and multiply them together\n    for number in unique_numbers:\n        product *= number\n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # remove duplicates from the list using set()\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r**2 + 2*3.14159*h*r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    return 2 * math.pi * r * h + 2 * math.pi * r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    :param r: radius of the cylinder\n    :param h: height of the cylinder\n    :return: surface area of the cylinder\n    \"\"\"\n\n    # pi is a mathematical constant\n    pi = 3.14159\n\n    # surface area of the cylinder\n    surface_area = 2 * pi * r * h\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Formula for surface area of a cylinder\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the length of A is greater than or equal to the length of B\n    if len(A) < len(B):\n        return False\n\n    # Traverse through A and check if each element is present in B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Convert both the lists to sets to make them comparison easier\n    A = set(A)\n    B = set(B)\n\n    # Check if B is subset of A\n    return B.issubset(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Check whether a list is sublist of another or not.\n\n    Args:\n        A (list): The first list to check.\n        B (list): The second list to check.\n\n    Returns:\n        bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the second list is empty\n    if not B:\n        return True\n\n    # Initialize variables to keep track of the index of the elements in the two lists\n    i = j = 0\n\n    # Traverse through the first list\n    while i < len(A):\n        # If the current element of the first list is equal to the element of the second list, increment both pointers\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        # If the element of the first list is greater than the element of the second list, decrement the second pointer\n        else:\n            j = 0\n        # If the second pointer reaches the end of the second list, the first list is a sublist of the second list\n        if j == len(B):\n            return True\n\n    # If the second pointer did not reach the end of the second list, the first list is not a sublist of the second list\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if both lists are of same length or not\n    if len(A)!= len(B):\n        return False\n\n    # Traverse through both lists\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n            if j == len(B):\n                return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list): \n        return \"Both input must be lists\" \n    if len(A) > len(B): \n        return \"A should be smaller than B\" \n    for i in range(len(B)): \n        if A in B[i:]: \n            return \"Yes\" \n    return \"No\""
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize a variable to store the factorial\n    factorial = 1\n    \n    # Calculate the factorial of the given number\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Loop through each digit of the factorial\n    while n >= 10:\n        # Extract the last digit of the current factorial\n        digit = n % 10\n        # Add the last digit to the variable to store the last digit of the factorial\n        last_digit += digit\n        # Remove the last digit from the factorial\n        n //= 10\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of its factorial.\n    \"\"\"\n    # Convert the input number into a string\n    num_str = str(n)\n\n    # Convert the string into a list of characters\n    num_list = list(num_str)\n\n    # Convert the list into a string again\n    num_str = ''.join(num_list)\n\n    # Convert the string into an integer\n    num = int(num_str)\n\n    # Calculate the factorial of the number\n    fact = 1\n    for i in range(1, num + 1):\n        fact *= i\n\n    # Find the last digit of the factorial\n    last_digit = fact % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the last digit variable\n    last_digit = 0\n    \n    # Loop through the factorial of n and find the last digit\n    for i in range(n, 0, -1):\n        last_digit = i % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n    # Find the factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n    # Find the last digit in the factorial\n    while factorial:\n        last_digit = factorial % 10\n        factorial //= 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the given number to string\n    num_str = str(n)\n    # find the length of the number string\n    length = len(num_str)\n    # initialize the result variable\n    result = 0\n    # loop through each digit in the string and multiply it to the result\n    for i in range(length - 1, -1, -1):\n        digit = int(num_str[i])\n        result += digit * factorial(int(num_str[:i]))\n    # return the result\n    return result\n\n\ndef factorial(n): \n    '''\n    Write a python function to find factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the factorial variable to 1\n    factorial = 1\n    # Convert the input number to a string\n    num_str = str(n)\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the factorial\n        factorial += int(digit)\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves 3 lists of the same length into a single flat list.\n\n    :param list1: list of integers\n    :param list2: list of integers\n    :param list3: list of integers\n    :return: a flat list of integers\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # check that all lists are the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All input lists must be the same length.\")\n\n    # create a new empty list to store the interleaved elements\n    result = []\n\n    # loop through each element in each input list\n    for i in range(len(list1)):\n        # add the i-th element from each input list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    # Flatten the lists\n    flat_list = list1 + list2 + list3\n    # Return the interleaved list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): List 1 of equal length\n        list2 (list): List 2 of equal length\n        list3 (list): List 3 of equal length\n\n    Returns:\n        list: A single flat list containing all elements of the input lists interleaved.\n    \"\"\"\n    result = []\n    i = j = k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    while i < len(list1) and k < len(list3):\n        if list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while j < len(list2) and k < len(list3):\n        if list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if the lists are all of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # initialize the output list\n    output_list = []\n    \n    # iterate over the lists and append the elements in order\n    for i in range(len(list1)):\n        output_list.append(list1[i])\n        output_list.append(list2[i])\n        output_list.append(list3[i])\n        \n    return output_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff.append(test_tup1[i])\n    return diff"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Loop through the elements in the tuples\n    for i in range(len(test_tup1)):\n        # If the elements at the same index in the tuples are not equal,\n        # return the index and its value as the dissimilar element\n        if test_tup1[i]!= test_tup2[i]:\n            return i, test_tup1[i]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elements.append(elem1)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # initializing a list to store the dissimilar elements\n    dissimilar = []\n\n    # iterating over both tuples and comparing each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # adding the dissimilar element to the list\n            dissimilar.append(test_tup1[i])\n\n    # returning the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a set of their dissimilar elements.\n\n    :param test_tup1: The first tuple to compare.\n    :param test_tup2: The second tuple to compare.\n    :return: A set of the dissimilar elements in the two tuples.\n    \"\"\"\n    dissimilar = set()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.add(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the elements of the first tuple\n    for element in test_tup1:\n        # Check if the element is present in the second tuple\n        if element not in test_tup2:\n            # If it's not, add it to the dissimilar list\n            dissimilar_list.append(element)\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for item in test_tuple:\n        if not even_fnc(item):\n            uneven_elements.append(item)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_elements = []\n    for element in test_tuple:\n        if isinstance(element, (int, float)):\n            if even_fnc(element):\n                uneven_elements.append(element)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_element = even_ele(element, even_fnc)\n            new_tuple.append(new_element)\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # remove uneven elements from the nested mixed tuple\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, even_fnc):\n            new_tuple.append(item)\n        else:\n            pass\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # loop through the tuple\n    for item in test_tuple:\n        # check if item is a tuple\n        if isinstance(item, tuple):\n            # recursively call the function with the item as the argument\n            even_ele(item, even_fnc)\n        # check if the item is even\n        elif even_fnc(item):\n            # remove the item from the tuple if it is even\n            test_tuple.remove(item)\n    # return the modified tuple\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(num): \n        return num % 2 == 0 \n\n    def remove_odd(lst): \n        return [x for x in lst if is_even(x)]\n\n    return remove_odd(even_fnc(test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for i in test_tuple:\n        if type(i) is tuple:\n            uneven_elements.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                uneven_elements.append(i)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Define an empty list to store the even elements\n    even_list = []\n\n    # Loop through each element in the test_tuple\n    for element in test_tuple:\n        # Check if the element is even\n        if even_fnc(element):\n            # Add the even element to the even_list\n            even_list.append(element)\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            for j in i:\n                if isinstance(j, tuple):\n                    for k in j:\n                        if even_fnc(k):\n                            result.append(k)\n                else:\n                    if even_fnc(j):\n                        result.append(j)\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area = (b * s) / 2\n    # Calculate the surface area of the pyramid\n    surface_area = 4 * area * b\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = ((b**2) * (s + b)) / 2 # formula for surface area of square pyramid\n    print(\"The surface area of the square pyramid is: \",area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes in the base and height of a square pyramid as input parameters and returns the surface area of the pyramid.\n    '''\n    surface_area = 2 * (base * height + base * height) + (base * (height - 2))**2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(base**2 + height**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b*b*s + 6*b*b + 12*b*s + 6*b + 12"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s + (b * s)**2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes a base edge b and a height s as inputs and returns the surface area of a square pyramid.\n    \"\"\"\n    area = 1/2*b*s # formula for surface area of a square pyramid\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + 2 * (s * s) + 4 * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*3 + (s**2)*2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the base using Heron's formula\n    area_base = 0.5 * b * b\n    # Calculate the area of the upper pyramid using Heron's formula\n    area_pyramid = 0.5 * b * s\n    # Calculate the area of the whole pyramid by adding the area of the base and the area of the upper pyramid\n    area_pyramid = area_base + area_pyramid\n    # Return the surface area of the pyramid\n    return area_pyramid"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) * n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*num - 1) * catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative values of n not allowed\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2) + catalan_number(n)\n\nprint(catalan_number(0))  # 1\nprint(catalan_number(1))  # 1\nprint(catalan_number(2))  # 2\nprint(catalan_number(3))  # 5"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1]\n    for i in range(1, num + 1):\n        catalan_list.append(0)\n        for j in range(1, i + 1):\n            catalan_list[i] += binomial(i, j) * catalan_list[j]\n    return catalan_list[num]\n\ndef binomial(n, k):\n    '''\n    Write a function which returns binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    else:\n        return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return num * catalan_number(num-1) / (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    n = n + 1  # To get the nth Catalan number\n    catalan = 0\n    for i in range(n):\n        catalan += (2 * i + 1) * (2 * i + 3) // (i + 1)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    catalan_numbers = [0, 1]\n    for i in range(2, num+1):\n        catalan_numbers.append(catalan_numbers[i-1] + catalan_numbers[i-2])\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Check if n is less than or equal to 20\n    if n > 20:\n        print(\"Warning: n is greater than 20, result may be inaccurate\")\n\n    # Initialize a list to store the catalan numbers\n    catalan = [0] * (n + 1)\n\n    # Initialize the first two catalan numbers\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Calculate the rest of the catalan numbers recursively\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += (catalan[j] * catalan[i - j - 1])\n\n    # Return the nth catalan number\n    return catalan[n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b(?:adverb\\s+)?ly\\b'\n    \n    # Search for adverbs using the regular expression pattern\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through the matches and add the adverbs and their positions to the list\n    for match in matches:\n        # Get the index of the match and the text of the match\n        index = match.start()\n        text = match.group()\n        \n        # If the match is not preceded by any non-word character (e.g. whitespace), add the adverb and its position to the list\n        if not re.match(r'\\W', text[:index]):\n            adverbs.append((text, index))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    \n    # Use regex to find all matches of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # Return list of tuples containing adverb and its positions in text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(f\"Adverb: '{match}' at indices {start_index} to {end_index}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the occurrences of the pattern \"I am\"\n    matches = re.findall(r\"\\bI\\s*am\\b\", text)\n    \n    # Check if there are any matches\n    if not matches:\n        return None\n    \n    # Find the index of the first match\n    start_index = matches[0].start()\n    \n    # Find all the occurrences of the pattern \"ly\"\n    adverbs = re.findall(r\"\\bly\\b\", text)\n    \n    # Check if there are any adverbs\n    if not adverbs:\n        return None\n    \n    # Find the index of the first adverb and its position in the text\n    first_adverb_index = text[:start_index].rfind(adverbs[0])\n    first_adverb_position = start_index - first_adverb_index\n    \n    # Return the list of adverb positions and their positions in the original text\n    return [(first_adverb_index, first_adverb_position), first_adverb_position]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'(?i)\\b([a-z]+)ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-z]*ly\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    for match in matches:\n        start_pos = text.lower().find(match.lower())\n        end_pos = start_pos + len(match)\n        print(f\"{match} found at positions {start_pos} and {end_pos}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expressions to find all words containing the adverb 'ly'\n    pattern = r'\\b\\w+\\s+\\bly\\b'\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print their positions and their adverb\n    for match in matches:\n        pos = text.find(match)\n        print(f\"{match} found at position {pos}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b\\s+\\w+\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b(?:[a-zA-Z]+\\s+)?\\bly\\b(?:\\s+\\w+\\b)?'\n    match = re.search(pattern, text, re.IGNORECASE)\n\n    if match:\n        return match.group(0), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'\\bly\\b', re.IGNORECASE)\n    \n    # Find all occurrences of the pattern in the text\n    matches = pattern.findall(text)\n    \n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    \n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    \n    # Return the positions list\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to consider\n    as inputs and returns the n most expensive items in the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    \n    # iterate through the list and add items to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # remove the least expensive item if the heap size exceeds n\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # return the n most expensive items in the list\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the list.\n    \"\"\"\n    # Create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -items[i])\n\n    # Pop the n smallest items from the heap and add them to a list\n    result = []\n    for i in range(n):\n        result.append(-heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and a number n, returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate over the items and add each item to the heap if it's cheaper than the minimum\n    for item in items:\n        if item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        elif len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the heap\n    result = [heapq.heappop(min_heap) for _ in range(n)]\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item) # push the negative value of the price to the heap\n\n    return heapq.nlargest(n, heap) # return the n largest elements from the heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of n items to keep track of the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap,item)\n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the items in the heap as a list\n    return heapq.nsmallest(n, min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n as input, and\n    returns a list of the n most expensive items in the dataset.\n    '''\n    # Sort the items in descending order based on their value\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Extract the top n items from the sorted list and return them\n    return [item[0] for item in sorted_items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    # Loop through the items and add each item to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the heap has more than n elements, remove the smallest element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items from the heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Sort the items by price in ascending order\n    items.sort(key=lambda x: x[1])\n\n    # Create a min heap of size n and populate it with the items\n    min_heap = []\n    for i in range(n):\n        min_heap.append(items[i][0])\n        heapq.heapify(min_heap)\n\n    # Remove the minimum element from the heap and append it to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= len(l):\n        return l[n:] + l[:n]\n    else:\n        return []"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == n:\n        return l\n    elif n < 0:\n        n = len(l) + n\n    elif n >= len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[:n]\n    combined_list = split_list + l[n:]\n    return combined_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Check if the list is empty\n    if not l:\n        return []\n    # Check if the nth element is out of range\n    elif n >= len(l):\n        return l\n    # Split the list at the nth element\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part, second_part = l[:n], l[n:]\n    # Add the first part to the end of the second part\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n > len(l):\n        raise ValueError(\"Index out of range\")\n\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    else:\n        mid = n // 2\n        return [l[mid:] + l[:mid]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # add the first part to the end of the second part\n    l = first_part + second_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        new_list = l[n:]\n        new_list.insert(0, l[0:n])\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # if the length of the list is less than the nth element, raise an error\n    if len(l) < n:\n        raise ValueError('The length of the list is less than the nth element')\n    # split the list at the nth element\n    mid = n // 2\n    first_part = l[:mid]\n    second_part = l[mid:]\n    # add the first part to the end of the second part\n    result = first_part + second_part\n    return result"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the largest value in the list\n    largest = nums[-1]\n    # Find the smallest value in the list\n    smallest = nums[0]\n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    \n    largest = max(nums)\n    smallest = min(nums)\n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Return the difference between the largest and smallest values\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    elif len(nums) == 1:\n        return \"The list only contains one element.\"\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return f\"The difference between the largest and smallest value in the list is: {abs(max_val - min_val)}\""
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return abs(max_val - min_val)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return \"List is empty\"\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    squares = []\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a  # swap the values of a and b\n    squares = []\n    for i in range(a, b+1):\n        if i*i == a:\n            squares.append((i, i))\n        elif i*i == b:\n            squares.append((b, b))\n        elif i*i < a:\n            sqrt_i = int(i**0.5)\n            if (sqrt_i+1)**2 == i:\n                squares.append((sqrt_i+1, sqrt_i))\n            elif (sqrt_i-1)**2 == i:\n                squares.append((sqrt_i-1, sqrt_i))\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes in two integers, a and b, and returns a list of all perfect squares between a and b.\n    '''\n\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through each integer between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == int(i**0.5)**2:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i**2)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(int(a**(1/2))+1, int(b**(1/2))+1):\n        square = i * i\n        if square >= a and square <= b:\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize the count of perfect squares\n    count = 0\n    \n    # loop through all integers between a and b\n    for i in range(a, b+1):\n        # check if the square of the integer is equal to the integer\n        if i*i == i:\n            # if the square of the integer is less than or equal to b, increment the count\n            if i*i <= b:\n                count += 1\n    \n    # return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    squares = []\n    for i in range(int(b**0.5)+1):\n        if i**2 == a or i**2 == b:\n            squares.append(i**2)\n    \n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        for j in range(i, 0, -1):\n            if i**2 == j**2:\n                print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n        r (float): radius of the point\n        theta (complex): angle of the point in radians\n    \n    Returns:\n        (x,y): tuple of the rectangular coordinates of the point\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates to rectangular coordinates using the cmath module.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # calculate the magnitude of the complex number\n    r = cmath.sqrt(x**2+y**2)\n    # calculate the angle of the complex number in radians\n    theta = cmath.phase(x+y*1j)\n    # calculate the rectangular coordinates of the point\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    # return the rectangular coordinates as a tuple\n    return (x_rect.real,y_rect.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the point.\n    y (float): The angle of the point in radians.\n\n    Returns:\n    tuple: A tuple containing the x and y coordinates of the point.\n    \"\"\"\n\n    # Convert the angle to degrees and take the complex conjugate\n    angle = cmath.phase(y) * 180 / cmath.pi\n\n    # Calculate the rectangular coordinates of the point\n    x_rect = x * cmath.cos(angle)\n    y_rect = x * cmath.sin(angle)\n\n    # Return the rectangular coordinates as a tuple\n    return (x_rect.real, x_rect.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function takes in two values, x and y, and returns their corresponding rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes two arguments: r and theta, which represent the radius and angle of a point in polar coordinates.\n    It converts the point from polar to rectangular coordinates and returns the corresponding x and y coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes two arguments, r and theta, which represent the radius and angle of a point on the unit circle, respectively.\n    It returns the corresponding x and y coordinates of the point in rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an input and swaps the first and last elements.\n    '''\n    # check if list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements.\")\n    else:\n        # swap first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        return newList\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty\n    if len(newList) == 0:\n        return \"List is empty\"\n    \n    # Get the length of the list\n    length = len(newList)\n    \n    # Interchange the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # Return the updated list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Initialize the first and last elements \n    first = newList[0]\n    last = newList[-1]\n\n    # Reverse the first and last elements \n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: # If the list has less than 2 elements, return the same list\n        return newList\n    \n    first, last = newList[0], newList[-1] # Get the first and last elements of the list\n    newList = newList[:1] + [last] + newList[1:] # Interchange the first and last elements\n    newList = newList[:1] + [first] + newList[1:] # Interchange the first and last elements again\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if the list has at least 2 elements, swap them\n    if len(newList) >= 2:\n        # get the first and last elements of the list\n        first = newList[0]\n        last = newList[-1]\n        # remove the last element from the list\n        newList.pop()\n        # add the first element to the end of the list\n        newList.append(first)\n        # add the last element to the beginning of the list\n        newList.insert(0, last)\n    # otherwise, return the original list\n    else:\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Getting the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length >= 2:\n        \n        # Getting the first and last elements of the list\n        first = newList[0]\n        last = newList[length-1]\n        \n        # Creating a new list with the first element as the last element and the last element as the first element\n        newList = [last] + newList[:-1]\n        \n        # Printing the new list\n        print(newList)\n    else:\n        print(\"The list must have at least two elements to swap.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of the product to zero\n    sum_prod = 0\n\n    # Iterate over all possible combinations of consecutive k-values\n    for i in range(k, n+1):\n        j = i - k\n        if j >= 0:\n            sum_prod += (n-j) * (binomial_Coeff(n-i, k-1))\n\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    \n    prod = 1\n    for i in range(1, k+1):\n        prod = prod * (n-i+1) // i\n    \n    return prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            result += i * j\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k or k<0 or k>n: \n        return 0\n    \n    if n==k or k==0: \n        return 1\n    \n    if k>n/2: \n        k=n-k\n    \n    res=0\n    for i in range(k,n+1): \n        res+=i*binomial_Coeff(n-1,i-1)\n    \n    return res"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i * binomial_Coeff(n-i,k-1)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through the range of k values from 0 to n-1\n    for i in range(k+1):\n        # Calculate the binomial coefficient\n        binomial_coeff = (n-i) * (i)\n        # Multiply the product by the binomial coefficient\n        product *= binomial_coeff\n        # Add the product to the sum\n        sum += product\n        \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the sum variable to 0\n    sum_prod = 0\n\n    # iterate over the k values from 0 to n-k\n    for i in range(n-k+1):\n        # calculate the coefficient of the current binomial co-efficient and add it to the sum\n        sum_prod += nCr(n,i)\n\n    # return the sum\n    return sum_prod\n\n\ndef nCr(n,r):\n    '''\n    Write a python function to calculate the binomial coefficient.\n    '''\n\n    # ensure that r is not greater than n\n    if r > n:\n        r = n\n\n    # initialize the result variable to 1\n    result = 1\n\n    # iterate over the values of i from 1 to r\n    for i in range(1,r+1):\n        # calculate the factorial of i\n        factorial_i = 1\n        for j in range(1,i+1):\n            factorial_i *= j\n\n        # multiply the result by the factorial of r and divide by the factorial of i-r\n        result *= factorial_i\n        result //= factorial_i\n\n    # return the result\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define the regular expression pattern to match ip addresses\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n\n    # Check if the input matches the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet and concatenate them to form the new ip address\n        new_ip = ''.join(filter(lambda x: x!= '0', ip.split('.')))\n        return new_ip\n    else:\n        # If the input doesn't match the pattern, return the original ip address\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet of the ip address\n    ip = re.sub(r'^\\d+\\.0', '', ip)\n    ip = re.sub(r'^0+\\.\\d+', '', ip)\n    ip = re.sub(r'^0+\\.\\d+\\.\\d+', '', ip)\n    # remove leading zeroes from the entire ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(\\d+)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern for an IP address\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    # Use the re.match() function to check if the input matches the pattern\n    match = re.match(pattern, ip)\n    # If the input matches, use the re.sub() function to remove leading zeroes\n    if match:\n        return re.sub(r'^0+','',ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'(\\.0)+', r'', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return ip.lstrip('0')\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd numbers of a given list.\n    \"\"\"\n    # get the first even and first odd numbers of the list\n    even_num = lst[0]\n    odd_num = lst[1]\n\n    # find the difference between even and odd numbers\n    diff = even_num - odd_num\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = list1[0]\n    first_odd = list1[1]\n    if first_even % 2 == 0:\n        return first_even - first_odd\n    else:\n        return first_odd - first_even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # Initialize variables for even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Iterate through the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    # Return the difference of even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Finding the first even number\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n            break\n\n    # Finding the first odd number\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_num = list1[i]\n            break\n\n    # Finding the difference between the first even and first odd number\n    diff = even_num - odd_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n\n    if not even or not odd:\n        return \"The list does not have any even or odd numbers.\"\n\n    return abs(even[0] - odd[0])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    :param lst: A list of integers.\n    :return: The difference of the first even and first odd number of `lst`.\n    \"\"\"\n    first_even = next(i for i, x in enumerate(lst) if x % 2 == 0)\n    first_odd = next(i for i, x in enumerate(lst) if x % 2!= 0)\n    return lst[first_even] - lst[first_odd]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError('List must have at least two elements.')\n    \n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n    \n    if first_even is None or first_odd is None:\n        raise ValueError('List must have at least one even and one odd number.')\n    \n    return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the difference of the first even and first odd number in the list.\n    \"\"\"\n    if len(lst) < 2:\n        return \"The given list must have at least two elements.\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    if even_num % 2 == 0 and odd_num % 2 == 0:\n        return \"The difference of the first even and first odd numbers is zero.\"\n    elif even_num % 2 == 0 and odd_num % 2 == 0:\n        return \"The difference of the first even and first odd numbers is greater than zero.\"\n    else:\n        return \"The difference of the first even and first odd numbers is less than zero.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n    \n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n    # Loop through all possible swaps and check if the resulting number is smaller than the current minimum number of swaps\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            # Check if swapping the i-th digit with the j-th digit will give a smaller number\n            if (str1[i] == '1' and str2[j] == '0') or (str1[i] == '0' and str2[j] == '1'):\n                # Swap the digits and calculate the new number\n                new_num = num1 ^ (1 << i) ^ (1 << j)\n                new_str = format(new_num, 'b')\n                new_num = int(new_str, 2)\n                # Update the minimum number of swaps if the new number is smaller\n                if new_num < min_swaps:\n                    min_swaps = new_num\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary numbers to integer and compare\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    diff = num1 ^ num2\n    \n    # count the number of swaps required to convert num1 to num2\n    swap_count = 0\n    while diff:\n        diff &= diff - 1\n        swap_count += 1\n    \n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Convert both binary numbers to lists of characters\n    lst1 = list(str1)\n    lst2 = list(str2)\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Iterate through all possible pairs of characters\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            # Swap the characters at indices i and j\n            lst1[i], lst1[j] = lst1[j], lst1[i]\n            lst2[j], lst2[i] = lst2[i], lst2[j]\n\n            # Check if the swapped binary strings are equal\n            if lst1 == lst2:\n                # Update the minimum number of swaps\n                min_swaps = min(min_swaps, j - i + 1)\n\n                # Reverse the swapped characters to restore the original binary string\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                lst2[j], lst2[i] = lst2[i], lst2[j]\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    m,n = len(str1),len(str2)\n    dp = [[float('inf')]*(n+1) for _ in range(m+1)]\n    dp[0][0] = 0\n\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n\n    return dp[m][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to their respective integer representations\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    # Initialize a list to store the minimum number of swaps\n    min_swaps = []\n    # Iterate through each bit of the binary strings\n    for i in range(32):\n        # If the first bit of str1 is equal to the i-th bit of str2, add 1 to the minimum number of swaps\n        if (int1 >> i) & 1 == (int2 >> i) & 1:\n            min_swaps.append(1)\n        # Otherwise, add 2 to the minimum number of swaps\n        else:\n            min_swaps.append(2)\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # check if the strings are equal\n    if n1!= n2:\n        return \"Strings are not equal\"\n\n    # create an empty dictionary to store the count of common digits\n    count_dict = {}\n\n    # initialize the count for 0\n    count_dict[0] = n1\n\n    # initialize the count for 1\n    count_dict[1] = n2\n\n    # initialize the count for 2\n    count_dict[2] = 0\n\n    # initialize the count for 3\n    count_dict[3] = 0\n\n    # initialize the count for 4\n    count_dict[4] = 0\n\n    # initialize the count for 5\n    count_dict[5] = 0\n\n    # initialize the count for 6\n    count_dict[6] = 0\n\n    # initialize the count for 7\n    count_dict[7] = 0\n\n    # loop through the first string\n    for i in range(n1):\n        # check if the digits are already counted\n        if i not in count_dict:\n            continue\n\n        # find the count of the common digits\n        count = 0\n        j = i + 1\n        while j < n1 and str1[i] == str1[j]:\n            count += 1\n            j += 1\n\n        # update the count for the common digits\n        count_dict[str1[i]] = count\n\n    # loop through the second string\n    for i in range(n2):\n        # check if the digits are already counted\n        if i not in count_dict:\n            continue\n\n        # find the count of the common digits\n        count = 0\n        j = i + 1\n        while j < n2 and str2[i] == str2[j]:\n            count += 1\n            j += 1\n\n        # update the count for the common digits\n        count_dict[str2[i]] = count\n\n    # create an empty list to store the swaps\n    swaps = []\n\n    # loop through the keys in the count dictionary\n    for key in count_dict:\n        # check if the count is greater than 0\n        if count_dict[key] > 0:\n            # check if the count is 1\n            if count_dict[key] == 1:\n                # check if the common digits are 0 and 1\n                if key == '0' and str1[0] == '0' or key == '1' and str1[0] == '1':\n                    # add the swap to the list of swaps\n                    swaps.append((key, str1[0], str2[0]))\n                    # remove the count from the count dictionary\n                    count_dict[key] -= 1\n\n            # check if the count is 2\n            elif count_dict[key] == 2:\n                # check if the common digits are 0, 1 and 2\n                if key == '0' and str1[0] == '0' and str1[1] == '0' or key == '1' and str1[0] == '1' and str1[1] == '1' or key == '2' and str1[0] == '2' and str1[1] == '2':\n                    # add the swap to the list of swaps\n                    swaps.append((key, str1[0], str2[0]))\n                    # remove the count from the count dictionary\n                    count_dict[key] -= 1\n\n            # check if the count is 3\n            elif count_dict[key] == 3:\n                # check if the common digits are 0, 1, 2 and 3\n                if key == '0' and str1[0] == '0' and str1[1] == '0' and str1[2] == '0' or key == '1' and str1[0] == '1' and str1[1] == '1' and str1[2] == '1' or key == '2' and str1[0] == '2' and str1[1] == '2' and str1[2] == '2' or key == '3' and str1[0] == '3' and str1[1] == '3' and str1[2] == '3':\n                    # add the swap to the list of swaps\n                    swaps.append((key, str1[0], str2[0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Convert both binary strings to lists of 0s and 1s\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Initialize variables to keep track of the number of swaps and the index of the first non-matching digit\n    swaps = 0\n    i = 0\n    \n    while i < len(list1) and i < len(list2):\n        # If the digits are not the same, swap the digits and increment the swaps counter\n        if list1[i]!= list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n            swaps += 1\n        i += 1\n    \n    # If there are still digits left in one of the binary strings, swap them to convert the shorter one to the longer one\n    while i < len(list1):\n        list1[i], list2[i] = list2[i], list1[i]\n        swaps += 1\n        i += 1\n        \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize counters\n    i = j = 0\n    swaps = 0\n\n    # Loop over the integers, comparing them and swapping if necessary\n    while i < len(str1) and j < len(str2):\n        if num1 % 2 == num2 % 2:\n            num1 //= 2\n            num2 //= 2\n        else:\n            # Swap characters at i and j\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n\n            # Increment counters\n            swaps += 1\n\n            # Move to the next characters\n            i += 1\n            j += 1\n\n    # Convert back to binary strings\n    num1_binary = bin(num1)[2:]\n    num2_binary = bin(num2)[2:]\n\n    # Compare lengths of the binary strings and return the minimum number of swaps required\n    return min(len(str1) - len(num1_binary), len(str2) - len(num2_binary)) + swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        if str1[i] == str2[i]:\n            dp[i][i] = 0\n        else:\n            dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str1[i] == str2[j]:\n                dp[i][j] = dp[i+1][j-1]\n            elif str1[i] == '0' and str2[j] == '1':\n                dp[i][j] = dp[i][j-1] + 1\n            elif str1[i] == '1' and str2[j] == '0':\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function calculates the minimum number of swaps required to convert one binary number represented as a string\n    str1 to another binary number represented as a string str2.\n    \"\"\"\n    # Convert both strings to binary\n    bin1 = bin(int(str1, 2))[2:] # Remove '0b' prefix and convert to binary\n    bin2 = bin(int(str2, 2))[2:] # Remove '0b' prefix and convert to binary\n\n    # Check if the lengths of the two binary strings are equal\n    if len(bin1)!= len(bin2):\n        # If they are not equal, return -1 (no swaps needed)\n        return -1\n\n    # Initialize an empty dictionary to store the number of swaps required for each bit position\n    swaps = {}\n\n    # Loop through each bit position in both binary strings\n    for i in range(len(bin1)):\n        # If the bit positions are not equal, increment the number of swaps required in the dictionary\n        if bin1[i]!= bin2[i]:\n            if bin1[i] in swaps:\n                swaps[bin1[i]] += 1\n            else:\n                swaps[bin1[i]] = 1\n\n    # Find the minimum number of swaps required\n    min_swaps = float('inf')\n    for count in swaps.values():\n        if count < min_swaps:\n            min_swaps = count\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = 0\n    for element in tuple_list:\n        size_bytes += sys.getsizeof(element)\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize size variable to 0\n    size = 0\n\n    # iterate over each element in the tuple\n    for element in tuple_list:\n        # calculate the size of the element in bytes\n        element_size = sys.getsizeof(element)\n\n        # add the size of the element to the size variable\n        size += element_size\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list[0]) # assuming tuple_list[0] is the tuple\n    for i in range(1, len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    total_size = 0\n    for item in tuple_list:\n        # calculate size of each item in bytes\n        size = sys.getsizeof(item)\n        # add to total size\n        total_size += size\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    # convert the size to megabytes\n    size = size / 1024 / 1024\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize variables for the two pointers\n    i = j = 0\n\n    # Compare the elements at the two pointers\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    # If the two pointers have crossed, the kth element is somewhere in the middle\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the elements are equal, add 1 to count and move to the next element in each array\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    # If one of the arrays has been completely traversed, return the remaining elements in the other array\n    if i == len(arr1):\n        return arr2[j:]\n    else:\n        return arr1[i:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1, n2 = len(arr1), len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n        k -= 1\n        if k == 0:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # Find the total number of elements in the array\n    total_elements = n1 + n2\n    # Find the index of kth element in the first array\n    index_1 = k - 1\n    # Find the index of kth element in the second array\n    index_2 = total_elements - k\n    # Initialize the result array with null values\n    result = [0] * n1\n    # Fill the result array with values from the first array\n    for i in range(n1):\n        result[i] = arr1[i]\n    # Fill the remaining elements in the result array with values from the second array\n    for i in range(n1, total_elements):\n        result[i] = arr2[index_2]\n        index_2 -= 1\n    # Return the result array\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    if k > len(arr1) + len(arr2):\n        raise ValueError(\"k is greater than the length of the two arrays\")\n\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize variables for the left and right pointers\n    left, right = 0, len(arr1) - 1\n\n    # Initialize variables for the target element\n    target = k - 1\n\n    # Iterate through the arrays until a match is found\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if the current element in the left array is greater than the target\n        if arr1[mid] > arr2[target]:\n            # If it is, update the left pointer to the right of the mid element\n            left = mid + 1\n\n        # If the current element in the left array is less than or equal to the target,\n        # it must be in the right array and the target element must be in the right half of the left array\n        elif arr1[mid] <= arr2[target]:\n            # If it is, update the right pointer to the left of the mid element\n            right = mid - 1\n\n        # If the current element in the left array is equal to the target,\n        # it must be the kth element in the right array\n        else:\n            # If it is, return the index of the target element in the right array\n            return mid\n\n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(number)\n    # Calculate the sum of the cubes of the digits in the number\n    sum_of_cubes = 0\n    for digit in num_str:\n        digit_int = int(digit)\n        sum_of_cubes += digit_int ** 3\n    # Compare the given number with the sum of the cubes of the digits\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n    \n    # Initialize a variable to store the sum of the digits raised to the power of the length of the number string\n    armstrong_sum = 0\n    \n    # Loop through each digit of the number string\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the armstrong_sum\n        armstrong_sum += int(digit)**len(number_str)\n        \n    # Return True if the armstrong_sum equals the original number, otherwise return False\n    return number == armstrong_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether a number is Armstrong or not.\n    \"\"\"\n\n    # Convert the number to a string\n    number = str(number)\n\n    # Initialize the sum of the powers of each digit of the number\n    sum = 0\n\n    # Loop through each digit of the number and add its power to the sum\n    for digit in number:\n        digit = int(digit)\n        power = 0\n        while digit > 0:\n            power += digit % 10\n            digit //= 10\n\n        # Add the power to the sum\n        sum += power ** len(number)\n\n    # Check if the sum of the powers of each digit is equal to the original number\n    if sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string\n    number = str(number)\n\n    # Get the length of the number\n    length = len(number)\n\n    # Initialize a sum variable\n    sum = 0\n\n    # Loop through each digit of the number\n    for digit in number:\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Multiply the digit by itself the specified number of times\n        sum += digit ** length\n\n    # Check if the sum of the digits equals the original number\n    if sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # function to check whether a number is armstrong or not\n    def is_armstrong(num):\n        return int(str(num)[::-1]) == num\n\n    # check whether the number is armstrong or not\n    if is_armstrong(number):\n        print(number, \"is an armstrong number.\")\n    else:\n        print(number, \"is not an armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(number):\n    # convert the number to a string\n    num_str = str(number)\n    # initialize the sum variable\n    sum = 0\n    # loop through each digit in the number\n    for digit in num_str:\n        # convert each digit to an integer and add it to the sum\n        sum += int(digit) ** len(num_str)\n    # return whether the sum is equal to the original number or not\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    if len(str(number))!= len(set(str(number))):\n        return False\n    else:\n        digits = list(map(int, str(number)))\n        total = sum(digits)\n        return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the given number is an Armstrong number, else False.\n    \"\"\"\n    number = int(number)\n    power = len(str(number))\n    sum = 0\n\n    while number > 0:\n        digit = number % 10\n        sum += digit ** power\n        number //= 10\n\n    if number == sum:\n        return True\n    else:\n        return False\n\ndef armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the given number is an Armstrong number, else False.\n    \"\"\"\n    if number < 10:\n        return False\n    elif number == 153:\n        return True\n    elif number == 1234567:\n        return True\n    elif number == 1531622902:\n        return True\n    else:\n        return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(n):\n    # Convert the number to a string\n    n_str = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Calculate the sum of the cubes of each digit in the number\n    for digit in n_str:\n        sum += int(digit)**3\n    # Check if the sum is equal to the original number\n    return sum == n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum_num = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # add the current number to the sum and increment the count\n        sum_num += i\n        count += 1\n\n    # find the average and return the result\n    if count > 0:\n        average = sum_num / count\n        return (sum_num, average)\n    else:\n        return \"Invalid input! Please enter a positive integer.\""
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        total += i\n        count += 1\n        \n    average = total / count\n    \n    print(\"The sum of the first\", number, \"natural numbers is:\", total)\n    print(\"The average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return (total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum of first\", number, \"natural numbers:\", sum)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum += count\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a Python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character by iterating through the dictionary\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first character in the dictionary that appears more than once\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the dictionary to find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(s):\n    \"\"\"\n    Returns the first repeated character in the string s or None if no character is repeated.\n    \"\"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_dict = {}\n    \n    for char in char_list:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n            \n    return \"The string does not contain any repeated characters.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the counts of characters in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    first_repeated_char = None\n    \n    # Loop through the keys in the dictionary\n    for key in char_count:\n        # If the count of the character is greater than 1, update the first repeated character\n        if char_count[key] > 1:\n            if first_repeated_char is None:\n                first_repeated_char = key\n            elif key < first_repeated_char:\n                first_repeated_char = key\n    \n    # Return the first repeated character if it exists, otherwise return None\n    return first_repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(str1)\n\n    # Initialize an empty dictionary to store the frequency of each character\n    freq_dict = {}\n\n    # Loop through the characters in the list\n    for char in char_list:\n\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n\n        # If the character is not in the dictionary, add it and set its frequency to 1\n        else:\n            freq_dict[char] = 1\n\n    # Find the first repeated character by looping through the dictionary again\n    for char in char_list:\n\n        # If the character is not the first one to appear in the list, return it\n        if freq_dict[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    for char in str1:\n        if char_counts[char] > 1:\n            return char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Define a list to store the lucid numbers\n    lucid_list = []\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # If the number is a lucid number, add it to the list\n        if i == 1:\n            lucid_list.append(i)\n        elif i % 2 == 0:\n            lucid_list.append(2*i - 1)\n        else:\n            lucid_list.append(3*i + 1)\n\n    # Return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i == 2 or i == 3:\n            lucid_numbers.append(i)\n        else:\n            prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(int(digit) == digit for digit in str(i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid.append(i)\n        else:\n            lucid.append(3*i + 1)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        is_lucid = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid.append(i)\n        i += 1\n    return lucid\n\ndef is_lucid(num):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all possible lucid numbers\n    for i in range(n+1):\n        # Check if the number is a lucid number\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            # If it is, add it to the list\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid = []\n\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            lucid.append(i)\n\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n):\n        if i == 2:\n            lucid_numbers.append(i)\n        else:\n            j = 2\n            while i % j!= 0:\n                j += 1\n            if j == i:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = [] # create an empty list to store the reversed words\n    \n    for word in words: # iterate over the words\n        reversed_word = '' # create an empty string to store the reversed word\n        for char in word[::-1]: # iterate over the characters in the reversed word\n            reversed_word += char # add each character to the reversed word\n        reversed_words.append(reversed_word) # add the reversed word to the list\n    \n    reversed_string =''.join(reversed_words) # join the list of reversed words into a single string\n    return reversed_string # return the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back together\n    reversed_words =''.join([word[::-1] for word in words])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # iterate over all numbers from 2 to the square root of the given number\n    for i in range(2, int(num**0.5)+1):\n        # check if the given number is divisible by i\n        if num % i == 0:\n            return False\n\n    # if the above loop completes without returning False, then the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the number is divisible by any number between 2 and num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    # If the loop completes without finding a divisor, the number is prime\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n        \n    # if the number is not divisible by any number between 2 and the square root of the number, then it is a prime number\n    return True\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180.0\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # use regex to find all matches of pattern in text\n    matches = re.findall(pattern, text)\n    # loop through matches and return a list of tuples containing the literal, start index, and end index\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0], 0, len(result[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            return match.group(), start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # search the text for the pattern and return a tuple of start index, end index, and literal\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        literal = match.group()\n        return (literal, start_index, end_index)\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # calculate bell number using formula\n    bell = (2**n - 1) // (1 - 2**(-n))\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # check if n is less than or equal to 0\n    if n <= 0: \n        return \"Invalid input\"\n\n    # initialize the bell number\n    bell_num = 0\n\n    # loop through the range of n\n    for i in range(n): \n        # add the current bell number to the current value of bell_num\n        bell_num += i\n\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_array = [0, 1, 1]\n    for i in range(2, n+1):\n        bell_array.append(bell_array[i-1] + bell_array[i-2])\n    return bell_array[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    elif n == 0:\n        return 0\n    else:\n        return (4*n) - (4*(n-1)) + (2*n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize variables\n    bell_num = 0\n    i = 0\n    while i < n:\n        # Check if i is a bell number\n        if i % 2 == 0:\n            bell_num += i\n        else:\n            bell_num += 2*i\n        i += 1\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        bell_num = bell_Number(n-1) + bell_Number(n-2)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return round((1/3)*(n*(n+1))**2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n // 2) * 2\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0]\n    for i in range(1, n+1):\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n    return bell_numbers[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    n = len(list1)\n    while k < n:\n        list1[k] = list1[k+1]\n        k += 1\n    list1 = list1[:L-1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Initialize a new list to store the result\n    result = []\n    \n    # Loop through the list and append the elements to the result list except the kth element\n    for i in range(0, len(list1)):\n        if i!= L-1:\n            result.append(list1[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(L):\n        new_list.append(list1[i])\n    new_list.pop(L-1)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element from a list.\n    \"\"\"\n    list1.pop(L-1)  # remove the kth element from the list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L\n    if k > len(list1) or k < 1:\n        raise ValueError(\"k is out of range\")\n    for i in range(len(list1)):\n        if i == k-1:\n            list1.pop(i)\n            break\n        else:\n            list1[i], list1[k-1] = list1[k-1], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    if k >= n or k < 0:\n        return \"Invalid input\"\n    else:\n        list2 = list1[:k] + list1[k+1:]\n        return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    length = len(list1)\n    for i in range(k):\n        list1.pop(0)\n    list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # get the length of the list\n    n = len(list1)\n\n    # if L is greater than or equal to n, return the original list\n    if L >= n:\n        return list1\n\n    # initialize a variable to keep track of the index of the kth element\n    k = L - 1\n\n    # loop through the list and keep track of the indices of the elements to be removed\n    indices_to_remove = []\n\n    # initialize the variable to keep track of the count of remaining elements\n    count = 0\n\n    # loop through the list again\n    for i in range(n):\n        # if the current element is not to be removed\n        if count < L:\n            # increment the count\n            count += 1\n        # if the current element is to be removed\n        else:\n            # add the current index to the indices_to_remove list\n            indices_to_remove.append(i)\n\n    # remove the kth element from the list using the indices_to_remove list\n    for i in reversed(indices_to_remove):\n        del list1[i]\n\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the first row of the matrix\n    length = len(test_list[0])\n    # Initialize a variable to store the max value of the nth column\n    max_value = 0\n    # Loop through all the rows of the matrix\n    for i in range(len(test_list)):\n        # Find the nth column value\n        nth_column = test_list[i][N-1]\n        # Check if the nth column value is greater than the current max value\n        if nth_column > max_value:\n            max_value = nth_column\n    # Return the max value of the nth column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the number of rows in the matrix\n    rows = len(test_list)\n    \n    # initialize a list to store the maximum values of then'th column\n    max_values = []\n    \n    # loop through each row in the matrix\n    for i in range(rows):\n        # get the value of then'th column in the i-th row\n        value = test_list[i][N-1]\n        \n        # if the value is not in the max_values list, add it\n        if value not in max_values:\n            max_values.append(value)\n            \n    # find the maximum value in the max_values list\n    max_value = max(max_values)\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    result = []\n    for row in test_list:\n        result.append(max(row[N-1]))\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Initialize an empty list to store then'th column maximum\n    nth_col_max = []\n    \n    # Loop through each row in the matrix\n    for row in test_list:\n        \n        # If the length of the nth_col_max list is less than N, add the current row's nth column value to it\n        if len(nth_col_max) < N:\n            nth_col_max.append(row[N-1])\n        \n        # If the length of the nth_col_max list is equal to N, compare the current row's nth column value with the nth column maximum in the list\n        elif len(nth_col_max) == N:\n            if row[N-1] > nth_col_max[N-1]:\n                nth_col_max[N-1] = row[N-1]\n    \n    # Return the nth column maximum\n    return nth_col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the longest row in the matrix\n    max_length = max(len(row) for row in test_list)\n\n    # Initialize the result list with Nones\n    result = [None] * max_length\n\n    # Iterate through each row in the matrix\n    for row in test_list:\n        # Get the index of the nth column\n        nth_col_index = N - 1 if N <= len(row) else len(row)\n\n        # Get the value of the nth column\n        nth_col_value = row[nth_col_index]\n\n        # Find the maximum value in the row\n        max_value = max(row)\n\n        # Compare the max value in the row with the nth column value\n        if nth_col_value > max_value:\n            # Update the result list with the nth column value\n            result[nth_col_index - 1] = nth_col_value\n\n    # Return the result list\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Iterate over the rows of the matrix\n    for row in test_list:\n        # Find then'th column in the current row\n        column = [row[i] for i in range(len(row)) if i % N == 0]\n        # Find the maximum value in then'th column\n        max_val = max(column)\n        # Replace the maximum value in then'th column with 0 to avoid duplicates\n        for i in range(len(column)):\n            if column[i] == max_val:\n                column[i] = 0\n        # Replace then'th column with the modified column\n        row[column.index(max_val)] = max_val\n        # Replace the modified row with the modified matrix\n        for i in range(len(test_list)):\n            if test_list[i] == row:\n                test_list[i] = row\n                break\n    # Return the modified matrix\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n        elif test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max([row[N-1] for row in test_list])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if N < 1:\n        return None\n    elif N == 1:\n        return max(test_list, key=lambda x: x[0])\n    else:\n        max_list = []\n        for i in range(len(test_list)):\n            max_list.append(max(test_list[i][N-2], key=lambda x: x[0]))\n        return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to be negative infinity\n    max_val = float('-inf')\n    \n    # Iterate through each row in the matrix\n    for row in test_list:\n        # If the current row has then'th column, get its maximum value\n        if N - 1 < len(row):\n            curr_val = max(row[N - 1])\n            \n            # If the current value is greater than the maximum value, update the maximum value\n            if curr_val > max_val:\n                max_val = curr_val\n                \n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists where each sublist has two elements and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lists = []\n    for sublist in lst:\n        merged_lists.append([sublist[0], sublist[1]])\n    return merged_lists"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(0, len(lst), 2):\n        merged_list.append([lst[i][0], lst[i+1][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:  \n        result.append([sublist[0], sublist[1]])  \n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # loop through each tuple in the list\n    for num in test_list:\n        # add the value of each tuple to the cumulative sum\n        cum_sum += num\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][0]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # For each tuple, add up the values in it and add the result to the cumulative sum\n        cum_sum += sum(tup)\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Add the value of each tuple to the cumulative sum\n        cum_sum += tup[0]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        if len(tup) == 2:\n            for num in tup:\n                cum_sum += num\n        else:\n            cum_sum += tup\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable\n    cum_sum = 0\n    # Iterate through the tuple list\n    for tup in test_list:\n        # Extract the values from the tuple\n        val1, val2, val3 = tup\n        # Add the values to the cumulative sum\n        cum_sum += val1 + val2 + val3\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        averages.append(total/len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        average = sum(num) / len(num)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        if isinstance(num, tuple):\n            averages.append(sum(num) / len(num))\n        else:\n            averages.append(num)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    averages = []\n    # Loop through each tuple in the input tuple of tuples\n    for i in range(len(nums)):\n        # Initialize a running sum variable to store the sum of all values in the current tuple\n        sum = 0\n        # Loop through each value in the current tuple and add it to the running sum variable\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        # Calculate the average for the current tuple and append it to the averages list\n        averages.append(sum/len(nums[i]))\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            avg = sum(num)/len(num)\n            result.append(avg)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to hold the average values\n    avg_list = []\n    # iterate over each tuple in the input list\n    for num_tuple in nums:\n        # compute the average of the tuple elements\n        avg = sum(num_tuple) / len(num_tuple)\n        # add the average to the list\n        avg_list.append(avg)\n    # return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Creating an empty list to store the average values\n    averages = []\n    \n    # Iterating over each tuple in the input tuple\n    for i in range(len(nums)):\n        # Initializing the sum to 0\n        sum = 0\n        \n        # Iterating over each element in the current tuple\n        for j in range(len(nums[i])):\n            # Adding the element to the sum\n            sum += nums[i][j]\n        \n        # Dividing the sum by the number of elements in the tuple to get the average value\n        average = sum / len(nums[i])\n        \n        # Adding the average value to the averages list\n        averages.append(average)\n    \n    # Returning the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if type(num) == tuple:\n            avg = sum(num) / len(num)\n            result.append(avg)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        sum_num = 0\n        for num in num_tuple:\n            sum_num += num\n        average = sum_num / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # perform element-wise modulo on the tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    # return the modified tuples\n    return test_tup1, test_tup2"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must be the same length.\")\n\n    # Perform element wise modulo operation\n    result_tup = tuple((x % y for x, y in zip(test_tup1, test_tup2)))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # Perform the element-wise modulo\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n    \n    modulo_tup = []\n    for i in range(len(test_tup1)):\n        modulo_tup.append(test_tup1[i] % test_tup2[i])\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be the same.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    if d >= steps:\n        return 0\n\n    # Initialize the distance and number of jumps required for each step\n    distance = [0]*steps\n    jumps = [0]*steps\n\n    # Set the first distance and number of jumps required for first step\n    distance[0] = 0\n    jumps[0] = 1\n\n    # Calculate the number of jumps required for remaining steps\n    for i in range(1, steps):\n        distance[i] = distance[i-1] + d\n\n        if distance[i] >= steps:\n            break\n\n        if distance[i] == steps-1:\n            jumps[i] = 0\n        else:\n            jumps[i] = 1\n\n    # Return the minimum number of jumps required to reach the point (d, 0) from origin\n    return min(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # initialize variables\n    jumps = 0\n    curr_x = 0\n    curr_y = 0\n    \n    # iterate over the steps\n    for i in range(steps):\n        # move up if we haven't reached the destination\n        if curr_y < d:\n            curr_y += 1\n        # move down if we haven't reached the destination\n        elif curr_y > 0:\n            curr_y -= 1\n        # move right if we haven't reached the destination\n        elif curr_x < d:\n            curr_x += 1\n        # move left if we haven't reached the destination\n        else:\n            curr_x -= 1\n        # increment the number of jumps\n        jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    end = d\n    while end!= 0:\n        count += 1\n        end = max(end - 1, 0)\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # calculate the number of steps required to reach the point (d, 0) from origin\n    num_steps = 0\n    i = 0\n    while i < steps:\n        num_steps += 1\n        if i + d >= steps:\n            break\n        i += d\n    return num_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    j = 0\n    x = 0\n    y = 0\n    count = 0\n\n    # Loop through the list of steps and perform jumps\n    for i in range(len(steps)):\n        if x == 0 and y == d:\n            return count + 1\n        elif x == 0:\n            x = 1\n            y = y + steps[i]\n        elif x > 0:\n            x = x - 1\n            y = y + steps[i]\n            count = count + 1\n\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    def helper(i, j, steps, d, curr_min_jumps):\n        if i == len(steps) - 1 and j == d:\n            curr_min_jumps = min(curr_min_jumps, steps[i])\n        if i < len(steps) - 1:\n            curr_min_jumps = helper(i+1, j, steps, d, curr_min_jumps)\n        if j > 0:\n            curr_min_jumps = helper(i, j-1, steps, d, curr_min_jumps)\n        return curr_min_jumps\n    \n    return helper(0, d, steps, d, float('inf'))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    current_position = 0\n    current_height = 0\n    jumps = 0\n\n    # loop until the point (d, 0) is reached\n    while current_position <= steps:\n        current_position += 1\n        current_height += 1\n\n        # check if the point (d, current_height) is reached\n        if current_height == d:\n            jumps += 1\n            break\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes the number of steps and the target value d as input parameters and returns the minimum number of jumps required to reach the point (d, 0) from the origin.\n    \n    The function iterates through all possible pairs of numbers between 0 and steps and calculates the number of jumps required to reach the point (d, 0) from the origin. It returns the minimum number of jumps required.\n    \n    Complexity: O(steps * d)\n    '''\n    min_jumps = float('inf') # initialize minimum jumps to infinity\n    \n    # iterate through all possible pairs of numbers between 0 and steps\n    for i in range(steps+1):\n        for j in range(i+1):\n            # calculate the number of jumps required to reach the point (d, 0) from the origin\n            if (j + d) >= steps: # if we reach the point (d, 0) from the origin, increase the minimum jumps\n                min_jumps = min(min_jumps, 1)\n            elif (j + d) < 0: # if we reach the origin, decrease the minimum jumps\n                min_jumps = min(min_jumps, -1)\n            else: # if we reach a point other than (d, 0) from the origin, decrease the minimum jumps\n                min_jumps = min(min_jumps, -1)\n                \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return steps\n\n    dp = [steps] * (d + 1)\n    dp[0] = 0\n\n    for i in range(1, d + 1):\n        min_jumps = float('inf')\n        for j in range(i):\n            if dp[j]!= 0:\n                min_jumps = min(min_jumps, dp[j] + 1)\n\n        dp[i] = min_jumps\n\n    return dp[-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_pos = 0\n    dest_pos = d\n    while current_pos <= dest_pos:\n        if current_pos + steps > dest_pos:\n            jumps += 1\n            current_pos += steps\n        else:\n            current_pos = dest_pos + 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    # loop through the lists and divide each element\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    num_str = ''.join(num_list)\n    test_str = ''.join([char for char in test_str if char.isdigit()])\n    test_str += num_str\n    \n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables to store digits and non-digits\n    digits = \"\"\n    non_digits = \"\"\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a digit, add it to the digits variable\n        if char.isdigit():\n            digits += char\n        # If the character is not a digit, add it to the non_digits variable\n        else:\n            non_digits += char\n\n    # Concatenate the non-digits variable with the digits variable\n    result = non_digits + digits\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # initialize empty string to hold numbers\n    num_str = \"\"\n    # loop over each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the num_str\n        if char.isdigit():\n            num_str += char\n        # otherwise, append the character to the original string\n        else:\n            test_str = test_str[:test_str.index(char)] + num_str + test_str[test_str.index(char):]\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if len(num_list) == 0:\n        return \"There are no numbers in the given string.\"\n    else:\n        for i in range(len(num_list)):\n            test_str = test_str.replace(num_list[i], \"\")\n        return test_str + ''.join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    # Initialize variables\n    num_list = []\n    new_str = \"\"\n    is_number = False\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # If it is, add it to the number list and set the is_number flag to True\n            num_list.append(char)\n            is_number = True\n        else:\n            # If it's not a number, check if it's a number to be moved to the end\n            if is_number:\n                # If it is, move the number to the end of the string and reset the is_number flag\n                new_str += char\n                num_list.remove(char)\n                is_number = False\n            else:\n                # If it's not a number, just add it to the new string as it is\n                new_str += char\n    # Check if there are any numbers left in the number list\n    if num_list:\n        # If there are, move them to the end of the string\n        new_str += \"\".join(num_list)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return test_str + ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    # initialize an empty string to store the numbers\n    num_str = \"\"\n\n    # iterate over the characters in the input string\n    for char in test_str:\n        # if the character is a number, append it to the num_str variable\n        if char.isdigit():\n            num_str += char\n        # if the character is not a number, append it to the end of the test_str variable\n        else:\n            test_str += char\n\n    # return the concatenated test_str and num_str variables\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the input string into a list of characters\n    char_list = list(test_str)\n    \n    # Initialize a variable to keep track of the index of the current number\n    num_index = 0\n    \n    # Iterate through the list of characters\n    for i in range(len(char_list)):\n        # If the character is a number, move it to the end of the list\n        if char_list[i].isdigit():\n            char_list[num_index], char_list[i] = char_list[i], char_list[num_index]\n            num_index += 1\n    \n    # Join the list of characters into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    non_num_list = []\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # Otherwise, add it to the non_num_list\n        else:\n            non_num_list.append(char)\n    \n    # Join the num_list and non_num_list into a single string\n    result = ''.join(num_list) + ''.join(non_num_list)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    if num_list:\n        return test_str[:-len(num_list)] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers\n    a.sort()\n    n = len(a)\n    # Initialize the variables to keep track of the largest subset and the current subset\n    max_size = 0\n    curr_size = 0\n    # Iterate over the sorted list\n    for i in range(n):\n        # Check if the current number is divisible by the i-th number\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n            # Update the maximum size if necessary\n            if curr_size > max_size:\n                max_size = curr_size\n        else:\n            # Reset the current subset and decrement the current size\n            curr_size = 0\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    res = 1\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            res += 1\n        else:\n            break\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sorting the input list in ascending order\n    a = sorted(a)\n    \n    # initializing variables\n    count = 0\n    max_count = 0\n    max_length = 0\n    \n    # iterating through the sorted list\n    for i in range(len(a)):\n        # initializing variables for current iteration\n        current_count = 1\n        current_length = 1\n        \n        # iterating through the remaining elements in the list\n        for j in range(i+1, len(a)):\n            # if the current element is divisible by the next element, increment the count and length\n            if a[j] % a[i] == 0:\n                current_count += 1\n                current_length += 1\n                \n            # if the current count is greater than the maximum count, update the maximum count and length\n            if current_count > max_count:\n                max_count = current_count\n                max_length = current_length\n        \n        # updating the maximum count and length if the current iteration has greater count\n        if max_count < current_count:\n            max_count = current_count\n            max_length = current_length\n    \n    # returning the maximum count and length\n    return max_count, max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables to keep track of the current subset and its size\n    subset = [a[-1]]\n    size = 1\n    \n    # Loop through the list from start to end\n    for num in a[:-1]:\n        # If the current number is divisible by the subset's last element, add it to the subset and increment its size\n        if num % subset[-1] == 0:\n            subset.append(num)\n            size += 1\n        # Otherwise, remove the last element from the subset and decrement its size\n        else:\n            subset.pop()\n            size -= 1\n    \n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a list of tuples of numbers\n    pairs = [(a[i], a[j]) for i in range(len(a)) for j in range(i+1, len(a))]\n\n    # Sort the list of tuples by the second element of each tuple\n    pairs.sort(key=lambda x: x[1])\n\n    # Initialize variables for the largest subset size and the current subset size\n    max_size = 0\n    current_size = 0\n\n    # Iterate through the sorted list of tuples\n    for pair in pairs:\n        # Add the current pair to the current subset size\n        current_size += 1\n\n        # Check if the current subset size is larger than the largest subset size found so far\n        if current_size > max_size:\n            max_size = current_size\n\n        # Check if the current pair is divisible by the second element of the current pair\n        if a[pair[0]] % a[pair[1]] == 0:\n            # If the current pair is divisible, remove it from the list of pairs\n            pairs.remove(pair)\n\n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    n = len(a)\n    # initialize the result with 1\n    result = 1\n    # iterate over all pairs of indices\n    for i in range(n):\n        # if the next index is divisible by the current index, increment the result\n        if a[i+1] % a[i] == 0:\n            result += 1\n        # if the next index is not divisible by the current index, stop iterating\n        else:\n            break\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables\n    max_size = 1\n    current_size = 1\n    size = 0\n\n    # Iterate over the list\n    for num in a:\n        # Calculate the new size\n        size += 1\n        current_size -= 1\n\n        # If the new size is greater than the current size, update max_size and current_size\n        if size > current_size:\n            max_size = current_size\n            current_size = size\n\n        # If the new size is less than or equal to the current size, reduce the size\n        else:\n            current_size = 1\n            size = 0\n\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the largest subset size as 1\n    largest_size = 1\n\n    # Initialize the current subset size as 1\n    current_size = 1\n\n    # Iterate over the sorted list\n    for i in range(1, len(a)):\n\n        # Check if the current number is divisible by the next number\n        if a[i] % a[i-1] == 0:\n\n            # If yes, update the current subset size\n            current_size += 1\n\n        else:\n\n            # If not, update the largest subset size\n            largest_size = max(largest_size, current_size)\n\n            # Reset the current subset size\n            current_size = 1\n\n    # Update the largest subset size with the current subset size\n    largest_size = max(largest_size, current_size)\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    m = [[0] * 2 for _ in range(n)]\n    for i in range(n):\n        m[i][0] = 1\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                m[i][1] = max(m[i][1], m[j][0] + 1)\n    return max(max(row) for row in m)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Use a set to store the remaining numbers in the list\n    remaining = set(a)\n\n    # Initialize the maximum size to 1\n    max_size = 1\n\n    # Iterate over the list of numbers\n    for i in range(len(a)):\n        # Initialize a list to store the divisors of the current number\n        divisors = []\n\n        # Iterate over the remaining numbers\n        for j in range(len(remaining)):\n            # If the current number is divisible by the remaining number, add it to the divisors list\n            if a[i] % remaining[j] == 0:\n                divisors.append(remaining[j])\n\n        # Check if the size of the largest subset with this number as a divisor is larger than the current maximum size\n        if len(divisors) > max_size:\n            max_size = len(divisors)\n\n        # Remove the numbers that were used to compute the current largest subset\n        remaining.difference_update(divisors)\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Returns the median of two sorted lists of same size.\n\n    :param arr1: list of integers\n    :param arr2: list of integers\n    :param n: length of the lists\n    :return: float representing the median\n    \"\"\"\n    # combine the two sorted lists into a single list\n    combined = arr1 + arr2\n    # sort the combined list\n    combined.sort()\n    # calculate the median\n    if n % 2 == 0:\n        # if the list has an even number of elements, the median is the average of the two middle elements\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n        median = (combined[mid1] + combined[mid2]) / 2\n    else:\n        # if the list has an odd number of elements, the median is the middle element\n        mid = n // 2\n        median = combined[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size n and returns the median.\n    \"\"\"\n    # Merge the two sorted lists and return the middle element\n    return (arr1 + arr2)[n // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2])/2\n    else:\n        median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in three arguments: the first sorted list, the second sorted list, and the size of the list.\n    It then sorts both lists and finds the median of the two sorted lists.\n    '''\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the total size of the lists\n    total_size = len(arr1) + len(arr2)\n\n    # If the total size is odd, then the median is the middle element of the sorted lists\n    if total_size % 2 == 1:\n        return arr1[len(arr1) // 2]\n    # If the total size is even, then the median is the average of the two middle elements of the sorted lists\n    else:\n        middle_1 = len(arr1) // 2\n        middle_2 = len(arr2) // 2\n        return (arr1[middle_1] + arr2[middle_2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n\n    # Calculate the length of the merged list\n    length = len(merged_list)\n\n    # Calculate the middle index of the merged list\n    middle = length // 2\n\n    # If the middle index is odd, return the middle element\n    if length % 2 == 1:\n        return merged_list[middle]\n    else:\n        # If the middle index is even, return the average of the two middle elements\n        return (merged_list[middle - 1] + merged_list[middle]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the median index\n    mid = n // 2\n\n    # Check if the median index is odd or even\n    if n % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        # If the median is even, take the average of the two middle elements\n        mid1 = n//2\n        mid2 = n//2 + 1\n        median = (arr1[mid1-1] + arr1[mid1]) / 2\n        median = (median + (arr2[mid2-1] + arr2[mid2])) / 2\n    else:\n        # If the median is odd, take the middle element\n        mid = n//2\n        median = arr1[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge two sorted lists into a single sorted list\n    merged_list = sorted(arr1 + arr2)\n\n    # find the middle index of the merged list\n    mid = n // 2\n\n    # if the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n\n    # if the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        return (merged_list[mid-1] + merged_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted arrays of equal size (n) as input and returns the median.\n    If the arrays are of different sizes, it returns None.\n    '''\n    # Check if the arrays are of equal size\n    if len(arr1) == len(arr2):\n        # Sort the arrays\n        arr1.sort()\n        arr2.sort()\n        # Find the middle element of both arrays\n        mid1 = len(arr1)//2\n        mid2 = len(arr2)//2\n        # If the middle elements are the same, return that element\n        if arr1[mid1] == arr2[mid2]:\n            return arr1[mid1]\n        # If the middle elements are different, return the average of the middle two elements\n        elif arr1[mid1] < arr2[mid2]:\n            return (arr1[mid1] + arr2[mid2-1])/2\n        else:\n            return (arr1[mid1-1] + arr2[mid2])/2\n    else:\n        # If the arrays are of different sizes, return None\n        return None"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Sort both arrays\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n\n    # Calculate the median index\n    mid1 = n // 2\n    mid2 = n - mid1\n\n    # Check if the mid1 index is even or odd\n    if n % 2 == 0:\n        # If even, take the average of the two middle elements\n        median = (sorted_arr1[mid1 - 1] + sorted_arr1[mid1]) / 2\n    else:\n        # If odd, take the middle element\n        median = sorted_arr1[mid1]\n\n    # Calculate the two indices for the median\n    left_index1 = 0\n    right_index1 = mid1 - 1\n    left_index2 = 0\n    right_index2 = mid2 - 1\n\n    # Traverse both arrays to find the median\n    while left_index1 <= right_index1 and left_index2 <= right_index2:\n        if sorted_arr1[left_index1] <= median <= sorted_arr1[right_index1]:\n            if sorted_arr2[left_index2] <= median <= sorted_arr2[right_index2]:\n                break\n            elif sorted_arr2[left_index2] > median:\n                left_index2 += 1\n            else:\n                right_index2 -= 1\n        elif sorted_arr1[left_index1] > median:\n            left_index1 += 1\n        else:\n            right_index1 -= 1\n\n    # Return the median\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are uppercase, False otherwise.\n    \"\"\"\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    # Check if the input string is a string\n    if not isinstance(string, str):\n        raise TypeError('Input must be a string.')\n    \n    # Convert the string to uppercase\n    string = string.upper()\n    \n    # Return the converted string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # Check if the string contains any uppercase letters\n    has_uppercase = False\n    for char in string:\n        if char.isupper():\n            has_uppercase = True\n            break\n    # If the string contains uppercase letters, convert it to uppercase\n    if has_uppercase:\n        return string.upper()\n    # Otherwise, return the original string\n    else:\n        return string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    \n    # if the list is empty, return the empty list\n    if length == 0:\n        return []\n    \n    # get the last element of the list\n    lastElement = newList[length-1]\n    \n    # remove the last element from the list\n    newList.pop()\n    \n    # insert the last element at the beginning of the list\n    newList.insert(0, lastElement)\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the length of the list is greater than 1\n    if length > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List should contain at least two elements.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is less than 2\n    if len(newList) < 2:\n        return newList\n    \n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return None\n    \n    # interchange the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # Get the length of the list\n    length = len(newList)\n    \n    # Swap the first and last element of the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n\n    # Calculate the semi-circle circumference and area\n    circumference = 2 * math.pi * r\n    area = math.pi * r ** 2\n\n    # Calculate the area of the largest triangle\n    s = (1 + math.sqrt(5)) / 2\n    area_largest_triangle = (1 / (4 * s)) * ((1 + math.sqrt(5)) ** 2 - (1 - math.sqrt(5)) ** 2)\n    area_largest_triangle = area_largest_triangle * circumference / 2\n\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # radius of the semicircle\n    r2 = r**2\n    \n    # calculate the area of a triangle with sides of length 1 and 2r (where r is the radius of the semicircle)\n    a = (1/2) * r * r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle with radius r\n    area = a * (3 * r * r - r2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the smallest possible side length of a triangle that can be inscribed in a semicircle with the given radius\n    a = 2*r\n    \n    # Find the side length of the largest possible triangle that can be inscribed in a semicircle with the given radius\n    b = 2*r*sqrt(3)\n    \n    # Find the area of the largest possible triangle that can be inscribed in a semicircle with the given radius\n    area = a*b\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # finding the semi-perimeter of the triangle\n    semi_perimeter = 2*r\n    # finding the area of the triangle using Heron's formula\n    area = math.sqrt(semi_perimeter*(semi_perimeter - r)*(semi_perimeter + r))\n    # finding the semi-diameter of the triangle\n    semi_diameter = 2*area\n    # finding the length of the longest side of the triangle\n    longest_side = math.sqrt(2*semi_diameter)\n    # finding the area of the triangle using Heron's formula\n    area = math.sqrt(semi_perimeter*(semi_perimeter - r)*(semi_perimeter + r))\n    # finding the area of the semicircle\n    area_circle = math.pi*r**2\n    # finding the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_triangle = area_circle - area\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the length of the half circle\n    half_circ_len = 2*r\n    \n    # calculate the area of a triangle using Heron's formula\n    a = half_circ_len/2\n    s = (3*r**2)/(4*a**2)\n    area = 2*s*(a+s)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a triangle with sides of length r\n    a = 2 * r\n    \n    # calculate the semi-perimeter of a semicircle with radius r\n    s = 2 * r\n    \n    # calculate the area of the triangle inscribed in the semicircle\n    area = math.pi * s * a\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = area\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula to calculate the area of a triangle given its base and height\n    def triangle_area(base, height):\n        return 0.5 * base * height\n    \n    # Formula to calculate the area of a rectangle given its sides\n    def rectangle_area(a, b):\n        return a * b\n    \n    # Calculate the diameter of the semicircle\n    diametr = 2 * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = triangle_area(diametr, diametr) + rectangle_area(diametr, diametr)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the area of a triangle with sides of length sqrt(3)*r\n    area = (3 * r**2) / 4\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    semicircle_area = (r**2) / 3\n\n    # Calculate the ratio between the semicircle area and the triangle area\n    ratio = semicircle_area / area\n\n    # Determine the largest triangle area that can be inscribed in a semicircle with radius r\n    largest_triangle_area = ratio * r\n\n    return largest_triangle_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input, and returns the smallest missing number in the list.\n    \n    :param array: a list of natural numbers, sorted in ascending order\n    :param start: the starting index of the range to consider (default: 0)\n    :param end: the ending index of the range to consider (default: the length of the array)\n    \n    :return: the smallest missing number in the array\n    \n    Example:\n    >>> find_First_Missing([1, 2, 3, 4, 5, 6, 7])\n    8\n    \"\"\"\n    \n    # If the ending index is not provided, use the length of the array\n    if end is None:\n        end = len(array)\n    \n    # Initialize the missing number to be the first element of the range\n    missing = array[start]\n    \n    # Iterate over the range from the starting index to the ending index\n    for i in range(start+1, end):\n        # If the current element is greater than the missing number, update the missing number\n        if array[i] > missing:\n            missing = array[i]\n    \n    # Return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n\n    Keyword arguments:\n    start (int): The starting index of the array. Default value is 0.\n    end (int): The ending index of the array. Default value is the length of the array - 1.\n\n    Returns:\n    int: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for num in range(start, end + 1):\n        if num not in array:\n            return num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    If the input array is empty or contains duplicate values, the function will raise a ValueError.\n    \"\"\"\n    if not array:\n        raise ValueError(\"Input array is empty.\")\n    if len(array)!= len(set(array)):\n        raise ValueError(\"Input array contains duplicate values.\")\n\n    # Initialize the first and last index of the range\n    if start is None:\n        start = 0\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array and find the missing number\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    # If the loop completes without finding the missing number, raise a ValueError\n    raise ValueError(\"The input array does not contain a missing number.\")"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the first missing number in a sorted list of natural numbers.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n    start (int): The index where the search should start. Default is 0.\n    end (int): The index where the search should end. If None, the search will end at the last index. Default is None.\n\n    Returns:\n    int: The smallest missing number in the array.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] - i!= array[i]:\n            return i\n\n    return len(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an unsorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number in a sorted array of natural numbers.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the search range.\n    end (int): The ending index of the search range.\n\n    Returns:\n    int: The smallest missing number in the array.\n\n    Raises:\n    ValueError: If the array is not sorted.\n    \"\"\"\n    if not all(x <= y for x, y in zip(array, array[1:])):\n        raise ValueError(\"Array is not sorted.\")\n\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the array.\n    :param end: The ending index of the array.\n    :return: The smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_lst = []\n    for i in lst:\n        if i % 2 == 0:\n            even_lst.append(i)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list: \n        if number % 2 == 0: \n            even_numbers.append(number) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list with only the even numbers.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 19:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 19:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if the tuple has only 2 elements\n    if len(ele) == 2:\n        # Extract the x and y coordinates\n        x, y = ele\n        # Generate the adjacent coordinates\n        adj_coords = [(x+dx, y+dy) for dx, dy in sub]\n        # Append the adjacent coordinates to the list of subsets\n        sub.extend(adj_coords)\n    # Recursively call the function on all the adjacent coordinates\n    else:\n        for i in range(len(ele)-1):\n            # Extract the x and y coordinates of the current element\n            x, y = ele[i]\n            # Generate the adjacent coordinates for the current element\n            adj_coords = [(x+dx, y+dy) for dx, dy in sub]\n            # Recursively call the function on the adjacent coordinates\n            adjac((x+dx, y+dy), adj_coords+sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    # extract the adjacent coordinates\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    # check for duplicates\n    adj = list(set(adj))\n    # add the current coordinate to the sublist\n    sub.append(ele)\n    # recursively apply the function to the adjacent coordinates\n    for a in adj:\n        adjac(a, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 24:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 24:\n        adj.append((x, y+1))\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent_coords = []\n    for x,y in sub:\n        if x == ele[0]-1:\n            adjacent_coords.append((ele[0]-1,y))\n        if x == ele[0]+1:\n            adjacent_coords.append((ele[0]+1,y))\n        if y == ele[1]-1:\n            adjacent_coords.append((x,ele[1]-1))\n        if y == ele[1]+1:\n            adjacent_coords.append((x,ele[1]+1))\n    return adjacent_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    if row > 0 and col > 0:\n        sub.append((row-1, col-1))\n    if row > 0 and col < 7:\n        sub.append((row-1, col+1))\n    if row < 7 and col > 0:\n        sub.append((row+1, col-1))\n    if row < 7 and col < 7:\n        sub.append((row+1, col+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    x, y = ele\n    sub.append((x-1,y))\n    sub.append((x+1,y))\n    sub.append((x,y-1))\n    sub.append((x,y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    if row == 0:\n        sub.append((row, col-1))\n        sub.append((row, col+1))\n    elif row == 9:\n        sub.append((row, col-1))\n        sub.append((row, col+1))\n    elif col == 0:\n        sub.append((row-1, col))\n        sub.append((row+1, col))\n    elif col == 9:\n        sub.append((row-1, col))\n        sub.append((row+1, col))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Given a coordinate tuple (x, y), returns a list of all the adjacent coordinates (x', y') that are in the\n    grid. The sublist'sub' is used to keep track of the visited coordinates.\n    \"\"\"\n    x, y = ele\n    sub.append(ele)\n    result = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            x2, y2 = x + dx, y + dy\n            if (0 <= x2 < 3) and (0 <= y2 < 3) and (x2, y2) not in sub:\n                result.append((x2, y2))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    row, col = ele\n    adjacent = []\n    for i in range(row-1, row+2):\n        for j in range(col-1, col+2):\n            if i!= row or j!= col:\n                if 0 <= i < 9 and 0 <= j < 9:\n                    adjacent.append((i, j))\n                elif i < 0:\n                    adjacent.append((i+9, j))\n                elif j < 0:\n                    adjacent.append((i, j+9))\n    sub.extend(adjacent)\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert text to lowercase\n    text = text.lower()\n    # create a list of characters to replace\n    characters_to_replace = [' ', '-', '.', ',', ';', ':', '(', ')', '{', '}', '[', ']', '\"', \"'\", '?', '!']\n    # loop through the characters in the list\n    for char in characters_to_replace:\n        # replace each character with its corresponding underscore\n        text = text.replace(char, '_')\n    # return the modified text\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # create a string with all spaces\n    spaces ='' * len(text)\n    # split the string into two parts, one with spaces and one without spaces\n    split_text = text.split()\n    # join the two parts with underscores\n    output = split_text[0].replace(' ', '_') + spaces + split_text[1].replace(' ', '_')\n    return output"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index!= -1:\n        for i in range(zero_index, len(num_list) - 1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            if zero_count > 0:\n                num_list[i - zero_count], num_list[i] = num_list[i], num_list[i - zero_count]\n            else:\n                break\n            zero_count = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a list to store non-zero numbers\n    non_zero_list = []\n    # loop through the given list\n    for num in num_list:\n        # if the number is not zero, add it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n    # add all zeroes to the end of the non-zero list\n    for i in range(len(num_list)-len(non_zero_list)):\n        non_zero_list.append(0)\n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function will move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[non_zero_index] = num_list[i]\n            non_zero_index += 1\n    while non_zero_index < len(num_list):\n        num_list.pop()"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[index] = num_list[i]\n            index += 1\n    while index < len(num_list):\n        num_list.pop()\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Traverse through the list\n    for i in range(len(num_list)):\n        # If the current element is zero\n        if num_list[i] == 0:\n            # Move all the zeroes to the end of the list\n            for j in range(i, len(num_list) - 1):\n                num_list[j] = num_list[j + 1]\n            # Move the zero to its correct position\n            num_list[-1], num_list[i] = num_list[i], num_list[-1]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    # initialize two pointers, one for the left and one for the right\n    left = 0\n    right = 0\n    \n    # loop through the list until the right pointer reaches the end\n    while right < len(num_list):\n        # if the current element is not zero, move it to the left pointer\n        if num_list[right]!= 0:\n            # shift all elements from the right pointer one position to the left\n            for i in range(right):\n                num_list[left] = num_list[left+1]\n                left += 1\n            # move the zero element to the rightmost position\n            num_list[left] = num_list[right]\n            left += 1\n            # increment the right pointer\n            right += 1\n        else:\n            # increment the right pointer\n            right += 1\n        \n    # return the list with all zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list to store non-zero numbers\n    non_zero_list = []\n    # Traverse through the list\n    for num in num_list:\n        # If the number is not zero, add it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Append all the zeroes to the end of the new list\n    non_zero_list.extend([0] * num_list.count(0))\n    # Return the new list\n    return non_zero_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) :\n    '''\n    This function takes a list and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all the numbers in the array\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i]\n\n    # XOR of all pairs of numbers in the array\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) : \n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of numbers and their count and returns the sum of XOR of all pairs of numbers in the list.\n    '''\n    # Initialize a dictionary to store the XOR of each pair of numbers\n    xor_dict = {}\n    # Loop through the list of numbers and count the XOR of each pair of numbers\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor = arr[i] ^ arr[j]\n            if xor in xor_dict:\n                xor_dict[xor] += 1\n            else:\n                xor_dict[xor] = 1\n    # Loop through the XOR dictionary and sum the XOR of all pairs of numbers\n    xor_sum = 0\n    for xor in xor_dict:\n        xor_sum += xor_dict[xor] * xor\n    # Return the XOR sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes in a list of integers and their size as input\n    and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # XOR of all pairs of numbers in the list\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i]\n    # XOR of all even and odd numbers in the list\n    for i in range(n):\n        xor ^= arr[i] ^ (i % 2 * arr[i])\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR all the numbers in the list\n    xor_sum = sum(arr[i] ^ arr[j] for i in range(n) for j in range(i+1,n))\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n\n    # Calculate the xor of all pairs of numbers in the list\n    xor_sum = sum([a ^ b for a, b in zip(arr, arr[1:])])\n\n    # Return the xor sum\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while hq.heapify(iterable)!= []:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    heap = [0] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n    hq.heapify(heap)\n\n    # Extract the maximum element from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    # Reverse the list and return it\n    return result[::-1]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    heap_size = len(heap)\n    while heap_size > 1:\n        max_index = 0\n        for i in range(1, heap_size):\n            if heap[i] > heap[max_index]:\n                max_index = i\n        hq.heapreplace(heap, heap[max_index])\n        heap_size -= 1\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    min_heap = hq.heapify(iterable)\n    sorted_list = []\n\n    # Sort the list using heap sort\n    while min_heap:\n        sorted_list.append(hq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n    # Sort the heap in place using a max-heap\n    while iterable:\n        hq.heappush(iterable, hq.heappop(iterable))\n    # Convert the sorted heap back to a list\n    return list(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build heap from the input list\n    n = len(iterable)\n    for i in range(n//2-1, -1, -1):\n        heapify(iterable, n, i)\n\n    # Extract elements from heap in sorted order\n    for i in range(n-1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, i, 0)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    array = list(iterable)\n\n    # Build a max-heap from the array\n    hq.heapify(array)\n\n    # Iterate through the array and extract max-heap elements\n    for i in range(len(array)-1, 0, -1):\n        # Extract the maximum element from the heap\n        max_value = hq.heappop(array)\n\n        # Place the extracted element at the end of the array\n        array[i] = max_value\n\n    # Convert the sorted array back to an iterable\n    return array"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using the heap sort algorithm.\n    \"\"\"\n    # Create a min heap from the given iterable\n    heap = [None] * len(iterable)\n    for i, x in enumerate(iterable):\n        heap[i] = x\n    hq.heapify(heap)\n    \n    # Extract elements from the min heap and append to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heap[0])\n        heapq.heappop(heap)\n    \n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # If the actual cost is greater than or equal to the sale amount, then the sale has no profit and no loss\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost == 0: \n        return True\n\n    profit = actual_cost - sale_amount\n    if profit == 0: \n        return True\n\n    loss = sale_amount - actual_cost\n    if loss == 0: \n        return True\n\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (int): the actual cost of the sale\n    sale_amount (int): the amount of the sale\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    # calculate the profit\n    profit = sale_amount - actual_cost\n\n    # check if the profit is positive or zero\n    if profit >= 0 or profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True, 'Profit'\n    elif sale_amount == actual_cost:\n        return True, 'No Profit'\n    else:\n        return False, 'Loss'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n        return True\n    else:\n        print(\"The given amount has a profit of\",profit,\"and a loss of\",loss)\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        profit_loss = actual_cost - sale_amount\n        if profit_loss >= 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check for profit\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= 0:\n        return \"Actual cost is less than or equal to 0\"\n\n    if actual_cost == sale_amount:\n        return \"Actual cost is equal to sale amount\"\n\n    if actual_cost >= sale_amount:\n        return \"Actual cost is greater than sale amount\"\n\n    return \"Actual cost is not between sale amount and 0\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit is zero and if the loss is zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n    # calculate the heat index\n    hi = t_f + (v/1.61)\n    # calculate the wind chill index\n    wc = int((hi - 32) * 5/9)\n    # round the wind chill index to the nearest integer\n    wc_rounded = round(wc)\n    # return the wind chill index rounded to the nearest integer\n    return wc_rounded\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    c = 20\n    f = 1.8*c + 32\n    \n    # Calculate wind chill index\n    wc = (v*f-t*c)/((v**2*f)**0.5+2*v*c)\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the absolute value of the wind velocity\n    abs_v = abs(v)\n\n    # Calculate the dew point temperature\n    dew_point = 237.3 * (1 - 0.0065 * abs_v)\n\n    # Calculate the wind chill temperature\n    wind_chill_temp = dew_point - (t - 273.15)\n\n    # Calculate the wind chill index\n    wci = (wind_chill_temp * 1.8) + 32\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_rounded = math.ceil(wci)\n\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Calculate the wind chill in celsius\n    wind_chill_c = (v - 13.12 * math.log(t) + 11.3) * 0.62197162129\n\n    # Round the wind chill to the nearest integer\n    wind_chill_int = round(wind_chill_c)\n\n    # If the wind chill is less than -40, return -40\n    if wind_chill_int < -40:\n        wind_chill_int = -40\n\n    # If the wind chill is greater than 100, return 100\n    if wind_chill_int > 100:\n        wind_chill_int = 100\n\n    return wind_chill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill index using the following formula:\n    # WChill = (13.12 + (0.6215 * V) + (11.37 * math.exp(-0.1335 * T)) - (0.3965 * math.exp(-0.03516 * T**2))) / (T - 273.15)\n    \n    # Calculate the wind velocity in m/s\n    v_m = v * 1.60934 # Convert to m/s\n    \n    # Calculate the wind chill index\n    WChill = (13.12 + (0.6215 * v_m) + (11.37 * math.exp(-0.1335 * t)) - (0.3965 * math.exp(-0.03516 * t**2))) / (t - 273.15)\n    \n    # Round the wind chill index to the nearest integer\n    WChill_int = round(WChill)\n    \n    return WChill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + 0.6215*t - 35.75*math.pow(t,0.16) + 0.4275*math.pow(t,0.16)*math.pow(v,0.0447)\n    return int(wind_chill + 0.5)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wci = math.floor(13.12 + (0.6215*v) + (11.37*(t-273.15)) + 0.3965*v*(t-273.15))\n    # Return the wind chill index rounded to the next integer\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature from celsius to fahrenheit\n    temp_f = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wci = (237.3 + ((v * 1.609) / 100) - (temp_f * 0.094)) / 1.81\n    \n    # Round wind chill index to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the nearest integer.\n    '''\n    c = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 0.16) + 0.3965 * math.pow(t, 0.16) * math.pow(v, 0.0468)\n    w = math.floor(c)\n    return w"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert temperature from Celsius to Kelvin\n    k = (t + 273.15) * (1.0 + 0.04217 * math.exp((17.67 * t) / (t + 243.5)))\n\n    # calculate the wind chill index\n    w = (v * (1 - 0.14 * (k - 273.15) / (k - 296.15)))\n\n    # round to the nearest integer\n    wc = int(w)\n\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names with lowercase letters removed\n    names_without_lowercase = []\n    # Iterate over the names in the input list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, append it to the list of names without lowercase letters\n            names_without_lowercase.append(name)\n    # Sum the lengths of the names without lowercase letters\n    total_length = sum(len(name) for name in names_without_lowercase)\n    # Return the total length of the names without lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if the first character is uppercase\n            continue\n        else:\n            sum_length += len(name)  # add the length of the name to the sum\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize sum variable to 0\n    sum_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name in the list\n            continue\n        # If the name does not start with a lowercase letter, add the length of the name to the sum variable\n        sum_length += len(name)\n    \n    # Return the sum of the length of the names that are not lowercase\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    return sum([len(name) for name in sample_names if not name[0].islower()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper() == False:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    sum_length = sum([len(name) for name in filtered_names])\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the valid names\n    valid_names = []\n    # Iterate over each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, append it to the valid_names list\n            valid_names.append(name)\n    # Calculate the sum of the lengths of the valid names\n    valid_name_length_sum = sum([len(name) for name in valid_names])\n    return valid_name_length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of lengths of names that do not start with a lowercase letter\n    sum_of_names = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # If the name does not start with a lowercase letter, add the length of the name to the sum\n        if not name[0].islower():\n            sum_of_names += len(name)\n            \n    return sum_of_names"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^)]*\\)')\n    items = regex.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis\n    items = re.sub('\\(.*?\\)', '', items)\n    # Return the string without the parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Return the cleaned string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(', '').replace(')', '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing the parenthesis from the string\n    items = re.sub('\\([^)]*\\)', '', items)\n    # Removing any whitespaces from the string\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^\\)]+\\)'\n    items_without_parenthesis = re.sub(pattern, '', items)\n    return items_without_parenthesis"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    k = 1\n    \n    while i < n:\n        j += 1\n        k += 1\n        if j + k!= i + 1:\n            return False\n        i += 1\n    \n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nonagonal_helper(x, y):\n        return x + y\n\n    def nonagonal_recursive(x, y, n):\n        if n == 1:\n            return x\n        else:\n            return nonagonal_helper(x, y) + nonagonal_recursive(x, y, n - 1)\n\n    if n % 2 == 0:\n        x = 1\n        y = 1\n        return nonagonal_recursive(x, y, n // 2)\n    else:\n        x = 1\n        y = 2\n        return nonagonal_recursive(x, y, n // 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # Initialize the first nonagonal number\n    num = 1\n    \n    # Iterate through the remaining nonagonal numbers\n    for i in range(1, n):\n        # Calculate the next nonagonal number\n        num = num * (n - i) // (i + 1)\n    \n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1 # start with 1\n    b = 1 # start with 1\n    for i in range(1, n+1):\n        a += b\n        b += 1 # increment b by 1 for each successive iteration\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    side_length = 1\n    for i in range(2, n+1):\n        side_length += 2*i - 1\n    return side_length"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 1:\n        return 1 + is_nonagonal(n//2)\n    else:\n        return is_nonagonal(n//2) + is_nonagonal(n//2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initializing the variables for the formula\n    a = 1\n    b = 1\n    # finding the nth nonagonal number\n    while a <= n:\n        a = (3*a**2) - 1\n        b += 2\n        n += 2\n    return b - 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    This function will check whether a given number is a nonagonal number or not. \n    A nonagonal number is a positive integer that is equal to the sum of the squares of its adjacent diagonals.\n    '''\n    # Get the squares of the adjacent diagonals\n    a = n * (n+1)\n    b = 2 * (n+1)\n    # Check if a and b are equal or not\n    if a == b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # First nonagonal number is 1\n    if n == 1:\n        return 1\n    # Second nonagonal number is 2\n    elif n == 2:\n        return 4\n    # If n is odd, add 2 to get n^2\n    elif n % 2 == 1:\n        return is_nonagonal(n**2)\n    # If n is even, subtract 2 to get n^2\n    else:\n        return is_nonagonal(n**2) - 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n\n    nonagonal_num = n * (n - 1) // 2\n    return nonagonal_num"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ][^a-zA-Z]*|[^a-zA-Z]*[zZ]\\b'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' at the middle of words\n    pattern = r'\\b[zZ]\\b'\n    \n    # Use the re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ][^a-zA-Z]*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern for matching 'z' except at the start and end of a word\n    pattern = r'\\b(z)[^A-Za-z]*\\b'\n    \n    # Use the re.search() function to find all occurrences of the pattern in the text\n    matches = re.search(pattern, text)\n    \n    # Check if the pattern was found and return True if it was, otherwise return False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b(?!.*[a-z])[Zz]|(?<=.*[a-z])(?<!.*[a-z])[Zz]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r\"(?<![a-z])[zZ](?![a-z])\")\n    return bool(pattern.search(text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes in an array and a position k and reverses the array upto k.\n    \"\"\"\n    # Get the length of the input array\n    n = len(input)\n\n    # If k is greater than or equal to n, return the input array as it is.\n    if k >= n:\n        return input\n\n    # Create an empty array to store the reversed array\n    reversed_array = []\n\n    # Reverse the array from index 0 to k-1\n    for i in range(k):\n        reversed_array.append(input[i])\n\n    # Reverse the array from k to n-1\n    for i in range(k, n):\n        reversed_array.append(input[i])\n\n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0 or k > len(input):\n        return input\n    \n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    # reverse first k elements of array\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    # reverse remaining elements of array\n    for i in range(k, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array as input and reverses it upto a given position.\n    \"\"\"\n    n = len(input)\n    for i in range(0, k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array\n    input.reverse()\n    \n    # get the length of the array\n    length = len(input)\n    \n    # loop through the array from index 0 to k-1 and swap the elements\n    for i in range(k):\n        input[i], input[length-1-i] = input[length-1-i], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n\n    # Reverse the array from position 0 to k-1\n    for i in range(k):\n        input[i], input[k-1-i] = input[k-1-i], input[i]\n\n    # Reverse the remaining elements in the array\n    for i in range(k, len(input)):\n        input[i], input[k-1-i] = input[k-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        start = 0\n        end = k-1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n        return reverse_Array_Upto_K(input, k+1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the input array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Find the length of the array\n    n = len(input)\n\n    # Check if k is valid\n    if k > n or k < 1:\n        return \"Invalid input\"\n\n    # Reverse the array\n    for i in range(k-1, n//2):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the values of the test_dict\n    new_dict = {k: v for k, v in test_dict.items()}\n    # Append the new dictionary to the test_tup\n    test_tup.append(new_dict)\n    # Return the updated test_tup\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.append(test_dict)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    dict_list = [(k,v) for k, v in test_dict.items()]\n    # Add the dictionary to the tuple\n    return (test_tup, *dict_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple += tuple(test_dict.values())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the values of the dictionary\n    new_dict = dict(test_dict)\n    # add the new dictionary to the tuple\n    test_tup += (new_dict,)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary to add to the tuple\n    new_dict = {'key1': 'value1', 'key2': 'value2'}\n    # Combine the two dictionaries into one\n    combined_dict = {**test_dict, **new_dict}\n    # Convert the combined dictionary into a tuple\n    combined_dict = tuple(combined_dict.items())\n    # Combine the original tuple with the new dictionary\n    new_tup = (*test_tup, combined_dict)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(i, j, total, count, res):\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            res.append(total / count)\n            return\n        if i < len(cost) - 1:\n            dfs(i + 1, j, total + cost[i][j], count + 1, res)\n        if j < len(cost[0]) - 1:\n            dfs(i, j + 1, total + cost[i][j], count + 1, res)\n    \n    max_avg = 0\n    dfs(0, 0, 0, 1, [])\n    max_avg = max(max_avg, max(res))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = set()\n    visited.add((0, 0))\n    max_avg = 0\n    max_path = []\n    for i in range(N):\n        for j in range(N):\n            path = []\n            current_cost = 0\n            current_cell = (i, j)\n            path.append(current_cell)\n            visited.add(current_cell)\n            while True:\n                if (i+1, j) not in visited and cost[i+1][j]!= 0:\n                    path.append((i+1, j))\n                    visited.add((i+1, j))\n                    current_cost += cost[i+1][j]\n                    current_cell = (i+1, j)\n                elif (i, j+1) not in visited and cost[i][j+1]!= 0:\n                    path.append((i, j+1))\n                    visited.add((i, j+1))\n                    current_cost += cost[i][j+1]\n                    current_cell = (i, j+1)\n                else:\n                    break\n            avg_cost = current_cost / len(path)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    total_cost = 0\n    num_cells = 0\n    max_avg = 0\n    \n    # Initialize start cell (top-left)\n    start_row = 0\n    start_col = 0\n    \n    # Create a helper function to check if the given row and column are valid\n    def isValid(row, col):\n        return row >= 0 and row < N and col >= 0 and col < N\n    \n    # Create a helper function to check if the given row and column are adjacent to each other\n    def areAdjacent(row1, col1, row2, col2):\n        return abs(row1 - row2) == 1 and abs(col1 - col2) == 1\n    \n    # Create a helper function to compute the cost of moving from a given row and column to the adjacent cells\n    def getCost(row, col, row_adj, col_adj):\n        return abs(cost[row][col] - cost[row_adj][col_adj])\n    \n    # Create a recursive function to find the maximum average over all existing paths\n    def findMaxAvg(row, col, visited):\n        # Check if the current cell is the bottom right cell\n        if row == N-1 and col == N-1:\n            # Compute the average of the current path\n            cost_path = sum(cost[row][col])\n            num_cells_path = len(visited)\n            avg_path = cost_path / num_cells_path\n            if avg_path > max_avg:\n                max_avg = avg_path\n            return avg_path\n        \n        # Initialize variables\n        max_avg_adj = 0\n        max_avg_curr = 0\n        num_cells_curr = 0\n        \n        # Check if the current cell is valid\n        if isValid(row, col):\n            # Check if the current cell is adjacent to any of the previously visited cells\n            for row_adj, col_adj in visited:\n                if areAdjacent(row, col, row_adj, col_adj):\n                    # Compute the cost of moving from the current cell to the adjacent cell\n                    cost_adj = getCost(row, col, row_adj, col_adj)\n                    # Recursively check if the adjacent cell is in the current path\n                    max_avg_adj = max(max_avg_adj, findMaxAvg(row_adj, col_adj, visited))\n                    # Update the current cell's average if the adjacent cell is the new maximum average\n                    if cost_adj > max_avg_adj:\n                        num_cells_curr += 1\n                        max_avg_curr = cost_adj\n        # Compute the average of the current path\n        cost_path = sum(cost[row][col])\n        num_cells_path = len(visited)\n        avg_path = cost_path / num_cells_path\n        # Update the maximum average and number of visited cells if the current path has a higher maximum average\n        if avg_path > max_avg:\n            max_avg = avg_path\n            num_cells = num_cells_path\n        # Return the maximum average of the current path\n        return max_avg_curr\n    \n    # Start the recursive function with the start cell\n    return findMaxAvg(start_row, start_col, [(start_row, start_col)])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # get the dimensions of the matrix\n    n = len(cost)\n    \n    # initialize variables\n    visited = [[0 for j in range(n)] for i in range(n)]\n    total_cost = 0\n    max_avg = float('-inf')\n    \n    # loop through all possible paths\n    for i in range(n):\n        for j in range(n):\n            \n            # check if we've already visited this cell\n            if visited[i][j] == 1:\n                continue\n            \n            # if we haven't visited the cell, calculate the cost of going right or down\n            if i < n-1 and j < n-1:\n                cost_right = cost[i][j] + cost[i+1][j+1]\n                cost_down = cost[i][j] + cost[i][j+1]\n            elif i < n-1:\n                cost_right = cost[i][j] + cost[i+1][n-1]\n            else:\n                cost_right = cost[i][j] + cost[i][j+1]\n            \n            # update the total cost and visited count\n            total_cost += cost[i][j]\n            visited[i][j] = 1\n            \n            # calculate the average of this path\n            path_avg = total_cost/visited[i][j]\n            \n            # update the max average if necessary\n            if path_avg > max_avg:\n                max_avg = path_avg\n            \n            # calculate the total cost and visited count for the next path\n            total_cost -= cost[i][j]\n            visited[i][j] = 0\n            \n            # if we've already gone up, then we need to come back down\n            if i > 0:\n                total_cost += cost[i][j]\n                visited[i][j] = 1\n                path_avg = total_cost/visited[i][j]\n                if path_avg > max_avg:\n                    max_avg = path_avg\n                \n                total_cost -= cost[i][j]\n                visited[i][j] = 0\n            \n            # if we've already gone left, then we need to come back right\n            if j > 0:\n                total_cost += cost[i][j]\n                visited[i][j] = 1\n                path_avg = total_cost/visited[i][j]\n                if path_avg > max_avg:\n                    max_avg = path_avg\n                    \n                total_cost -= cost[i][j]\n                visited[i][j] = 0\n    \n    # return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    start_cell = (0, 0)\n    end_cell = (N-1, N-1)\n    dp[start_cell[0]][start_cell[1]] = cost[start_cell[0]][start_cell[1]]\n    queue = [(start_cell, 1)]\n    \n    while queue:\n        cell, steps = queue.pop(0)\n        total_cost = dp[cell[0]][cell[1]] + cost[cell[0]][cell[1]]\n        visited_cells = 1\n        \n        if cell == end_cell:\n            max_avg = max(max_avg, total_cost/visited_cells)\n            continue\n        \n        if cell[0] < end_cell[0] and cell[1] < end_cell[1]:\n            if dp[cell[0]+1][cell[1]] < dp[cell[0]][cell[1]] + cost[cell[0]+1][cell[1]]:\n                dp[cell[0]+1][cell[1]] = dp[cell[0]][cell[1]] + cost[cell[0]+1][cell[1]]\n                queue.append((cell[0]+1, cell[1]))\n            if dp[cell[0]][cell[1]+1] < dp[cell[0]][cell[1]] + cost[cell[0]][cell[1]+1]:\n                dp[cell[0]][cell[1]+1] = dp[cell[0]][cell[1]] + cost[cell[0]][cell[1]+1]\n                queue.append((cell[0], cell[1]+1))\n        \n        visited_cells += 1\n        queue.append((cell, visited_cells))\n        \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize variables for tracking the maximum average and current path\n    max_avg = float('-inf')\n    path = []\n    # Initialize variables for tracking the total cost and the number of cells visited\n    total_cost = 0\n    num_cells = 0\n    # Loop through the matrix and find the maximum average of a path\n    for i in range(n):\n        for j in range(n):\n            # Check if we can move to the current cell from the previous cell\n            if i > 0 and j > 0 and cost[i][j] > cost[i-1][j] and cost[i][j] > cost[i][j-1]:\n                # If we can, extend the path to the current cell and update the total cost and number of cells visited\n                path.append((i,j))\n                total_cost += cost[i][j]\n                num_cells += 1\n                # Check if we've found a better path so far\n                new_avg = total_cost / num_cells\n                if new_avg > max_avg:\n                    max_avg = new_avg\n                    path.append((i,j))\n            # Check if we can move to the current cell from the next cell\n            if i < n-1 and j > 0 and cost[i][j] > cost[i+1][j] and cost[i][j] > cost[i][j-1]:\n                path.append((i,j))\n                total_cost += cost[i][j]\n                num_cells += 1\n                new_avg = total_cost / num_cells\n                if new_avg > max_avg:\n                    max_avg = new_avg\n                    path.append((i,j))\n            # Check if we can move to the current cell from the top cell\n            if i > 0 and j < n-1 and cost[i][j] > cost[i-1][j] and cost[i][j] > cost[i][j+1]:\n                path.append((i,j))\n                total_cost += cost[i][j]\n                num_cells += 1\n                new_avg = total_cost / num_cells\n                if new_avg > max_avg:\n                    max_avg = new_avg\n                    path.append((i,j))\n            # Check if we can move to the current cell from the bottom cell\n            if i < n-1 and j < n-1 and cost[i][j] > cost[i+1][j] and cost[i][j] > cost[i][j+1]:\n                path.append((i,j))\n                total_cost += cost[i][j]\n                num_cells += 1\n                new_avg = total_cost / num_cells\n                if new_avg > max_avg:\n                    max_avg = new_avg\n                    path.append((i,j))\n            # Backtrack if we can't move to any of the neighboring cells\n            if i > 0 and j > 0 and cost[i][j] <= cost[i-1][j] and cost[i][j] <= cost[i][j-1]:\n                path.pop()\n                total_cost -= cost[i][j]\n                num_cells -= 1\n                if len(path) > 1 and path[-2]!= (i-1,j-1):\n                    path.pop()\n                    total_cost -= cost[i][j]\n                    num_cells -= 1\n            if i < n-1 and j > 0 and cost[i][j] <= cost[i+1][j] and cost[i][j] <= cost[i][j-1]:\n                path.pop()\n                total_cost -= cost[i][j]\n                num_cells -= 1\n                if len(path) > 1 and path[-2]!= (i+1,j-1):\n                    path.pop()\n                    total_cost -= cost[i][j]\n                    num_cells -= 1\n            if i > 0 and j < n-1 and cost[i][j] <= cost[i-1][j] and cost[i][j] <= cost["
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # find the maximum element in the matrix\n    max_element = max(sum(cost[i][j] for j in range(len(cost[0]))) for i in range(len(cost)))\n    \n    # initialize variables\n    max_average = 0\n    current_path_cost = 0\n    current_path_length = 0\n    current_path = []\n    \n    # loop through all possible paths starting from the top-left corner\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            # if the current element is greater than the maximum element, skip the path\n            if cost[i][j] > max_element:\n                continue\n            \n            # if the current element is the same as the maximum element, add the element to the current path and continue\n            elif cost[i][j] == max_element:\n                current_path.append(cost[i][j])\n                continue\n            \n            # if the current element is less than the maximum element, start a new path with the element as the first cell\n            else:\n                current_path = [cost[i][j]]\n            \n            # loop through all possible paths starting from the current cell and continue until the bottom right cell is reached\n            while i < len(cost) - 1 and j < len(cost[0]) - 1:\n                # add the current cell to the current path\n                current_path.append(cost[i][j])\n                # update the current path cost and length\n                current_path_cost += cost[i][j]\n                current_path_length += 1\n                # update the current cell\n                i += 1\n                j += 1\n            \n            # calculate the average of the current path\n            average = current_path_cost / current_path_length\n            \n            # if the average is greater than the maximum average, update the maximum average and the current path\n            if average > max_average:\n                max_average = average\n                current_path_cost = 0\n                current_path_length = 0\n                current_path = []\n    \n    # return the maximum average of all paths\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n\n    def dfs(i, j, path_cost):\n        if i == N - 1 and j == N - 1:\n            return path_cost\n        if i == N - 1:\n            return dfs(i, j + 1, path_cost)\n        if j == N - 1:\n            return dfs(i + 1, j, path_cost)\n\n        left_cost = float('-inf')\n        if i > 0:\n            left_cost = max(left_cost, dp[i - 1][j])\n\n        top_cost = float('-inf')\n        if j > 0:\n            top_cost = max(top_cost, dp[i][j - 1])\n\n        curr_cost = cost[i][j] + left_cost + top_cost\n        dp[i][j] = max(curr_cost, dp[i][j])\n\n        return max(dp[i][j], dfs(i + 1, j, path_cost + curr_cost))\n\n    return dfs(0, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_average = float('-inf')\n    n = len(cost)\n    \n    # Check if the input is valid\n    if n*n!= len(cost[0])*len(cost):\n        print(\"Invalid input\")\n        return\n    \n    # Check if the input is a square matrix\n    if n!= len(cost):\n        print(\"Invalid input\")\n        return\n    \n    # Create a copy of the input matrix\n    cost = [list(row) for row in cost]\n    \n    # Calculate the maximum average of a given path\n    def dfs(i, j, prev_row, prev_col, visited):\n        if (i, j) == (n-1, n-1):\n            # Base case: reached the bottom right cell\n            total_cost = 0\n            for cell in visited:\n                total_cost += cost[cell[0]][cell[1]]\n            average_cost = total_cost / len(visited)\n            if average_cost > max_average:\n                max_average = average_cost\n            return\n        \n        # If the current cell is not visited, add it to the visited list\n        if (i, j) not in visited:\n            visited.append((i, j))\n        \n        # Move right or down\n        if i < n-1 and cost[i+1][j] > cost[i][j]:\n            dfs(i+1, j, prev_row, prev_col, visited)\n        elif i > 0 and cost[i-1][j] > cost[i][j]:\n            dfs(i-1, j, prev_row, prev_col, visited)\n        else:\n            dfs(i, j+1, prev_row, prev_col, visited)\n        \n        # Remove the current cell from the visited list\n        visited.pop()\n        \n    # Call the dfs function for the top-left cell\n    dfs(0, 0, [], [], [])\n    \n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    max_avg = float('-inf')\n\n    # Fill the dp table\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(cost[i][j], dp[i][j-1] + cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(cost[i][j], dp[i-1][j] + cost[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n    \n    # Find the maximum average\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                avg = dp[i][j]\n            else:\n                avg = (dp[i][j] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]) / 3.0\n            \n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students with height and weight above the minimum\n    filtered_students = {name: value for name, value in students.items() if value[0] > h and value[1] > w}\n\n    # Print the filtered students\n    print(filtered_students)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student,data in students.items():\n        height,weight = data\n        if height >= h and weight >= w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    This function takes two lists `nums1` and `nums2` of the same length and returns the number of indices in `nums2` where the corresponding element in `nums1` is equal to the element at the same index in `nums2`.\n\n    Examples:\n    >>> count_same_pair([1, 2, 3], [2, 3, 4])\n    1\n    >>> count_same_pair([1, 2, 3], [1, 3, 3])\n    2\n    >>> count_same_pair([1, 2, 3], [4, 5, 6])\n    0\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(len(nums2)) if j!= i):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    # convert base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    sum = 0\n    # loop through each digit in the base string and add it to the sum\n    for digit in base_str:\n        sum += int(digit)\n    # calculate the sum to the specified power\n    result = sum ** power\n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert the current digit to an integer\n        digit_int = int(digit)\n        # Multiply the digit by the power\n        digit_product = digit_int * power\n        # Add the product to the sum variable\n        sum += digit_product\n\n    # Return the sum of all digits\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += base % 10\n        base = base // 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to 0\n    total = 0\n    # Convert base to a string to iterate over its digits\n    base_str = str(base)\n    # Iterate over each digit of the base string and add it to the sum\n    for digit in base_str:\n        total += int(digit)\n    # Calculate the sum of digits raised to the power and return the result\n    return total ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Function to check if a number is a power of 10\n    def is_power_of_10(n):\n        return n == 0 or int(n ** 0.1) * 10 == n\n\n    # Check if power is a power of 10\n    if not is_power_of_10(power):\n        raise ValueError(\"Power must be a power of 10.\")\n\n    # Calculate the sum of all digits of the base to the specified power\n    digit_sum = 0\n    while power > 0:\n        digit_sum += base % 10\n        base //= 10\n        power -= 1\n\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # calculate the sum of digits of base to power\n    base_sum = sum(int(digit) ** power for digit in str(base))\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10  # taking last digit of base\n        result += digit  # adding last digit to result\n        base //= 10  # removing last digit from base\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string\n    base_str = str(base)\n\n    # Initialize sum to zero\n    sum = 0\n\n    # Iterate through digits of base and calculate sum to the power\n    for digit in base_str:\n        digit_int = int(digit)\n        sum += digit_int ** power\n\n    # Return sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return None\n    elif power == 0:\n        return 0\n    else:\n        sum_of_digits = 0\n        base_str = str(base)\n        for digit in base_str:\n            sum_of_digits += int(digit)\n        return sum_of_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base) # convert base to string to get digits\n    base_digits = [int(digit) for digit in base_str] # convert digits to list of integers\n    \n    result = 0 # initialize result to 0\n    \n    for digit in base_digits: # iterate through each digit in the base\n        digit_power = digit ** power # calculate the power of the digit to the power of the power argument\n        result += digit_power # add the power of the digit to the result\n        \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use the re.findall() function to extract all matches\n    matches = re.findall(pattern, text1)\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(text)\n    # Return a list of all extracted values\n    return [match for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # Find all the quotation marks in the string\n    quotation_marks = re.findall(r'\"[^\"]*\"', text1)\n    \n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n    \n    # Loop through all the quotation marks found\n    for quotation_mark in quotation_marks:\n        \n        # Remove the quotation marks from the value\n        value = quotation_mark[1:-1]\n        \n        # Append the value to the extracted_values list\n        extracted_values.append(value)\n    \n    # Return the extracted_values list\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the pattern to match quotation marks\n    pattern = r'(?<=\\\").+?(?=\\\")'\n    \n    # Use re.findall() to find all matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n    \n    # Return the list of matches\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"') # compile regex pattern to find quotation marks\n    matches = pattern.findall(text1) # find all matches of the pattern in the text\n    \n    # loop through matches and print out values between quotation marks\n    for match in matches:\n        print(match)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(quotation_pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([t1 * t2 for t1 in test_tup[:-1] for t2 in test_tup[1:]])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define a tuple of length N+1\n    t = (0,) * (len(test_tup) + 1)\n    # Loop through the tuple and calculate the product of the current element and the next element\n    for i in range(len(test_tup)):\n        t[i+1] = test_tup[i] * t[i+2]\n    # Return the tuple with the products of the elements\n    return t[1:]"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the output tuple\n    output_tup = ()\n    # loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # add the product of the current element and the next element to the output tuple\n        output_tup += (test_tup[i] * test_tup[i+1],)\n    # add the last element of the input tuple to the output tuple\n    output_tup += (test_tup[-1],)\n    # return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result_tup = ()\n    for i in range(n-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the result tuple\n    result = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4])\n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i < N-1:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup += (test_tup[i] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Concatenate the two lists\n    combined_list = lst1 + lst2\n    # Initialize an empty list to store the sum\n    result = []\n    # Loop through the combined list and add the sum to the result list\n    for num in combined_list:\n        result.append(num)\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    seen = {}\n    result = []\n    for num in nums:\n        if num in seen:\n            continue\n        else:\n            seen[num] = True\n        if num-1 in seen:\n            continue\n        else:\n            seen[num-1] = True\n        result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for group in groupby(sorted(set(nums))):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    i = 0\n    result = []\n    for key, group in groupby(nums):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        result.append(group[0])\n        i += 1\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, num in enumerate(nums):\n        group = list(groupby([x for x in nums if x!= num]))\n        if group:\n            nums.pop(i)\n            i -= 1\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(set(nums)))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # create a generator object for the given list\n    gen_nums = (nums[i], i) for i in range(len(nums))\n\n    # create a dictionary to store consecutive duplicates\n    consecutive_dict = {}\n\n    # iterate over the generator object\n    for item in gen_nums:\n        # if the current item is already in the dictionary, remove it\n        if item[0] in consecutive_dict:\n            del consecutive_dict[item[0]]\n        # if the current item is not in the dictionary, add it\n        else:\n            consecutive_dict[item[0]] = item[1]\n\n    # return the list with consecutive duplicates removed\n    return [num for num in nums if num not in consecutive_dict.keys()]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), key=lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    result = []\n    for key, group in groupby(nums):\n        if not key:  # first occurrence of group\n            result.extend(group)\n        elif key == 1:  # consecutive occurrence of group\n            continue\n        else:  # first occurrence of group with gap\n            result.append(group)\n            result.extend(group)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def grouper(iterable, n):\n        args = [iter(iterable)] * n\n        return groupby(chain(*args))\n\n    return list(chain.from_iterable(grouper(nums, 2)))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * r * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r*h)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(math.pi*r**2)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = math.pi * r * (r**2 + h**2)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone\n    lateral_surface = math.pi * r ** 2 * h / 3\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h # formula for lateral surface area of a cone\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2 + h**2) #calculate the area using the formula for a cone\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*h\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    new_text = re.sub(pattern, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[. ]'\n    return re.sub(special_chars, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)\n\ntext = \"This is a sample text. with some special characters like: spaces, commas, dots, etc.\"\nresult = replace_specialchar(text)\nprint(result)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match any of the special characters\n    pattern = r'[,\\. ]'\n    # replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # replace spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    \n    # replace commas with a space\n    text = re.sub(r',','', text)\n    \n    # replace dots with a space\n    text = re.sub(r'\\.','', text)\n    \n    # replace all other special characters with a colon\n    text = re.sub(r'[^\\w\\s]', ':', text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[,\\. ]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to match spaces, commas, and dots\n    pattern = r'[^\\w\\s,.\\-]'\n    # use re.sub() function to replace all occurrences of pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,!?]'\n    repl = ':'\n    return re.sub(pattern, repl, text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index to -1\n    index = -1\n    # loop through the array\n    for i in range(len(A)):\n        # if the current element is equal to the target element\n        if A[i] == x:\n            # update the index to the current index\n            index = i\n            # break out of the loop\n            break\n    # return the index of the first occurrence of x\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables\n    i = 0  # Index of the current element\n    j = len(A) - 1  # Index of the element to be searched for\n    while i <= j:\n        # Calculate the middle index\n        mid = (i + j) // 2\n        # Check if the middle element is equal to x\n        if A[mid] == x:\n            # If it is, return the middle index\n            return mid\n        # If the middle element is greater than x, search in the left half\n        elif A[mid] > x:\n            j = mid - 1  # Update the index to search in the left half\n        # If the middle element is less than x, search in the right half\n        else:\n            i = mid + 1  # Update the index to search in the right half\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes an array A and a number x as input, and returns the index of the first occurrence of x in A, if it exists, or -1 if it does not exist.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    elif A[0] == x:\n        return 0\n    else:\n        i = 1\n        while i < len(A) and A[i] == x:\n            i += 1\n        return i - 1 if i < len(A) else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes two arguments: A (list of integers) and x (integer).\n    It returns the index of the first occurrence of x in A. If x is not present in A, it returns -1.\n    \"\"\"\n    # Initialize the first occurrence index to -1\n    first_occurrence = -1\n\n    # Iterate through the list of integers\n    for i in range(len(A)):\n        # If the current integer matches x, update the first occurrence index to i\n        if A[i] == x:\n            first_occurrence = i\n            # Exit the loop as we have found the first occurrence of x\n            break\n\n    # Return the first occurrence index\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    \n    while i < n:\n        if A[i] == x:\n            return i\n        elif A[i] < x:\n            i += 1\n        else:\n            i = 0\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number x in a sorted array A.\n\n    Args:\n        A (list): A sorted array of integers.\n        x (int): A number to find the index of its first occurrence in A.\n\n    Returns:\n        int: The index of the first occurrence of x in A.\n    \"\"\"\n    # Initialize a counter to keep track of the number of occurrences of x\n    count = 0\n\n    # Traverse the array to find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            count += 1\n            if count == 1:\n                return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the result list with all zeroes\n    result = [0]*(n+1)\n    result[0] = 1 # for empty list\n\n    # Initialize the prefix sum array\n    prefix_sum = [0]*(n+1)\n\n    # Calculate the prefix sum array\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # Calculate the products of all possible sublists\n    for i in range(1, n+1):\n        for j in range(i):\n            result[i] += prefix_sum[i] * prefix_sum[j] * prefix_sum[i-j-1]\n\n    return result[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize a variable to store the sum of products of all possible sublists\n    sum_prod = 0\n\n    # Loop through all possible sublists of the given list\n    for i in range(1, len(arr)+1):\n        # Calculate the product of all the elements in the sublist\n        prod = 1\n        for j in range(len(arr)-i+1):\n            prod *= arr[j]\n        # Add the product of the sublist to the sum of products of all sublists\n        sum_prod += prod\n\n    # Return the sum of products of all sublists\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Calculate the sum of products of all sublists\n    sum_of_products = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist = arr[i:j+1]\n            product = 1\n            for k in sublist:\n                product *= k\n            sum_of_products += product\n    \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_of_products = [0] * (n+1)\n    sum_of_products[0] = 1\n\n    # Initialize the sum of products for each length of subarray\n    for i in range(1, n+1):\n        sum_of_products[i] = sum_of_products[i-1] * arr[i-1]\n\n    # Find the sum of products of all possible sublists\n    sum_of_subarray_products = sum_of_products[n]\n    for i in range(n-1, -1, -1):\n        sum_of_subarray_products -= sum_of_products[i]\n        sum_of_subarray_products += sum_of_products[i+1]\n\n    return sum_of_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * (n+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for j in range(1, n+1):\n        for i in range(j):\n            dp[j][i] = arr[i] * dp[j-1][i] + arr[j-1] * dp[j-1][i-1]\n    res = dp[n][0]\n    for i in range(1, n+1):\n        res += arr[i-1] * dp[n][i-1]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    subarray_sum = 0\n    subarray_product = 1\n\n    for i in range(n):\n        subarray_sum += arr[i]\n        subarray_product *= arr[i]\n        product *= subarray_product\n\n    return product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * (n+1)\n    for i in range(1, n+1):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    result = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            subarray_prod = prefix_prod[j] - prefix_prod[i-1] * prefix_prod[j-i]\n            subarray_sum = prefix_sum[j] - prefix_sum[i-1] * arr[i-1]\n            result += subarray_prod * subarray_sum\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n    for i in range(n):\n        prod *= arr[i]\n        sum_prod += prod\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables for sum and product\n    sum = 0\n    product = 1\n    # Compute sum of products of sublists of length 1 to n\n    for i in range(1, n+1):\n        sum += i*arr[i-1]\n        # Compute product of sublists of length i to n\n        for j in range(n-i+1):\n            product *= arr[j]\n            product //= arr[j+i-1]\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize variables\n    n = len(arr)\n    MOD = 1000000007  # To handle large numbers\n    \n    # Find length of the largest subarray\n    max_length = 1\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            max_length += 1\n        else:\n            break\n            \n    # Create a boolean array to store whether an element is included in the subarray or not\n    included = [False] * max_length\n    \n    # Initialize variables to store sum of products and sum of squares of products\n    prod_sum = 0\n    prod_square_sum = 0\n    \n    # Calculate sum of products and sum of squares of products for each subarray\n    for i in range(max_length):\n        # If an element is included in the subarray, calculate the product and sum of squares of products\n        if included[i]:\n            prod_sum = (prod_sum + arr[i]) % MOD\n            prod_square_sum = (prod_square_sum + (arr[i] * arr[i])) % MOD\n        \n        # Move the window to the right and mark the element as included or not\n        for j in range(i+1, max_length):\n            if included[j]:\n                prod_sum = (prod_sum - arr[i] * arr[j]) % MOD\n                prod_square_sum = (prod_square_sum - arr[i] * arr[j] + arr[j] * arr[j]) % MOD\n            included[j] = True\n            \n    # Calculate sum of products of all possible sublists\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum = (subarray_sum + prod_sum * arr[i]) % MOD\n    \n    return subarray_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n    # Find the middle bit\n    middle_bit = int(n) ^ ((int(n) >> 1) ^ (int(n) >> 2) ^ (int(n) >> 3) ^ (int(n) >> 4))\n    # Toggle middle bit\n    if middle_bit % 2 == 0:\n        middle_bit = middle_bit // 2\n    else:\n        middle_bit = middle_bit * 2\n    # Update the number with the middle bit\n    n = int(n) ^ middle_bit\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**31)\n    \n    # calculate the middle bits\n    middle_bits = n ^ first_bit ^ last_bit\n    \n    # toggle the middle bits\n    middle_bits = middle_bits ^ 1\n    \n    # combine the first and last bits and the middle bits\n    result = first_bit ^ middle_bits ^ last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate over each bit of the binary representation of n\n    for i in range(length-1):\n        # Check if the current bit is odd (i.e., the ith bit is 1)\n        if n & (1 << i):\n            # Toggle the ith bit of the result variable\n            result |= (1 << i)\n    # Add the last bit of the binary representation of n\n    result |= n & (1 << (length-1))\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # Toggle the first and last bits of the number\n    n = (n & ~1) | (last_bit ^ first_bit)\n\n    # Extract the middle bits of the number\n    middle_bits = (n >> 1) & 0x7FFFFFFF\n\n    # Combine the first and last bits, middle bits and original number\n    return (middle_bits << 1) | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # set the first and last bits to 0\n    n = n & ~(1 << 0) & ~(1 << 31)\n    # clear the first and last bits\n    n = n & ~(1 << 1) & ~(1 << 30)\n    # toggle the middle bits\n    n = n ^ ((n ^ 1) & (1 << 2) & (1 << 3))\n    # set the first and last bits to 1\n    n = n | (1 << 0) | (1 << 31)\n    # clear the first and last bits\n    n = n | (1 << 1) | (1 << 30)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # extract the first and last bits\n    first_bit = n & 1\n    last_bit = n >> 15 & 1\n    \n    # set the first and last bits to opposite value\n    n = (n & 0xFFFF) ^ first_bit ^ last_bit\n    \n    # set the middle bits to opposite value\n    n = n ^ (n >> 2) ^ (n >> 4) ^ (n >> 6)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    # Toggle all other bits except the first and the last bit\n    n = n ^ ((first_bit << 31) | (last_bit << 30))\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1  # Extract the first bit of n\n    last_bit = n & (1 << 31)  # Extract the last bit of n\n    n = n ^ (first_bit | last_bit)  # Toggle the first and last bits and then xor with n\n    middle_bits = n & 3  # Extract the middle bits of n\n    return n ^ (middle_bits ^ first_bit)  # XOR with middle bits and first bit to toggle middle bits only"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    first_bit = n & (1 << 31)  # check if the first bit is set\n    last_bit = n & (1 << 0)  # check if the last bit is set\n    middle_bits = (n ^ ((n & 1) << 1) ^ (n & (-n))) << 1  # toggle bits of middle bits\n    n = first_bit | last_bit | middle_bits  # set the middle bits to zero\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # initialize the first and last bit of the number\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    \n    # set the middle bits to the opposite of the first and last bits\n    middle_bits = (first_bit ^ 1) ^ (last_bit ^ 1)\n    \n    # combine the middle bits with the original number\n    n = (n & ~(1 << 0)) | (middle_bits << 0)\n    n = (n & ~(1 << 1)) | (middle_bits << 1)\n    n = (n & ~(1 << 2)) | (middle_bits << 2)\n    n = (n & ~(1 << 3)) | (middle_bits << 3)\n    n = (n & ~(1 << 4)) | (middle_bits << 4)\n    n = (n & ~(1 << 5)) | (middle_bits << 5)\n    n = (n & ~(1 << 6)) | (middle_bits << 6)\n    n = (n & ~(1 << 7)) | (middle_bits << 7)\n    n = (n & ~(1 << 8)) | (middle_bits << 8)\n    n = (n & ~(1 << 9)) | (middle_bits << 9)\n    n = (n & ~(1 << 10)) | (middle_bits << 10)\n    n = (n & ~(1 << 11)) | (middle_bits << 11)\n    n = (n & ~(1 << 12)) | (middle_bits << 12)\n    n = (n & ~(1 << 13)) | (middle_bits << 13)\n    n = (n & ~(1 << 14)) | (middle_bits << 14)\n    n = (n & ~(1 << 15)) | (middle_bits << 15)\n    n = (n & ~(1 << 16)) | (middle_bits << 16)\n    n = (n & ~(1 << 17)) | (middle_bits << 17)\n    n = (n & ~(1 << 18)) | (middle_bits << 18)\n    n = (n & ~(1 << 19)) | (middle_bits << 19)\n    n = (n & ~(1 << 20)) | (middle_bits << 20)\n    n = (n & ~(1 << 21)) | (middle_bits << 21)\n    n = (n & ~(1 << 22)) | (middle_bits << 22)\n    n = (n & ~(1 << 23)) | (middle_bits << 23)\n    n = (n & ~(1 << 24)) | (middle_bits << 24)\n    n = (n & ~(1 << 25)) | (middle_bits << 25)\n    n = (n & ~(1 << 26)) | (middle_bits << 26)\n    n = (n & ~(1 << 27)) | (middle_bits << 27)\n    n = (n & ~(1 << 28)) | (middle_bits << 28)\n    n = (n & ~(1 << 29)) | (middle_bits << 29)\n    n = (n & ~(1 << 30)) | (middle_bits << 30)\n    n = (n & ~(1 << 31)) | (middle_bits << 31)\n    \n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the index of the value to be inserted\n    index = bisect.bisect_left(a, x)\n\n    # If the value is already present in the list, return its index\n    if a[index] == x:\n        return index\n\n    # If the value is less than the list element, it is inserted to the left of the index\n    if x < a[index-1]:\n        return index - 1\n\n    # If the value is greater than the list element, it is inserted to the right of the index\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list and a value x and returns the left insertion point of x in the list.\n    If the value x is not in the list, it returns the index where it would be inserted.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): sorted list of numbers\n    x (int): the value to be searched\n\n    Returns:\n    int: index of the left insertion point for x in a\n    \"\"\"\n    # Use binary search to find the left insertion point\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If the value is not found in the list, return the index where it should be inserted\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function locates the left insertion point for a specified value in sorted order.\n    \n    :param a: sorted list of integers\n    :param x: the integer to locate\n    :return: index of the left insertion point if found, -1 otherwise\n    \"\"\"\n    # Use bisect to search for the insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is found, return its index\n    if a[index] == x:\n        return index\n    # If the value is not found, return -1\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return index + 1\n        else:\n            return index\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: a sorted list of integers\n    :param x: the integer value to be inserted\n    :return: the left insertion point of the specified value in the sorted list\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.search(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 using recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    def helper(i):\n        if i == 0:\n            return 1\n        else:\n            return i * helper(i-1)\n\n    return helper(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n): \n    # calculate the nth triangular number\n    tn = n*(n+1)//2\n    # calculate the number of digits\n    d = int(math.log10(tn)) + 1\n    # if the number of digits is equal to n, return tn\n    if d == n: \n        return tn\n    # otherwise, calculate the index of the smallest triangular number with n digits\n    else: \n        # calculate the index of the smallest triangular number with n digits\n        index = find_Index(n-1)\n        # repeat step 4 for each index from 1 to the index of the smallest triangular number with n digits\n        for i in range(index+1): \n            # calculate the smallest triangular number with n digits\n            sn = tn - i*(i+1)//2\n            # calculate the number of digits of sn\n            sd = int(math.log10(sn)) + 1\n            # if the number of digits of sn is equal to n, return i\n            if sd == n: \n                return i\n        # if no index found, return 0\n        return 0"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    # initialize variables\n    i = 1\n    triangular_number = 1\n    while True:\n        triangular_number += i\n        # check if it has n digits\n        digits = len(str(triangular_number))\n        if digits == n:\n            # return the index\n            return i\n        # increment i\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    for i in range(n, 0, -1):\n        triangular_number = (10**i - 1) // 9 * 9 + 1\n        index = (n - 1) - math.log10(triangular_number) + math.log10(10)\n        if index == n:\n            return i\n        if index == 0:\n            return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize variables \n    triangular_num = [1] \n    index = 1 \n\n    # Calculate the triangular numbers up to 10^n \n    while len(str(triangular_num[-1])) < n: \n        triangular_num.append(triangular_num[-1] + 1) \n        index += 1 \n\n    # Return the index of the smallest triangular number \n    return index - 1 "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function calculates the index of the smallest triangular number with n digits using the \n    formula provided in the question.\n    '''\n    triangular_number = 10**(n-1)\n    index = 1\n\n    while triangular_number <= 10**n:\n        triangular_number += index\n        index += 1\n\n    return index-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    dp = []\n    dp.append(1)\n    for i in range(2, n+1):\n        if i < n:\n            # Add 1 to the number of digits\n            n += 1\n        else:\n            # Subtract 1 from the number of digits\n            n -= 1\n        # Calculate the next triangular number\n        dp.append(dp[i-1] + dp[i-2])\n    # Return the index of the smallest triangular number with n digits\n    return dp.index(min(dp)) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def get_smallest_triangular_number(n):\n        # To find smallest triangular number with n digits, we need to find the first triangular number with n digits\n        # and then find the next triangular number with n-1 digits and return the index of that number\n        \n        triangular_number = 0\n        for i in range(1, n+1):\n            triangular_number += i\n            triangular_number = math.ceil(triangular_number/10) * 10 # Round up the triangular number and multiply by 10\n            \n        return triangular_number\n    \n    index = get_smallest_triangular_number(n)\n    \n    return index - 1 # Subtract 1 to get the index of the smallest triangular number with n digits"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Checks if a given number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        Returns the next prime number after the given number.\n        \"\"\"\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def triangular_numbers(n):\n        \"\"\"\n        Generates n triangular numbers.\n        \"\"\"\n        num = 1\n        while True:\n            yield num\n            num += next_prime(num)\n\n    def smallest_triangular_number(n):\n        \"\"\"\n        Returns the smallest triangular number with n digits.\n        \"\"\"\n        triangular_list = list(triangular_numbers(n))\n        min_num = min(triangular_list)\n        return triangular_list.index(min_num) + 1\n\n    return smallest_triangular_number(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Function to calculate the nth triangular number\n    def nth_triangular(n):\n        return math.factorial(n) // (math.factorial(n-1) * (2*n-1))\n    \n    # Function to find the index of smallest triangular number with n digits\n    def index_of_smallest_triangular(n):\n        triangular = nth_triangular(n)\n        index = 0\n        \n        # Iterating through all the numbers from 1 to the square root of the triangular number\n        while triangular > 1:\n            index += 1\n            triangular = nth_triangular(index)\n        \n        return index\n    \n    # Return the index of smallest triangular number with n digits\n    return index_of_smallest_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    index = (n * (n+1)) // 2\n    return index - 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # if the current element is not the last one, add the current element to the dictionary\n        if i < len(test_tup)-1:\n            my_dict[test_tup[i]] = test_tup[i+1]\n        # if the current element is the last one, add the current element to the dictionary with the key as None\n        else:\n            my_dict[None] = test_tup[i]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dict_obj = {}\n\n    # Convert the tuple to a list of tuples\n    tup_list = list(test_tup)\n\n    # Iterate through the list and add the adjacent pairs to the dictionary\n    for i in range(0, len(tup_list), 2):\n        key = tup_list[i]\n        value = tup_list[i+1]\n        dict_obj[key] = value\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    # Loop through the tuple elements\n    for i in range(len(test_tup)):\n        # If the current element is not None\n        if test_tup[i] is not None:\n            # Add the key-value pair to the dictionary\n            dict_obj[i] = test_tup[i]\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: The length of the tuple must be even\")\n        return\n    else:\n        new_dict = {}\n        for i in range(0, len(test_tup)-1, 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            new_dict[key] = value\n        return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    i = 0\n    while i < len(test_tup):\n        new_dict[i] = test_tup[i+1]\n        i += 2\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    dict_obj = {}\n\n    # loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and checks whether all the characters in the string are the same or not.\n    \"\"\"\n\n    # Check if the length of the string is 1 or not\n    if len(s) == 1:\n        return True\n\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Loop through each character of the string\n    for char in s:\n        # Check if the character is the same as the first character\n        if char!= first_char:\n            # If the character is not the same, return False\n            return False\n\n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as an input and checks whether all the characters are same or not.\n    \"\"\"\n    # Converting the string into a list of characters\n    char_list = list(s)\n    # Checking if the length of the list is 1 or not\n    if len(char_list) == 1:\n        return True\n    # Checking if all the characters in the list are same or not\n    else:\n        for i in range(1, len(char_list)):\n            if char_list[i]!= char_list[0]:\n                return False\n    # If all the conditions are satisfied, then all the characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to lowercase to ignore the case of the characters\n    s = s.lower()\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Loop through the remaining characters of the string\n    for char in s[1:]:\n        # If any two characters are different, return False\n        if char!= first_char:\n            return False\n        # Update the first_char variable with the next character of the string\n        first_char = char\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    s = list(s)\n\n    # Get the first character of the list\n    first_char = s[0]\n\n    # Check if all the characters in the list are equal to the first character\n    for i in range(len(s)):\n        if s[i]!= first_char:\n            return False\n\n    # If all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # initialize the first character of the string\n    first_char = s[0]\n\n    # loop through the rest of the string\n    for char in s[1:]:\n        # if the current character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    lst = list(s)\n\n    # Check if the length of the list is equal to 1\n    if len(lst) == 1:\n        return True\n\n    # Compare the first character of the list with the second character\n    if lst[0] == lst[1]:\n        # Check if all the characters are same or not\n        for i in range(2, len(lst)):\n            if lst[i]!= lst[0]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = []\n    for char in s:\n        if char not in char_list:\n            char_list.append(char)\n    if len(char_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Initialize a boolean variable to keep track of whether all characters are same or not\n    is_same = True\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Check if the current character is the same as the first character in the string\n        if s[i]!= s[0]:\n            # If any character is not the same, set the boolean variable to False\n            is_same = False\n            break\n    \n    # Return the boolean value indicating whether all characters are same or not\n    return is_same"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*(side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Find the semi-perimeter of the tetrahedron\n    semi_perimeter = (3*side)/2\n    \n    # Use Heron's formula to calculate the area of the tetrahedron\n    area = math.sqrt(semi_perimeter**2 + side**2 + side**2)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side/2\n    s = (3*half_perimeter**2)/10\n    a = half_perimeter**2\n    area = math.sqrt(s - a)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    return (6 * side ** 2) / (4 * math.tan(30))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (3 * side ** 2) ** 0.5\n    return (1/6) * s ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Using Heron's formula to calculate the area of a triangle\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    semi_perimeter = (side*side + side*side + side*side + side*side) ** (1/2)\n\n    # calculate the area using Heron's formula\n    area = (1/3) * semi_perimeter ** 2\n\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If the list has only one item, then there is no rotation to be done\n    if n == 1:\n        return list\n\n    # Calculate the new length of the list after rotation\n    new_length = n - m\n    \n    # Create a new empty list to store the rotated items\n    rotated_list = []\n    \n    # Rotate the list by m items to the right\n    for i in range(m):\n        # If the current index is not m, then rotate the current item to the left\n        if i < m - 1:\n            rotated_list.append(list[i])\n        else:\n            # If the current index is m-1, then rotate the first item to the right and append it to the rotated list\n            rotated_list.append(list[i - m + 1])\n    \n    # Append the remaining items from the original list to the rotated list\n    for i in range(n):\n        if i < m - 1:\n            rotated_list.append(list[i])\n        else:\n            rotated_list.append(list[i - m + 1])\n    \n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:]\n    list.extend(list[:m])\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction using the slicing method. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m], list[n-m:] = list[n-m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates the given list by the specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:-m]\n    list[:m] = [None] * m\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Find the number of items to be rotated\n    k = m % n\n    # If m is greater than or equal to n, then no rotation is needed\n    if k == 0:\n        return list\n    # Copy the last m items to the beginning of the list\n    list[n - k:] = list[:n - k]\n    # Reverse the first k items\n    list[:k] = list[:k][::-1]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m == 0 or m == n:\n        return list\n    \n    # Find the minimum number of rotations required to rotate the list by m items\n    # to the right\n    temp = m % n\n    if temp == 0:\n        rotations = m // n\n    else:\n        rotations = (m // n) + 1\n        \n    # Traverse the list and reverse the sub-list between 0 and m-1 (inclusive)\n    # and append it at the end of the list\n    for i in range(n):\n        if i < rotations:\n            list[i:i+1] = list[m-i:m]\n        else:\n            list.append(list[i-rotations:i])\n\n    # Reverse the entire list\n    list = list[::-1]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda num: all(int(digit) in str(num) for digit in str(num)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters, startnum and endnum, which represent the range of numbers we want to check for divisible by every digit in the number.\n    The function returns a list of all such numbers.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = set()\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digits.add(int(digit))\n    return list(filter(lambda x: all(x % d == 0 for d in digits), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digit_sum = lambda n: sum(int(d) for d in str(n))\n    return list(filter(lambda x: x == digit_sum(x), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(map(lambda digit: x % digit == 0, range(10))), range(startnum, endnum + 1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        A = math.pi * r**2 * math.sin(a/180*math.pi)\n        return A\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle to degrees\n    a = a * (180/math.pi)\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area\n    area = math.pi * r**2 * a/360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    area = r * a * math.pi / 180\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # If angle is greater than 360 degrees, return None\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula: A = pi * r^2 * sin(a/180*pi)\n    # Convert angle from degrees to radians\n    a = math.radians(a)\n    A = math.pi * r**2 * math.sin(a)\n    \n    # Return the area of the sector\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r * r * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Find the area of a sector.\n\n    Parameters:\n    r (float): the radius of the sector\n    a (float): the angle of the sector (in degrees)\n\n    Returns:\n    float: the area of the sector, or None if the angle is larger than 360 degrees.\n    \"\"\"\n    # Convert the angle to radians\n    a = math.radians(a)\n\n    # Check if the angle is larger than 360 degrees\n    if a > math.pi * 2:\n        return None\n\n    # Calculate the area of the sector\n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        print(\"The angle is larger than 360 degrees. Area cannot be calculated.\")\n        return None\n    \n    # calculate area of the sector using formula A = \u03c0r\u00b2 * sin(a)\u00b2\n    area = math.pi * r**2 * math.sin(a)**2\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = r * r * math.sin(math.radians(a/2))\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize an empty dictionary to store the length of the longest common subsequence for each subsequence\n    # as we go through the three string sequences\n    lcs_length = {}\n\n    # Initialize an empty list to store the common subsequences found so far\n    common_subsequences = []\n\n    # Initialize the length of the longest common subsequence found so far\n    lcs_length[(\"\", \"\", \"\")] = 0\n\n    # Loop through all possible substrings of X and Y and check if they are present in Z\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # Check if the substring is already present in the dictionary\n                if (i, j, k) in lcs_length:\n                    continue\n\n                # If the substring is not present, check if it is present in X and Y and not present in Z\n                if (i, j, k) not in lcs_length and X[i-1] == Y[j-1] == Z[k-1]:\n                    # If the substring is present in X and Y and not present in Z, add it to the dictionary\n                    lcs_length[(i, j, k)] = lcs_length[(i-1, j-1, k-1)] + 1\n\n                    # If the length of the longest common subsequence found so far is greater than or equal to the length of the current subsequence,\n                    # add it to the common_subsequences list\n                    if lcs_length[(i, j, k)] > lcs_length[(\"\", \"\", \"\")]:\n                        common_subsequences = [(X[i-1], Y[j-1], Z[k-1])]\n\n    return common_subsequences\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store lengths of longest common subsequences\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # backtrack to find the longest common subsequence\n    i = m\n    j = n\n    k = p\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        elif dp[i - 1][j][k] == dp[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0 for j in range(o+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    lcs = []\n    i = m\n    j = o\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X) \n    N = len(Y) \n    O = len(Z) \n\n    # Create a table to store lengths of longest common subsequences of \n    # substrings of X, Y and Z \n    lcs = [[[0 for j in range(O+1)] for i in range(M+1)] for k in range(N+1)] \n\n    # Build table in bottom up manner \n    for i in range(1, M+1): \n        for j in range(1, N+1): \n            for k in range(1, O+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else: \n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]) \n\n    # Return the length of the longest common subsequence \n    return lcs[M][N][O]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of subproblems\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1] and Z[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # the LCS is stored in L[m][p]\n    lcs = \"\"\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and Z[i - 1] == Z[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Find the length of each string\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store length of LCS for all possible prefixes of X, Y and Z\n    table = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    table[i][j][k] = table[i - 1][j][k]\n                elif Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i][j - 1][k]\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i - 1][j - 1][k - 1])\n\n    # Now we need to backtrack to find the actual LCS\n    i = m\n    j = n\n    k = o\n\n    # Initialize the LCS as an empty string\n    lcs = \"\"\n\n    # Keep track of the prefixes of X, Y and Z\n    prefixes = [(i - 1, j - 1, k - 1)]\n\n    # While we have prefixes left, we can move towards the LCS\n    while prefixes:\n        # Get the last prefix\n        i, j, k = prefixes.pop()\n\n        # If the last character of the prefix is same as the first character of X, then we can include it in the LCS and move towards the next character\n        if X[i] == X[i - 1]:\n            lcs += X[i]\n            i -= 1\n\n        # If the last character of the prefix is same as the first character of Y, then we can include it in the LCS and move towards the next character\n        elif Y[j] == Y[j - 1]:\n            lcs += Y[j]\n            j -= 1\n\n        # If the last character of the prefix is same as the first character of Z, then we can include it in the LCS and move towards the next character\n        elif Z[k] == Z[k - 1]:\n            lcs += Z[k]\n            k -= 1\n\n        # If the last character of the prefix is not same as the first character of X, Y or Z, then we can either move towards the next prefix or exclude it and move backwards\n        else:\n            # If the length of the LCS is greater than the length of the current prefix, then we can move towards the next prefix\n            if len(lcs) > len(X[i] + Y[j] + Z[k]):\n                i -= 1\n                j -= 1\n                k -= 1\n\n            # Otherwise, we can exclude the current prefix and move backwards\n            else:\n                i -= 1\n                j -= 1\n                k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k-1])\n\n    L = dp[m][n][p]\n    lcs = []\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]: \n            i -= 1\n        elif dp[i-1][j][k] == dp[i][j][k-1]: \n            j -= 1\n        else: \n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store LCS lengths of subproblems\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the LCS lengths table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j][k] = L[i - 1][j][k]\n                elif X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i][j - 1][k - 1]\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Initialize variables to store the length of LCS and the LCS itself\n    lcs_len = L[m][n][p]\n    lcs = \"\"\n\n    # Fill the LCS in the given order\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Y[j - 1]:\n            i -= 1\n            j -= 1\n        elif X[i - 1] == Z[k - 1]:\n            i -= 1\n            k -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    # Return the LCS length and the LCS itself\n    return lcs_len, lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a dictionary to store LCS lengths\n    dp = {}\n\n    # Fill the dictionary with base cases\n    for i in range(len(X) + 1):\n        dp[i] = [0] * (len(Y) + 1)\n\n    # Fill the dictionary using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Backtrack to find the actual LCS\n    lcs = []\n    i = len(X)\n    j = len(Y)\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function will find the longest common subsequence (LCS) of three given strings.\n    It uses dynamic programming to solve this problem.\n\n    Args:\n    X (str): First string.\n    Y (str): Second string.\n    Z (str): Third string.\n\n    Returns:\n    str: LCS of the given three strings.\n    \"\"\"\n\n    # create a list to store the lengths of LCS for all prefixes of X, Y, and Z\n    len_X = [0] * (len(X) + 1)\n    len_Y = [0] * (len(Y) + 1)\n    len_Z = [0] * (len(Z) + 1)\n\n    # Fill the list using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    len_X[i] = len_Y[j] = len_Z[k] = len_X[i] + 1\n                else:\n                    len_X[i] = max(len_X[i], len_Y[j])\n                    len_Y[j] = max(len_Y[j], len_Z[k])\n                    len_Z[k] = max(len_Z[k], len_X[i], len_Y[j])\n\n    # find the LCS by traversing the lengths list\n    LCS = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            LCS = X[i - 1] + LCS\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Y[j - 1]:\n            i -= 1\n        elif X[i - 1] == Z[k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return LCS"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphanumeric characters except underscore and space\n    str2 = re.sub(r'[^\\w\\s_]', '', str1)\n\n    # Split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str2)\n    words = [' '.join([word[0].upper(), word[1:].lower()]) for word in words]\n\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define the regular expression pattern to match capital letters\n    pattern = r'[A-Z]'\n    # Define a list to store the words in the string\n    words = re.findall(pattern, str1)\n    # Iterate over the list of words and check if the first letter of the word is capital\n    for word in words:\n        if word[0].isupper():\n            # If the word starts with a capital letter, insert a space before it\n            str1 = str1.replace(word,'' + word)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first letter of each word and join the words with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define regex pattern for capital words\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    \n    # find all matches in the string using regex pattern\n    matches = re.findall(pattern, str1)\n    \n    # loop through matches and insert spaces between words starting with capital letters\n    for match in matches:\n        # find the index of the start of the match\n        index = str1.index(match)\n        # insert spaces before the match\n        str1 = str1[:index] +'' + str1[index:]\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # split the string into words\n    words = str1.split()\n    # loop through the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].upper() + words[i][1:]\n    # join the words with spaces\n    str1 =''.join(words)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regex to split the string into words\n    words = re.findall(r'\\b[A-Z]\\w+\\b', str1)\n    # Splitting each word into individual characters\n    words_list = []\n    for word in words:\n        words_list += list(word)\n    # Putting spaces between the capital letters\n    for i in range(len(words_list)):\n        if words_list[i].isupper():\n            if words_list[i-1].isupper():\n                words_list[i] ='' + words_list[i]\n            else:\n                words_list[i] = words_list[i] +''\n    # Joining the words into a string\n    result = ''.join(words_list)\n    # Removing any leading or trailing spaces\n    result = result.strip()\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+[A-Z]\\w*\\b', str1)\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match capitalized words\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Iterate through each word in the input string\n    for word in pattern.findall(str1):\n        # Check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # Replace the capitalized word with spaces before and after\n            str1 = str1.replace(word,''+word+' ')\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words using whitespace as the delimiter\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # loop through the list of words and capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n\n    # join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of floats\n    nums_float = [float(num) for num in nums_str]\n    \n    # Sort the list of floats in ascending order\n    nums_float.sort()\n    \n    # Convert the sorted list of floats back to a list of strings\n    nums_sorted_str = [str(num) for num in nums_float]\n    \n    return nums_sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    nums = [int(s) for s in nums_str if s.isdigit()]\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to integers\n    nums = [int(i) for i in nums_str]\n    # Sort the list in numeric order\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(i) for i in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert the list of strings into a list of integers\n    nums = [int(n) for n in nums_str]\n    # Sort the list of integers numerically\n    nums.sort()\n    # Convert the sorted list of integers back into a list of strings\n    sorted_nums_str = [str(n) for n in nums]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def numeric_sort(s):\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return sorted(nums_str, key=numeric_sort)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str.sort(key=lambda x: [float(y) for y in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and sorts them in numerical order.\n    '''\n    # Split the list of strings into a list of integers\n    nums_int = [int(num) for num in nums_str]\n    \n    # Use the sorted() function to sort the list of integers in numerical order\n    sorted_nums = sorted(nums_int)\n    \n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n    \n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Remove non-numeric characters from each string\n    nums_str = [re.sub(r'\\D', '', num) for num in nums_str]\n\n    # Convert each string to a numeric value\n    nums = [int(num) for num in nums_str]\n\n    # Sort the numeric values\n    nums.sort()\n\n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all numbers to float\n    nums_float = [float(num) for num in nums_str]\n    # sort the float numbers using the built-in sort() function\n    nums_float.sort()\n    # convert the sorted float numbers back to strings\n    nums_str = [str(num) for num in nums_float]\n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The new list is:\", test_list)\n    print(\"The updated tuple is:\", test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n\n    # Create a new list to store the updated values\n    new_list = test_list.copy()\n\n    # Loop through each element in the tuple and add it to the list\n    for item in test_tup:\n        new_list.append(item)\n\n    # Return the updated list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[2 * i] > arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the current index is greater than the length of the array, return True as we have reached the end of the array.\n    if i > len(arr):\n        return True\n\n    # Check if the left child of the current index is greater than the current index.\n    if i * 2 <= len(arr) and arr[i] > arr[i * 2]:\n        return False\n\n    # Recursively call the function for the left and right children of the current index.\n    return check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1)\n\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap, False otherwise.\n    '''\n\n    # Return the result of the helper function.\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Find the last non-leaf node\n    n = len(arr) // 2\n\n    # Traverse down the array, comparing the parent node with its children\n    while n >= 0:\n        # If the parent node is greater than its children, return False\n        if arr[n] > min(arr[2*n+1], arr[2*n+2]):\n            return False\n        n -= 1\n\n    # If the function has returned False, it means the array represents a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[(i-1)//2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n//2+1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    if i >= len(arr) // 2:\n        return True\n    left_child = 2 * i\n    right_child = 2 * i + 1\n    \n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Base case\n    if i == 0:\n        return True\n    # Check if the current node is greater than the parent node\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    # Recursively check the children nodes of the current node\n    return check_min_heap_helper(arr, (i-1)//2)\n\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return True\n    # Recursively check the first node of the array\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if it is a min heap or False otherwise.\n    '''\n    for i in range(len(arr)//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr)):\n        if arr[i] > arr[0]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i == n - 1:\n        return True\n    if arr[i] < arr[i+1]:\n        return False\n    return check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 1 and arr[i] < arr[i//2]:\n        return False\n    if i*2 <= len(arr) and arr[i] > arr[i*2]:\n        return False\n    if i*2+1 <= len(arr) and arr[i] > arr[i*2+1]:\n        return False\n    return True\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n    Time Complexity: O(n)\n    '''\n    # Check if the current index is the last index of the array\n    if i == len(arr) // 2:\n        # Check if the root is greater than the left child and the right child\n        if arr[i] > arr[2 * i] and arr[i] > arr[2 * i + 1]:\n            return True\n        else:\n            return False\n    else:\n        # Check if the left child is greater than the root and the right child\n        if arr[i] > arr[2 * i] and arr[i] > arr[2 * i + 1]:\n            return False\n        else:\n            # Recursively check the left and right children\n            return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n    Time Complexity: O(n)\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n    else:\n        # Recursively check the array with the helper function\n        return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n    return jacobsthal_list[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize variables\n        prev_num = 1  # Previous number\n        num = 0  # Current number\n        jacobsthal_num = 0  # Jacobsthal number\n        \n        # Loop for n-1 times\n        for i in range(n-1):\n            # Update previous and current numbers\n            prev_num = num\n            num = (2*prev_num - jacobsthal_num) % 1000000007  # Calculate next number\n            jacobsthal_num = prev_num\n        \n        return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 4 * jacobsthal_num((n-1)//2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob = 0\n    lucas = 1\n    while n > 1:\n        if n % 2 == 0:\n            jacob += lucas\n            n //= 2\n        else:\n            lucas += jacob\n            n -= 1\n    return lucas"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_list = [0, 1]\n    jacobsthal = 1\n    \n    # loop till n-th jacobsthal number\n    for i in range(2, n+1):\n        # find next jacobsthal number by adding the two previous numbers in the list\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n        jacobsthal = jacobsthal_list[i]\n    \n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two terms of the sequence\n    jacobsthal_seq = [0, 1]\n    # Loop through the remaining terms of the sequence\n    for i in range(2, n+1):\n        # Add the previous two terms of the sequence\n        jacobsthal_seq.append(jacobsthal_seq[-1] + jacobsthal_seq[-2])\n    return jacobsthal_seq[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        c = 0\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev_num = 0\n        current_num = 1\n        for i in range(2, n+1):\n            temp = current_num\n            current_num = current_num + prev_num\n            prev_num = temp\n        return current_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize jacobsthal number array\n    jacobsthal = [0, 1]\n\n    # Iterate through array to find nth jacobsthal number\n    for i in range(2, n + 1):\n        # Add jacobsthal number to array\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n\n    # Return nth jacobsthal number\n    return jacobsthal[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    a = 1\n    b = 1\n    for i in range(n):\n        j += a\n        a, b = b, a + b\n    return j"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # sort the list in descending order\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # initialize min_list with the first K records of the sorted list\n    min_list = sorted_list[:K]\n\n    # return the min_list\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    result = []\n    for i in range(K):\n        result.append(test_list[i][0])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples by the second element (i.e., the second element of each tuple)\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables to keep track of the minimum k records found so far and the indices of the minimum k records\n    min_k_records = []\n    min_k_indices = []\n    for i in range(K):\n        min_k_indices.append(-1)\n\n    # Iterate through the sorted list of tuples\n    for i, (a, b) in enumerate(test_list):\n        # Check if the current tuple's second element is the smallest so far\n        if i < min_k_indices[0] or (i == min_k_indices[0] and b < min_k_records[0][1]):\n            min_k_records = [(a, b)]\n            min_k_indices[0] = i\n        # Check if the current tuple's second element is already in the list of minimum k records\n        elif i == min_k_indices[0] and b == min_k_records[0][1]:\n            min_k_records.append((a, b))\n        # Check if there are more than K minimum k records so far\n        elif len(min_k_records) == K:\n            # Remove the first record from the list of minimum k records\n            min_k_records.pop(0)\n            # Add the current tuple to the list of minimum k records\n            min_k_records.append((a, b))\n            # Update the index of the minimum k record to the current index\n            min_k_indices[0] = i\n\n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize the minimum count as infinity\n    min_count = float('inf')\n    # initialize the minimum records as an empty list\n    min_records = []\n    \n    for i in range(len(test_list)):\n        # check if the count is less than k and if the current count is less than the minimum count\n        if len(min_records) < K and len(min_records) < test_list[i][1]:\n            min_count = test_list[i][1]\n            min_records = [test_list[i]]\n        # if the current count is equal to the minimum count, add the current record to the list\n        elif len(min_records) == test_list[i][1]:\n            min_records.append(test_list[i])\n    \n    return min_records, min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize min_value as first element of the sorted list\n    min_value = test_list[0][1]\n\n    # Iterate over the list and update min_value if the size of the list is less than K\n    i = 1\n    while i < len(test_list) and len(test_list) - i >= K:\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n        i += 1\n\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_lst = []\n    # Find the minimum K records\n    for tup in test_list:\n        if len(min_lst) < K:\n            min_lst.append(tup)\n        else:\n            min_lst = sorted(min_lst)[K:]\n            min_lst.append(tup)\n    # Return the minimum K records\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(min(test_list, key=lambda x: x[1]))\n        test_list = [item for item in test_list if item[1]!= min_list[i][1]]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Create an empty dictionary to store the minimum values\n    min_values = {}\n    \n    # Iterate over the first K elements of the list\n    for i in range(K):\n        # If the current element has the smallest value, update the minimum value for that key in the dictionary\n        if test_list[i][1] in min_values:\n            min_values[test_list[i][1]] = min(min_values[test_list[i][1]], test_list[i][0])\n        else:\n            min_values[test_list[i][1]] = test_list[i][0]\n    \n    # Create a new list to store the minimum k records\n    min_k_records = []\n    \n    # Iterate over the list again and add the minimum value for each key to the new list\n    for i in range(K, len(test_list)):\n        if test_list[i][1] in min_values:\n            min_k_records.append((test_list[i][0], min_values[test_list[i][1]]))\n    \n    # Return the new list containing the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        elif test_list[i] < min_list[0]:\n            min_list[0] = test_list[i]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    # Sort the test_list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum count as infinity\n    min_count = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # Check if the count of the current tuple is smaller than the minimum count\n        if sorted_list[i][1] < min_count:\n            min_count = sorted_list[i][1]\n\n    return min_count"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n            common_elements = list(set(common_elements))\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n    \n    # Iterate through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at that index is present in l2 and l3\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in common_elements:\n                common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # Loop through all indices in the first list\n    for i in range(len(l1)):\n        # Check if the element at this index is also in all other lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n        elif l1[i] in l2:\n            common_elements.append(l1[i])\n        elif l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two elements.\"\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    if second_smallest == float('inf'):\n        return \"The list must have at least two elements.\"\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort() # Sort the list in ascending order\n    return numbers[1] # Return the second smallest element"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    # Find the second smallest element\n    second_smallest = numbers[1]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"List must have at least two numbers\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list is empty.\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    if len(numbers) == 0:\n        raise ValueError(\"List must not be empty\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Found match:\", result.group())\n    else:\n        print(\"No match found\")\n\ntext = \"abcabc\"\ntext_match_zero_one(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab.*')\n    return bool(pattern.match(text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'(?<=a)b+')\n    return pattern.findall(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a set to store the reversed strings\n    reversed_set = set()\n\n    # iterate through the list of strings\n    for string in test_list:\n        # convert the string to a list of characters\n        chars = list(string)\n\n        # reverse the list of characters\n        reversed_chars = chars[::-1]\n\n        # join the reversed list of characters into a string\n        reversed_string = ''.join(reversed_chars)\n\n        # check if the reversed string is already in the set\n        if reversed_string in reversed_set:\n            # if it is, increment the count of reverse pairs\n            reverse_pair_count += 1\n\n        # add the reversed string to the set\n        reversed_set.add(reversed_string)\n\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Initialize a dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    # Loop through each string in the list\n    for string in test_list:\n        \n        # Convert the string to a list of characters and reverse it\n        reversed_string = string[::-1]\n        \n        # Check if the reversed string is already in the dictionary\n        if reversed_string in count_dict:\n            # If it is, increment the count in the dictionary\n            count_dict[reversed_string] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[reversed_string] = 1\n            \n    # Initialize a variable to store the count of reverse pairs\n    reverse_pair_count = 0\n    \n    # Loop through the dictionary\n    for count in count_dict.values():\n        # If the count is greater than 1, increment the reverse pair count\n        if count > 1:\n            reverse_pair_count += (count*(count-1))/2\n            \n    return reverse_pair_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_lists = set(tuple(sorted(list1)) for i in range(len(list1)))\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Iterate over the unique lists and update the count dictionary\n    for unique_list in unique_lists:\n        count_dict[unique_list] = list1.count(unique_list)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist not in count:\n            count[sublist] = 1\n        else:\n            count[sublist] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in lst:\n        sublist = tuple(sublist)\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of lists\n    count_dict = {}\n    \n    # Loop through all lists in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            # If it's already in the dictionary, increment its value\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it's not in the dictionary, add it with a value of 1\n            count_dict[sublist_tuple] = 1\n            \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(tuple(sorted(x)) for x in list1))\n    sublist_count = {}\n    for sublist in list1:\n        if sublist not in sublist_count:\n            sublist_count[sublist] = 0\n        sublist_count[sublist] += list1.count(sublist)\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list to a tuple and count the number of occurrences\n    count_dict = {}\n    for i in list1:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each unique sublist\n    counts = {}\n    # loop through each list in the original list\n    for sublist in list1:\n        # convert the list to a tuple and check if it is already a key in the dictionary\n        if tuple(sublist) in counts:\n            # if it is, increment the count\n            counts[tuple(sublist)] += 1\n        else:\n            # if it is not, add it as a key in the dictionary with a value of 1\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    sublist_counts = {}\n    # loop through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in sublist_counts:\n            # if it does, increment the count\n            sublist_counts[tuple(sublist)] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a count of 1\n            sublist_counts[tuple(sublist)] = 1\n    # return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # loop through each element in the list1\n    for element in list1:\n        # convert the element to a tuple\n        tuple_element = tuple(element)\n        \n        # check if the tuple is already in the dictionary\n        if tuple_element in count_dict:\n            # increment the count of the tuple\n            count_dict[tuple_element] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple_element] = 1\n    \n    # return the dictionary of count of unique tuples\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(c for c in num if c.isdigit() or c == '.')\n\n    # Check if the input string is a decimal number with a precision of 2\n    if len(num) > 1 and '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        if '.' in num and len(num.split('.')[1]) > 2:\n            return False\n        return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        decimal_number = float(num)\n        if decimal_number.is_integer() and abs(decimal_number - int(decimal_number)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if num.count(\".\") == 1 and num.count(\".\") < len(num) and num.split(\".\")[1].count(\"0\") < 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input string contains only digits\n    if not num.isdigit():\n        return False\n    \n    # Convert the string to a float and check if it has a precision of 2\n    try:\n        num = float(num)\n        decimal_places = num.as_integer_ratio()[1]\n        if decimal_places!= 0 and decimal_places!= 1:\n            return False\n    except ValueError:\n        return False\n    \n    # If all checks pass, the string is a valid decimal number\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return False\n        elif str(num).count('.') > 1:\n            return False\n        else:\n            str_num = str(num).split('.')\n            if len(str_num[0]) > 2:\n                return False\n            elif len(str_num[1]) > 2:\n                return False\n            else:\n                return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\ndef is_decimal_with_precision(num, precision=2):\n    try:\n        float(num)\n        if len(str(float(num)).split('.')[1]) <= precision:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if number contains only digits\n    if not num.isdigit():\n        return False\n\n    # Check if number has 2 decimal places\n    decimal_places = num.count('.')\n    if decimal_places > 1 or (decimal_places == 1 and not num.endswith('.0')):\n        return False\n\n    # Check if number is not too large or too small\n    if int(num) > 9999 or int(num) < -9999:\n        return False\n\n    # Number is valid\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for char in num:\n        if char not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.']:\n            return False\n    if '.' not in num:\n        return False\n    dot_index = num.index('.')\n    if dot_index == 0 or dot_index == len(num) - 1:\n        return False\n    if len(num) - dot_index - 1 > 2:\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return \"The list contains duplicate elements.\"\n    else:\n        return \"The list contains only one distinct element.\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = []\n    for i in arr:\n        if i not in distinct_elements:\n            distinct_elements.append(i)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the distinct elements\n    unique_elements = set(arr)\n    \n    # Check if the length of the set is equal to 1\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to 1, which means that the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_element = set(arr)\n    if len(unique_element) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    \n    # If the length of the set is equal to 1, then the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            distinct_count += 1\n            if distinct_count > 1:\n                return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    unique_dict = {}\n    \n    for num in arr:\n        if num in unique_dict:\n            return False\n        else:\n            unique_dict[num] = True\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 30 days, False otherwise.\n    \"\"\"\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    return days_in_month[monthnum-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if monthnum3 in months.keys():\n        if months[monthnum3] == 31:\n            print(\"31 days\")\n        else:\n            print(\"30 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_num_dict = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in month_num_dict:\n        if month_num_dict[monthnum3] == 30:\n            print(\"The given month number contains 30 days.\")\n        else:\n            print(\"The given month number does not contain 30 days.\")\n    else:\n        print(\"Invalid month number. Please enter a valid month number from 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 % 2 == 0:\n        if monthnum3 % 3 == 0:\n            if monthnum3 % 4 == 0:\n                if monthnum3 % 5 == 0:\n                    return False\n                else:\n                    return True\n            else:\n                return True\n        else:\n            return True\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13) and monthnum3 % 3 == 0:\n        return True\n    elif monthnum3 in range(1,13) and monthnum3 % 3!= 0:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days[1] = 29\n        else:\n            days[1] = 28\n    return days[monthnum3-1]\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference and its indices\n    min_diff = arr[1] - arr[0]\n    min_diff_index = 0\n\n    # Traverse through the array\n    for i in range(1, n):\n        # Update minimum difference if current element minus previous element is smaller\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n            min_diff_index = i\n\n    # Return minimum difference and its indices\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Find the minimum difference\n    min_diff = abs(arr[1] - arr[0])\n\n    # Loop through the array to find the minimum difference\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    diff = float('inf')\n\n    # Initialize the minimum difference index as infinity\n    min_diff_index = float('inf')\n\n    # Iterate through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < diff and diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return arr[min_diff_index-1], arr[min_diff_index]"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and the size of the array as inputs.\n    It then finds the minimum difference between any two elements in the array\n    and returns the result.\n    '''\n    diff_set = set()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            diff_set.add(diff)\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    min_index = 0\n    max_index = n - 1\n\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    for i in range(n-2, -1, -1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Iterate over the array\n    for i in range(n-1):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n        \n        # Check if difference is less than minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as inputs and returns the minimum difference between any two elements in the array.\n    The function first calculates the absolute difference between all pairs of elements in the array.\n    Then, it sorts the absolute differences in ascending order.\n    Finally, it returns the minimum difference between any two elements.\n    '''\n    # calculate the absolute differences between all pairs of elements in the array\n    diff_list = [abs(arr[i] - arr[j]) for i in range(n) for j in range(i+1, n)]\n\n    # sort the absolute differences in ascending order\n    diff_list.sort()\n\n    # return the minimum difference between any two elements in the array\n    return diff_list[0]"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def sum_of_squares(n):\n        \"\"\"\n        Returns the sum of squares of digits of n.\n        \"\"\"\n        return sum([int(digit) ** 2 for digit in str(n)])\n\n    def is_polite_helper(n):\n        \"\"\"\n        Helper function to check if n is a polite number.\n        \"\"\"\n        if n < 10:\n            return n * (n + 1) // 2\n        else:\n            return n * (n + 1) // 2 + is_polite_helper(sum_of_squares(n))\n\n    return is_polite_helper(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a, b = 1, 1\n    while b < n:\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        first_term = 1\n        second_term = 1\n        for i in range(2, n):\n            nth_term = first_term + second_term\n            first_term = second_term\n            second_term = nth_term\n        return second_term"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n\n    # Define the limit for the polite numbers.\n    limit = 1000000000\n\n    # Initialize the counter variable.\n    count = 0\n\n    # Initialize the result variable.\n    result = 0\n\n    # Initialize the base variable.\n    base = 1\n\n    # Check if the base is less than or equal to zero.\n    while base <= 0:\n        base = input(\"Enter a positive integer: \")\n\n    # Calculate the nth polite number using the Sieve of Eratosthenes algorithm.\n    for i in range(2, limit):\n        if base % i == 0:\n            count += 1\n            if count == n:\n                result = base\n                break\n        elif i * i > limit:\n            break\n\n    # Return the nth polite number.\n    return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize the first two polite numbers\n    polite_number_1 = 1\n    polite_number_2 = 1\n\n    # Iterate through the remaining n-1 polite numbers\n    for i in range(2, n):\n        # Calculate the next polite number\n        next_polite_number = polite_number_1 + polite_number_2\n\n        # Check if the next polite number is divisible by 2\n        if next_polite_number % 2 == 0:\n            # If it is, then move to the next number and check again\n            polite_number_1 = polite_number_2\n            polite_number_2 = next_polite_number\n        else:\n            # If it is not, then move on to the next polite number\n            polite_number_2 = next_polite_number\n\n    return polite_number_2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        # First, we check if n is divisible by 2, then we check if it is divisible by 3\n        if n % 2 == 0 and n % 3 == 0:\n            return \"Invalid input\"\n        elif n % 2 == 0:\n            return \"Invalid input\"\n        else:\n            # We can use the math.factorial() function to calculate the number of divisors of n\n            # For example, 3! = 3 * 2 * 1 = 6\n            fact = math.factorial(n)\n            # We can use the math.sqrt() function to find the square root of the factorial\n            # For example, the square root of 6 is 2.4494\n            sqrt_fact = math.sqrt(fact)\n            # We can use the math.ceil() function to round up the square root to the nearest integer\n            # For example, 2.45 = 3\n            sqrt_fact_int = math.ceil(sqrt_fact)\n            # We can use the math.floor() function to round down the square root to the nearest integer\n            # For example, 2.44 = 2\n            sqrt_fact_floor = math.floor(sqrt_fact)\n            # Now we check if the square root of the factorial is equal to the square of the square root of the factorial\n            if sqrt_fact == sqrt_fact ** 2 and sqrt_fact_int == sqrt_fact_int ** 2 and sqrt_fact_floor == sqrt_fact_floor ** 2:\n                return \"Invalid input\"\n            else:\n                # Finally, we can use the math.floor() function to calculate the nth polite number\n                return str(math.floor(sqrt_fact))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    a, b = 1, 2\n    count = 1\n\n    # Loop until nth polite number is found\n    while count!= n:\n        # Calculate the next number\n        c = a + b\n\n        # Update the variables\n        a = b\n        b = c\n        count += 1\n\n    # Return the nth polite number\n    return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return n-1\n            else:\n                return n\n    return n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    # if n is less than or equal to 0, it's not a polite number\n    if n <= 0:\n        return False\n    \n    # if n is 1, it's a polite number\n    if n == 1:\n        return True\n    \n    # initialize a variable to count the number of polite numbers\n    count = 0\n    \n    # initialize a variable to store the factorial of n\n    factorial = math.factorial(n)\n    \n    # iterate from 2 to n\n    for i in range(2, n + 1):\n        # if the factorial of i divides the factorial of n, it's a polite number\n        if math.gcd(factorial, math.factorial(i)) == 1:\n            count += 1\n            if count == n:\n                return True\n    \n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_prime(num):\n        while not is_prime(num):\n            num += 1\n        return num\n    \n    polite_count = 0\n    next_prime_num = 1\n    \n    while polite_count < n:\n        if is_prime(next_prime_num):\n            polite_count += 1\n        next_prime_num = next_prime(next_prime_num)\n    \n    return next_prime_num"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    result = []\n    n = len(l1)\n    for i in range(n):\n        if i < n - 1:\n            result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # initialize an empty list to store the difference\n    diff_list = []\n    # loop through each element in the first list\n    for i in li1:\n        # check if the element is not in the second list\n        if i not in li2:\n            # if it's not, add it to the diff_list\n            diff_list.append(i)\n    # return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of li1 that are not in li2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    # Initialize an empty list to store the difference\n    diff_list = []\n\n    # Loop through each element in the first list\n    for i in li1:\n\n        # Check if the element is in the second list\n        if i in li2:\n            # If it is, remove it from the second list\n            li2.remove(i)\n        else:\n            # If it's not, add it to the difference list\n            diff_list.append(i)\n\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum_odd = 0\n    \n    while count < n:\n        if count % 2 == 1:\n            sum_odd += count ** 4\n            count += 1\n    \n    return sum_odd"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add fourth power of i to sum\n        sum += i**4\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer\")\n        return\n    \n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i*i\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n\nprint(odd_num_sum(10)) # Output: 214"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    i = 1\n    while i <= n:\n        sum_of_powers += i ** 4\n        i += 1\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum_fourth = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate fourth power of the current odd natural number\n        fourth_power = i ** 4\n        \n        # add fourth power to sum variable\n        sum_fourth += fourth_power\n    \n    # return the sum of fourth powers of odd natural numbers\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = i*3 + 1\n        if num % 2!= 0:\n            sum += num**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_of_fourth_powers = 0\n    # Iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of the current odd natural number\n        fourth_power = i ** 4\n        # Add fourth power to sum_of_fourth_powers variable\n        sum_of_fourth_powers += fourth_power\n    # Return the sum of fourth power of first n odd natural numbers\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top not in ['(', '[', '{']:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            elif char == ']' and stack[-1]!= '[':\n                return False\n            elif char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top >= len(exp)//2:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_parentheses = ['(', '[', '{']\n    closing_parentheses = [')', ']', '}']\n    parentheses_dict = {'(': ')', '[': ']', '{': '}'}\n\n    for char in exp:\n        if char in opening_parentheses:\n            stack.append(char)\n        elif char in closing_parentheses:\n            if not stack or parentheses_dict[stack.pop()]!= char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store opening parentheses\n    stack = deque()\n    \n    # loop through each character in the expression\n    for char in exp:\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a closing parenthesis, pop a matching opening parenthesis from the stack\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    \n    # if the stack is empty, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0 or stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in [')', ']'] and top_char!= '(':\n                return False\n            elif char in ['}', ']'] and top_char!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return \"Not Balanced\"\n            last_bracket = stack.pop()\n            if char == ')' and last_bracket == '(':\n                continue\n            elif char == '}' and last_bracket == '{':\n                continue\n            elif char == ']' and last_bracket == '[':\n                continue\n    return not stack\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the words with k length\n    k_length_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is equal to K\n        if len(word) == K:\n            # If it is, add it to the k_length_words list\n            k_length_words.append(word)\n    # Join the words in the k_length_words list into a single string\n    result =''.join(k_length_words)\n    # Return the result string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with length less than K\n    less_than_K_words = []\n    \n    # Loop through each word\n    for word in words:\n        # If the length of the word is less than K, append it to the less_than_K_words list\n        if len(word) < K:\n            less_than_K_words.append(word)\n    \n    # Join the list of less than K length words back into a string and return it\n    return''.join(less_than_K_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Iterate through the words list\n    new_list = []\n    for word in words:\n        # If the length of the word is not equal to K, add it to the new list\n        if len(word)!= K:\n            new_list.append(word)\n\n    # Join the new list of words into a string and return it\n    return''.join(new_list)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Create a new list to store the non-K-length words\n    new_words = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the new_words list\n        if len(word)!= K:\n            new_words.append(word)\n    # Join the words in the new_words list into a string and return it\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Remove all the words with k length in the given string.\n    \"\"\"\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Split the string into words\n    words = test_str.split()\n    # Initialize a list to store the final words\n    final_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # If it is, add the word to the final list\n            final_words.append(word)\n    # Join the final list of words with spaces and return the result\n    return''.join(final_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern,text)\n        if match:\n            return (match.group(),match.start(),match.end())\n        else:\n            return None\n    except Exception as e:\n        print(\"Error:\",e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # use finditer() to find all occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n\n    # initialize variables to store position and count of matches\n    position = 0\n    count = 0\n\n    # loop through matches and update position and count\n    for match in matches:\n        position = match.start()\n        count += 1\n\n    # if there are no matches, return None\n    if count == 0:\n        return None\n\n    # return the position and count of matches\n    return (position, count)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.start(), match.end(), match.group()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate through the matches and return a list of tuples containing the occurrence and position of the substring\n    if matches:\n        return [(match.start(), match.end()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return [(m.start(), m.end()) for m in result]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        for match in matches:\n            print(f\"Substring: '{match}' - Occurrence: {text.count(match)}, Position: {text.find(match)}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all occurrences of pattern in text using re.findall()\n    matches = re.findall(pattern, text)\n\n    # check if matches is empty or None\n    if not matches:\n        return None\n\n    # iterate through matches and return the first match and its position\n    for i, match in enumerate(matches):\n        return match, i"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # if index is odd\n            for j in range(nums[i]):  # check if there are odd numbers in the odd index\n                if nums[i] % 2 == 0:\n                    return False  # if there is a non-odd number in the odd index, return False\n    return True  # if all indexes contain odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(1, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 1:\n                count += 1\n        if count % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if i + 1 < len(nums):\n            if nums[i] % 2!= 0 and nums[i + 1] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # if i is even\n            if nums[i] % 2 == 0:  # if nums[i] is even\n                return False  # return False because an odd number was found in an even index\n        elif nums[i] % 2 == 0:  # if nums[i] is even in an odd index\n            return False  # return False because an odd number was found in an odd index\n    return True  # if no odd number was found in any index, return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n            if i % 2 == 1 and nums[i] % 2 == 1:\n                return False\n        else:\n            if i % 2 == 1 and nums[i] % 2 == 1:\n                count = 1\n            elif nums[i] % 2 == 1:\n                count += 1\n        if count == 0:\n            return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count_dict = {}\n\n    for char in test_str:\n        if char in vowels:\n            for neighbor in vowels:\n                if neighbor!= char:\n                    if char in test_str and neighbor in test_str:\n                        count_dict[char] = count_dict.get(char, 0) + 1\n\n    return count_dict"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if i!= 0 and i!= len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements.\n    \"\"\"\n\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sum its elements\n    sum_list = sum(list(unique_set))\n\n    return sum_list"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    # Iterate through each element of the list and add it to the sum if it is not already in the set\n    for element in arr:\n        if element not in unique_elements:\n            sum_of_non_repeated += element\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the non-repeated elements\n    non_repeated_elements = set()\n\n    # iterate over the list\n    for element in arr:\n        # add the element to the set if it's not already there\n        if element not in non_repeated_elements:\n            non_repeated_elements.add(element)\n\n    # return the sum of the non-repeated elements\n    return sum(non_repeated_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_arr = list(set(arr))\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements.\n\n    :param arr: the list of elements to consider\n    :return: the sum of all non-repeated elements in the list\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate over the unique set and add its elements to the total\n    for element in unique_set:\n        total += element\n    # Return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create an empty list to store the non-repeated elements\n    non_repeated_list = []\n    \n    # loop through the frequency dictionary and add the non-repeated elements to the list\n    for key, value in freq_dict.items():\n        if value == 1:\n            non_repeated_list.append(key)\n    \n    # calculate the sum of the non-repeated elements\n    total_sum = 0\n    for num in non_repeated_list:\n        total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # create a set of unique elements in the array\n    unique_arr = set(arr)\n\n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # iterate through the unique elements in the array\n    for num in unique_arr:\n        # add the current element to the non-repeated sum if it is not already in the set\n        if num not in non_repeated_arr:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Use a dictionary to store the indices of the elements in the list\n    indices = {}\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each element in the list\n    for i in range(len(arr)):\n        # If the element is not already in the dictionary, add it and its index to the dictionary\n        if arr[i] not in indices:\n            indices[arr[i]] = i\n            sum += arr[i]\n    # Return the sum of all non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    count = [0] * 101 # initialize count array with zeros\n    \n    for i in range(n): # iterate over the array\n        count[arr[i]] += 1 # increment the count of each element in the array\n    \n    sum = 0 # initialize sum variable\n    \n    for i in range(1, 101): # iterate over the count array\n        if count[i] > 0: # if the count of an element is greater than zero\n            sum += i * count[i] # add the count of the element multiplied by the element itself to the sum\n    \n    return sum # return the sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Convert the set to a list\n    unique_list = list(unique_set)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_unique_elements = 0\n\n    # Iterate through the unique list and add the elements to the sum\n    for element in unique_list:\n        sum_of_unique_elements += element\n\n    # Return the sum of non-repeated elements\n    return sum_of_unique_elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # create a list of tuples of consecutive duplicates\n    grouped_list = list(groupby(list1))\n\n    # loop through the grouped list and pack consecutive duplicates into sublists\n    packed_list = []\n    for group in grouped_list:\n        if len(group[0]) == 1:\n            # if the group only contains one consecutive duplicate, append it as a single element sublist\n            packed_list.append([group[0][0]])\n        else:\n            # otherwise, append a sublist containing all the consecutive duplicates\n            packed_sublist = list(group[0])\n            for sub_group in group[1:]:\n                packed_sublist.extend(list(sub_group))\n            packed_list.append(packed_sublist)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(sorted(set(list1)))\n    result = [list(group) for group in grouped]\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Define an empty list to store sublists\n    sublists = []\n    # Iterate over the input list\n    for element in list1:\n        # Check if the current element is the same as the previous one\n        if element == list1[0]:\n            # If it is, create a new sublist and add it to the sublists list\n            sublists.append([element])\n        else:\n            # If it's not, check if the previous element was also the same as the current element\n            if list1[0] == list1[-1]:\n                # If it was, add the current element to the previous sublist\n                sublists[-1].append(element)\n            else:\n                # If it wasn't, create a new sublist and add the previous element to it\n                new_sublist = [list1[0]]\n                new_sublist.append(element)\n                sublists.append(new_sublist)\n    # Return the sublists list\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    for item, group in groupby(list1):\n        if len(list(group)) > 1:\n            sublist = list(group)\n            sublist.pop(0)\n            yield sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(g) for k, g in groupby(sorted(lst)) if k == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(sorted(list1)):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n\n    :param lst: list of elements\n    :return: list of sublists containing consecutive duplicates of the given list elements\n    \"\"\"\n\n    def group_duplicates(lst):\n        return [list(group) for key, group in groupby(lst) if key]\n\n    return group_duplicates(lst)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = sorted(list(set(list1)), key=lambda x: (-len(list(x)), x))\n    consec_duplicates = []\n    curr_group = []\n    for item in grouped_list:\n        if len(list(item)) > 1:\n            if len(curr_group) > 0:\n                curr_group[-1] += list(item)\n            else:\n                curr_group.append(list(item))\n        else:\n            if len(consec_duplicates) == 0:\n                consec_duplicates.append([list(item)])\n            else:\n                consec_duplicates[-1].append(list(item))\n    return consec_duplicates"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        count_dict[tuple(item)] = count_dict.get(tuple(item), 0) + 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist not in sublist_dict:\n                sublist_dict[sublist] = 1\n            else:\n                sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for lst in list1:\n        lst = tuple(lst)\n        if lst not in count:\n            count[lst] = 1\n        else:\n            count[lst] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2.append(tuple(i))\n    list3 = set(list2)\n    result = {}\n    for item in list3:\n        count = list1.count(item)\n        result[item] = count\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_tuples = {}\n    for item in list1:\n        if isinstance(item, tuple):\n            key = tuple(item)\n            if key in unique_tuples:\n                unique_tuples[key] += 1\n            else:\n                unique_tuples[key] = 1\n    return unique_tuples"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create a dictionary to store the number of occurrences of each tuple\n    counts = {}\n    \n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if (tuple(sublist),) in counts:\n            counts[(tuple(sublist),)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[(tuple(sublist),)] = 1\n            \n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # create an empty dictionary\n    counts = {}\n    \n    # loop through the elements of the list\n    for element in list1:\n        \n        # if the element is a list, turn it into a tuple and add it to the counts dictionary\n        if type(element) == list:\n            element = tuple(element)\n            if element in counts:\n                counts[element] += 1\n            else:\n                counts[element] = 1\n    \n    # return the counts dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for i, lst1 in enumerate(lst):\n        sublist_tuple = tuple(lst1)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # iterate over all the lists in the input list\n    for sublist in list1:\n        # convert the list to a tuple and check if it is already in the dictionary\n        key = tuple(sorted(sublist))\n        if key in counts:\n            # if it is, increment its count\n            counts[key] += 1\n        else:\n            # otherwise, add it to the dictionary with a count of 1\n            counts[key] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    n = len(test_list)\n    total = sum(test_list)\n    # Check for duplicates\n    if len(set(test_list))!= len(test_list):\n        print(\"Duplicate values found. Please check the input list.\")\n        return\n\n    # Iterate through all possible combinations of sums\n    for i in range(1, n+1):\n        for j in combinations(range(n), i):\n            # Check if the combination of sums is present in the input list\n            if all(x in test_list for x in j):\n                print(tuple(sorted(j)))\n                return\n    print(\"No combinations found.\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # using itertools.combinations function to generate all combinations of sum\n    result = list(combinations(test_list, len(test_list)))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # create a set of tuples to avoid duplicates in the combinations\n    unique_tuples = set(test_list)\n    # create a dictionary to store the combinations of sums\n    combination_dict = {}\n    # iterate over the unique tuples and generate combinations of sums\n    for combination in combinations(unique_tuples, len(test_list)):\n        # calculate the sum of the tuples in the combination\n        sum_combination = sum(combination)\n        # add the combination to the dictionary\n        combination_dict[sum_combination] = combination\n    # return the dictionary with the combinations of sums as keys and the tuples as values\n    return combination_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    combs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            combs += [(test_list[i][0], test_list[j][0])]\n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            for combo in j:\n                if sum(combo) == 0:\n                    yield combo"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    all_combinations = []\n    n = len(test_list)\n    for i in range(2, n+1):\n        for j in combinations(test_list, i):\n            if tuple(j) in test_list:\n                all_combinations.append(tuple(j))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if test_list[i][0] + test_list[j][0] + test_list[k][0] == test_list[i][1]:\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the input list in ascending order\n    test_list = sorted(test_list)\n\n    # Initialize a list to store the combinations\n    combinations_list = []\n\n    # Loop through all possible combinations of 3 tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                # Check if the sum of the three tuples is equal to the current element\n                if test_list[i] + test_list[j] + test_list[k] == test_list[i]:\n                    # Create a tuple with the sorted elements and add it to the combinations list\n                    combinations_list.append((sorted((test_list[i], test_list[j], test_list[k]))))\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        for comb in combinations(test_list, i):\n            # Check if the combination is valid, i.e., sums of elements in the tuple are equal to the given target\n            if sum(comb) == target:\n                result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all combinations of sums with tuples in the list.\n    '''\n    # create a dictionary to store the sum of tuples as key and the list of tuples as value\n    sum_dict = {}\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        # get the sum of the tuple\n        total = sum(tup)\n        \n        # if the sum is already in the dictionary, append the current tuple to the list of tuples for that sum\n        if total in sum_dict:\n            sum_dict[total].append(tup)\n        # if the sum is not in the dictionary, add the tuple to the dictionary with the current sum as key and a list containing the current tuple as value\n        else:\n            sum_dict[total] = [tup]\n    \n    # create a list of all combinations of sums with tuples in the list\n    combinations_list = []\n    \n    # iterate over the keys of the dictionary\n    for sum_key in sum_dict:\n        # iterate over the list of tuples for each sum\n        for tup_list in sum_dict[sum_key]:\n            # get the combinations of tuples with duplicates removed\n            tup_combinations = list(combinations(tup_list, r=len(tup_list)))\n            \n            # add the combination of tuples with the current sum to the list of combinations\n            for tup_comb in tup_combinations:\n                combinations_list.append(tup_comb)\n    \n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    if n < 1: \n        return False\n    divisors = []\n    i = 1\n    while i <= math.sqrt(n): \n        if n % i: \n            i += 1\n        else: \n            n //= i \n            divisors.append(i)\n            if n == 1: \n                break\n            i += 1\n    return sum(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, \n    False otherwise. \n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if count == 2: \n                return False \n    return True "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n    return divisor_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors of n is even, and False otherwise.\n    \"\"\"\n    # Function to calculate the count of divisors of a number\n    def count_div(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        if n > 1:\n            count += 1\n        return count\n\n    # Find the count of divisors of n\n    count = count_div(n)\n\n    # Check whether the count is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the count of divisors using the formula:\n    # n = sum of divisors = 1 + 2 + 3 +... + n\n    # So we can calculate the count of divisors using the formula:\n    # n = 1 + n\n    # n = n * (1 + 1)\n    # n = n * (n+1) / 2\n    n = n * (n+1) // 2\n    # Check if the count of divisors is even or odd\n    if n % 2 == 0:\n        return \"The count of divisors is even\"\n    else:\n        return \"The count of divisors is odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # find the sum of divisors of n\n    sum_of_divisors = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n\n    # check if sum of divisors is even\n    if sum_of_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1:\n        return True\n    count = 0\n    i = 2\n    while i <= n/2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and n % count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_odd += sum(arr[i:j+1])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                res += sum(arr[i:j+1])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    odd_sum = 0\n    left = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            odd_sum += arr[i]\n            left += 1\n        else:\n            odd_sum += arr[i] - arr[left]\n            left += 1\n    \n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    subarrays = []\n    for i in range(len(arr)):\n        subarrays.append([])\n        for j in range(i, len(arr)):\n            subarrays[-1].append(arr[j])\n    subarray_sum = 0\n    for subarray in subarrays:\n        if len(subarray) % 2 == 1:\n            subarray_sum += sum(subarray)\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = []\n    for i in range(len(arr)):\n        if i == 0:\n            odd_sum = sum(arr[i:])\n        else:\n            odd_sum = sum(arr[i:] + arr[:i])\n        sum_arr.append(odd_sum)\n    return sum_arr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_odd = 0\n    count = 0\n    for i in range(len(arr)):\n        if i < len(arr) - 1:\n            if i % 2!= 0 and i + 1 % 2!= 0:\n                sum_odd += arr[i]\n                count += 1\n                if count == 2:\n                    return sum_odd\n                elif count > 2:\n                    break\n        else:\n            if i % 2!= 0:\n                sum_odd += arr[i]\n                count += 1\n                if count == 2:\n                    return sum_odd\n                elif count > 2:\n                    break\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Calculate the sum of the current subarray\n        subarray = arr[i:i+2]\n        subarray_sum = sum(subarray)\n        \n        # Check if the current subarray has odd length\n        if len(subarray) % 2 == 1:\n            sum += subarray_sum\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    sum_of_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sub_array = arr[i:j+1]\n            if len(sub_array) % 2!= 0:\n                sum_of_subarrays += sum(sub_array)\n    return sum_of_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to RGB triplet\n    rgb = (r, g, b)\n    # Convert RGB triplet to HSV\n    r, g, b = rgb / 255\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    h = 0\n    s = 0\n    v = max_color\n    if max_color!= 0:\n        s = delta / max_color\n    if max_color == r:\n        h = (g - b) / delta\n    elif max_color == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    if h < 0:\n        h += 6\n    h *= 60\n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Normalize the color values to 0-1\n    r /= 255\n    g /= 255\n    b /= 255\n\n    # Compute the maximum and minimum color values\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    # Compute the chroma value\n    chroma = max_color - min_color\n\n    # Compute the hue value\n    if chroma == 0:\n        hue = 0\n    elif max_color == r:\n        hue = 60 * ((g - b) / chroma)\n    elif max_color == g:\n        hue = 60 * ((b - r) / chroma) + 120\n    elif max_color == b:\n        hue = 60 * ((r - g) / chroma) + 240\n\n    # Compute the saturation value\n    if chroma == 0:\n        saturation = 0\n    elif chroma == max_color:\n        saturation = 0\n    else:\n        saturation = chroma / max_color\n\n    # Compute the value value\n    value = max_color\n\n    # Return the color values in the HSV color model\n    return round(hue), round(saturation * 100), round(value * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in the red, green, and blue values of an RGB color\n    and returns the Hue, Saturation, and Value (HSV) color components in\n    the range of 0 to 1.\n    \"\"\"\n    \n    # Convert the RGB values to the range 0-255 to 0-1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Calculate the max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the delta between the max and min values\n    delta = max_val - min_val\n    \n    # If the max value is 0, then the hue is undefined\n    if max_val == 0:\n        h = 0\n    else:\n        # If the max value is 1, then the hue is undefined\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Convert the hue to a value in the range 0-360\n        h = h * 60\n        \n        # If the hue value is less than 0, add 360 to it\n        if h < 0:\n            h += 360\n            \n    # Calculate the saturation and value of the color\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n        \n    # Calculate the value of the color\n    if max_val == r:\n        v = max_val\n    elif max_val == g:\n        v = max_val\n    else:\n        v = max_val\n        \n    # Create a dictionary to store the HSV values\n    hsv_color = {\"h\": h, \"s\": s, \"v\": v}\n    \n    # Return the HSV values\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB values to floating point\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n\n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate the hue\n    if saturation == 0:\n        hue = 0\n    elif r == max_val:\n        hue = (g - b) / diff\n    elif g == max_val:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Convert hue to degrees\n    hue = hue * 60 if hue < 0 else hue * 60\n\n    # Calculate the value\n    value = max_val\n\n    # Return the converted values\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    # Convert the RGB values to floats\n    r, g, b = [float(x) for x in (r, g, b)]\n    # Get the maximum and minimum values of RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    # Calculate the delta between max and min values\n    delta = max_val - min_val\n    # Calculate the saturation value\n    if max_val == 0:\n        h = 0\n    else:\n        h = (60 * ((g - b) / delta)) % 360\n    # Calculate the value value\n    v = max_val\n    # Calculate the hue value\n    if delta == 0:\n        s = 0\n    else:\n        if max_val == r:\n            h = (h + 360) % 360\n        elif max_val == g:\n            h = (h + 120) % 360\n        else:\n            h = (h + 240) % 360\n    # Return the HSV color values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # calculate the maximum and minimum color values\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    # calculate the delta value between maximum and minimum color values\n    delta = max_color - min_color\n\n    # calculate the value of the hue\n    if max_color == r:\n        hue = (g - b) / delta\n    elif max_color == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # check if the hue value is out of the range of [0, 6]\n    if hue < 0:\n        hue += 6\n\n    # calculate the value of the saturation\n    if max_color == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_color\n\n    # calculate the value of the value\n    value = max_color\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n    \n    Parameters:\n    r (int): Red component of the color (0-255)\n    g (int): Green component of the color (0-255)\n    b (int): Blue component of the color (0-255)\n    \n    Returns:\n    h (float): Hue component of the color (0-360)\n    s (float): Saturation component of the color (0-1)\n    v (float): Value component of the color (0-1)\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6.0\n        \n        if h < 0:\n            h += 1.0\n        \n        if delta == 0:\n            s = 0\n        else:\n            s = delta / (1.0 - abs(2 * cmax - 1))\n    \n    v = cmax\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \n    Args:\n    r (int): red value in range 0-255\n    g (int): green value in range 0-255\n    b (int): blue value in range 0-255\n    \n    Returns:\n    h (float): hue value in range 0-360\n    s (float): saturation value in range 0-1\n    v (float): value value in range 0-1\n    \n    \"\"\"\n    r_f = r / 255.0\n    g_f = g / 255.0\n    b_f = b / 255.0\n    \n    max_f = max(r_f, g_f, b_f)\n    min_f = min(r_f, g_f, b_f)\n    \n    d = max_f - min_f\n    \n    if max_f == min_f:\n        h = 0\n    elif max_f == r_f:\n        h = 60.0 * (g_f - b_f) / d\n    elif max_f == g_f:\n        h = 60.0 * (b_f - r_f) / d + 120.0\n    else:\n        h = 60.0 * (r_f - g_f) / d + 240.0\n    \n    if h < 0:\n        h += 360.0\n    \n    h = h / 360.0\n    \n    if max_f == 0:\n        s = 0\n    else:\n        s = d / max_f\n    \n    v = max_f\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    delta = max_color - min_color\n    \n    if max_color == min_color:\n        h = 0 # achromatic\n    elif r == max_color:\n        h = 60*(g-b)/delta\n    elif g == max_color:\n        h = 60*(b-r)/delta + 120\n    else:\n        h = 60*(r-g)/delta + 240\n    \n    if max_color == 0:\n        s = 0 # achromatic\n    else:\n        s = delta/max_color\n    \n    v = max_color\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters - red, green and blue and returns the \n    corresponding hue, saturation and value components of the given rgb color.\n    \n    Args:\n    r (int): The value of the red component of the input rgb color.\n    g (int): The value of the green component of the input rgb color.\n    b (int): The value of the blue component of the input rgb color.\n    \n    Returns:\n    h (float): The value of the hue component of the hsv color.\n    s (float): The value of the saturation component of the hsv color.\n    v (float): The value of the value component of the hsv color.\n    \n    \"\"\"\n    r_c = r / 255\n    g_c = g / 255\n    b_c = b / 255\n    \n    max_c = max(r_c, g_c, b_c)\n    min_c = min(r_c, g_c, b_c)\n    \n    h = 0\n    s = 0\n    v = max_c\n    \n    if max_c!= min_c:\n        delta = max_c - min_c\n        s = delta / max_c\n        \n        if r_c == max_c:\n            h = (g_c - b_c) / delta\n        elif g_c == max_c:\n            h = 2 + (b_c - r_c) / delta\n        else:\n            h = 4 + (r_c - g_c) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n    \n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # iterate over the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # return the product of even and odd counts\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            if count == 0:\n                product *= num\n            else:\n                product *= num + 1\n            count += 1\n        elif count == 0:\n            count += 1\n        else:\n            product *= num + 2\n            count += 1\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    result = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    \n    if even_count > 0 and odd_count > 0:\n        result = list1[0] * list1[1] * list1[2]\n    else:\n        print(\"Invalid input\")\n\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2!= 0]\n    \n    if len(even) == 0:\n        return 'The list does not contain any even numbers.'\n    \n    if len(odd) == 0:\n        return 'The list does not contain any odd numbers.'\n    \n    return odd[0] * even[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list and returns the product of the first even and odd numbers.\n\n    Args:\n    lst (list): List containing integers.\n\n    Returns:\n    int: Product of the first even and odd numbers in the list.\n\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return 0\n    elif odd_count == 0:\n        return 0\n    else:\n        return lst[0] * lst[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count == 0 or odd_count == 0:\n            result = 0\n    \n    if result == 0:\n        print(\"The given list doesn't have any even or odd number.\")\n    else:\n        print(\"The product of first even and odd number is:\", result)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    prod = 1\n    for num in lst:\n        if num % 2 == 0:\n            prod *= num\n        else:\n            prod *= (2 * num)\n    return prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    # iterate through the list\n    for num in list1:\n        # if the number is even\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        # if the number is odd\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    # calculate the product of even and odd numbers\n    product = even_product * odd_product\n\n    # return the result\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas and spaces and convert to a list of strings\n    lst = test_str.split(',')\n    \n    # Convert each string to an integer and append to a list\n    int_lst = []\n    for num in lst:\n        int_lst.append(int(num.strip()))\n        \n    # Convert the list to a tuple and return it\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the tuple string format\n    tuple_str_format = \"({}, {})\"\n\n    # Split the test string by comma and space\n    tuple_str_split = test_str.split(', ')\n\n    # Initialize the integer tuple\n    integer_tuple = ()\n\n    # Loop through each part of the tuple string\n    for part in tuple_str_split:\n        # Convert the part to an integer\n        integer = int(part)\n\n        # Add the integer to the integer tuple\n        integer_tuple += (integer,)\n\n    # Return the integer tuple\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to tuple\n    test_tuple = tuple(map(int, test_str.split(',')))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tup = tuple(map(int, test_str.split(',')))\n    except ValueError:\n        print(\"Invalid input.\")\n    else:\n        print(tup)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for element in test_str:\n        if element.isnumeric():\n            int_tuple += (int(element),)\n        else:\n            int_tuple += (0,)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple of strings and returns a tuple of integers.\n    \"\"\"\n    converted_tuple = tuple(int(i) for i in test_str)\n    return converted_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        return \"Input must be a string\"\n    try:\n        test_str = eval(test_str)\n    except:\n        return \"Invalid input\"\n    try:\n        if all(isinstance(x, int) for x in test_str):\n            return tuple(map(int, test_str))\n        else:\n            return \"Invalid input\"\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a tuple\n    tuple_str = tuple(test_str)\n    # Use a list comprehension to convert the tuple string to an integer tuple\n    tuple_int = [int(i) for i in tuple_str]\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the tuple string by the delimiter \"|\"\n    tuple_str = test_str.split(\"|\")\n    \n    # Create a new list to store the integer values\n    int_list = []\n    \n    # Iterate over the tuple string and convert each element to integer\n    for element in tuple_str:\n        int_list.append(int(element))\n        \n    # Convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): List of sorted values.\n    x (int): Value to search for.\n\n    Returns:\n    int: Index of the right insertion point for x in a, or -1 if x is not found in a.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using binary search algorithm to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i!= len(a) and a[i] == x else i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i == len(a) or a[i]!= x else i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the right insertion point\n    index = bisect.bisect_right(a, x)\n\n    # If the value is already in the list, return its index\n    if index < len(a) and a[index] == x:\n        return index\n\n    # If the value is greater than all elements to the right of the insertion point,\n    # return the index of the last element in the list\n    if index == len(a):\n        return index - 1\n\n    # If the value is less than or equal to all elements to the right of the insertion point,\n    # return the index of the first element in the list\n    if a[index - 1] <= x:\n        return index - 1\n\n    # Otherwise, calculate the index of the value in the list\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{2}b{3}')\n    return pattern.search(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match:'+ match.group(0)\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a{1}b{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the tuple and string\n    new_tuple = test_tuple + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the list and the string into a single tuple\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list + test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of integers.\n        test_str (str): A string.\n\n    Returns:\n        tuple: A new tuple created from the given list and string.\n\n    Example:\n        test_list = [1, 2, 3]\n        test_str = \"hello\"\n        new_tuple(test_list, test_str)\n        # Output: (1, 2, 3, 'h', 'e', 'l', 'l', 'o')\n    \"\"\"\n    return tuple(test_list + [ord(char) for char in test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the string into a list of characters\n    str_list = list(test_str)\n    # Add a comma and a space to each character in the list\n    str_list = [char + ',' +'' for char in str_list]\n    # Join the list of characters into a string\n    new_str = ''.join(str_list)\n    # Convert the string back into a list of characters\n    new_str_list = list(new_str)\n    # Remove the last comma and space from the list of characters\n    new_str_list.pop()\n    new_str_list.pop()\n    # Convert the list of characters back into a string\n    new_str = ''.join(new_str_list)\n    # Convert the string into a list of integers\n    int_list = [int(char) for char in new_str]\n    # Combine the integers in the list into a new tuple\n    new_tuple = tuple(int_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i)\n    new_tuple = tuple(new_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str + '-' + str(elem) for elem in test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    n = len(nums)\n    for i in range(0, n, 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(set(nums[i:i+2])) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                print(f\"Index {i} contains even numbers.\")\n            else:\n                print(f\"Index {i} contains odd numbers.\")\n        else:\n            continue"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return True if even_count == len(nums) // 2 else False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Loop through each element of the tuple\n    for elem in test_tup:\n        # If the element is a tuple, remove it and continue\n        if type(elem) == tuple:\n            test_tup = tuple(elem)\n            continue\n        # Otherwise, keep the element and continue\n        else:\n            continue\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result += remove_nested(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flattened_list.extend(remove_nested(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            pass\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n\ninput_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(count_lists(input_list))  # Output: 4"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted list.\n    x (int): An element to search for.\n\n    Returns:\n    int: The last index of x in arr if it exists, else -1.\n    \"\"\"\n    # binary search for last occurrence of x in arr\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # found the last occurrence of x\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 if right < 0 else right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    last_occurrence = -1\n\n    # Find the last occurrence of x\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_occurrence = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return last_occurrence"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted array of integers.\n    x (int): The element to find the last position of.\n\n    Returns:\n    int: The last position of the element x in the sorted array arr.\n\n    \"\"\"\n    i = 0\n    while i < len(arr) - 1 and arr[i] <= x:\n        i += 1\n    if i == len(arr):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            # if element is found, return its last position\n            for i in range(mid, -1, -1):\n                if arr[i] == x:\n                    return i\n            # if the element is not found, return -1\n            return -1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # if the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the last position to -1\n    last_pos = -1\n    \n    # loop through the array and check if the current element is equal to x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # if the current element is equal to x, update the last position\n            last_pos = i\n    \n    # return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # check if the array is empty or not\n    if len(arr) == 0:\n        return None\n\n    # check if the element is present in the array or not\n    if arr[0] == x:\n        return 0\n\n    # find the last position of the element\n    for i in range(1, len(arr)):\n        if arr[i] == x:\n            return i\n\n    # if the element is not present in the array\n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last index to -1\n    last_index = -1\n    \n    # Initialize the start and end pointers\n    start = 0\n    end = len(arr)-1\n    \n    # Loop until the start pointer is less than the end pointer\n    while start < end:\n        # Calculate the midpoint of the array\n        mid = (start + end) // 2\n        \n        # If the mid element is less than the x element, set the start pointer to mid+1\n        if arr[mid] < x:\n            start = mid+1\n        # If the mid element is greater than the x element, set the end pointer to mid\n        else:\n            end = mid\n    \n    # Check if the last element is equal to x\n    if arr[start] == x:\n        last_index = start\n    \n    # If the last element is not equal to x, then the element is not present in the array\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr)-1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i >= 0:\n        return i+1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments: an array 'arr' and an element 'x' (which is assumed to be sorted in ascending order).\n    It then returns the index of the last occurrence of 'x' in 'arr' if it exists, or -1 otherwise.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n - 1\n\n    # If element is not present in array\n    if arr[right] < x:\n        return -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If element is present at the middle\n        if arr[mid] == x:\n            right = mid - 1  # Traverse right half of array\n        elif arr[mid] < x:\n            left = mid + 1  # Traverse left half of array\n\n    # If element is not present in array\n    if arr[right]!= x:\n        return -1\n\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=[^a])a(?=[^b]*b)'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)(.*?)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<!\\w)a\\w*b(?!\\w)')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for value in dict.values():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        raise ValueError(\"n should be a positive integer\")\n    elif n == 0:\n        return 0\n    else:\n        return (2 * n) + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables to keep track of the sum and the number of odd natural numbers found\n    total = 0\n    count = 0\n    \n    # iterate over the range of natural numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is odd, add it to the total and increment the count\n        if i % 2!= 0:\n            total += i\n            count += 1\n    \n    # return the total sum of all odd natural numbers found\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # loop through each element in the array\n    for num in arr:\n        # add the element to the total\n        total += num\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    This function takes in an array as an argument and returns the sum of the elements in the array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string\n    bin_n = bin(n)[2:]\n    \n    # Pad the binary string with zeros if it is shorter than d\n    if len(bin_n) < d:\n        bin_n = '0'*(d-len(bin_n)) + bin_n\n    \n    # Extract the first d bits as the rotated bits\n    rotated_bits = bin_n[-d:]\n    \n    # Extract the rest of the binary string as the original bits\n    original_bits = bin_n[:-d]\n    \n    # Convert the rotated bits and original bits back to integer\n    rotated = int(rotated_bits, 2)\n    original = int(original_bits, 2)\n    \n    # Perform the rotation\n    return rotated | (original << d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a 32-bit binary string\n    binary = '{0:032b}'.format(n)\n    # Split the binary string into groups of 8 bits\n    groups = [binary[i:i+8] for i in range(0, len(binary), 8)]\n    # Reverse each group\n    groups = [group[::-1] for group in groups]\n    # Join the reversed groups back into a binary string\n    rotated_binary = ''.join(groups)\n    # Convert the rotated binary string back to an integer\n    rotated = int(rotated_binary, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the number of bits in the binary representation of n\n    num_bits = bin(n).count('1')\n    # Calculate the new value of n after rotation\n    rotated_value = ((n >> d) | (n << (32 - d))) & ((1 << num_bits) - 1)\n    return rotated_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    binary_n = bin(n)[2:]\n\n    # Pad the binary number with zeros to the left of d bits\n    padded_binary_n = '0' * d + binary_n\n\n    # Convert the padded binary number to an integer\n    rotated_n = int(padded_binary_n, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary representation\n    num = bin(n)[2:]\n    # convert the number of bits to rotate by\n    d = d % 32\n    # pad the binary representation with zeros to d bits\n    padded = \"0\" * d + num\n    # convert the padded binary representation to decimal\n    rotated = int(padded, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # calculate the rotation amount\n    rotation = d % 32\n    \n    # calculate the number of bits to be shifted\n    shift = 32 - rotation\n    \n    # shift the number to the left by the calculated amount\n    shifted_n = (n << shift) | (n >> rotation)\n    \n    return shifted_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n & 0xffffffff  # To ensure that n is a 32-bit integer\n    d = d % 32  # To ensure that d is a valid rotation amount\n    \n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the left rotation bits\n    rotation_bits = d % 32\n\n    # Calculate the number of bits to rotate right\n    right_rotation_bits = 32 - rotation_bits\n\n    # Calculate the sign extension value\n    sign_extension_value = (1 << rotation_bits) - 1\n\n    # Extract the rotation bits\n    shifted_bits = (n >> rotation_bits) & ((1 << rotation_bits) - 1)\n\n    # Extract the right rotation bits\n    shifted_right_bits = (n >> right_rotation_bits) & ((1 << right_rotation_bits) - 1)\n\n    # Rotate left the rotation bits\n    rotated_bits = (shifted_bits << right_rotation_bits) | (shifted_right_bits >> rotation_bits)\n\n    # Sign extend the rotated bits\n    rotated_bits = (rotated_bits ^ sign_extension_value) & ((1 << 32) - 1)\n\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of a number to the left by d bits.\n\n    Parameters:\n    n (int): The number to be rotated.\n    d (int): The number of bits to rotate the number to the left.\n\n    Returns:\n    int: The rotated number.\n    \"\"\"\n    # Convert the number to a binary string\n    binary = bin(n)[2:]\n\n    # Add zeros to the beginning of the binary string to make it d bits long\n    binary = '0' * (d - len(binary)) + binary\n\n    # Convert the binary string back to an integer and return it\n    return int(binary, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary\n    binary_num = format(n, '032b')\n    # Calculate the number of bits to shift the binary representation\n    shift_bits = len(binary_num) - d\n    # Calculate the number of bits to shift the binary representation\n    if shift_bits < 0:\n        shift_bits = 0\n    # Shift the binary representation\n    new_binary_num = binary_num[shift_bits:] + binary_num[:shift_bits]\n    # Convert the binary string back to decimal\n    new_decimal_num = int(new_binary_num, 2)\n    return new_decimal_num"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    # Removing leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces from the text\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if i == y:\n            count += 1\n        elif i == z:\n            count += 1\n        elif i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x,y,z)+1):\n        if x == i:\n            count += 1\n        if y == i:\n            count += 1\n        if z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return n//2\n    return n//2 + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if i == 0 or arr[i] >= arr[i-1]:\n            continue\n        \n        j = i-1\n        while j >= 0 and arr[j] > arr[i]:\n            j -= 1\n            \n        if j < 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] < arr[j]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    for i in range(n-1, 0, -1):\n        for j in range(i-1, -1, -1):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    count = 0\n    for i in range(n-1):\n        if arr[i]!= arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # If array is already in ascending order, return 1\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 1\n    \n    # Initialize variables to store number of rotations and current index\n    count = 0\n    i = 0\n    \n    # Iterate through the array and count the rotations\n    while i < n-1:\n        # If the current element is greater than the next element, increment count\n        if arr[i] > arr[i+1]:\n            count += 1\n        # Move the current index to the next element\n        i += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # loop through all possible pairs of indices i and j (i<j)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # check if arr[i:j+1] is already sorted\n            if arr[i:j+1] == sorted(arr[i:j+1]):\n                # increment count by the number of pairs (i,j) and (j,i)\n                count += 2\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            # If the current element is smaller than the next element, we have found the first occurrence of the sorted array\n            count += 1\n            # Starting from the next element, check for the next occurrence of the sorted array\n            for j in range(i+1, n):\n                if arr[j] > arr[i]:\n                    count += 1\n                    break\n                if j == n-1:\n                    # If we have reached the end of the array, we have found the last occurrence of the sorted array\n                    count -= 1\n                    break\n            break\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            for j in range(i+1, n):\n                if arr[j] < arr[i]:\n                    count += 1\n                    break\n            else:\n                return -1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    i = 0\n    while i < n - 1:\n        if arr[i] < arr[i + 1]:\n            i += 1\n        else:\n            j = i + 1\n            while j < n and arr[j] < arr[i]:\n                j += 1\n            if j == n:\n                count += 1\n                i += 1\n            else:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # initialize the count of rotations\n    count = 0\n    # loop through all possible rotations of the array\n    for i in range(n):\n        # loop through all possible rotations of the array\n        for j in range(i+1, n):\n            # check if the subarray from index i to j is sorted\n            if arr[i:j+1] == sorted(arr[i:j+1]):\n                count += 1\n    # return the count of rotations\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Base case\n    if n <= 0:\n        return False\n    \n    # Find square root using Newton's method\n    x0 = n / 2\n    while x0 * x0 > n:\n        x0 -= 1\n    \n    x1 = x0 + 1\n    while x1 * x1 <= n:\n        x0 = x1\n        x1 = (x0 + n / x0) / 2\n    \n    # Check if x1 is a perfect square\n    if x1 * x1 == n:\n        return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # check if the given number is a perfect square\n    root = int(n ** 0.5)\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using binary search approach to check if number is a perfect square or not\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    for i in range(1, root+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # square root of n\n    x = 0\n    y = n\n\n    # binary search to find the square root of n\n    while y - x > 0.00001:\n        x = (x + y) / 2\n        y = (x + n / x) / 2\n\n    if y == n / x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer 'n' and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    else:\n        for i in range(int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is a perfect square using the quadratic formula\n    a = n\n    b = 0\n    c = n**2 - a**2\n    while b**2 <= c:\n        mid = (a + b) // 2\n        if mid**2 == n:\n            return True\n        elif mid**2 < n:\n            a = mid\n        else:\n            b = mid\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes a positive integer as input and returns True if it is a perfect square, False otherwise.\n    A number is a perfect square if it is the square of an integer greater than or equal to its square root.\n    '''\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # check if n is already a perfect square\n    if n == int(n ** 0.5) ** 2:\n        return True\n    # check if n is a perfect square by iterating until the square root of n\n    i = 1\n    while i * i <= n:\n        if n % i == 0 and i == int(n ** 0.5):\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Initialize a variable to store the product\n    product = 1\n    \n    # Iterate over each number in the list\n    for num in arr:\n        # Multiply the current number with the product variable\n        product *= num\n        \n        # Check if the product is even or odd\n        if product % 2 == 0:\n            # If the product is even, return True\n            return True\n        else:\n            # If the product is odd, continue to the next number in the list\n            product = 1\n    \n    # If we make it through the entire list without finding an even product, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2) == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"Product is even.\")\n    else:\n        print(\"Product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize variables to store product and even count\n    product = 1\n    even_count = 0\n\n    # Iterate through the list and update the product and even_count variables\n    for num in arr:\n        product *= num\n\n        # Check if the product is even\n        if product % 2 == 0:\n            even_count += 1\n\n        # Reset the product variable if it becomes odd after the iteration\n        else:\n            product = 1\n\n    # Return True if even_count is equal to the length of the list\n    return True if even_count == len(arr) else False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    def helper(current_sum, remaining_lists):\n        if not remaining_lists:\n            return current_sum\n        else:\n            max_sum = current_sum\n            for i, sublist in enumerate(remaining_lists):\n                new_sum = current_sum + sublist[0]\n                new_remaining_lists = remaining_lists[:i] + remaining_lists[i+1:]\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    remaining_lists = new_remaining_lists\n            return max_sum\n\n    max_sum = float('-inf')\n    for sublist in lists:\n        max_sum = max(max_sum, helper(0, [sublist]))\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i + 1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    max_list = None  # initialize max_list to None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        total = sum(i)\n        if total > max_sum:\n            max_sum = total\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0:\n                new_sum = lists[i][j]\n            elif j == 0:\n                new_sum = lists[i][j] + lists[i-1][j]\n            else:\n                new_sum = lists[i][j] + lists[i-1][j] + lists[i][j-1] + lists[i-1][j-1]\n            if new_sum > max_sum:\n                max_sum = new_sum\n                max_list = [lists[i][j], lists[i-1][j], lists[i][j-1], lists[i-1][j-1]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        sum = sum(lst)\n        if sum > max_sum:\n            max_sum = sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # Find the maximum sum of all lists\n    max_sum = float('-inf')\n    \n    # Iterate over each list in the input list of lists\n    for sublist in lists:\n        \n        # Find the sum of all elements in the list\n        sublist_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is higher\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            \n    # Create a list with the elements of the list that has the highest sum\n    result = [sublist[i] for i in range(len(sublist)) if sublist[i] == max_sum]\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        if not lst:\n            continue\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run_length = 0\n    max_run_length = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            current_run_length += 1\n        else:\n            if uppercase_count > 0:\n                if current_run_length > max_run_length:\n                    max_run_length = current_run_length\n            uppercase_count = 0\n            current_run_length = 0\n    if uppercase_count > 0:\n        max_run_length = current_run_length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in a string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if count == 0:\n                start = i\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n            count = 0\n    if count > max_run:\n        max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i\n            if count == 1 and i == len(test_str) - 1:\n                end = i\n            if count > 1 and i == len(test_str) - 1:\n                end = i\n        else:\n            count = 0\n    if max_count > 1:\n        return test_str[start:end+1]\n    else:\n        return None"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables\n    max_run = 0\n    max_start = 0\n    current_run = 0\n    current_start = 0\n\n    # loop through the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase\n        if test_str[i].isupper():\n            # if the current run is longer than the maximum run\n            if current_run + 1 > max_run:\n                # update the maximum run and start index\n                max_run = current_run + 1\n                max_start = current_start\n\n            # reset the current run and start index\n            current_run = 1\n            current_start = i\n        else:\n            # increment the current run\n            current_run += 1\n\n    # check if the last run is longer than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n        max_start = current_start\n\n    # return the maximum run and start index\n    return max_run, max_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    start = 0\n    max_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        if count > max_run:\n            start = i - max_run + 1\n            max_run = count\n\n    return test_str[start:start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            if prev_char is None or prev_char.islower():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 1\n            prev_char = char\n        else:\n            current_run = 0\n            prev_char = None\n            \n    max_run = max(max_run, current_run)\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, return it\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check if the test tuple contains K\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes a tuple `test_tup` and an integer `K` as input and returns True if `K` is in `test_tup` or False otherwise.\n    \"\"\"\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        return \"The length of the two tuples is not same.\"\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]