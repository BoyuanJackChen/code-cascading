[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    shared_set = set1.intersection(set2)\n\n    shared_list = list(shared_set)\n\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1 & set2"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the lists to sets to get unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Extract the elements from the tuples\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    \n    # Initialize a set to hold the shared elements\n    shared_set = set()\n    \n    # Iterate through both tuples\n    for i in range(len(tup1)):\n        # If the element is in both tuples, add it to the set\n        if tup1[i] in tup2:\n            shared_set.add(tup1[i])\n    \n    # Return the shared elements as a list\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = set(test_tup1) & set(test_tup2)\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is 1 or less\n    if n <= 1:\n        return True\n    \n    # Check if the number is divisible by 2\n    if n == 2:\n        return False\n    \n    # Check if the number is divisible by any number between 3 and sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is not prime or not.\n\n    :param n: The number to check\n    :return: True if the number is not prime, False otherwise\n    \"\"\"\n\n    # If the number is less than 2, it is not prime\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the loop completes without finding a factor, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2 (not prime)\n    if n < 2:\n        return True\n    \n    # check if n is divisible by 2 (not prime)\n    if n % 2 == 0:\n        return True\n    \n    # check odd divisors from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return False\n    \n    # check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    \n    # check odd numbers starting from 5 up to n-2\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # if the loop ends without finding a factor, the number is prime\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = [0] * n\n    hq.heapify(min_heap)\n\n    # Iterate through the list and add the largest n elements to the heap\n    for num in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap, num)\n        elif num > min_heap[0]:\n            hq.heappop(min_heap)\n            hq.heappush(min_heap, num)\n\n    # Return the largest n elements from the heap\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    heap = [x for x in nums]\n    hq.heapify(heap)\n    \n    # Remove the smallest n elements from the min heap and store them in a list\n    largest = [heapq.heappop(heap) for _ in range(n)]\n    \n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n,nums)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # convert the list to a max heap\n    result = []\n\n    for i in range(n):\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list of numbers into a heap queue\n    hq_nums = hq.nlargest(n, nums)\n    # convert the heap queue into a list of largest integers\n    largest_nums = [heapq.heappop(hq_nums) for _ in range(n)]\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min-heap\n    heap = nums[:n]\n    heapq.heapify(heap)\n    \n    # Remove the smallest element from the heap\n    for i in range(n, len(nums)):\n        # Remove the smallest element from the heap\n        smallest = heapq.heappop(heap)\n        \n        # Add the next element to the heap\n        if i < n:\n            heapq.heappush(heap, nums[i])\n    \n    # Return the heap in descending order\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a max heap\n    nums_heap = hq.nlargest(n, nums)\n    # Return the list of numbers from the heap\n    return list(nums_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers.\n    \"\"\"\n    # convert the list to a heap\n    nums_heap = nums\n    heapq.heapify(nums_heap)\n\n    # extract the n largest integers from the heap and return them as a list\n    result = [heapq.heappop(nums_heap) for _ in range(n)]\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    while x % 2 == 0:\n        x //= 2\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    \n    power = 1\n    while power < x:\n        power *= 2\n        \n    if power == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Create a binary representation of x \n    binary_representation = bin(x)[2:] \n\n    # Check if the difference between the binary representation of x and 1 is 1 \n    if binary_representation.count('1') == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1))!= 0: # if x is a power of 2, x & (x - 1) will be 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary\n    x_binary = bin(x)[2:]\n    \n    # Check if there is a 1 at the rightmost bit position\n    if x_binary[-1] == '1':\n        # If there is, check if the remaining bits are also 0\n        if x_binary[-2:] == '00':\n            return True\n        else:\n            return False\n    else:\n        # If there is not, return False\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = bin(x)[2:]  # convert x to binary representation and remove '0b' prefix\n    return x.count('1') == x.count('0')"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    # Check if the number is already a power of 2\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x - 1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x!= 0 and (x & (x - 1)) == 0: # if x is not zero and only one bit is set to 1 in its binary representation, then x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n\n    # Check if the input is a power of two\n    if x & (x - 1)!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'  # find all words that are at least 4 characters long\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # find all matches in the text using the pattern\n    matches = re.findall(pattern, text)\n    # return the matches as a list\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Compile a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Length of the string\n    n = len(str)\n    \n    # Initialize variables for calculating minimum rotations\n    min_rot = n\n    swap = 0\n    \n    # Traverse the string and calculate minimum rotations\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                # If the characters are same, count the rotations to get the same string\n                swap = j - i\n                if swap < min_rot:\n                    min_rot = swap\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        # find the longest increasing subsequence of length n\n        L = [0] * n\n        L[0] = 1\n        for i in range(1, n):\n            if str[i] > str[i-1]:\n                L[i] = L[i-1] + 1\n            else:\n                L[i] = 1\n        # find the minimum number of rotations required to get the same string\n        min_rotations = 0\n        for i in range(n):\n            min_rotations += L[i]\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if the string is palindrome or not\n    if str == str[::-1]:\n        return 0\n\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n\n    # Iterate through all possible rotations\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the rotation of the substring\n            rot_str = str[i:j]\n            # Check if the rotation is a palindrome\n            if rot_str == rot_str[::-1]:\n                # Calculate the number of rotations\n                rot_count = rot_str.count('a')\n                # Update the minimum number of rotations if the current count is smaller\n                if rot_count < min_rotations:\n                    min_rotations = rot_count\n\n    # If the minimum number of rotations is infinity, it means the string is not a palindrome\n    if min_rotations == float('inf'):\n        return -1\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list to store the characters in the string\n    sorted_chars = sorted(freq.keys())\n    \n    # Check if all the characters are the same\n    if sorted_chars == list(range(n)):\n        return 0\n    \n    # Create a list to store the min rotations required for each character\n    min_rotations = [float('inf')] * n\n    \n    # Iterate through the sorted characters\n    for i, char in enumerate(sorted_chars):\n        # Calculate the minimum rotations required for the current character\n        min_rotations[i] = min([abs(sorted_chars[j] - char) for j in range(n) if j!= i])\n    \n    # Find the minimum rotations required for the entire string\n    min_rotations_string = min(min_rotations)\n    \n    return min_rotations_string"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Check if the string is already the same after rotation \n    for i in range(n//2): \n        if str[i]!= str[(n-1)//2+i]: \n            return 0\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # find the smallest palindrome that can be formed from the string\n    # by rotating it to the right\n    for i in range(n//2):\n        if str[i:n//2+i+1] == str[n-i-1:n]:\n            return 1 + find_Rotations(str[n//2+i+1:n])\n    # if no such palindrome is found, find the smallest palindrome that can be formed from the string\n    # by rotating it to the left\n    for i in range(n//2):\n        if str[n-i-1:n//2-i-1:-1] == str[i:n//2+i+1:1]:\n            return 1 + find_Rotations(str[:i] + str[n-i-1:n//2-i-1:-1])\n    # if no such palindrome is found, return -1 to indicate that no rotations are possible\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # create a list to store the characters with maximum frequency\n    max_freq_chars = [char for char, freq in freq.items() if freq == max_freq]\n    \n    # if there is only one character with maximum frequency, then there is no rotation required\n    if len(max_freq_chars) == 1:\n        return 0\n    \n    # count the number of rotations required\n    count = 0\n    for i in range(len(max_freq_chars)):\n        # find the character with the minimum frequency that is greater than the maximum frequency character\n        min_freq_char = min([char for char, freq in freq.items() if freq > max_freq and freq < min(freq.values())])\n        # find the index of the minimum frequency character in the string\n        min_freq_char_index = str.index(min_freq_char)\n        # swap the characters at the maximum frequency character and the minimum frequency character\n        str = str[:min_freq_char_index] + str[min_freq_char_index+1:] + str[min_freq_char_index:min_freq_char_index+1]\n        count += 1\n    \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    \n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # try rotating the string\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            # swap the characters\n            str = str[:i] + str[i+1] + str[i] + str[n-i-1] + str[n-i-2:-i-1:-1] + str[i] + str[n-i-1]\n            count += 1\n            \n            # check if the string is now a palindrome\n            if str == str[::-1]:\n                return count\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                return 0\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Initialize the table to store the number of rotations required for each substring\n    table = [0] * (2 * n)\n    # Initialize the result with the number of rotations required to get the same string\n    result = 0\n    # Fill the table with the required number of rotations\n    for i in range(n):\n        # Only consider rotations with modulo i as the rotation is cyclic\n        for j in range(i + 1, 2 * n, i + 1):\n            # If the substring is present in the string, add the number of rotations required to get it\n            if str[i] == str[j % n]:\n                table[j] += 1\n    # Find the minimum number of rotations required to get the same string\n    for i in range(2 * n):\n        if table[i] == n:\n            result += 1\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes in a string and a character as input. It removes the first and last occurrence of the character from the string and returns the modified string.\n    '''\n    # remove first occurrence of character\n    if s.startswith(ch):\n        s = s[1:]\n    # remove last occurrence of character\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        return s[1:]\n    elif s.find(ch) == len(s)-1:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # remove first occurrence of the character from the string\n    s = s.replace(ch, '', 1)\n\n    # remove last occurrence of the character from the string\n    s = s.replace(ch, '', -1)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of the given character from the string.\n    '''\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        s = s.replace(ch,'')\n        s = s.strip()\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        if s[0] == ch:\n            return remove_Occ(s[1:], ch)\n        elif s[-1] == ch:\n            return remove_Occ(s[:-1], ch)\n        else:\n            return ch + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.strip(ch)[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence!= -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if last_occurrence!= -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    # Initialize a variable to store the current minimum sum\n    min_sum = float('inf')\n    # Loop through all the rows of the matrix\n    for i in range(n):\n        # Initialize a variable to store the sum of the current row\n        row_sum = 0\n        # Loop through all the elements of the current row and add them to the row sum\n        for j in range(n):\n            row_sum += M[i][j]\n        # If the row sum is less than the current minimum sum, update the minimum sum\n        if row_sum < min_sum:\n            min_sum = row_sum\n        # Add the current row to the sorted matrix\n        sorted_M.append(M[i])\n    # Loop through all the rows of the sorted matrix\n    for i in range(n):\n        # Loop through all the elements of the current row and subtract the current minimum sum from them\n        for j in range(n):\n            M[i][j] -= min_sum\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and sorts it in ascending order according to the sum of its rows.\n    The function returns the sorted matrix.\n    '''\n    # Initialize the sum of the first row as the key for sorting\n    key = sum(M[0])\n    \n    # Initialize the sorted matrix with the first row\n    sorted_M = [M[0]]\n    \n    # Loop through the remaining rows of the matrix\n    for i in range(1, len(M)):\n        # Calculate the sum of the current row\n        current_row_sum = sum(M[i])\n        \n        # If the current row sum is smaller than the key, replace the sorted matrix with the current row\n        if current_row_sum < key:\n            sorted_M = [M[i]]\n            key = current_row_sum\n        # If the current row sum is equal to the key, add the current row to the sorted matrix\n        elif current_row_sum == key:\n            sorted_M.append(M[i])\n            \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n\n        # Initialize a variable to keep track of the current minimum sum\n        min_sum = float('inf')\n\n        # Loop through each element in the current row\n        for j in range(len(M[i])):\n\n            # Calculate the sum of the current row\n            row_sum = sum(M[i])\n\n            # Update the minimum sum if the current element is smaller than the current minimum sum\n            if row_sum < min_sum:\n                min_sum = row_sum\n\n        # Loop through each element in the current row again to find the minimum sum and replace it with the current element\n        for j in range(len(M[i])):\n            if M[i][j] == min_sum:\n                M[i][j] = M[i][j-1]\n                break\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        max_sum = max(M[i][j] for j in range(n))\n        for j in range(n):\n            if M[i][j] == max_sum:\n                M[i][j] = 0\n            else:\n                M[i][j] = 1\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-i-1):\n            if M[i][j] > M[i][j+1]:\n                # swap elements\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[0])):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Find the sum of the current row\n        row_sum = sum(M[i])\n        # Initialize two variables to keep track of the current minimum and maximum values for each row\n        min_val = M[i][i]\n        max_val = M[i][i]\n        # Iterate through each element in the current row\n        for j in range(i+1, n):\n            # Check if the current element is smaller than the minimum value for the row\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n            # Check if the current element is greater than the maximum value for the row\n            if M[i][j] > max_val:\n                max_val = M[i][j]\n        # Iterate through each element in the current row\n        for k in range(i, n):\n            # If the current element is smaller than the minimum value for the row, swap it with the minimum value\n            if M[k][j] < min_val:\n                M[k][j], M[i][j] = M[i][j], M[k][j]\n            # If the current element is greater than the maximum value for the row, swap it with the maximum value\n            if M[k][j] > max_val:\n                M[k][j], M[i][j] = M[i][j], M[k][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Sort each row in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    # Sort the matrix in ascending order according to the sum of its rows\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    # create a list to store the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # create a list to store the sorted matrix\n    sorted_M = []\n    # iterate over each row in the matrix and append the row with the smallest sum to the sorted matrix\n    for i in range(n):\n        row = M[i]\n        sum_i = row_sums[i]\n        row_j = min([row for j in range(n) if row[j]!= i and row[j]!= j and row[j]!= sum_i], key=sum)\n        sorted_M.append(row_j)\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5*l*b*h "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function calculates the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism using the formula:\n    V = (1/2)bh\n    where V is the volume, l is the length of the base, b is the length of the height, and h is the height of the prism.\n    '''\n    V = 0.5 * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Calculate the volume using Heron's formula\n    area = (l * b * h) / 2.0\n    volume = (area * l) / 3.0\n    \n    # Return the volume as a float value\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate volume of a triangular prism using Heron's formula\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    Parameters:\n    l (float): length of the prism side.\n    b (float): width of the prism side.\n    h (float): height of the prism side.\n\n    Returns:\n    volume (float): the volume of the triangular prism.\n    \"\"\"\n\n    volume = (1/3) * l * b * h\n\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'\\b[a-z]+[_-][a-z]+\\b'\n    match = re.search(pattern, text.lower())\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])_+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Compile regex pattern to match lowercase letters followed by an underscore\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n\n    # Check if the input string matches the regex pattern\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!_)\\b[a-z]+\\b(?!_)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+_+$')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])[A-Z](?=[a-z])|(?<=\\d)[a-z]\"\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"([a-z]+)_+([a-z]+)\"\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+[_][a-z]+'\n    # Use re.search() function to match the pattern in the input string\n    match = re.search(pattern, text)\n    # Return True if a match is found, False otherwise\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'([a-z]+)_([a-z]+)'\n    underscore_match = re.findall(underscore_pattern, text)\n    if underscore_match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    '''\n    This function takes two strings as input and returns a new string where all characters present in the second string are removed from the first string.\n    '''\n    # creating an empty list to store unique characters\n    unique_chars = []\n\n    # loop through each character in the first string\n    for char in string1:\n        # check if the character is not present in the second string\n        if char not in string2:\n            # if it is not present, add it to the unique_chars list\n            unique_chars.append(char)\n\n    # convert the unique_chars list to a string and return it\n    return ''.join(unique_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and removes characters from the first string which are present in the second string.\n    '''\n    # create an empty list to store the characters to be removed\n    remove_list = []\n    # loop through each character in the first string\n    for char in string:\n        # if the character is in the second string, add it to the remove_list\n        if char in string:\n            remove_list.append(char)\n    # loop through each character in the first string and remove the characters in the remove_list\n    for i in range(len(string)):\n        if string[i] in remove_list:\n            string = string[:i] + string[i+1:]\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [string[i] for i in range(len(string))]\n    list2 = [chr(i) for i in range(NO_OF_CHARS)]\n    result = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            result.append(list1[i])\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    # Convert string to list\n    string_list = list(string)\n    # Find the characters which are present in the second string\n    char_list = list(set(string) - set(string_list))\n    # Remove characters from the first string\n    for char in char_list:\n        string_list.remove(char)\n    # Convert the list back to a string\n    result = ''.join(string_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string, list_of_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in list_of_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the characters from the first string\n    that are not present in the second string.\n    \"\"\"\n    # Converting the strings to lists of integers\n    string_list = list(string)\n    char_list = list(range(NO_OF_CHARS))\n\n    # Removing the characters from the first string which are present in the second string\n    for char in string_list:\n        if char in char_list:\n            char_list.remove(char)\n\n    # Converting the list of integers back to a string\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    # Remove all occurrences of special characters from the string\n    string = ''.join(c for c in string if c.isalnum() or c =='')\n\n    # Create a list of characters from the string\n    char_list = list(string)\n\n    # Shuffle the list of characters\n    random.shuffle(char_list)\n\n    # Remove the first NO_OF_CHARS characters from the list\n    char_list = char_list[NO_OF_CHARS:]\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    \n    # Create a dictionary to store the frequency of characters in the first string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Create a list to store the characters to be removed\n    chars_to_remove = []\n    \n    # Loop through the characters in the first string and check if their frequency is 1 in the second string\n    for char in freq_dict:\n        if freq_dict[char] == 1 and char not in string:\n            chars_to_remove.append(char)\n    \n    # Remove the characters from the first string\n    for char in chars_to_remove:\n        string = string.replace(char, \"\")\n    \n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Loop through the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            # If the element is already in the dictionary, increment its count by 1\n            count_dict[num] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            count_dict[num] = 1\n\n    # Check if any element in the dictionary has a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # If no element has a count greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Use a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to remove duplicates from the array\n    unique_nums = set(arraynums)\n    # Check if the length of the set is less than or equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        print(\"The array doesn't contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    nums_set = set(arraynums)\n    if len(nums_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0 or x > 100:\n        return \"Invalid input!\"\n    elif x == 0:\n        return \"Woodball!\"\n    elif x % 2 == 0:\n        return \"Woodball!\"\n    else:\n        return \"Not a woodball!\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return \"Woodball\"\n    else: \n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [2, 3, 5, 7]\n    for num in woodball:\n        if num == x:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x % 3 == 0 and x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 4 or x % 10 == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n\n    if x == 24 or x == 32 or x == 40 or x == 48 or x == 56 or x == 64 or x == 72 or x == 80 or x == 88 or x == 96:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    elif x % 2 == 0:\n        return is_woodall(x//2)\n    else:\n        return x**2 + is_woodall(x//2) + 2*x + 1"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x in [6, 12, 24, 48, 96, 192, 384]:\n            return True\n        else:\n            return False\n    else:\n        if x in [3, 9, 27, 81, 243, 729, 2187]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize the variables to store the reversed number and the reversed twice number\n    reversed_num = \"\"\n    reversed_twice = \"\"\n    # Loop through the digits of the number in reverse order\n    for i in range(len(num_str)-1, -1, -1):\n        # Append each digit to the corresponding reversed variable\n        reversed_num += num_str[i]\n        reversed_twice += num_str[i]\n    # Check if the reversed twice number is one less than the original number\n    if int(reversed_twice) < int(num_str):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse + 1 == num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Convert the reversed string back to a number\n    rev_num = int(rev_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num < 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # Check if the reversed integer is one less than twice the original integer\n    if rev_int == 2*num-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num = num // 10\n    \n    return reverse <= 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # convert the string to a list of characters\n    num_list = list(num_str)\n    # reverse the list\n    rev_list = num_list[::-1]\n    # convert the reversed list back to a string\n    rev_str = ''.join(rev_list)\n    # convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # check if the original number is one less than twice its reverse\n    if num == rev_int - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    str_num = str(num)\n\n    # reverse the string\n    rev_str = str_num[::-1]\n\n    # convert the reversed string to an integer\n    rev_num = int(rev_str)\n\n    # check if the reversed number is one less than twice the original number\n    if num == rev_num - 2:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = (rev_num * 10) + temp % 10\n        temp //= 10\n    return rev_num - num == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes an integer `num` and checks if it is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    \n    # Check if the reverse is one less than twice the original\n    return reverse == num + 1 and num!= 0"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    # initialize max_num as the first digit in the list\n    max_num = arr[0]\n    # loop through the list of digits\n    for i in range(1, len(arr)) : \n        # loop through all possible combinations of the current digit and the remaining digits\n        for j in range(i, len(arr)) : \n            # calculate the sum of the current digit and the remaining digits\n            temp_num = arr[i] + arr[j]\n            # if the sum is greater than max_num, update max_num\n            if temp_num > max_num : \n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Sort the input list in ascending order\n    arr.sort()\n\n    # Initialize variables to store the largest number and the current number\n    max_num = arr[0]\n    curr_num = arr[0]\n\n    # Loop through the sorted list and check if the current number can be formed with the remaining digits\n    for i in range(1, len(arr)):\n        if curr_num % arr[i] == 0:\n            curr_num *= arr[i]\n            if curr_num > max_num:\n                max_num = curr_num\n        else:\n            break\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        max_num = max_num*10 + i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                temp_num = int(''.join(sorted(str(arr[i])+str(arr[j]))))\n                if temp_num > max_num:\n                    max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as an input and returns the largest number that can be formed with those digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n) : \n        for j in range(i+1, n+1) : \n            for k in range(j+1, n+1) : \n                max_num = max(max_num, arr[i]*1000 + arr[j]*100 + arr[k])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using these digits.\n    '''\n    # Sorting the list of digits in ascending order\n    arr.sort()\n\n    # Initializing variables to keep track of the current number being formed and the current number of digits being used\n    current_number = 0\n    num_of_digits = 0\n\n    # Looping through the sorted list of digits\n    for digit in arr:\n        # If the current digit is equal to 1, then we can use it to form a number\n        if digit == 1:\n            # We check if the current number can be formed using the current digit and the number formed so far\n            if current_number % 2 == 0:\n                current_number += digit\n                num_of_digits += 1\n            else:\n                current_number += digit - 1\n                num_of_digits += 1\n        else:\n            # If the current digit is not equal to 1, we can use it to form a number\n            current_number = digit * (2 ** num_of_digits)\n\n    # Returning the maximum possible number that can be formed using the given digits\n    return current_number"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # create a set to store unique digits in the given list\n    digits = set(arr)\n\n    # sort the digits in non-decreasing order\n    digits = sorted(digits)\n\n    # convert the sorted list to a string\n    digits_str = ''.join(map(str, digits))\n\n    # convert the string to an integer\n    digits_int = int(digits_str)\n\n    # find the maximum number that can be formed by using only one digit\n    max_num = digits_int + 9\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with the digits.\n    \"\"\"\n    arr.sort(reverse=True) # Sorting the digits in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i+1):\n            temp = temp * 10 + arr[j]\n        max_num = max(max_num, temp)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_sum = 0\n\n    for i in range(1, n + 1):\n        current_sum = sum([int(digit) * i for digit in arr])\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed by those digits.\n    \"\"\"\n    arr = list(map(int, arr)) # converting the string elements to integers\n\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if their signs are opposite, and False otherwise.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0 or y == 0: \n        return False\n\n    if x * y < 0: \n        return True\n\n    return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and checks whether they have opposite signs or not.\n    If they have opposite signs, it returns True. Otherwise, it returns False.\n    \"\"\"\n\n    # If x is less than y, then x has an opposite sign to y\n    if x < y:\n        return True\n    # If x is greater than y, then x has an opposite sign to y\n    elif x > y:\n        return False\n    # If x is equal to y, then x and y have same sign\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if both the numbers have opposite signs\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # finding the sign of both integers\n    x_sign = 1 if x>=0 else -1\n    y_sign = 1 if y>=0 else -1\n    \n    # checking if the sign of both integers are opposite\n    if x_sign!= y_sign:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0:\n        return False\n    elif y == 0:\n        return False\n    else:\n        if x*y < 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x == 0 and y == 0) or (x == y):\n        return True\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # calculate the number of digits in the number\n    digits = len(str(n))\n\n    # calculate the sum of the cubes of the digits\n    cube_sum = sum([int(digit)**3 for digit in str(n)])\n\n    # calculate the difference between the cube of the number and the octagonal number\n    difference = (cube_sum - n)\n\n    # return the octagonal number if difference is zero, otherwise return None\n    if difference == 0:\n        return n\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_prime(num):\n        '''\n        Function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def octagonal(num):\n        '''\n        Function to calculate the nth octagonal number.\n        '''\n        if is_prime(num):\n            return 2*num**2 - 1\n        else:\n            return 2*num**2 + 1\n\n    return octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 8\n        else:\n            return 1 + 8 * nth_octagonal(n-1)\n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # check if n is an integer\n    if not isinstance(n, int):\n        return \"n must be an integer.\"\n    # check if n is greater than 0\n    if n <= 0:\n        return \"n must be greater than 0.\"\n    # initialize sum and counter\n    sum = 0\n    counter = 1\n    # loop through the range n to infinity\n    while counter <= n:\n        # add the square of the counter to the sum\n        sum += counter ** 2\n        # increment the counter\n        counter += 1\n    # return the sum\n    return sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 0\n    for i in range(1, n+1):\n        octagonal_number += i**2\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal = n * (2 * n - 1)\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize a variable to keep track of the octagonal number\n    octagonal = 0\n    # Loop through each row\n    for i in range(1, n+1):\n        # Increment the octagonal number by 1 for each row\n        octagonal += 1\n        # Loop through each column\n        for j in range(1, i+1):\n            # Add the current octagonal number to the total\n            octagonal += 1\n            # Check if the current number is an octagonal number\n            if octagonal == n:\n                return True\n    # If no octagonal number is found, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def octagonal_helper(n):\n        if n == 0:\n            return 0\n        elif n % 2 == 0:\n            return 4 * n + 1\n        else:\n            return 3 * n + 1\n\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        return octagonal_helper(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # First, calculate the value of a^(3/2)\n    a = 2 * (n * (n+1) ** 0.5)\n\n    # Next, calculate the nth octagonal number by multiplying a by the number of rows\n    octagonal_number = n * a\n\n    # Check if the octagonal number is an integer\n    if octagonal_number.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each character to the right of the current character\n        for j in range(i+1, len(s)+1):\n            # extract the substring and convert it to a list of digits\n            digit_list = list(map(int, str(s[i:j])))\n            # calculate the sum of the digits\n            digit_sum = sum(digit_list)\n            # if the sum of digits is equal to the length of the substring, increment the count in the dictionary\n            if digit_sum == len(digit_list):\n                count_dict[digit_list] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            sum_digits = sum(map(int, substring))\n            if sum_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    # Create a defaultdict to store the count of substrings for each sum of digits\n    substring_counts = defaultdict(int)\n    \n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the current substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n            # If the sum of digits is equal to the length of the substring, increment the count for that substring\n            if substring_sum == len(s[i:j+1]):\n                substring_counts[substring_sum] += 1\n    \n    # Return the count of substrings with a sum of digits equal to the length of the substring\n    return sum(1 for count in substring_counts.values() if count > 1)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n\n    # Count the frequency of each digit\n    for c in s:\n        freq[int(c)] += 1\n\n    # Initialize the count of substrings\n    count = 0\n\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # initialize a dictionary to store the count of substrings with given sum\n    count = defaultdict(int)\n\n    # iterate through all the substrings of length i+1 of the input string s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring is equal to its length\n            if sum([int(digit) for digit in s[i:j]]) == len(s[i:j]):\n                count[len(s[i:j])] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with a particular sum\n    count = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(d) for d in s[i:j])\n\n            # Add the count to the dictionary for the current sum\n            count[substring_sum] += 1\n\n    # Return the total count of substrings with the sum of digits equal to their length\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    char_count = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        char_count[s[i]] += 1\n\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n        \n    substring_count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring_count += digit_count[sum([int(digit) for digit in s[i:j]])]\n    \n    return substring_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        count[i] = s[i]\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum([int(digit) for digit in substring])\n            if sum_of_digits == len(substring):\n                count[i] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        counts[s[i]] += 1\n    total_count = 0\n    for j in range(n):\n        for k in range(i, n):\n            s_sum = sum(map(int, s[i:k+1]))\n            counts[s_sum] -= 1\n            if counts[s_sum] == 0:\n                del counts[s_sum]\n            if s_sum == len(s_sum):\n                total_count += 1\n    return total_count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None # if the list is empty, return None\n    else:\n        return min(xs) # use the built-in function min to find the smallest element in the list"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list `xs` as input and returns the smallest number in the list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Sort the list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference and its index\n    max_diff = sorted_list[1][1] - sorted_list[0][1]\n    max_diff_index = 0\n\n    # Loop through the sorted list to find the maximum difference\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][0] - sorted_list[i - 1][1] > max_diff:\n            max_diff = sorted_list[i][0] - sorted_list[i - 1][1]\n            max_diff_index = i\n\n    # Return the maximum difference and its index\n    return max_diff, max_diff_index"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = None\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if j > i:\n                diff = abs(test_list[i][1] - test_list[j][1])\n                if max_diff is None or diff > max_diff:\n                    max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables to hold minimum and maximum values\n    minimum = test_list[0][0]\n    maximum = test_list[0][1]\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if current tuple is smaller than minimum value\n        if tup[0] < minimum:\n            minimum = tup[0]\n        # Check if current tuple is larger than maximum value\n        if tup[1] > maximum:\n            maximum = tup[1]\n\n    # Return the maximum difference between minimum and maximum values\n    return maximum - minimum"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1]-test_list[j][1], test_list[j][1]-test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given list of tuples in ascending order based on the second element\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Iterate over the sorted list\n    for i in range(len(test_list) - 1):\n        # Calculate the current difference between the two elements in the tuple\n        curr_diff = test_list[i+1][1] - test_list[i][1]\n        \n        # Update the maximum difference if the current difference is greater than the current maximum\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if not test_list:\n        return None\n\n    test_list.sort()\n\n    max_diff = 0\n\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Use a lambda function to sort the list by the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = [item for sublist in data_list for item in sublist]\n    total = sum(flattened_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        if isinstance(lst, list):\n            for item in lst:\n                flatten_list(item)\n        else:\n            flat_list.append(lst)\n\n    flat_list = []\n    flatten_list(data_list)\n\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # If the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Flatten the list recursively\n    flattened_list = [item for sublist in data_list for item in sublist]\n    \n    # Sum the flattened list\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list) == int or type(data_list) == float:\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 0:\n        return 0\n    # Recursive case\n    else:\n        first_element = data_list[0]\n        rest_of_elements = data_list[1:]\n        sum_of_rest = recursive_list_sum(rest_of_elements)\n        return first_element + sum_of_rest"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the count of positive numbers in the given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    # Base case: n = 0 or n = 1, return 1\n    if n == 0 or n == 1:\n        return 1\n    else:\n        # Recursive case: n > 1, calculate and add to the count\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    def count_partitions(left, right, target, memo):\n        if left == 0:\n            return 1\n        if target < 0 or left > right:\n            return 0\n        if (left, right, target) in memo:\n            return memo[(left, right, target)]\n\n        result = count_partitions(left - 1, right, target, memo) + count_partitions(left, right - 1, target - left, memo)\n        memo[(left, right, target)] = result\n        return result\n\n    memo = {}\n    return count_partitions(n, n, 0, memo)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*(2*n - 1)\n\ndef partition_bell_numbers(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        ways = 0\n        for i in range(1, n + 1):\n            ways += bell_number(i) * bell_number(n - i)\n        return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    def helper(x, y):\n        if x == y:\n            return 1\n        elif x == 0:\n            return y + 1\n        elif y == 0:\n            return x + 1\n        else:\n            return helper(x - 1, y) + helper(x, y - 1)\n    \n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    # Initialize variables\n    dp = [1] * (n + 1)\n    count = 0\n\n    # Fill the DP array\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i] += dp[j - 1] * dp[i - j]\n\n    # Calculate the final result\n    for i in range(1, n + 1):\n        count += dp[i]\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Count the number of ways to partition the set\n        ways *= (i+1) // n\n        \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # base case: if n = 0, there is only one way to partition the set\n    if n == 0:\n        return 1\n\n    # initialize the number of ways to partition the set to 0\n    ways = 0\n\n    # loop through all possible values of i from 1 to n\n    for i in range(1, n+1):\n        # if i is a power of 2, there is only one way to partition the set\n        if (i & (i-1)) == 0:\n            ways += 1\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list of all Bell numbers up to n\n    bell_nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    \n    # Initialize a list to store the number of ways to partition the set\n    ways_to_partition = [0] * (n+1)\n    \n    # Base case: if n is equal to 0, there is one way to partition the set\n    ways_to_partition[0] = 1\n    \n    # Base case: if n is equal to 1, there is one way to partition the set\n    ways_to_partition[1] = 1\n    \n    # Loop through the list of Bell numbers\n    for i in range(2, len(bell_nums)):\n        # Loop through the list of Bell numbers up to and including i\n        for j in range(i, n+1):\n            # Check if the Bell number at index j can be used to partition the set\n            if j % bell_nums[i-1] == 0:\n                # If so, increment the count of ways to partition the set\n                ways_to_partition[j] += ways_to_partition[j-i]\n    \n    # Return the final count of ways to partition the set\n    return ways_to_partition[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for i in range(n+1):\n        ways += binomial(n, i)\n    return ways\n\ndef binomial(n, k):\n    '''\n    Calculate binomial coefficient\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    # check if all elements are same\n    if A[0] == A[1]:\n        return True\n    \n    # check if elements are in increasing order\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n    \n    # check if elements are in decreasing order\n    for i in range(n-2, -1, -1):\n        if A[i] >= A[i+1]:\n            return False\n    \n    # if all checks pass, it is a monotonic array\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # check if the array is monotonic in terms of increasing order\n    if A[0] < A[1] and A[1] < A[-1] and A[-1] < A[-2]:\n        return True\n    \n    # check if the array is monotonic in terms of decreasing order\n    elif A[0] > A[1] and A[1] > A[-1] and A[-1] > A[-2]:\n        return True\n    \n    # if none of the above cases are true, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize variables for tracking the increasing and decreasing properties\n    increasing = True\n    decreasing = True\n    \n    # Iterate through the array\n    for i in range(1, len(A)):\n        # Check if the element is increasing or decreasing\n        if A[i] > A[i-1]:\n            increasing = False\n        elif A[i] < A[i-1]:\n            decreasing = False\n        \n        # Check if both increasing and decreasing properties are not met\n        if not increasing and not decreasing:\n            return False\n    \n    # If both increasing and decreasing properties are met, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    # check for increasing sequence\n    if A[0] < A[1] and A[1] < A[2] and A[2] < A[3] and A[3] < A[4]: \n        return True\n    \n    # check for decreasing sequence\n    elif A[0] > A[1] and A[1] > A[2] and A[2] > A[3] and A[3] > A[4]: \n        return True\n    \n    # if none of the above conditions are true, it is not a monotonic sequence\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # check if the array is monotonic\n    if A[0] < A[1] and A[-1] > A[-2]:\n        return True\n    elif A[0] > A[1] and A[-1] < A[-2]:\n        return True\n    elif A[0] == A[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]: # if the array is monotonic, then the first element should be smaller than the second element\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False # if the current element is not smaller than or equal to the previous element, then the array is not monotonic\n        return True\n    \n    if A[0] > A[1]: # if the array is monotonic, then the first element should be greater than the second element\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False # if the current element is not greater than or equal to the previous element, then the array is not monotonic\n        return True\n    \n    # if the array is not monotonic, then it should not reach here\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize a boolean variable to keep track of whether the array is monotonic or not\n    is_monotonic = True\n    \n    # Iterate over the array\n    for i in range(len(A)-1):\n        # If the element is greater than the next element, then the array is not monotonic\n        if A[i] > A[i+1]:\n            is_monotonic = False\n            break\n    \n    # Return whether the array is monotonic or not\n    return is_monotonic"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists as input - l and s. \n    The function checks if s is a sublist of l, i.e., whether s is a subsequence of l.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists as input and returns True if the first list contains the second list as a sublist,\n    otherwise, it returns False.\n    '''\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]!= l[i]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(s, list):\n        raise TypeError(\"The second argument must be a list.\")\n    for item in s:\n        if item not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n        else:\n            break\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    #initialize an empty dictionary to store the lengths of each tuple\n    length_dict = {}\n    \n    #iterate through each tuple in the input list\n    for tup in Input:\n        \n        #if the tuple is not in the dictionary, add it with its length as the value\n        if tup not in length_dict:\n            length_dict[tup] = len(tup)\n        \n        #if the tuple is already in the dictionary, check if the length is equal to the value in the dictionary\n        else:\n            if len(tup)!= length_dict[tup]:\n                return False\n    \n    #if all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(i) == len(Input[0]) for i in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a counter variable to keep track of the number of tuples that have equal length\n    count = 0\n\n    # Loop through the list of tuples\n    for i in Input:\n\n        # Check if the length of each tuple is equal to the length of the first tuple in the list\n        if len(i) == len(Input[0]):\n            count += 1\n\n    # Check if all the tuples have equal length\n    if count == len(Input):\n        print(\"All the tuples have equal length.\")\n    else:\n        print(\"Not all the tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Initialize a variable to store the maximum length of the tuples\n    max_len = 0\n    \n    # Iterate through the input list of tuples\n    for tup in Input:\n        # Calculate the length of the current tuple\n        length = len(tup)\n        \n        # If the length is greater than the current maximum length, update the maximum length\n        if length > max_len:\n            max_len = length\n    \n    # Check if all tuples have the same length\n    if max_len == len(Input[0]):\n        # If they do, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # check if all tuples in the list have equal length\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple\n    len1 = len(Input[0])\n\n    # Iterate over all the tuples in the Input list\n    for tup in Input:\n        # If the length of a tuple is not equal to the length of the first tuple, return False\n        if len(tup)!= len1:\n            return False\n\n    # If all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of numbers to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n\n    # initialize the gap to the length of the list\n    gap = len(nums)\n\n    # while the gap is greater than 1, iterate through the list\n    while gap > 1:\n        # calculate the new gap based on the previous gap\n        gap = int(gap/1.3)\n\n        # iterate through the list using a for loop and the gap\n        for i in range(gap, len(nums)):\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    k = 1\n    while k < n:\n        swapped = False\n        for i in range(n-k):\n            if nums[i] > nums[i+k]:\n                nums[i], nums[i+k] = nums[i+k], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        k *= 1.3\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    limit = len(nums)\n    while swapped:\n        swapped = False\n        for i in range(limit - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n        limit //= 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n\n    Args:\n        nums (list): List of elements to sort.\n\n    Returns:\n        list: Sorted list of elements.\n    '''\n\n    # initialize the parameters of the comb sort algorithm\n    max_iter = 200 # maximum number of iterations\n    min_swaps = 10 # minimum number of swaps to sort the list\n\n    # keep track of the number of swaps and the maximum element\n    swaps = 0\n    max_num = nums[0]\n    for num in nums[1:]:\n        if num > max_num:\n            max_num = num\n        if num < max_num // 2:\n            swaps += 1\n\n    # implement the comb sort algorithm\n    while swaps > min_swaps and max_iter > 0:\n        swaps = 0\n        gap = max_num // 2\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swaps += 1\n        max_iter -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of integers using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        for i in range(end - 1, start - 1, -1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n        start += 1\n        end -= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a simple sorting algorithm that works by repeatedly sorting a sublist of the list by repeatedly swapping adjacent elements if they are in the wrong order. The algorithm works by repeatedly performing these swaps until the sublist is sorted. The algorithm is named after the mathematician Albert Comb.\n\n    Args:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    A list of integers sorted in ascending order.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start, end = 0, n - 1\n\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        start += 1\n        end -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap * 10) // 13\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            if j < (n - gap) and nums[j] < nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 4:\n        return False\n    elif n == 9:\n        return True\n    elif n == 16:\n        return False\n    elif n == 25:\n        return True\n    elif n == 36:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if dif_Square(n//i) and dif_Square(n//i - i):\n                    return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = 0\n    b = n\n    while b > 0:\n        a += b**2\n        b //= 2\n    return a == n**2\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Check whether a given number can be represented as the difference of two squares.\n    \n    :param n: An integer to be checked.\n    :return: True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    \n    # check if n is even\n    if n % 2 == 0:\n        return False\n    \n    # check if n can be expressed as the difference of two squares\n    square = int(n**0.5)\n    if square * square == n:\n        return True\n    \n    # check if n can be expressed as the difference of three squares\n    third_square = int(n**(1/3))\n    if third_square * third_square * third_square == n:\n        return True\n    \n    # if none of the above conditions are met, n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n\n    b = n\n    while b*b <= a:\n        if a == b*b:\n            return True\n        else:\n            a -= b\n            b = n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is less than 0\n    if n < 0:\n        return \"The given number should be a positive integer.\"\n\n    # Check if the given number is a power of 2\n    power = 0\n    while n > 0:\n        n = n // 2\n        power += 1\n\n    # Check if the power of 2 is less than 3 (since the number needs to be a power of 2)\n    if power < 3:\n        return \"The given number should be a power of 2.\"\n\n    # Check if the given number can be represented as the difference of two squares\n    a = n // 2\n    b = n - a\n    c = b * b\n    d = n - c\n\n    if a * a == d and b * b == c:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_square(num):\n    '''\n    Write a Python function to check whether the given number is a perfect square or not.\n    '''\n    return num == int(num ** 0.5) ** 2\n\ndef dif_Square(num):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if is_square(num):\n        return 'The number can be represented as the difference of two squares.'\n    else:\n        return 'The number cannot be represented as the difference of two squares.'"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Check if the given number is positive or not\n    if n < 0:\n        return \"The given number must be positive!\"\n\n    # Initialize two variables to store the square of each digit of the given number\n    square_list = [int(digit)**2 for digit in str(n)]\n\n    # Check if the sum of the squares of each digit is greater than or equal to the square of the given number\n    if sum(square_list) >= square_list[0]:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number is negative\n    if n < 0:\n        return \"The number should be non-negative.\"\n\n    # Check if the number is greater than or equal to 10\n    if n >= 10:\n        return \"The number should be less than or equal to 9.\"\n\n    # Square the number and check if it's divisible by 10\n    square = n**2\n    if square % 10 == 0:\n        return \"The number can be represented as the difference of two squares.\"\n    else:\n        return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n % (n//i) == 0:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    current_pattern = ''\n\n    # Iterate through the colors array\n    for color in colors:\n\n        # If the current color is the same as the last color in the previous pattern, increment the counter\n        if color == current_pattern[-1]:\n            current_pattern += color\n        else:\n            current_pattern = color + current_pattern\n\n    # Check if the current pattern matches any of the patterns in the patterns array\n    for pattern in patterns:\n        if current_pattern == pattern:\n            return True\n\n    # If the current pattern does not match any of the patterns, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if all colors have same pattern\n    for color in colors:\n        if patterns.count(color)!= len(colors):\n            return False\n\n    # Check if all patterns have same color\n    for pattern in patterns:\n        if colors.count(pattern)!= len(patterns):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    color_index = 0\n    pattern_index = 0\n\n    # Loop through all the colors\n    for color in colors:\n        # Check if the color matches the next color in the pattern sequence\n        if color!= patterns[pattern_index]:\n            # If not, return False\n            return False\n        # If the color matches, increment the color index and pattern index\n        else:\n            color_index += 1\n            if color_index == len(patterns[pattern_index]):\n                color_index = 0\n                pattern_index += 1\n                if pattern_index == len(patterns):\n                    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = []\n    for i in range(len(colors)):\n        if patterns[i] == 'S':\n            pattern.append('S')\n        elif patterns[i] == 'R':\n            pattern.append('R')\n        elif patterns[i] == 'G':\n            pattern.append('G')\n        else:\n            pattern.append('B')\n    for i in range(len(colors) - 1):\n        if pattern[i]!= pattern[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists of colors and patterns, one for each player.\n    It returns True if the colors in the first player are the same as the colors in the second player,\n    and the patterns are the same as well.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    else:\n        for i in range(len(patterns)):\n            if colors[i]!= patterns[i]:\n                return False\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the count of each pattern in the colors list\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = colors.count(pattern)\n\n    # Iterate through the colors list and check if the count of each pattern matches the count in the dictionary\n    for color in colors:\n        if color in pattern_counts:\n            if pattern_counts[color] > 0:\n                pattern_counts[color] -= 1\n            else:\n                return False\n\n    # If we have gone through the colors list without finding a pattern that is not repeated, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # check if the colors in colors array are all unique\n    color_set = set(colors)\n    if len(color_set)!= len(colors):\n        return False\n    \n    # check if the patterns in patterns array are all unique\n    pattern_set = set(patterns)\n    if len(pattern_set)!= len(patterns):\n        return False\n    \n    # check if the patterns in patterns array are consecutive\n    for i in range(len(patterns) - 1):\n        if patterns[i] + 1!= patterns[i + 1]:\n            return False\n    \n    # check if the colors in colors array are consecutive\n    for i in range(len(colors) - 1):\n        if colors[i] + 1!= colors[i + 1]:\n            return False\n    \n    # if all checks pass, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if patterns[i][1] == patterns[i+1][0] and patterns[i][0] == colors[i]:\n            return False\n        elif patterns[i][1] == patterns[i+1][1] and patterns[i][0] == colors[i]:\n            return False\n        elif patterns[i][0] == patterns[i+1][0] and patterns[i][1] == colors[i]:\n            return False\n        elif patterns[i][0] == patterns[i+1][1] and patterns[i][1] == colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    # Convert the patterns array to a set to remove duplicates\n    patterns = set(patterns)\n\n    # Check if all the colors in the patterns are present in the colors list\n    if all(color in colors for pattern in patterns for color in pattern):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(x % K == 0 for x in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through each tuple in the list\n    for tuple1 in test_list:\n        # Loop through each tuple in the list again\n        for tuple2 in test_list:\n            # If both tuples have the same elements, check if all elements are divisible by K\n            if tuple1 == tuple2:\n                # If all elements are divisible by K, add the tuple to the result list\n                if all(x % K == 0 for x in tuple1):\n                    result.append(tuple1)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list of tuples): A list of tuples.\n    K (int): An integer denoting the divisor for the elements in the tuples.\n\n    Returns:\n    list of tuples: A list of tuples that have all elements divisible by k from the given list of tuples.\n    \"\"\"\n\n    result = []\n\n    for tup in test_list:\n        # Check if all elements are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(elem % K == 0 for elem in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    count = 0\n    result = []\n\n    for i in range(len(test_list)):\n        j = 0\n        for item in test_list[i]:\n            if item % K == 0:\n                j += 1\n            if j == len(test_list[i]):\n                count += 1\n                result.append(test_list[i])\n                break\n            j += 1\n\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words using whitespace as the delimiter\n    words = s.split()\n    # loop through each word and calculate its length\n    for word in words:\n        if len(word) % 2!= 0:\n            # if the length of the word is odd, return True\n            return True\n    # if no odd length word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    # split the string into words\n    words = s.split()\n    # loop through each word\n    for word in words:\n        # check if the length of the word is odd or even\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even length word\")\n        else:\n            print(f\"{word} is an odd length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    This function checks whether the length of a word is odd or even.\n    \"\"\"\n    words = s.split() #splitting the string into words\n    for word in words:\n        if len(word) % 2 == 0: #checking whether the length of a word is even or odd\n            print(word + \" is even.\")\n        else:\n            print(word + \" is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return word\n    return None"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length.\")\n        else:\n            print(word, \"is an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string s as input and returns True if the length of the word is odd, and False otherwise.\n    \"\"\"\n    word = s.split()[0]\n    length = len(word)\n    if length % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    odd_count = 0\n    for i in word:\n        if len(i) % 2 == 0:\n            odd_count += 1\n    if odd_count == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 1:\n            print(word + \" is an odd length word.\")\n        else:\n            print(word + \" is a even length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even word.\")\n        else:\n            print(f\"{word} is an odd word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base case\n    if n == 1:\n        return 6\n    elif n == 2:\n        return 24\n    elif n == 3:\n        return 120\n    elif n == 4:\n        return 720\n\n    # recursive case\n    else:\n        return tetrahedral_number(n-1) + 2*tetrahedral_number(n-2) - tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the base and indices of the tetrahedron\n    base = [0, 1, 2]\n    indices = [(0, 1, 2), (0, 2, 3), (1, 0, 3), (2, 0, 1)]\n    # Define a function to calculate the index of the next face\n    def next_face(face):\n        index = face[0]\n        for i in range(3):\n            if face[i] not in base:\n                index = indices[index][i]\n        return index\n    # Define the function to calculate the nth tetrahedral number\n    def nth_tetrahedron(n):\n        # Find the starting face\n        face = base\n        # Iterate over the remaining n-1 tetrahedra\n        for i in range(n-1):\n            # Find the next face\n            face = [face[0]]\n            for i in range(3):\n                if face[i] not in base:\n                    face.append(indices[next_face(face)][i])\n            # Increment the base\n            base.append(face[0])\n        # Return the base\n        return base\n    # Call the function to find the nth tetrahedral number\n    return nth_tetrahedron(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    digits = [int(digit) for digit in str(n)]\n    cube_sum = sum([digit**3 for digit in digits])\n    largest_number = n\n    for i in range(1, n+1):\n        digits = [int(digit) for digit in str(i)]\n        cube_sum = sum([digit**3 for digit in digits])\n        if cube_sum == n:\n            largest_number = i\n    return largest_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n\n    if n == 1:\n        return 1\n\n    a = 1\n    b = 5\n    c = 10\n    d = 15\n\n    for i in range(n-2):\n        temp_a = a\n        temp_b = b\n        temp_c = c\n        temp_d = d\n\n        a = b\n        b = c\n        c = d\n        d = (temp_a + temp_b + temp_c + temp_d) // 4\n\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 14 - 6 * n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    # loop through n and update variables\n    for i in range(1, n+1):\n        a = a + 2*b - c\n        b = b + a\n        c = c + 2*d - b\n        d = d + 2*a - c\n    # return the final value of d\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        Calculate the sum of cubes of numbers from 1 to n.\n        \"\"\"\n        return n * (n + 1) * (2 * n + 1) / 6\n    \n    def sum_of_tetrahedra(k, n):\n        \"\"\"\n        Calculate the sum of tetrahedra with a given number of facets.\n        \"\"\"\n        return k * (4 * (n + 1) ** 2 - 6 * (n - 1) ** 2)\n    \n    if n == 1:\n        return 0\n    else:\n        if n % 2 == 0:\n            return 4 * sum_of_cubes(n // 2)\n        else:\n            return 2 * sum_of_tetrahedra(n - 1, n // 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return (2*n**2 + 1) // 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r ** 3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3 # formula for volume of sphere\n    return v"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for i in strr:\n        ascii_value += ord(i)\n    \n    return chr(ascii_value % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize a variable to store the ASCII value of each character in the string\n    ascii_value = [ord(char) for char in strr]\n    # add the ASCII values of all the characters in the string modulo 26\n    char_value = sum(ascii_value) % 26\n    # convert the ASCII value to a character using the chr() function\n    char = chr(char_value)\n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize a variable to store the character\n    char = \"\"\n    \n    # loop through each character in the string\n    for char in strr:\n        # add the ASCII value of the character modulo 26 to the character variable\n        char += chr(((ord(char.upper()) - ord('A') + 13) % 26) + ord('A'))\n        \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    ascii_value = 0\n    \n    for char in strr:\n        ascii_value += ord(char)\n    \n    return chr(ascii_value % 26)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Initialize variables\n    char_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the char_ascii variable\n        char_ascii += ord(char)\n        \n    # Modulo 26 to ensure the character is between A and Z\n    char_ascii %= 26\n    \n    # Convert the ASCII value to a character using chr() function\n    char = chr(char_ascii)\n    \n    # Return the character as the output of the function\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize an empty string to store the ASCII value of characters of the string\n    char_sum = \"\"\n\n    # loop through each character of the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value of the character modulo 26 to the char_sum string\n        char_sum += str(ascii_val % 26)\n\n    # return the character sum as a string\n    return char_sum"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for i in strr:\n        ascii_val += ord(i)\n    return chr(ascii_val % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a string variable to store the character\n    char = ''\n    # loop through each character in the string\n    for char in strr:\n        # get the ASCII value of the character\n        ascii_value = ord(char)\n        # add the ASCII value modulo 26 to the character variable\n        char = chr((ascii_value + 13) % 26 + 97)\n    # return the character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    sequence = []\n    while count <= n:\n        sequence.append(count)\n        count = (10*count + 1) % 20\n    return sequence[-1]\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1, 1, 0]\n    for i in range(n):\n        if sequence[i] == 1:\n            sequence[i] = 0\n            sequence[i+1] = 1\n        else:\n            sequence[i+1] = 0\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] * 3)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(3*sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(n):\n        if i % 2 == 0:\n            sequence.append(2 * sequence[i//2])\n        else:\n            sequence.append(3 * sequence[i//2] + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Define the first three numbers of the sequence\n    a, b, c = 1, 1, 1\n    # Define the number of iterations\n    for i in range(n):\n        # Generate the next number in the sequence\n        a, b = b, 4 * a + b\n        c = 2 * c - a\n    # Return the nth number in the sequence\n    return c"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2])\n\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 1 + sequence(n-1)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2  # formula for sphere surface area\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere: 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Use the formula for the surface area of a sphere with radius r:\n    surface_area = 4*math.pi*(r**2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert radius from meters to centimeters\n    r = r * 100\n    \n    # Formula for surface area of a sphere\n    surface_area = (4/3) * math.pi * r ** 3\n    \n    # Return surface area as a float\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r ** 2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Finding the number of rows and columns required\n    m = n // 2\n    rows = n // 2 + n % 2\n    \n    # Finding the position of the center hexagon\n    col = (m + 1) * 3\n    \n    # Initializing the variables\n    p = 1\n    q = 1\n    sum_p = 0\n    sum_q = 0\n    \n    # Loop for finding the centered hexagonal number\n    for i in range(rows):\n        for j in range(col):\n            if i == 0 and j == 0:\n                sum_p += p\n                sum_q += q\n            elif i == rows - 1 and j == col - 1:\n                sum_p += p\n                sum_q += q\n            else:\n                sum_p += p * q\n                sum_q += p * (3 - q)\n            p += 1\n            q += 1\n    \n    # Returning the centered hexagonal number\n    return sum_p + sum_q - n + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Function to find the number of rows and columns for the centered hexagonal number\n    def centered_hexagonal_dimensions(n):\n        m = n - 1\n        return 2 * m - 1, 2 * m\n    \n    # Function to find the coordinates of the centered hexagonal number\n    def centered_hexagonal_coordinates(m, n):\n        return (m, n - m)\n    \n    # Find the dimensions of the centered hexagonal number\n    rows, cols = centered_hexagonal_dimensions(n)\n    \n    # Calculate the coordinates of the centered hexagonal number\n    x, y = centered_hexagonal_coordinates(rows, cols)\n    \n    # Return the centered hexagonal number\n    return x * x + 3 * x * y + y * y"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    total = 0\n    i = 1\n    j = 1\n    k = 1\n\n    # Check if n is odd or even\n    if n % 2 == 0:\n        total = i + j + 2 * k\n        return total\n    else:\n        total = i + j + 2 * k - 1\n        return total\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize a variable to store the centered hexagonal number\n    centered_hex = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Calculate the centered hexagonal number for each iteration\n        centered_hex = 2 * (centered_hex + 1)\n    \n    # Return the centered hexagonal number\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 17\n    elif n == 3:\n        return 27\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = (1 + 5 ** 0.5) / 2\n    b = 1 / a\n    return int(n * a * b)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return (3 * n**2 + 1) // 2\n    else:\n        return (3 * n**2 + 1) // 2 - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the first centered hexagonal number\n    num = 1\n    \n    # loop through the number of times specified by n\n    for i in range(n):\n        # add the current centered hexagonal number to the next two\n        num += 2*num\n    \n    # return the centered hexagonal number\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        k = (n+1) // 2 - 1\n    else:\n        k = (3*n-1) // 2\n    \n    return k"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number\n        hex_num = (i * (2*i-1)) // 3\n\n        # Add the centered hexagonal number to the sum\n        sum += hex_num\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.ChainMap(dict1,dict2,dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    \n    for key in dict1:\n        merged_dict[key].append(dict1[key])\n    \n    for key in dict2:\n        merged_dict[key].append(dict2[key])\n    \n    for key in dict3:\n        merged_dict[key].append(dict3[key])\n        \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1 and key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] if dict1[key] > dict2[key] else dict2[key] if dict2[key] > dict1[key] else dict3[key]\n        elif key in dict1 and key in dict2:\n            merged_dict[key] = dict1[key] if dict1[key] > dict2[key] else dict2[key]\n        elif key in dict1 and key in dict3:\n            merged_dict[key] = dict1[key] if dict1[key] > dict3[key] else dict3[key]\n        elif key in dict2 and key in dict3:\n            merged_dict[key] = dict2[key] if dict2[key] > dict3[key] else dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary containing\n    all the key-value pairs from all the input dictionaries.\n    '''\n    # create an empty dictionary to store the merged dictionary\n    merged_dict = {}\n    \n    # loop through all the key-value pairs in the first dictionary\n    for key in dict1:\n        # add the key-value pair to the merged dictionary\n        merged_dict[key] = dict1[key]\n    \n    # loop through all the key-value pairs in the second dictionary\n    for key in dict2:\n        # add the key-value pair to the merged dictionary if the key is not already in the merged dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    \n    # loop through all the key-value pairs in the third dictionary\n    for key in dict3:\n        # add the key-value pair to the merged dictionary if the key is not already in the merged dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1: dictionary to be merged\n    - dict2: dictionary to be merged\n    - dict3: dictionary to be merged\n\n    Returns:\n    - merged_dict: a single dictionary with the keys and values from dict1, dict2, and dict3\n    \"\"\"\n\n    merged_dict = {}\n\n    # Merge the dictionaries using the update() method\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries as input and returns a merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n\n    merged_dict = {}\n    \n    # Merge the first two dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Merge the third dictionary with the merged dictionaries\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # convert the list to a set to remove duplicates\n    unique_set = set(list1)\n\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # iterate over the unique set to count the frequency of each element\n    for item in unique_set:\n        freq_dict[item] = list1.count(item)\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list,\n    returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through each element in the list\n    for item in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest number to be the input number\n    closest = N\n    \n    # Iterate through the numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(i - N)\n        \n        # If the current number is closer than the closest number, update the closest number\n        if diff < abs(closest - N):\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # find the smallest number smaller than n\n    min_num = N - 1\n    # find the largest number larger than n\n    max_num = N + 1\n    # find the closest smaller number than n\n    if N % 2 == 0:\n        closest_num = (min_num + max_num) // 2\n    else:\n        closest_num = (min_num + max_num + 1) // 2\n    # find the difference between n and the closest smaller number\n    diff = N - closest_num\n    # return the closest smaller number if the difference is smaller than 1\n    if diff < 1:\n        return closest_num\n    # return the closest smaller number if the difference is equal to 1\n    else:\n        return closest_num - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    min_diff = N - N\n    \n    for i in range(N-1, 0, -1):\n        if i - N < 0:\n            return i\n        diff = abs(i - N)\n        \n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for num in range(N, -1, -1):\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_diff = float('inf')\n    closest = float('-inf')\n\n    for i in range(1, N+1):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # Initialize a variable to store the smallest number found so far\n    smallest = float('inf')\n\n    # Initialize a variable to store the closest smaller number found so far\n    closest = float('inf')\n\n    # Iterate through all the numbers from 1 to N\n    for i in range(1, N + 1):\n\n        # If the current number is smaller than the smallest number found so far\n        if i < smallest:\n\n            # Update the smallest number and closest smaller number variables\n            smallest = i\n            closest = smallest - 1\n\n        # If the current number is smaller than the closest smaller number found so far\n        elif i < closest:\n\n            # Update the closest smaller number variable\n            closest = i\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = N\n    while n > 0:\n        n -= 1\n        if n >= 0:\n            break\n    if n < 0:\n        n = 0\n    \n    while n < N:\n        n += 1\n        if n <= N:\n            break\n    if n > N:\n        n = N\n    \n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # list of numbers between 1 and N\n    numbers = list(range(1, N+1))\n\n    # initialize variables to keep track of minimum and maximum distances\n    min_distance = float('inf')\n    max_distance = 0\n\n    # loop through all numbers and find the closest smaller number\n    for num in numbers:\n\n        # calculate distance between num and N\n        distance = abs(num - N)\n\n        # update minimum distance if current distance is smaller\n        if distance < min_distance:\n            min_distance = distance\n\n        # update maximum distance if current distance is larger\n        if distance > max_distance:\n            max_distance = distance\n\n    # find the closest smaller number by averaging the minimum and maximum distances\n    closest = (min_distance + max_distance) / 2\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the absolute difference between the largest and smallest number\n    diff = abs(max(N) - min(N))\n    # Find the closest smaller number than N\n    closest = max(N) - diff\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize max_length variable to 0\n    max_length = 0\n    # Loop through each word in the list\n    for word in list1:\n        # Convert the word to lowercase\n        word = word.lower()\n        # Check if the length of the current word is greater than the max_length variable\n        if len(word) > max_length:\n            # Update the max_length variable with the length of the current word\n            max_length = len(word)\n    # Return the maximum length of the longest word\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize a variable to store the length of the longest word\n    longest_length = 0\n    # loop through each string in the list\n    for string in list1:\n        # split the string into a list of words\n        words = string.split()\n        # loop through each word in the list\n        for word in words:\n            # if the length of the word is greater than the current longest length, update the longest length\n            if len(word) > longest_length:\n                longest_length = len(word)\n    # return the longest length found in the list\n    return longest_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        return \"Both input parameters must be strings\"\n\n    if not sub_str:\n        return \"Substring cannot be an empty string\"\n\n    if not isinstance(sub_str, str):\n        return \"Substring must be a string\"\n\n    if not isinstance(str1, str):\n        return \"Input string must be a string\"\n\n    if not str1:\n        return \"Input string cannot be an empty string\"\n\n    if not sub_str:\n        return \"Substring cannot be an empty string\"\n\n    if not isinstance(str1, str):\n        return \"Input string must be a string\"\n\n    if not str1:\n        return \"Input string cannot be an empty string\"\n\n    for substr in sub_str:\n        if substr not in str1:\n            return \"Substring not found in input string\"\n\n    return \"Substring found in input string\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(sub_str) == list:\n        for item in sub_str:\n            if str1 in item:\n                return True\n    else:\n        if str1 in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for string in str1:\n            if string.find(sub_str)!= -1:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating((n * 3) + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1 or n > 5000:\n        return \"Invalid input\"\n    if n % 2 == 0:\n        return \"Even numbers are not undulating\"\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return \"The number is undulating\"\n    return \"The number is not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The given number is odd.\")\n    else:\n        print(\"The given number is even.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check whether the given number is an odd number or not\n    if n % 2 == 0:\n        return False\n    else:\n        # Check whether the given number is divisible by 7 or not\n        if n % 7 == 0:\n            return True\n        else:\n            # If none of the above conditions are satisfied, the number is not undulating\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return is_undulating(n - 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return \"Number is zero.\"\n    elif n == 1:\n        return \"Number is one.\"\n    else:\n        if n % 2 == 0:\n            return \"Number is even.\"\n        else:\n            return \"Number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize a variable to keep track of the height of the tower\n    height = n\n    \n    # Initialize a variable to keep track of the number of steps to reach the top\n    steps = 1\n    \n    # While the height of the tower is greater than 0\n    while height > 0:\n        # Increment the height of the tower by 1\n        height -= 1\n        \n        # Increment the number of steps by 1\n        steps += 1\n    \n    # If the height of the tower is less than or equal to 0, then the number is undulating\n    if height <= 0:\n        return True\n    else:\n        # Otherwise, the number is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return 'The given number is even.'\n    else:\n        return 'The given number is odd.'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # if the number is even \n        return False\n    else:\n        i = 3\n        while i**2 <= n: # check if the number is divisible by any odd number from 3 to the square root of n \n            if n % i == 0:\n                return True\n            i += 2 # check the next odd number\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    A function to check whether a given number is undulating or not.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        True if n is undulating, False otherwise.\n    \"\"\"\n\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on second value\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the first tuple in the sorted list\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = None\n    \n    for i, tup in enumerate(test_list):\n        value = tup[1]\n        if min_index is None or value < min_value:\n            min_index = i\n            min_value = value\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Use the itemgetter function from the operator module to extract the second value from each tuple in the list\n    second_values = list(map(itemgetter(1), test_list))\n\n    # Use the built-in min function to find the index of the first value with the smallest second value\n    min_index = min(range(len(test_list)), key=lambda i: second_values[i])\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple \n    with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes in a list of lists and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        sublist_len = len(sublist)\n        if sublist_len < min_len:\n            min_len = sublist_len\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Returns the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000000 #initialize minimum length to infinity\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')   # initialize variable to infinity\n    \n    for sub_lst in lst:  \n        if len(sub_lst) < min_len:  \n            min_len = len(sub_lst)  \n            \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if min_length > len(lst[i][j]):\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    length_lst = []\n    for sub_lst in lst:\n        length_lst.append(len(sub_lst))\n    min_length = min(length_lst)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize count variable to 0\n    count = 0\n    # iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n        # if n is divisible by i, add 1 to count\n        if n % i == 0:\n            count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 1\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # loop through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Use set to remove duplicates and convert to list\n    list1 = list(set(sum(list1, [])))\n\n    # Create an empty dictionary to store frequency of each element\n    freq = {}\n\n    # Loop through each element in list1\n    for i in list1:\n        # Check if element exists in freq dictionary\n        if i in freq:\n            # If it does, increment its frequency count\n            freq[i] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a frequency count of 1\n            freq[i] = 1\n\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through the flattened list of lists\n    for lst in list1:\n        # loop through the elements in the list\n        for elem in lst:\n            # if the element is already in the dictionary, increment its value\n            if elem in freq:\n                freq[elem] += 1\n            # if the element is not in the dictionary, add it with a value of 1\n            else:\n                freq[elem] = 1\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if isinstance(elem, list):\n            for sub_elem in elem:\n                if sub_elem in freq_dict:\n                    freq_dict[sub_elem] += 1\n                else:\n                    freq_dict[sub_elem] = 1\n        else:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency of each element in the list\n    freq_dict = {}\n    # Iterate over each element in the list\n    for elem in list1:\n        # Check if the element is already in the dictionary, if yes, increment its frequency by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # Divide the result with the length of the list\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n\n    # Divide the product with the length of the list\n    result = product / len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply *= num\n    result = multiply / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty list to store binary representation\n    binary_list = []\n    # Convert the decimal number to binary\n    while n > 0:\n        binary_list.append(str(n % 2))\n        n //= 2\n    # Reverse the list to get the binary representation in reverse order\n    binary_list = binary_list[::-1]\n    # Convert the list to a string and remove leading zeros\n    return ''.join(binary_list)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to hold the binary representation\n    binary = \"\"\n    \n    # Loop until the binary representation is non-empty (i.e. at least one bit is set)\n    while n:\n        # Determine the remainder of dividing n by 2\n        remainder = n % 2\n        \n        # Convert the remainder to a binary string (using an if-else statement)\n        if remainder == 0:\n            binary = \"0\" + binary\n        elif remainder == 1:\n            binary = \"1\" + binary\n        \n        # Remove the last bit of n and divide by 2\n        n = n // 2\n    \n    # Remove the leading zeros from the binary representation and return it\n    return binary.lstrip(\"0\")"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '-' + decimal_to_binary(-n)\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # convert decimal to binary using a loop\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    # remove leading zeros\n    return binary.lstrip(\"0\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is even or odd\n    if num % 2 == 0:\n        # If even, add 1 to the input and find the next palindrome\n        return next_palindrome(num + 1)\n    else:\n        # If odd, subtract 1 from the input and find the next palindrome\n        return next_palindrome(num - 1)\n\ndef is_palindrome(n):\n    '''\n    Write a function to check if a given number is a palindrome.\n    '''\n    # Convert the number to a string and compare it to its reverse\n    return str(n) == str(n)[::-1]\n\ndef next_palindrome(n):\n    '''\n    Write a function to find the next smallest palindrome of a given number.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(n):\n        # If it is, find the next smallest number that is not a palindrome\n        while True:\n            n += 1\n            if not is_palindrome(n):\n                return n\n    else:\n        # If it is not a palindrome, find the next smallest palindrome\n        while True:\n            n += 1\n            if is_palindrome(n):\n                return n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n\n    # Convert the string to a list of digits\n    num_list = list(num_str)\n\n    # Reverse the list of digits\n    num_list.reverse()\n\n    # Convert the list of digits back to a string\n    reversed_str = ''.join(num_list)\n\n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n\n    # Add 1 to the reversed integer and return the result\n    next_num = reversed_num + 1\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num += 1\n    return num\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome:\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Create a list of all palindromes up to the square of the input number\n    palindromes = [x for x in range(1, int(num**0.5)+1) if str(x*x) == str(x)[::-1]]\n\n    # Find the index of the input number in the list\n    index = palindromes.index(num)\n\n    # Find the next smallest palindrome after the input number\n    next_palindrome = max(palindromes[index:])\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        # If the input number is a palindrome, we just return the next number greater than it\n        return num + 1\n    \n    # If the input number is not a palindrome, we need to check if there is a prime number that is larger than the input number\n    for i in range(num + 1, sys.maxsize):\n        if is_prime(i) and is_palindrome(i):\n            return i\n            \n    # If we reach here, there is no smaller prime number that is a palindrome, so we return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input number is odd or even\n    if num % 2 == 0:\n        # If it is even, increment it by 1 and convert it to a string\n        num_str = str(num+1)\n    else:\n        # If it is odd, convert it to a string\n        num_str = str(num)\n\n    # Reverse the string and convert it to an integer\n    reverse_num = int(num_str[::-1])\n\n    # Check if the reverse number is a palindrome\n    palindrome = True\n    for i in range(len(num_str)//2):\n        if num_str[i]!= num_str[-i-1]:\n            palindrome = False\n            break\n\n    # If the reverse number is not a palindrome, increment it by 1 and convert it to a string\n    if not palindrome:\n        reverse_num += 1\n        reverse_num_str = str(reverse_num)\n\n    # Check if the reverse number is even or odd\n    if reverse_num % 2 == 0:\n        # If it is even, decrement it by 1 and convert it to a string\n        reverse_num_str = str(reverse_num-1)\n    else:\n        # If it is odd, convert it to a string\n        reverse_num_str = str(reverse_num)\n\n    # Reverse the string and convert it to an integer\n    next_num = int(reverse_num_str[::-1])\n\n    # Return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = 0\n    while True:\n        palindrome = num * 100 + num\n        is_palindrome = True\n        for i in range(len(str(palindrome))):\n            if palindrome % 10!= int(str(palindrome)[i]):\n                is_palindrome = False\n                break\n        if is_palindrome:\n            if palindrome < smallest_palindrome:\n                smallest_palindrome = palindrome\n            if palindrome > num * 100:\n                break\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function returns the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Convert the input integer to a string\n    str_num = str(num)\n\n    # Reverse the string\n    rev_str_num = str_num[::-1]\n\n    # Check if the reversed string is a palindrome\n    is_palindrome = True\n    for i in range(len(str_num)):\n        if str_num[i]!= rev_str_num[i]:\n            is_palindrome = False\n            break\n\n    # If the reversed string is a palindrome, find the largest palindrome that is less than the original number\n    if is_palindrome:\n        next_num = 0\n        for i in range(len(str_num)):\n            if int(str_num[i]) < int(next_num):\n                next_num = str_num[i]\n        return int(next_num) * 10 + num + 1\n    else:\n        # If the reversed string is not a palindrome, return the next smallest palindrome\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    A helper function to check if a number is a palindrome.\n    \"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    A function to find the next smallest palindrome of a specified integer.\n    \"\"\"\n    smallest = num\n    while True:\n        next_num = smallest * 10 + 1\n        if is_palindrome(next_num):\n            return next_num\n        elif next_num < smallest:\n            return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is a palindrome\n    if is_palindrome(num):\n        # if it is, return the next integer that is greater than it\n        return num + 1\n    else:\n        # if it's not, check if it's divisible by 10\n        if num % 10 == 0:\n            # if it's divisible by 10, return the next multiple of 10 greater than it\n            return num + 10\n        else:\n            # if it's not divisible by 10, check if it's divisible by 100\n            if num % 100 == 0:\n                # if it's divisible by 100, return the next multiple of 100 greater than it\n                return num + 100\n            else:\n                # otherwise, find the next smallest palindrome greater than the current number\n                i = num\n                while True:\n                    i += 1\n                    if is_palindrome(i):\n                        return i"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    \n    left = 1\n    right = len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    else:\n        count = 1\n        for i in range(1, n+1):\n            if count == k:\n                return arr[i-1]\n            elif count > k:\n                count = count - i\n        return \"Invalid input\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    left = 1\n    right = len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid == k - 1:\n            return arr[mid]\n        \n        elif mid < k - 1:\n            left = mid + 1\n            \n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # initialize the count of elements to k\n    count = 1\n    # initialize the index of the kth element to 0\n    index = 0\n    # iterate over the array using a for loop\n    for i in range(len(arr)):\n        # if the current element is the kth element, increment the count\n        if count == k:\n            index = i\n            break\n        # otherwise, increment the count\n        count += 1\n    # return the kth element if found, or None if not found\n    return arr[index] if index >= 0 else None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n\n    if k > n:\n        raise ValueError(\"k is greater than the length of the array\")\n\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        # Iterate through the array from the first k-1 elements\n        for i in range(k - 1):\n            if i >= n // 2:\n                # If k is more than n/2, move the first half of the array to the end\n                for j in range(i, n - 1):\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            else:\n                # If k is less than n/2, move the last half of the array to the beginning\n                for j in range(n - 1, i, -1):\n                    arr[j], arr[j - 1] = arr[j - 1], arr[j]\n\n        # Return the kth element\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        # use binary search to find kth element\n        low = 1\n        high = n\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid-1] < arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return arr[low-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes an array and a k value and returns the kth element of the array.\n    \"\"\"\n    # Convert the k value to 0-based indexing\n    k -= 1\n\n    # Check if k is within the range of the array\n    if k < 0 or k >= len(arr):\n        return None\n\n    # Return the kth element\n    return arr[k]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    first_part = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            first_part = word[i].lower()\n        else:\n            first_part = word[i].lower() + first_part\n    return first_part"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            if i < len(word)-1 and word[i+1].isupper():\n                camel_word += word[i+1].upper()\n            else:\n                camel_word += word[i].upper()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i]\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert all underscores to spaces\n    word = word.replace('_','')\n    # Capitalize the first letter of each word\n    word = word.title()\n    # Convert the rest of the string to camel case\n    return word.replace(' ', '')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n    # Initialize an empty string to store the camel case string\n    camel_case = ''\n    # Loop through each word in the list\n    for word in words:\n        # Convert the first letter of the word to uppercase\n        word = word.capitalize()\n        # Append the rest of the word to the camel case string\n        camel_case += word\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = word[0].lower()\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            camel += '_'\n        camel += word[i].lower()\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.lower()\n        elif char.isupper():\n            result += \"_\"\n        else:\n            result += char\n    return result.capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Initialize a variable to store the camel case string\n    camel_case = \"\"\n    # Convert the snake case string to a list of words\n    words = word.split(\"_\")\n    # Loop through the list of words\n    for i in range(len(words)):\n        # If the current word is the last one in the list,\n        # add an empty string to separate it from the last word\n        if i == len(words) - 1:\n            camel_case += words[i]\n        else:\n            # Capitalize the first letter of the current word\n            camel_case += words[i][0].upper() + words[i][1:]\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Initialize an empty string to store the camel case string\n    camel_case_str = \"\"\n    # Split the input string into a list of words\n    word_list = word.split('_')\n    # Loop through the words in the list and convert each to camel case\n    for word in word_list:\n        # Convert the first letter to lower case\n        first_letter = word[0].lower()\n        # Remove any leading underscores from the word\n        cleaned_word = word[1:]\n        # Convert the remaining letters to upper case\n        remaining_letters = ''.join([letter.upper() for letter in cleaned_word])\n        # Concatenate the first letter and the remaining letters to form the camel case word\n        camel_case_str += first_letter + remaining_letters\n    # Return the camel case string\n    return camel_case_str"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Returns:\n    The Eulerian number a(n, m)\n\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function takes two integer arguments, n and m, \n    which are the number of vertices and edges in a graph, respectively.\n    The function returns the Eulerian number a(n, m), which is the number of \n    vertices in a planar graph with n vertices and m edges such that every \n    edge is incident to exactly two vertices.\n\n    The Eulerian number is defined as follows:\n\n    a(n, m) = n(n-1)/2 - m\n\n    where n is the number of vertices and m is the number of edges.\n\n    The function first checks if n is greater than or equal to 3. If not, it \n    returns a message indicating that the graph is not planar. Otherwise, it \n    calculates the Eulerian number using the given formula and returns the result.\n    '''\n\n    if n < 3:\n        return \"The graph is not planar.\"\n    else:\n        return (n * (n - 1)) // 2 - m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function takes two integer arguments n and m, representing the dimensions of a matrix.\n    It returns the Eulerian number a(n, m).\n    \"\"\"\n    # create a list of lists to represent the matrix\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(0)\n        matrix.append(row)\n\n    # fill the matrix with 1's\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                matrix[i][j] = 1\n\n    # calculate the matrix trace\n    trace = 0\n    for i in range(n):\n        trace += matrix[i][i]\n\n    # calculate the determinant\n    det = 1\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                det *= -1\n            else:\n                det *= matrix[i][j]\n\n    # calculate the Eulerian number a(n, m)\n    a_nm = trace / det\n\n    return a_nm"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a list to store all possible arrangements of integers from 1 to n\n    all_arrangements = [[i] for i in range(1, n+1)]\n\n    # Generate all possible combinations of n integers\n    for i in range(1, n+1):\n        for j in range(i):\n            all_arrangements.append([i, j])\n            all_arrangements.append([j, i])\n\n    # Generate all possible combinations of m integers\n    for i in range(1, m+1):\n        for j in range(i):\n            all_arrangements.append([i, j])\n            all_arrangements.append([j, i])\n\n    # Initialize a list to store the number of valid arrangements for each integer\n    num_arrangements = []\n\n    # Iterate through the all_arrangements list and check if there is a valid arrangement for each integer\n    for i in range(n+1):\n        count = 0\n        for j in range(n+1):\n            if j in all_arrangements[i]:\n                count += 1\n        num_arrangements.append(count)\n\n    # Calculate the Eulerian number\n    a = 0\n    for i in range(n+1):\n        a += i * num_arrangements[i]\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    # Initialize the first row and first column\n    for i in range(1, n+1):\n        a[i][1] = i\n        \n    # Initialize the first column\n    for j in range(2, m+1):\n        a[1][j] = j\n        \n    # Fill the rest of the matrix\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n    \n    # Return the final value in the bottom right corner\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n < m:\n        return n\n    else:\n        return m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case for n = 0 or m = 0\n    if n == 0 or m == 0:\n        return 0\n    \n    # Base case for n = 1\n    if n == 1:\n        return m\n    \n    # Calculate the sum of eulerian numbers\n    sum_eulerian_nums = 0\n    for i in range(n):\n        sum_eulerian_nums += eulerian_num(n-i-1, m)\n        \n    return sum_eulerian_nums"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the grid\n    grid = [[0 for i in range(m)] for j in range(n)]\n    \n    # Add the first row with 1\n    grid[0][0] = 1\n    \n    # Fill the grid with 1's\n    for i in range(1, n):\n        for j in range(1, m):\n            grid[i][j] = grid[i-1][j] + grid[i][j-1] - grid[i-1][j-1]\n    \n    # Return the value of the last cell\n    return grid[n-1][m-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to calculate factorial of a number\n    def factorial(n): \n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Function to calculate binomial coefficient\n    def binomial(n, k): \n        if k > n // 2: \n            k = n - k\n        if k == 0 or k == n:\n            return 1\n        else:\n            return factorial(n) // (factorial(k) * factorial(n-k))\n\n    # Calculate the Eulerian number a(n, m)\n    a = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            a += binomial(n, i) * binomial(m, j) * binomial(n-i-j, n-max(i, j))\n    \n    # Return the value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n == 1 or m == 1: \n        return 1\n    else: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in `sorted` function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Iterate over each sublist of strings in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if isinstance(elem, bool) and elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if type(elem) == bool:\n            if elem:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the given list to a tuple\n    test_tuple = tuple(test_list)\n    # Append the given tuple to the list\n    test_list.append(test_tuple)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Define an empty list to store the appended tuples\n    appended_tuples = []\n    \n    # Loop through each tuple in the input list\n    for tup in test_tup:\n        # Append the given list to the tuple and append the result to the new list\n        appended_tuples.append(tup + test_list)\n    \n    # Return the new list containing all appended tuples\n    return appended_tuples"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Append the lists to the tuples\n    test_list = test_list + test_tup\n    # Return the updated tuple\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Append the list to the tuple\n    test_tup.extend(test_list)\n    \n    # Convert the tuple back to a string\n    test_tup = tuple(test_tup)\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    # Traverse each list and merge the elements\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    # Add remaining elements\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Combine the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to sort the merged list in ascending order\n    heap = []\n    for num in merged_list:\n        heapq.heappush(heap, num)\n\n    # Remove the smallest element from the heap until it's empty and return the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    # Convert all the lists into lists of tuples\n    num_list = [(i, num) for i, num in enumerate(num1 + num2 + num3)]\n    # Merge the tuples using heapq.merge\n    heapq.heapify(num_list)\n    while num_list:\n        # Get the first item from the merged list and the first item from the heap\n        item, num = heapq.heappop(num_list)\n        # Add the item to the merged list and add the next item to the heap\n        merged_list.append(item)\n        if num_list:\n            heapq.heappush(num_list, (item + 1, num))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n        if merged_list[-1] < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num3))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all the lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list using heapq\n    heapq.heapify(combined_list)\n    \n    # Reverse the sorted list and then convert it back to a list\n    sorted_list = [heapq.heappop(combined_list) for i in range(len(combined_list))]\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) < -heapq.heappop(num2):\n            heapq.heappush(result, -heapq.heappop(num1))\n        elif -heapq.heappop(num2) < -heapq.heappop(num3):\n            heapq.heappush(result, -heapq.heappop(num2))\n        else:\n            heapq.heappush(result, -heapq.heappop(num3))\n    result.extend(num1)\n    result.extend(num2)\n    result.extend(num3)\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list\n    containing all the elements from the three input lists.\n\n    Args:\n    num1 (list): List of integers.\n    num2 (list): List of integers.\n    num3 (list): List of integers.\n\n    Returns:\n    list: A single sorted list containing all the elements from the three input lists.\n    \"\"\"\n\n    # Create a list that contains all the elements from the three input lists.\n    merged_list = num1 + num2 + num3\n\n    # Use the heapq module to sort the merged list.\n    heapq.heapify(merged_list)\n\n    # Return the sorted list.\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge num1 and num2\n    merged_list = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    # Add the remaining elements from num1 or num2\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    # Merge num1, num2 and num3\n    merged_list.sort()\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into one big list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the merged list\n    heapq.heapify(merged_list)\n\n    # Remove duplicates from the merged list\n    unique_list = []\n    while merged_list:\n        unique_list.append(heapq.heappop(merged_list))\n\n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Use heapq to merge the three lists into a single sorted list\n    # The heapq module allows us to add elements to a min-heap or max-heap,\n    # which gives us a priority queue that allows us to merge the lists efficiently.\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    merged_list = []\n    while heap:\n        # Take the smallest element from the heap and add it to the merged_list\n        merged_list.append(heapq.heappop(heap))\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Initialize an empty list to store the number of odd values\n    odd_count = []\n    \n    # Convert the input binary string to a list of integers\n    bin_list = list(s)\n    \n    # Loop n times and for each iteration, rotate the binary string by one position and check if the rotated binary string has an odd value\n    for i in range(n):\n        for j in range(len(bin_list)-1):\n            if bin_list[j] == 1:\n                bin_list[j] = 0\n                bin_list[j+1] = 1\n        if int(''.join(str(x) for x in bin_list), 2) % 2 == 1:\n            odd_count.append(int(''.join(str(x) for x in bin_list), 2))\n            \n    # Return the number of odd values in the rotated binary string\n    return len(odd_count)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize count variable to zero\n    count = 0\n    # Convert the input binary string to a list of characters\n    bin_str = list(s)\n    # Rotate the binary string the given number of times\n    for i in range(n):\n        # Rotate the binary string to the left by one position\n        bin_str = bin_str[1:] + [bin_str[0]]\n    # Iterate through the rotated binary string and count the odd numbers\n    for i in range(len(bin_str)):\n        if bin_str[i] == '1':\n            count += 1\n    # Return the final count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes in a binary string s and a number n, and returns the number of odd numbers in the string after rotating it n times.\n    \"\"\"\n    # Convert binary string to list\n    lst = list(s)\n\n    # Rotate the list n times\n    for i in range(n):\n        lst.append(lst.pop(0))\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in lst:\n        if num % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    # Initialize the count of odd numbers\n    count = 0\n    # Rotate the binary list the given number of times\n    for _ in range(n):\n        binary_list = binary_list[1:] + [0]\n    # Iterate through the binary list and count the odd numbers\n    for i in binary_list:\n        if i == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize an empty list to store the rotated binary strings\n    rotated_strings = []\n    # Iterate n times to rotate the binary string\n    for _ in range(n):\n        # Reverse the binary string\n        s = ''.join(reversed(list(s)))\n        # Append the rotated binary string to the list\n        rotated_strings.append(s)\n    # Initialize a counter to keep track of the number of odd numbers\n    odd_counter = 0\n    # Iterate through the rotated binary strings and check if they have odd values\n    for string in rotated_strings:\n        for char in string:\n            # Check if the character is odd\n            if int(char) % 2 == 1:\n                odd_counter += 1\n    # Return the number of odd numbers\n    return odd_counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # get the length of the binary string\n    n_bits = len(s)\n\n    # initialize the count of odd numbers\n    count = 0\n\n    # rotate the binary string n times\n    for i in range(n):\n        # get the rotated binary string\n        r_s = s[n_bits-1:0:-1] + s[0:n_bits-1]\n\n        # check if the rotated binary string has an odd number of bits\n        if len(set(r_s)) % 2 == 1:\n            # increment the count of odd numbers\n            count += 1\n\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize variables\n    count = 0\n    temp = ''\n    for i in range(n):\n        # Rotate the string by one position\n        temp = s[-1] + s[:-1]\n        # Check if the new string has odd length\n        if len(temp) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize variables\n    count = 0\n    length = len(s)\n\n    # convert binary string to list\n    binary_str = list(s)\n\n    # rotate the binary string the given number of times\n    for _ in range(n):\n        binary_str = binary_str[-length:] + binary_str[:-length]\n\n    # count the number of odd numbers in the rotated binary string\n    for num in binary_str:\n        if int(num) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    # use a sliding window to rotate the digits\n    for _ in range(n):\n        digits.append(digits.pop(0))\n    # count the number of odd digits\n    count = sum(1 for d in digits if d % 2 == 1)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n\n    for i in nestedlist:\n        for j in i:\n            common.add(j)\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list containing all the common elements in all the lists.\n    '''\n    # Creating a set to store all the common elements in all the lists\n    common = set()\n    \n    # Looping through all the lists and checking for common elements\n    for lst in nestedlist:\n        for item in lst:\n            common.add(item)\n    \n    # Returning a list containing all the common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                if i not in common:\n                    common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = set()\n    for lst in nestedlist:\n        for item in lst:\n            if item in common:\n                common.remove(item)\n            else:\n                common.add(item)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Convert all the elements in nestedlist into sets to remove duplicates\n    nestedlist = [set(i) for i in nestedlist]\n\n    # Find the intersection of all sets in the nestedlist\n    common_set = nestedlist[0] & nestedlist[1] & nestedlist[2] & nestedlist[3]\n\n    # Convert the common set back into a list\n    common_list = list(common_set)\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements:\n                common_elements.append(j)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Convert the nested lists to sets to remove duplicates\n    sets = [set(sublist) for sublist in nestedlist]\n    # Find the intersection of the sets\n    common = sets[0]\n    for s in sets[1:]:\n        common = common.intersection(s)\n    # Convert the set back to a list and return it\n    return sorted(list(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Flatten the nested list to get a list of elements\n    flatlist = [item for sublist in nestedlist for item in sublist]\n    \n    # Use set() to get unique elements\n    unique_elements = set(flatlist)\n    \n    # Convert unique elements back to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n\n    # Initialize an empty list to store the common elements\n    common = []\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n\n        # Loop through each element in the sublist and compare it with all the elements in the common list\n        for element in sublist:\n            if element in common:\n                common.remove(element)\n\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.bit_length() <= 31:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for dictionary in list1:\n        if dictionary:\n            return False\n    \n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if not i:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n\n    # Initialize the sum\n    sum = 0\n\n    # Iterate through the list\n    for num in nums_list:\n        # Add each number to the sum\n        sum += num\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Convert the list to a string\n    nums_str = ''.join(map(str, nums_list))\n    # Convert the string to an integer\n    result = int(nums_str)\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum variable\n    sum_num = 0\n    # Loop through the list and add each integer to the sum\n    for num in nums_list:\n        sum_num += num\n    # Return the sum of the integers in the tuple\n    return sum_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, item in enumerate(row):\n            try:\n                float(item)\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for elem in row:\n            try:\n                elem = float(elem)\n            except ValueError:\n                continue\n            else:\n                yield elem"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, list):\n            list_to_float(item)\n        elif isinstance(item, (int, float, str)):\n            try:\n                test_list.remove(item)\n                test_list.append(float(item))\n            except ValueError:\n                pass\n        else:\n            print(f\"Element {item} is not convertible to a float\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            list_to_float(item)\n        elif isinstance(item, str):\n            item = float(item)\n        elif isinstance(item, (int, float)):\n            pass\n        else:\n            raise ValueError(\"Unsupported data type found in list: {}\".format(type(item)))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == arr.index(arr[i]):\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    # Loop through the array, incrementing the frequency of each element in the dictionary\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    # Loop through the array again, looking for the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    unique_element = None\n\n    # Traverse the array and count the occurrences of unique elements\n    for i in range(n):\n        if arr[i]!= unique_element:\n            count += 1\n            unique_element = arr[i]\n\n    # Check if the number of occurrences is 1\n    if count == 1:\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a hash set to store unique elements\n    unique_elements = set()\n\n    # Traverse through the array\n    for element in arr:\n        # Check if the element is already in the hash set\n        if element not in unique_elements:\n            # If not, add it to the hash set and print it\n            unique_elements.add(element)\n            print(element)\n\n    # If the array has only one unique element, return it\n    if len(unique_elements) == 1:\n        return list(unique_elements)[0]\n\n    # If the array has no unique element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables for the first and last index of the subarray\n    first = 0\n    last = len(arr) - 1\n\n    # Iterate through the array and check if the current element is the only element in the subarray\n    while first < last:\n        if arr[first] == arr[first + 1]:\n            first += 1\n        elif arr[last] == arr[last - 1]:\n            last -= 1\n        else:\n            # If the current element is not the only element in the subarray, return the element\n            return arr[first]\n\n    # If the subarray is empty, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through the array and check if the current element appears only once\n    for i in range(len(arr)):\n        if i == len(arr) - 1 or arr[i]!= arr[i + 1]:\n            count += 1\n\n    # If the count is equal to 1, return the element\n    if count == 1:\n        return arr[-1]\n\n    # If the count is not equal to 1, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n    count = 1\n    unique_element = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            count += 1\n        else:\n            count = 1\n            unique_element = arr[i]\n\n    if count == 1:\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            count = 1\n            for j in range(i + 1, len(arr)):\n                if arr[j] == arr[i]:\n                    count += 1\n            if count == 1:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_abs_product = max(max_abs_product, product)\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize max_product as 0\n    max_product = 0\n\n    # loop through the list\n    for i in range(len(list1)):\n        # loop through the remaining elements in the list\n        for j in range(i+1, len(list1)):\n            # find the product of the current pair of tuples\n            product = list1[i] * list1[j]\n\n            # update max_product if the current product is greater\n            if product > max_product:\n                max_product = product\n\n    # return the maximum absolute product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the maximum and minimum values and their indices\n    max_value = 0\n    max_index = 0\n    min_value = 0\n    min_index = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Check if the tuple has two numbers\n        if len(list1[i]) == 2:\n            # Get the values of the tuple\n            value = abs(list1[i][0])\n            index = i\n\n            # Check if the value is greater than the maximum value\n            if value > max_value:\n                # Update the maximum value and its index\n                max_value = value\n                max_index = index\n\n            # Check if the value is less than the minimum value\n            if value < min_value:\n                # Update the minimum value and its index\n                min_value = value\n                min_index = index\n\n    # Check if either the maximum value or minimum value is negative\n    if max_value < 0 or min_value < 0:\n        # Return None if either value is negative\n        return None\n\n    # Calculate the maximum absolute product between the two numbers in the tuple\n    max_product = max_value * max_value\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_sum = 0\n    max_pair = []\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            pair_sum = sum(sorted([list1[i][0], list1[j][1]]))\n            pair_product = list1[i][0] * list1[j][1]\n            pair_abs_product = abs(pair_product)\n            if pair_abs_product > max_product:\n                max_product = pair_abs_product\n                max_sum = pair_sum\n                max_pair = [list1[i], list1[j]]\n    return max_product, max_sum, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize maximum absolute product to be negative infinity\n    max_product = float('-inf')\n\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the numbers in the pairs of tuples\n            product = abs(list1[i][0] * list1[j][1])\n            # update the maximum absolute product if the current product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = -float('inf')\n    max_product_tuple = None\n    current_product = 1\n\n    # Loop over the list of tuples\n    for i, tup in enumerate(list1):\n        # Check if the current tuple is a pair of numbers\n        if isinstance(tup, tuple) and len(tup) == 2:\n            # Extract the numbers from the tuple\n            num1, num2 = tup\n\n            # Calculate the product of the two numbers\n            product = num1 * num2\n\n            # Update the max product if necessary\n            if product > max_product:\n                max_product = product\n                max_product_tuple = (num1, num2)\n\n            # Update the current product to the product of the current number and the next number\n            current_product = product * list1[i+1]\n\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = -float('inf')\n    current_product = 1\n    pair_sum = 0\n\n    # iterate through the list\n    for i in range(len(list1)):\n        # check if the current element is a tuple\n        if isinstance(list1[i], tuple):\n            # extract the first element and the second element of the tuple\n            a, b = list1[i]\n            # add the first element to the pair_sum\n            pair_sum += a\n            # add the second element to the pair_sum\n            pair_sum += b\n            # calculate the current product\n            current_product = max(a, b) * min(a, b)\n            # update the maximum product\n            max_product = max(max_product, abs(current_product - pair_sum))\n            # reset the pair_sum\n            pair_sum = 0\n\n    # return the maximum product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if (num % i == 0) and (num // i == i):\n            return True\n\n    return False\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            total += i\n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # list to store amicable numbers\n    amicable = []\n\n    # iterate through numbers from 1 to limit\n    for num in range(1, limit+1):\n\n        # check if number is amicable\n        if num > 1:\n            if num in amicable:\n                continue\n            sum_of_two = num + sum(filter(lambda x: x <= num/2, range(1, int(num/2)+1)))\n            if sum_of_two in amicable:\n                continue\n            if num == sum_of_two:\n                amicable.append(num)\n\n    # sum all amicable numbers\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    # Initialize variables to store sum of amicable numbers and count of them\n    amicable_sum = 0\n    count = 0\n\n    # Iterate through numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            # If the number is amicable, add it to the sum and increment the count\n            amicable_sum += i\n            count += 1\n\n    # Return the sum of amicable numbers\n    return amicable_sum\n\n\ndef is_amicable(num):\n    # Check if the number is divisible by any number between 1 and the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0 and num // i!= i:\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            amicable_numbers.append(i)\n        elif i == 2:\n            amicable_numbers.append(i)\n        else:\n            j = i - 1\n            if i!= j:\n                for k in range(j, i):\n                    if i % k == 0 and k!= i/k:\n                        break\n                else:\n                    amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            sum_amicable += i\n    return sum_amicable\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a list to store amicable numbers\n    amicable = []\n    # loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # check if the number is amicable\n        if i in amicable:\n            continue\n        # loop through all numbers from 1 to limit and check if the sum is equal to the current number\n        for j in range(1, limit+1):\n            if i+j == limit:\n                # if it is, add the pair of numbers to the list of amicable numbers\n                amicable.append(i)\n                amicable.append(j)\n                # exit the inner loop\n                break\n    # sum all the numbers in the list of amicable numbers\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if i == 2:\n            amicable_numbers.append(2)\n        elif i % 2 == 0:\n            j = i + i\n            while j <= limit and j!= i:\n                amicable_numbers.append(j)\n                j += i\n        else:\n            j = i - i\n            while j <= limit and j!= i:\n                amicable_numbers.append(j)\n                j += i\n\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    sum_of_amicable = 0\n    for i in range(1, limit+1):\n        if i!= sum_of_amicable and i % sum_of_amicable!= 0:\n            if is_prime(i) and is_prime(sum_of_amicable):\n                sum_of_amicable += i\n                print(i, end=' ')\n    return sum_of_amicable\n\ndef is_prime(num):\n    \"\"\"\n    This function takes a number and returns True if it is prime, and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            amicable_numbers.append(i)\n        elif i == 2:\n            amicable_numbers.append(2)\n        else:\n            for j in range(2, int(i/2)+1):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable(num):\n    '''\n    Helper function to check if a number is amicable or not.\n    '''\n    amicable_set = set()\n    for i in range(1, num):\n        if num % i == 0 and num / i!= i:\n            amicable_set.add(i)\n            amicable_set.add(num / i)\n    return amicable_set\n\ndef sum_amicable(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit + 1):\n        if num in is_amicable(num):\n            total += num\n    return total"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as inputs and returns their angle in degrees.\n    '''\n    angle = cmath.phase(a+b*1j) * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    angle = angle / 2 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a + b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function calculates the angle of a complex number.\n\n    Parameters:\n    a (int or float): The real part of the complex number.\n    b (int or float): The imaginary part of the complex number.\n\n    Returns:\n    angle (float): The angle of the complex number in radians.\n\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex conjugate of a and b\n    angle = cmath.phase((a+b)/(2*cmath.sqrt(a**2+b**2)))\n    # Convert the angle to radians and return the value\n    return cmath.pi*angle/180"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a + b*1j)\n    angle_deg = angle_rad * 180.0 / cmath.pi\n    angle_str = \"{:.2f}\".format(angle_deg)\n    return angle_str"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = sum([int(digit) for digit in string[i:j]]) - n\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            diff += 1\n        else:\n            diff = 0\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # Initialize variables for 0 and 1 counts\n    zero_count = 0\n    one_count = 0\n\n    # Loop through the binary string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        elif char == '1':\n            one_count += 1\n        # If the character is not a 0 or 1, increment the zero count again to reset the count for the next 1\n        else:\n            zero_count += 1\n\n    # Initialize variables for maximum difference and the current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Loop through the binary string again\n    for i in range(len(string)):\n        # If the character is a 0 and the next character is also a 0, increment the current difference by 1\n        if string[i] == '0' and string[i+1] == '0':\n            current_diff += 1\n        # If the character is a 1 and the next character is also a 1, increment the current difference by 1\n        elif string[i] == '1' and string[i+1] == '1':\n            current_diff += 1\n        # If the character is a 0 and the next character is a 1, reset the current difference to 0\n        elif string[i] == '0' and string[i+1] == '1':\n            current_diff = 0\n        # If the character is a 1 and the next character is a 0, reset the current difference to 0\n        elif string[i] == '1' and string[i+1] == '0':\n            current_diff = 0\n\n        # If the current difference is greater than the maximum difference, update the maximum difference\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 > count_1:\n                break\n            if count_0 == count_1:\n                if max_length < abs(count_0 - count_1):\n                    max_length = abs(count_0 - count_1)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        for j in range(i+1, length):\n            count_0 = 0\n            count_1 = 0\n            \n            for k in range(j):\n                if string[k] == '0':\n                    count_0 += 1\n                elif string[k] == '1':\n                    count_1 += 1\n            \n            if count_1 > count_0:\n                diff = count_1 - count_0\n            else:\n                diff = count_0 - count_1\n            \n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = 0\n            for k in range(n):\n                if k < i or k >= j:\n                    diff += string[k] == '0'\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n            if count > 1:\n                diff = abs(count - 1)\n                if diff > max_diff:\n                    max_diff = diff\n        else:\n            count = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(diff, max_diff)\n            \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common = set(divisors(a)) & set(divisors(b))\n    return sum(common)\n\ndef divisors(n):\n    '''\n    Write a python function to generate all the divisors of a given number.\n    '''\n    div = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div.append(i)\n    return div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n\n    sum_common_divisors = 0\n\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find common divisors\n    def common_divisors(x, y):\n        divisors = []\n        for i in range(1, x + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # finding common divisors of two given numbers\n    common = common_divisors(a, b)\n    # finding sum of common divisors\n    sum_of_common = sum(common)\n    \n    return sum_of_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Find the set of common divisors of two numbers\n    divisors = set()\n    for num in [a, b]:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.add(i)\n\n    # Find the sum of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    divisors = [i for i in range(1, a+1) if a % i == 0 and b % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Check if a is greater than b\n    if a > b:\n        # Swap a and b\n        a, b = b, a\n\n    # Initialize sum and divisor\n    sum_of_common_divisors = 0\n    divisor = 1\n\n    # Iterate through all divisors of a and b\n    while divisor <= a:\n        # If a is divisible by divisor\n        if a % divisor == 0 and b % divisor == 0:\n            # Add divisor to sum_of_common_divisors\n            sum_of_common_divisors += divisor\n        # Update divisor\n        divisor += 1\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Function to find common divisors of two numbers\n    def find_common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, min(num1, num2)+1):\n            if num1 % i == 0 and num2 % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # Calculate the sum of common divisors\n    common_divisors = find_common_divisors(a, b)\n    sum_of_common_divisors = sum(common_divisors)\n    \n    return sum_of_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a: int\n        The first number to find common divisors for.\n    b: int\n        The second number to find common divisors for.\n\n    Returns:\n    int\n        The sum of the common divisors of the two given numbers.\n\n    Raises:\n    ValueError: If the input numbers are not integers.\n    \"\"\"\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError(\"Both input numbers must be integers.\")\n\n    # Initialize the sum to zero\n    common_divisors = 0\n\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if the smaller number is a divisor of the current number\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the sum\n            common_divisors += i\n\n    return common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # function to calculate common divisors of two numbers\n    def common_divisors(a, b):\n        '''\n        Function to calculate common divisors of two numbers using the Euclidean algorithm.\n        '''\n        if b == 0:\n            return a\n        return common_divisors(b, a % b)\n\n    # finding the sum of common divisors of two numbers\n    sum_cd = common_divisors(a, b)\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    # Find common divisors of a and b\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Calculate the sum of common divisors\n    sum_common = sum(common_divisors)\n    return sum_common"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y % 2 == 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result = result ^ x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the given string into a list of words\n    words = str.split()\n    \n    # Initialize an empty list to store the longer words\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If the length of the word is greater than n, add it to the list of longer words\n            long_words.append(word)\n    \n    # Return the list of longer words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [] # create an empty list to store long words\n    for word in words: # iterate through each word in the list\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # if it is, append it to the long_words list\n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    # split the string into words\n    words = str.split()\n    # initialize an empty list to store the long words\n    long_list = []\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is greater than n\n        if len(word) > n:\n            # add the word to the long_list\n            long_list.append(word)\n    # return the long_list\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store the words that are longer than n characters\n    longer_words = []\n\n    # Loop through the words and add the words longer than n characters to the list longer_words\n    for word in words:\n        if len(word) > n:\n            longer_words.append(word)\n\n    # Return the list longer_words\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n    return words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function calculates whether a given matrix is a magic square or not.\n    \"\"\"\n    \n    # Find the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(row[i] for i, row in enumerate(my_matrix))\n    \n    # Find the sum of the rightmost column\n    right_col_sum = sum(row[-1] for row in my_matrix)\n    \n    # Check if the diagonal sum and right column sum are equal\n    if diagonal_sum == right_col_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Initialize the size of the matrix\n    size = len(my_matrix)\n    \n    # Initialize the sum of the rows and columns\n    row_sum = 0\n    col_sum = 0\n    \n    # Loop through each element of the matrix\n    for i in range(size):\n        for j in range(size):\n            # Check if the element is zero\n            if my_matrix[i][j] == 0:\n                continue\n            \n            # Calculate the sum of the row and column\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            \n            # Check if the sum is equal to the product of the matrix elements\n            if row_sum == my_matrix[i][i] + my_matrix[i][j] + my_matrix[j][i] + my_matrix[j][j]:\n                return True\n    \n    # Check if the sum of the rows and columns is equal to the product of the matrix elements\n    if row_sum == col_sum == size ** 2:\n        return True\n    \n    # If no sum is found, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(set(my_matrix[0])):\n        return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Check if the element at the current position is equal to the sum of its neighbors\n            if i > 0 and j > 0:\n                if my_matrix[i][j] == my_matrix[i-1][j] == my_matrix[i][j-1] == my_matrix[i-1][j-1]:\n                    continue\n                else:\n                    return False\n            # Check if the element at the current position is equal to the sum of its neighbors in the main diagonal\n            elif i == j == n-1:\n                if my_matrix[i][j] == my_matrix[0][0] == my_matrix[n-1][n-1]:\n                    continue\n                else:\n                    return False\n            # Check if the element at the current position is equal to the sum of its neighbors in the anti-diagonal\n            elif i == j == 0:\n                if my_matrix[i][j] == my_matrix[0][n-1] == my_matrix[n-1][0]:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all elements are unique\n    unique = set(my_matrix)\n    if len(unique)!= 15:\n        return False\n\n    # Calculate the sum of the rows, columns, and main diagonal\n    row_sum = sum(row)\n    col_sum = sum([row[i] for i in range(len(row))])\n    main_diagonal_sum = sum([row[i] for i in range(len(row)) if i == j])\n\n    # Check if the row, column, and main diagonal sums match\n    if row_sum!= col_sum or row_sum!= main_diagonal_sum or col_sum!= main_diagonal_sum:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # Check if the element at position (i, j) is the sum of its rows, columns, and main diagonal\n            if my_matrix[i][j]!= row_sum and my_matrix[j][i]!= row_sum and my_matrix[i][j]!= col_sum and my_matrix[j][i]!= col_sum and my_matrix[i][j]!= main_diagonal_sum and my_matrix[j][i]!= main_diagonal_sum:\n                return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_magic_square(matrix):\n    def is_valid(row, col):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        return True\n\n    def is_sorted(row, col):\n        return all(matrix[row][i] <= matrix[row][j] for i in range(col) for j in range(i + 1, col))\n\n    def is_horizontal(row, col):\n        return all(matrix[i][col] == matrix[j][col] for i in range(len(matrix)) for j in range(len(matrix[0])))\n\n    def is_vertical(row, col):\n        return all(matrix[row][i] == matrix[row][j] for i in range(len(matrix)) for j in range(len(matrix[0])))\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if not is_valid(i, j):\n                continue\n            if not is_sorted(i, j) or not is_horizontal(i, j) or not is_vertical(i, j):\n                return False\n    return True\n\ndef magic_square_test(matrix):\n    return is_magic_square(matrix)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check that the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check that the matrix contains unique elements\n    unique_elements = set()\n    for row in my_matrix:\n        if len(row)!= len(unique_elements):\n            return False\n        for element in row:\n            if element in unique_elements:\n                return False\n            unique_elements.add(element)\n\n    # Check that the matrix is a magic square\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[0])):\n            # Calculate the magic square element\n            magic_element = (row + col) % len(my_matrix)\n\n            # Check that the element is present in the row and column\n            if magic_element!= my_matrix[row][col]:\n                return False\n\n            # Check that the element is present in the left and top diagonals\n            if magic_element!= my_matrix[row][magic_element]:\n                return False\n\n            # Check that the element is present in the right and bottom diagonals\n            if magic_element!= my_matrix[magic_element][col]:\n                return False\n\n    # If we make it through all the checks, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n!= n or n == 0:\n        return False\n    # Check if all rows have the same sum\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= n * (n + 1) // 2:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = sum(my_matrix[k][j] for k in range(n))\n        if col_sum!= n * (n + 1) // 2:\n            return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= (i + j) % n + 1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Check if the matrix contains the magic square pattern\n    square = []\n    for i in range(len(my_matrix)):\n        square.append(my_matrix[i][i])\n        square.append(my_matrix[i][len(my_matrix) - 1 - i])\n        square.append(my_matrix[len(my_matrix) - 1 - i][i])\n    \n    # Check if the matrix contains all the elements of the magic square\n    for num in square:\n        if num not in my_matrix[0]:\n            return False\n    \n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix has a size of 3 x 3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"Matrix must be a 3 x 3 square.\"\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return \"Matrix must only contain integers.\"\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(row) for row in zip(*my_matrix)]\n\n    # Check if the sum of each row and column equals the product of the matrix\n    if all(row_sums) == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n        return True\n    elif all(col_sums) == my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2]:\n        return True\n    elif all(row_sums) == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum == n * (n+1) // 2 or col_sum == n * (n+1) // 2:\n            return True\n    return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    :param nums: a list of integers\n    :return: the item with maximum frequency\n    \"\"\"\n    # Use a dictionary to count the occurrences of each element in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = max(count_dict, key=count_dict.get)\n\n    # Return the item with maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency count in the defaultdict\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency count and return it\n    return max(freq_dict, key=lambda x: freq_dict[x])"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the frequency count for each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency count\n    max_num = max(freq, key=freq.get)\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Loop through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    # Return the item with the maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_freq = max(freq_dict.values())\n    max_item = [k for k, v in freq_dict.items() if v == max_freq][0]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency in the dictionary\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    \n    # Return the item with maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_item = None\n    max_count = 0\n    for item, freq in count.items():\n        if freq > max_count:\n            max_item = item\n            max_count = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reverse_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reverse_str += char\n    return reverse_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # converting all characters to lowercase\n    str1 = str1.lower()\n    # initializing the reversed string\n    reversed_str = ''\n    # iterating through each character of the string\n    for char in str1:\n        if char not in vowels:\n            # appending the non-vowel character to the reversed string\n            reversed_str += char\n    # returning the reversed string\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    vowel_indices = []\n    for i in range(len(string)):\n        if string[i] in vowels:\n            vowel_count += 1\n            vowel_indices.append(i)\n    if vowel_count == 0:\n        return string\n    vowel_indices.sort()\n    reversed_vowels = []\n    for i in range(vowel_count):\n        reversed_vowels.append(string[vowel_indices[i]])\n    reversed_string = ''.join(reversed_vowels)\n    return reversed_string + string[vowel_count:]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    reversed_str = ''.join(vowel_list[::-1])\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = []\n    for i in string:\n        if i in vowels:\n            vowel_list.append(i)\n    return vowel_list[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    vowels_dict = dict(zip(vowels_list, vowels_list))\n    reversed_vowels = str1[::-1]\n    reversed_str = \"\"\n    for char in reversed_vowels:\n        if char in vowels_dict:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    str1.reverse()\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            continue\n        else:\n            str1[i], str1[-1-i] = str1[-1-i], str1[i]\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    result = []\n    for char in str1:\n        if char.lower() in vowels and char.lower() not in 'aeiou':\n            result.append(char)\n    result = ''.join(result[::-1])\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string using the str() function\n    str_tuple = str(tup1)\n    return str_tuple"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the format function\n    string_form =''.join(str(x) for x in tup1)\n    return string_form"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \",\"\n    return str1[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n    # Iterate over each element of the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add it to the total sum\n            total_sum += num\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    total = 0\n    \n    for num in nums:\n        if num < 0:\n            count += 1\n            total += num\n    \n    return total * count"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n\n    def hexagonal(n, a=1, b=1):\n        \"\"\"\n        Helper function to find nth hexagonal number.\n        \"\"\"\n        if n == 1:\n            return a\n        return hexagonal(n - 1, b, a + b)\n\n    return hexagonal(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def find_hexagonal_num(k, a=0, b=1):\n        '''\n        Recursive function to find the nth hexagonal number.\n        '''\n        if k == 1:\n            return a\n        else:\n            return find_hexagonal_num(k-1, b, a+b)\n    \n    return find_hexagonal_num(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Initialize the first three terms of the sequence\n    a, b, c = 1, 6, 21\n\n    # Calculate the nth hexagonal number\n    nth_hex = a + (b * (n // 2)) + (c * (n // 4))\n\n    return nth_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 + 2 * n + 2 * n ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(3*n-1))/2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        return (n * (2 * n - 1)) + ((2 * n) ** 2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function calculates the nth hexagonal number.\n    \"\"\"\n    # The number of hexagons is given by 2n + 1\n    num_hexagons = 2 * n + 1\n    # The formula for the nth hexagonal number is n(6/5) + (n+1/2)^2\n    num_hexagons = n * (6 / 5) + ((n + 1) / 2) ** 2\n    return num_hexagons"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def helper(i):\n        if i == 1:\n            return 1\n        else:\n            return 2 * i - 1\n\n    return helper(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * hexagonal_num(n - 1) + 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = sum(1 for num in nums if num!= 0)\n    zero_count = len(nums) - non_zero_count\n    zero_ratio = zero_count / non_zero_count if non_zero_count > 0 else 0\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')\n    count.append(0)\n    for num in nums:\n        if num == 0:\n            count[-1] += 1\n        else:\n            count.append(1)\n\n    ratio = sum(count[1:]) / count[0]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n            \n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = array('i', [0]*len(nums))\n    for i in range(len(nums)):\n        non_zero_count[i] = len(nums) - zero_count[i]\n    ratio = zero_count[0]/non_zero_count[0]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zeros.itemset(0, zeros.item(0) + 1)\n    non_zeros = len(nums) - zeros.item(0)\n    return non_zeros / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two variables to store the count of zeros and non-zeros\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array and increment the count of zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeros to non-zeros and return it\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if zero_count == 0:\n        print(\"There are no zeroes in the array.\")\n    else:\n        print(\"The ratio of zeroes to non-zeroes is:\", round(zero_count / non_zero_count, 2))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the list of integers to an array of integers\n    arr = array('i', nums)\n\n    # Initialize the sum of non-zeroes and zeroes\n    non_zeroes = 0\n    zeroes = 0\n\n    # Iterate through the array and count the number of non-zeroes and zeroes\n    for num in arr:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] += 1\n    non_zero_count = sum(count)\n    zero_count = sum(1 for x in count if x == 0)\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # helper function to check if a number is a power of 2\n    def is_power_of_two(num):\n        return (num & (num-1)) == 0\n    \n    # helper function to find the number of bits required to represent a number\n    def count_bits(num):\n        count = 0\n        while num:\n            count += 1\n            num &= (num-1)\n        return count\n    \n    # check if the number is a power of 2\n    if is_power_of_two(n):\n        # check if the number can be represented as sum of non-zero powers of 2\n        if count_bits(n) <= 2:\n            return True\n    \n    # check if the number can be represented as sum of powers of 2\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and is_power_of_two(i) and is_power_of_two(n//i):\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # function to check whether the given number can be represented as sum of non-zero powers of 2 or not\n    if n == 0:\n        return False\n    else:\n        # To check whether the given number can be represented as sum of non-zero powers of 2 or not\n        # we need to iterate from 0 to n-1 and check if the current number is a power of 2\n        for i in range(0, n):\n            if n & (1 << i):\n                # if the current number is a power of 2\n                return True\n        # if none of the numbers from 0 to n-1 are powers of 2, then the number cannot be represented as sum of non-zero powers of 2\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    # Check for powers of 2\n    while n % 2 == 0:\n        n //= 2\n\n    # Check for non-zero powers of 2\n    i = 1\n    while i <= n:\n        if i == 2:\n            i += 1\n        elif n % i == 0:\n            return False\n        else:\n            i += 1\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # Check if there are at least two non-zero factors\n        for i in range(5):\n            if n & (1 << i) == 0:\n                continue\n            else:\n                break\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Checking whether n is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # Initializing the sum and the count of 0s\n    count = 0\n    sum = 0\n    \n    # Traversing the bits of n\n    while n > 0:\n        # Getting the last bit\n        last_bit = n & 1\n        \n        # Checking whether the last bit is 0\n        if last_bit == 0:\n            # Adding 0 to the sum\n            sum += 0\n            \n            # Incrementing the count of 0s\n            count += 1\n            \n            # Shifting the number to the left by 1\n            n = n >> 1\n        else:\n            # Adding 2^count to the sum\n            sum += 2**(count)\n            \n            # Incrementing the count of 0s\n            count += 1\n            \n            # Shifting the number to the left by 1\n            n = n >> 1\n    \n    # Checking if the sum of non-zero powers of 2 is equal to n\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    for i in range(1, n + 1):\n        if (i & (i-1)) == 0:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, n+1):\n        if n-i == 2**i:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # To check if the given number is already a power of 2 \n    if (n & (n - 1)) == 0: \n        return True \n\n    # To check for the sum of non-zero powers of 2 \n    for i in range(1, int(n ** 0.5) + 1): \n        if n % i == 0: \n            if is_Sum_Of_Powers_Of_Two(n // i): \n                return True\n\n    return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Initialize a list to store the powers of 2\n    powers_of_2 = []\n    \n    # Loop through the digits of the number\n    for i in range(len(str(n))):\n        \n        # Check if the current digit is 0\n        if int(str(n)[i]) == 0:\n            continue\n        \n        # Check if the current digit is a power of 2\n        if int(str(n)[i]) % 2 == 0:\n            \n            # If it is, add it to the powers_of_2 list\n            powers_of_2.append(int(str(n)[i]))\n    \n    # Check if the number can be represented as sum of powers of 2\n    if sum(powers_of_2) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # initialize a list to store the powers of 2 \n    powers_of_2 = []\n\n    # loop through the digits of n \n    for digit in str(n): \n        # check if digit is a power of 2 \n        if int(digit) == 0: \n            # if digit is 0, add it to the list of powers of 2 \n            powers_of_2.append(0)\n        elif int(digit) == 1: \n            # if digit is 1, add it to the list of powers of 2 \n            powers_of_2.append(1)\n        else: \n            # if digit is not 0 or 1, add the power of 2 to the list of powers of 2 \n            powers_of_2.append(2**int(digit))\n\n    # sort the list of powers of 2 in non-decreasing order \n    powers_of_2.sort()\n\n    # check if the sum of the powers of 2 is equal to n \n    sum_of_powers_of_2 = 0\n    for i in range(len(powers_of_2)): \n        sum_of_powers_of_2 += powers_of_2[i]\n\n    if sum_of_powers_of_2 == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference of the circle\n    circumference = 2 * 3.14159 * r\n    # return the circumference of the circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Formula for the circumference of a circle: pi * r\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r  # assuming the circle is a perfect circle"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    This function calculates the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_set = set(flattened_list)\n    return list(unique_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while True:\n        # Find the largest element\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # Swap the largest element with the end of the list\n        nums[n-1], nums[max_idx] = nums[max_idx], nums[n-1]\n\n        # Reverse the list from the point where the largest element was swapped to the end\n        for i in range(n-1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n\n        # If the list is sorted, we're done\n        if max_idx == 0:\n            break\n\n        # Otherwise, keep repeating the process with a smaller list (up to the point where the largest element was swapped to the end)\n        n = max_idx"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        \n    def heapify(nums, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and nums[left] > nums[largest]:\n            largest = left\n            \n        if right < n and nums[right] > nums[largest]:\n            largest = right\n            \n        if largest!= i:\n            swap(nums, i, largest)\n            heapify(nums, n, largest)\n            \n    def heap_sort(nums):\n        n = len(nums)\n        \n        for i in range(n//2 - 1, -1, -1):\n            heapify(nums, n, i)\n        \n        for i in range(n-1, 0, -1):\n            swap(nums, 0, i)\n            heapify(nums, i, 0)\n            \n    heap_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def reverse(start, end):\n        \"\"\"Reverse the elements of the given range.\"\"\"\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def reverse_pancake(pancake):\n        \"\"\"Reverse the elements of the pancake.\"\"\"\n        for i in range(pancake, -1, -1):\n            reverse(i, pancake)\n            pancake -= 1\n\n    n = len(nums)\n    for i in range(1, n + 1):\n        max_index = i - 1\n        for j in range(i, n + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i - 1], nums[max_index] = nums[max_index], nums[i - 1]\n        reverse_pancake(i - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    for i in range(n):\n        # select the largest element and move it to the end of the list\n        largest = i\n        for j in range(i, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        nums[i], nums[largest] = nums[largest], nums[i]\n        \n        # reverse the entire list starting from index i\n        j = i\n        while j < n-1:\n            nums[j], nums[n-1-j] = nums[n-1-j], nums[j]\n            j += 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swaps = 0\n    \n    for i in range(n-1, 0, -1):\n        max_idx = 0\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        \n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        swaps += i - max_idx\n    \n    print(\"Sorted array is:\", nums)\n    print(\"Number of swaps:\", swaps)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # use a helper function to reverse the list\n    def reverse(start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    # start with the smallest element and move it to the end\n    for i in range(n):\n        reverse(0, i)\n        reverse(i+1, n-1)\n        # check if the list is sorted\n        if is_sorted(nums):\n            return\n    \n    # list is not sorted, so we have a bug!\n    raise ValueError(\"The list is not sorted.\")\n\ndef is_sorted(nums):\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Step 1: Counting the number of pancakes required to sort the list\n    n = len(nums)\n    count = 0\n    while n > 1:\n        count += 1\n        n = n // 2\n\n    # Step 2: Sorting the list using the counting sort algorithm\n    counting_sort(nums, count)\n\ndef counting_sort(nums, count):\n    '''\n    Sorts the list using the counting sort algorithm.\n    '''\n\n    # Step 3: Initializing the auxiliary array\n    aux = [0] * len(nums)\n\n    # Step 4: Counting the frequency of each element in the list\n    for i in range(len(nums)):\n        aux[nums[i] - 1] += 1\n\n    # Step 5: Building the output array\n    i = 0\n    for j in range(count - 1):\n        for k in range(nums[j]):\n            nums[i] = j + 1\n            i += 1\n\n    # Step 6: Replacing the elements in the input list\n    for j in range(len(nums)):\n        nums[j] = nums[j] + 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def merge_sort(nums):\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    nums = merge_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the remaining unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the elements at i and max_idx\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the array from i to max_idx\n        for j in range(i, max_idx, -1):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse_sorted_index(arr, start, end):\n        for i in range(start, end):\n            if arr[i] < arr[start]:\n                return i\n        return end\n\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest!= i:\n            swap(arr, i, largest)\n            heapify(arr, n, largest)\n\n    def build_max_heap(arr):\n        n = len(arr)\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n    def sort(arr):\n        n = len(arr)\n        build_max_heap(arr)\n        for i in range(n-1, 0, -1):\n            swap(arr, 0, i)\n            heapify(arr, i, 0)\n        return arr\n\n    nums = list(nums)\n    return sort(nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    # initialize counters for each position\n    count1 = [0] * len(list1)\n    count2 = [0] * len(list2)\n    count3 = [0] * len(list3)\n    \n    # loop through the lists and count identical items\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count1[i] += 1\n            count2[i] += 1\n            count3[i] += 1\n    \n    # compute the total number of same-position identical items\n    count = 0\n    for i in range(len(count1)):\n        count += min(count1[i], count2[i], count3[i])\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and counts the number of items that are identical in the same position of each list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as arguments and returns the count of items that are identical in the same position of the three lists.\n\n    :param list1: First list\n    :param list2: Second list\n    :param list3: Third list\n    :return: count of items that are identical in the same position of the three lists\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of the three lists.\n    '''\n    # creating an empty dictionary to store the count of identical items\n    count_dict = {}\n    \n    # iterating over each item of the first list and checking if it exists in the second and third lists\n    for item in list1:\n        if item in list2 and item in list3:\n            # if the item exists in both the second and third lists, increment the count in the dictionary\n            if item in count_dict:\n                count_dict[item] += 1\n            else:\n                count_dict[item] = 1\n    \n    # returning the count of identical items in the same position of the three lists\n    return count_dict"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    This function finds the number of lists present in a given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    \n    # initialize the max difference to be the smallest possible integer value\n    max_diff = float('-inf')\n    \n    # loop through the array and compare each element with the next one\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize a variable to store the maximum absolute difference\n    max_diff = float('-inf')\n    # Loop through the array and find the maximum absolute difference\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = arr[1] - arr[0] # initialize the first difference\n    max_diff = diff # initialize the maximum difference\n    for i in range(1, len(arr)-1): # iterate over all elements except the first and last\n        curr_diff = abs(arr[i+1] - arr[i]) # find the difference between current and next element\n        if curr_diff > max_diff: # if the current difference is greater than the maximum difference\n            max_diff = curr_diff # update the maximum difference\n    return max_diff # return the maximum difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = abs(arr[1] - arr[0])\n    max_diff = abs(arr[-1] - arr[-2])\n\n    # Loop through the array and update the minimum and maximum difference as necessary\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i+1] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        if abs(arr[i]-arr[i-1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i-1])\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n\n    # Initialize variables to store the maximum difference and its index\n    max_diff = 0\n    max_index = 0\n\n    # Loop through the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                max_index = i\n\n    # Return the maximum difference and its index\n    return max_diff, max_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If the discriminant is positive, there are two solutions\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    \n    # If the discriminant is zero, there is only one solution\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return (x, x)\n    \n    # If the discriminant is negative, there are no solutions\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Compute the discriminant\n    d = b**2 - 4*a*n\n    \n    # If d is negative, there are two real solutions\n    if d < 0:\n        return None\n    \n    # If d is zero, there is only one real solution\n    elif d == 0:\n        x = -b / (2*a)\n        y = x\n        return (x, y)\n    \n    # If d is positive, there are two distinct complex solutions\n    else:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        y1 = x1 / (a + x1)\n        y2 = x2 / (a + x2)\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    # First, check if n is divisible by a*b\n    if n % (a * b)!= 0:\n        return None\n\n    # Second, calculate the value of x and y that satisfy ax + by = n\n    x = (n // b) // a\n    y = n - x * b\n\n    # Finally, return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Define the function to check if there is a solution\n    def is_solution(x, y):\n        return a*x + b*y == n\n    \n    # Check if there is a solution by starting with x = y = 0\n    if is_solution(0, 0):\n        return (0, 0)\n    \n    # Iterate from 1 to n/2 to check for solutions\n    for i in range(1, n//2+1):\n        # Check if the current solution is valid by checking if the quotient of a and i is integer\n        if a % i == 0:\n            # Calculate the other solution by finding the remainder when x and y are divided by i\n            y = n // i\n            if is_solution(i, y):\n                # Found a valid solution!\n                return (i, y)\n    \n    # No valid solution found\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Initialize variables for iteration\n    x = 1\n    y = 0\n\n    # Check if the given equation has a solution\n    while b*x**2 + a*x*y + n!= 0:\n\n        # Check if the current x, y satisfies the equation\n        if a*x**2 + b*x*y + n == 0:\n            return (x, y)\n\n        # Update x and y for next iteration\n        x += 1\n        y = b*x - a*y"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Define the quadratic equation as ax^2 + bx + c = 0\n    c = b**2 - 4*a*n\n\n    if c < 0:\n        # No real solution exists\n        return None\n\n    elif c == 0:\n        # One real solution exists\n        x = -b / (2*a)\n        return (x, x)\n\n    else:\n        # Two real solutions exist\n        x1 = (-b + (b**2 - 4*a*n)**0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*n)**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # check if the discriminant is negative\n    if disc < 0:\n        return None\n    \n    # calculate the two solutions\n    x1 = (-b + disc**0.5) / (2*a)\n    x2 = (-b - disc**0.5) / (2*a)\n    \n    # check if they are real solutions\n    if x1.is_integer() and x2.is_integer():\n        return (int(x1), int(x2))\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -n / b\n    x2 = n / b\n    if a * x1 + b * x2 == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    # check if discriminant is positive\n    if discriminant > 0:\n        # calculate the two real solutions\n        x1 = (-b + discriminant**(1/2))/(2*a)\n        x2 = (-b - discriminant**(1/2))/(2*a)\n        # check if the first solution is greater than zero\n        if x1 > 0:\n            # return the first solution and the negative of the second solution\n            return (x1, -x2)\n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Initialize x and y\n    x = None\n    y = None\n\n    # Loop through all possible values of x and y\n    for i in range(-100000, 100000):\n        for j in range(-100000, 100000):\n            # Calculate the value of x and y\n            value = i*a + j*b\n            \n            # If the value is equal to n, return the tuple (x, y)\n            if value == n:\n                return (x, y)\n\n    # If no solution was found, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and removes all elements from the first list\n    present in the second list. The function returns the modified list1.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the elements of the list1\n    for i in range(len(list1)):\n        # Check if the element is present in the list2\n        if list1[i] in list2:\n            # If it is present, remove it from the list1\n            list1.remove(list1[i])\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Create a new list to store the elements of the first list that are not present in the second list.\n    new_list = []\n\n    # Loop through each element of the first list.\n    for element in list1:\n        # If the element is not present in the second list, add it to the new list.\n        if element not in list2:\n            new_list.append(element)\n\n    # Return the new list as the result of the function.\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through all elements in the first list\n    for element in list1:\n        # If the element is present in the second list, remove it\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Args:\n    list1 (list): A list of elements.\n    list2 (list): A list of elements to be removed from list1.\n\n    Returns:\n    A new list without the elements present in list2 from list1.\n    \"\"\"\n    return [element for element in list1 if element not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    i = 0\n    while True:\n        if n - 2 * i < 0:\n            break\n        total_sum += n - 2 * i\n        i += 1\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += n - 2 * i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(n - 2*i for i in range(n//2+1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return n + sum_series(n-2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #initialize variables\n    sum_n = 0\n    i = 0\n    while i <= n//2:\n        sum_n += (n-2*i)\n        i += 1\n    return sum_n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2*i)\n    return total\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    p = (s * (s-1)) / 2\n    \n    # Calculate the area using Heron's formula\n    area = 0.5 * l * (tan(pi/l) ** 2)\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    \n    Args:\n    s (float): the length of each side of the polygon\n    l (int): the number of sides of the polygon\n    \n    Returns:\n    float: the area of the polygon\n    '''\n    \n    # calculate the side length\n    side_length = s / l\n    \n    # calculate the angle of each side\n    angles = [2 * pi / l * i for i in range(l)]\n    \n    # calculate the area of each triangle by using Heron's formula\n    area = 0\n    for i in range(l):\n        area += 0.5 * side_length * tan(angles[i])\n    \n    # return the overall area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / (2 * tan(pi/l))\n    return a"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using Heron's formula\n    a = tan(pi/l)\n    area = (s*a)/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the side length of the polygon\n    side = s / l\n    \n    # Calculate the area of the polygon using the formula for a regular polygon\n    area = 0.5 * s * (tan(pi / l) ** 2)\n    \n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    r = s / l\n    area = pi * r ** 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2*i + 1) * pi / (2*l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2 * (1 - tan(pi / l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((pi / 2) / l) ** (2 * i)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    for i in range(int(math.sqrt(n))+1, n//2+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    sum_of_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    \n    # Check if the sum of the divisors of n is equal to n\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    # Check if the sum of the divisors is the same\n    if len(divisors) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # finding the sum of divisors of n\n    div_sum = sum(set(int(i) for i in str(n)))\n    # finding the sum of divisors of n+1\n    div_sum_plus_one = sum(set(int(i) for i in str(n+1)))\n    # comparing the two sums\n    if div_sum == div_sum_plus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_list.append(i)\n            divisor_list.append(n//i)\n    if len(set(divisor_list)) == 1:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return divisors[0] == sum(divisors)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_list.append(i)\n    div_sum = sum(div_list)\n    if div_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return sum(divs) == 2*n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n < 2:\n        print(\"Invalid input\")\n        return\n    divisors_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_list.append(i)\n    divisors_sum = sum(divisors_list)\n    if divisors_sum == n:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Iterate over the characters in the string\n    for i, char in enumerate(str1): \n        # If the character is an English alphabet character, add it to the dictionary\n        if char.isalpha(): \n            if char not in char_count: \n                char_count[char] = 1\n            else: \n                char_count[char] += 1\n\n    # Count the number of characters that occur at the same position in the string as in the English alphabet\n    same_position_count = 0\n    for count in char_count.values(): \n        if count > 1: \n            same_position_count += count\n\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the English alphabet\n    for i in range(97, 123):\n        # If the character is present in the string and its position matches the position of the character in the English alphabet, increment the count in the dictionary\n        if str1[i] in char_count:\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate over each character in the string\n    for i, char in enumerate(str1):\n        # Convert the character to lowercase to make the comparison case-insensitive\n        char = char.lower()\n\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If it is, increment the count by 1\n            char_count[char] += 1\n        else:\n            # If it's not, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # Count the number of characters at each position in the alphabet\n    position_count = {}\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If it is, increment the count by the value of the dictionary entry\n            if char in position_count:\n                position_count[char] += char_count[char]\n            else:\n                position_count[char] = char_count[char]\n\n    # Return the count of characters at each position in the alphabet\n    return position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of each character at the same position in the string\n    count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char_lower = char.lower()\n        # Check if the character is already in the dictionary\n        if char_lower in count:\n            # Increment the count of the character by 1\n            count[char_lower] += 1\n        else:\n            # Add the character to the dictionary with a count of 1\n            count[char_lower] = 1\n    \n    # Loop through the characters in the English alphabet and check if they are in the dictionary\n    for i in range(ord('a'), ord('z')+1):\n        char_num = chr(i)\n        # Check if the character is already in the dictionary\n        if char_num in count:\n            # Increment the count of the character by 1\n            count[char_num] += 1\n    \n    # Return the dictionary containing the count of each character at the same position in the string\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for i in range(26):\n        if str1.lower() == alphabet[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase and remove all non-letter characters\n    str1 = ''.join(filter(str.isalpha, str1)).lower()\n\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # calculate the count of characters at the same position in the string as in the English alphabet\n    same_pos_count = 0\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        if char in char_count and char_count[char] == 1:\n            same_pos_count += 1\n\n    # print the result\n    print('Number of characters at the same position in the string as in the English alphabet:', same_pos_count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of each character in the English alphabet\n    char_count = {}\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Loop through the string and count the number of occurrences of each character in the English alphabet\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        count = str1.count(char)\n        char_count[char] = count\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to map English characters to their positions in the alphabet\n    char_dict = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n    \n    # create an empty dictionary to store the count of characters at each position in the alphabet\n    char_pos_count = {}\n    \n    # iterate over the characters in the string\n    for char in str1:\n        # check if the character is in the dictionary (case insensitive)\n        if char.lower() in char_dict:\n            # check if the character's position in the alphabet has been counted yet\n            if char_dict[char.lower()] not in char_pos_count:\n                # if not, initialize the count to 0\n                char_pos_count[char_dict[char.lower()]] = 0\n            # increment the count of the character at the current position in the alphabet\n            char_pos_count[char_dict[char.lower()]] += 1\n    \n    # return the dictionary of character counts\n    return char_pos_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            if char.lower() == str1[alphabet.index(char.lower())].lower():\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                if A[i] ^ A[j] == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    :param A: a list of integers\n    :return: the number of even pairwise xors\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]%2 == 0 and A[j]%2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Count the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pair += 1\n    return even_pair"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n % 2 == 0:\n        n = n // 2\n    return 2 ** math.ceil(math.log2(n))\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to a positive integer\n    n = abs(int(n))\n    \n    # set a variable to track the position of the least significant bit\n    i = 0\n    \n    # loop until the position of the least significant bit is greater than or equal to the length of the binary representation of n\n    while n & (1 << i) == 0:\n        i += 1\n    \n    # return the next power of 2 greater than or equal to n\n    return 1 << i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n-1)!= 0: # check if n is power of 2\n        n = n | (n-1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Find the smallest power of 2 greater than or equal to n\n    while n & (n-1) > 0:\n        n = n | (n-1)\n\n    # Return the smallest power of 2 greater than or equal to n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # Find the power of 2 greater than or equal to n\n        power = 1\n        while power < n:\n            power <<= 1\n        return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 2 ** (n.bit_length() + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # iterate until we find the next power of 2\n    while True:\n        n = n << 1\n        if n < n: # overflow\n            raise OverflowError(\"Overflow while computing the next power of 2\")\n        \n        if n >= n and n & (n-1) == 0:\n            return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result\n    result = n\n\n    # Keep incrementing the result by 2 until it's a power of 2\n    while result & (result - 1)!= 0:\n        result <<= 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Check if n is a power of 2\n    if n & (n - 1) == 0: \n        return n\n    \n    # Find the next power of 2 using bitwise operations\n    power = 1\n    while power < n: \n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use bitwise operations to find the next power of 2.\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in x:\n        if i == a:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n\n    :param lst: A list of numbers\n    :param x: The number to search for in the list\n    :return: The number of occurrences of x in lst\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the range of indices specified by the user\n    for i in range(m, n+1):\n        # If the index is within the bounds of the list, add the corresponding number to the sum\n        if i >= 0 and i < len(list1):\n            sum += list1[i]\n    # Return the final sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n\n    sum_value = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            sum_value += list1[i]\n\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= len(list1) or n >= len(list1):\n        print(\"Invalid indices!\")\n        return\n    elif m > n:\n        print(\"m should be less than or equal to n!\")\n        return\n    else:\n        sum_of_range = sum(list1[m:n+1])\n        print(\"Sum of the numbers in the range:\", sum_of_range)\n        return sum_of_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n    return sum_value"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculating the perimeter of the pentagon\n    perimeter = 5 * a\n\n    # Returning the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n\nprint(perimeter_pentagon(5))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculating the perimeter of the pentagon using the formula:\n    # A = 5(s^2+s) + 5s - 10\n    # A = 5(s^2+s) + 5s\n    # A = 5s^2 + 5s - 10\n    # A = 5s^2 - 10s + 5\n    # A = 5s^2 - 10s + 5\n    # A = 5s^2 - 20s + 5\n    # A = 5s^2 - 5s\n    # A = 10s^2\n    # A = 10s\n    # A = 5s\n\n    # s = 1/5\n    # s = 0.2\n    s = math.sqrt(5)\n\n    # Finding the perimeter of the pentagon using the formula:\n    # P = 5(s^2+s) + 5s - 10\n    # P = 5(1/5^2 + 1/5) + 5/5 - 10/5\n    # P = 15/10 - 15\n    # P = -15/10 + 5\n    # P = 5/2\n    # P = 5\n\n    # So the perimeter of the pentagon is 5 units.\n    perimeter = 5 * s * s\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Finding the semi-perimeter of the pentagon\n    s = (a**2 + a**2)**0.5\n\n    # Calculating the area of the pentagon\n    area = (5 * s**2) / (4 * math.tan(math.pi/5))\n\n    # Calculating the perimeter of the pentagon\n    perimeter = 5 * a\n\n    # Returning the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes the length of the side of a regular pentagon as input and returns its perimeter.\n    \"\"\"\n    # formula for the perimeter of a regular pentagon\n    # perimeter = 5 * a * sqrt(3) / 4\n    perimeter = 5 * a * (3 ** 0.5) / 4\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the hypotenuse of the right triangle\n    c = a / math.sqrt(3)\n\n    # calculate the perimeter of the pentagon using the formula\n    perimeter = 5 * a + 5 * c\n\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurrences of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # Loop through the rest of the tuple\n    for element in test_tuple[1:]:\n        # If any element is not of the same data type as the first element, return False\n        if type(element)!= data_type:\n            return False\n    # If all the elements are of the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a set to store the data types of all elements in the tuple\n    data_types = set()\n\n    # Iterate through all elements in the tuple\n    for element in test_tuple:\n        # If the element is already in the set, check if it's the same data type as the first element\n        if element in data_types:\n            if type(element)!= type(test_tuple[0]):\n                # If the element is not of the same data type as the first element, return False\n                return False\n        else:\n            # If the element is not in the set, add its data type to the set\n            data_types.add(type(element))\n\n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(elem) for elem in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # Loop through the rest of the tuple and check if all the elements have same data type as the first element\n    for element in test_tuple[1:]:\n        if type(element)!= data_type:\n            return False\n\n    # If all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = None\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        elif type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # convert all the elements in the tuple to a list\n    lst = list(test_tuple)\n    \n    # get the first element of the list\n    first_elem = lst[0]\n    \n    # iterate over the rest of the elements in the list\n    for elem in lst[1:]:\n        \n        # if any two elements have different data types, return False\n        if type(elem)!= type(first_elem):\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # initialize count and count_majority to 0\n    count = 0\n    count_majority = 0\n    \n    # iterate through the array and count the occurrences of each element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # if the count is greater than n/2, the element is the majority\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # initialize the count of x to 0\n    count = 0\n\n    # iterate through the array and increment the count of x if it is equal to the current element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # if the count of x is greater than or equal to n/2, return True\n    if count >= n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n-1) # clearing the rightmost 1 bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the count of set bits in the integer.\n    A set bit is a binary digit with a value of 1.\n    '''\n\n    count = 0\n\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # Convert n to binary representation using bitwise operators\n    binary_rep = bin(n)[2:]\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate through each bit of binary representation\n    for bit in binary_rep:\n        # If bit is 1, increment count by 1\n        if bit == '1':\n            count += 1\n    \n    # Return count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    count = 0 \n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str)\n\n    # Iterate over each character in the list\n    for i in range(len(char_list)):\n        # Check if the index of the character is odd\n        if i % 2!= 0:\n            # If the index is odd, remove it from the list\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove characters from a given string which have odd index values.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return \"\".join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize a new string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if (str.index(char) % 2!= 0):\n            # If the index is odd, append the character to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create an empty string to store the odd values\n    result = \"\"\n    # loop through each character in the input string\n    for i in range(len(str)):\n        # if the index is odd, add the character to the result string\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check if all three numbers are valid numbers\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float))):\n        return \"Invalid input\"\n    \n    # find the minimum of the three numbers\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    \n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # return the minimum number among a, b and c\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check if a, b, and c are numbers\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise ValueError(\"All values must be numbers\")\n    # compare a, b, and c and find the minimum\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable to store the unset bits in the range\n    unset_bits = 0\n    # Iterate through the bits from l to r\n    for i in range(l, r+1):\n        # If the bit is unset, add it to the unset_bits variable\n        if n & (1 << i) == 0:\n            unset_bits |= 1 << i\n        # If the unset_bits variable has a value greater than or equal to 2^n, then all the bits are unset in the range\n        if unset_bits >= (1 << n):\n            return True\n    # If all the bits are set in the range, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n).count('1')\n    if count == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if both l and r are odd\n    if l % 2 == 0 and r % 2 == 0:\n        # If l and r are even, set r to l+1 to avoid generating a list with 0 length\n        r = l + 1\n    # Generate a list of numbers from l to r\n    nums = list(range(l, r + 1))\n    # Iterate through the list and check if all the bits are set to 1\n    for num in nums:\n        if bin(num).count('1') < len(bin(num)):\n            return False\n    # If all the bits are set to 1, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n\n    # Iterate through the range of numbers between l and r (inclusive)\n    for i in range(l, r + 1):\n        # Calculate the binary representation of the current number\n        binary_representation = bin(i)[2:]\n        # Iterate through each character in the binary representation\n        for bit in binary_representation:\n            # If the character is '1', increment the count\n            if bit == '1':\n                count += 1\n                # If the count becomes equal to the number of bits in the binary representation,\n                # return True since all the bits are set in the given range\n                if count == len(binary_representation):\n                    return True\n\n    # If the loop completes without returning True, return False since all the bits are unset in the given range\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if all bits are set in range [l, r]\n    for i in range(l, r + 1):\n        if n & (1 << i) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the number of bits required to represent n\n    bits = len(bin(n)[2:])\n    # Find the number of bits required to represent the range\n    range_bits = len(bin(r - l + 1)[2:])\n\n    # If the number of bits required to represent n is greater than or equal to the range, then all the bits are unset in the given range\n    if bits >= range_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0 and r == 0:\n        return True\n    elif l > r:\n        return False\n    elif l == 0 and r > 0:\n        return False\n    elif l > 0:\n        return all_Bits_Set_In_The_Given_Range(n, l - 1, r)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    if l > r:\n        return \"Invalid input. l should be less than or equal to r.\"\n\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters:\n    n: The integer number on which we are checking the bits.\n    l: The least significant bit that we are checking for unset bits.\n    r: The most significant bit that we are checking for unset bits.\n    \"\"\"\n    # Using bitwise AND operation, we can check whether all the bits between l and r are set or unset in n.\n    if n & (1 << l) and n & (1 << (r + 1)) - 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters - n, l and r - which represent the given integer, lower bound and upper bound of the range respectively.\n    The function checks whether all the bits are unset in the given range or not.\n    If all the bits are unset, it returns True, otherwise it returns False.\n    \"\"\"\n    # function to check whether a number is a power of 2 or not\n    def is_power_of_2(num):\n        if num == 0:\n            return False\n        return ((num & (num - 1)) == 0)\n\n    # checking if n is a power of 2\n    if not is_power_of_2(n):\n        return False\n\n    # checking whether all bits are set in the given range or not\n    for i in range(l, r + 1):\n        if (n & (1 << i))!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n\n    Args:\n    arr (list): the input array\n    n (int): the number of elements to re-arrange\n\n    Returns:\n    list: the re-arranged array\n    \"\"\"\n\n    # initialize the positive and negative indices\n    pos_indices = []\n    neg_indices = []\n\n    # iterate over the array and keep track of positive and negative indices\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_indices.append(i)\n        else:\n            neg_indices.append(i)\n\n    # sort the positive indices in descending order\n    pos_indices = sorted(pos_indices, reverse=True)\n\n    # merge the two sorted lists of indices into one\n    combined_indices = pos_indices + neg_indices\n\n    # re-arrange the original array using the combined indices\n    new_arr = [arr[i] for i in combined_indices]\n\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive and one for negative\n    i = 0\n    j = n-1\n\n    # Traverse the array and swap elements as required\n    while i < j:\n        # If the current element is negative, swap it with the next positive element\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        # If the current element is positive, move to the next element\n        else:\n            j -= 1\n\n    # Return the final array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers for negative and positive elements\n    neg_ptr = 0\n    pos_ptr = n - 1\n    \n    # Traverse the array and swap negative and positive elements\n    while neg_ptr < pos_ptr:\n        if arr[neg_ptr] < 0:\n            # Swap negative and positive elements\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n            neg_ptr += 1\n            pos_ptr -= 1\n        else:\n            # Move the positive pointer to the next element\n            pos_ptr -= 1\n            \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, we separate the negative and positive elements of the array into two separate lists\n    neg_arr = [x for x in arr[:n] if x < 0]\n    pos_arr = [x for x in arr[:n] if x >= 0]\n    \n    # Next, we reverse the order of the negative and positive elements in each list\n    neg_arr.reverse()\n    pos_arr.reverse()\n    \n    # Finally, we merge the two lists into the original array\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = neg_arr[i]\n        elif arr[i] >= 0:\n            arr[i] = pos_arr[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # First, we'll find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Then, we'll create a new array of the same size as the original array\n    new_arr = [0] * n\n    \n    # Next, we'll iterate through the original array and copy the positive elements to the new array, followed by the negative elements. We'll also remember the index of each element to preserve the relative order.\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            new_arr[index] = arr[i]\n            index += 1\n        elif arr[i] < 0:\n            new_arr[index] = arr[i]\n            index += 1\n    \n    # Finally, we'll return the new array with all negative elements before positive ones and where the relative order is preserved.\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers for negative and positive elements\n    neg = 0\n    pos = n\n\n    # Iterate through the array\n    while pos < len(arr):\n\n        # If the element at the current position is negative\n        if arr[pos] < 0:\n\n            # If there are still positions left for negative elements\n            if neg < n:\n\n                # Move the element at the current position to the negative pointer\n                arr[neg], arr[pos] = arr[pos], arr[neg]\n\n                # Increment the negative pointer\n                neg += 1\n\n        # Increment the positive pointer\n        pos += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n    pos_count = n - neg_count\n    \n    temp = []\n    for i in range(n):\n        if arr[i] < 0:\n            temp.append(arr[i])\n        elif arr[i] > 0:\n            temp.append(arr[i])\n            arr[i] = 0\n        else:\n            continue\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = temp[i+neg_count]\n        elif arr[i] > 0:\n            arr[i] = temp[i+neg_count]\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # First, count the number of negative and positive elements in the array\n    negative_count = 0\n    positive_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n    \n    # Initialize the negative index and positive index variables\n    negative_index = 0\n    positive_index = n\n    \n    # Move the negative elements to the start of the array\n    for i in range(negative_count):\n        arr[negative_index], arr[positive_index] = arr[positive_index], arr[negative_index]\n        negative_index += 1\n        positive_index += 1\n    \n    # Move the positive elements to the end of the array\n    for i in range(positive_count):\n        arr[negative_index], arr[positive_index] = arr[positive_index], arr[negative_index]\n        negative_index += 1\n        positive_index += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the array\n    for i in range(n):\n        if arr[i] < 0:\n            # Append the negative element to the negative list\n            neg_list.append(arr[i])\n        else:\n            # Append the positive element to the positive list\n            pos_list.append(arr[i])\n\n    # Combine the two lists to get the final array\n    final_arr = neg_list + pos_list\n\n    # Return the final array\n    return final_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # iterate through the array and append positive and negative elements to the appropriate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n            \n    # concatenate the two lists and sort them in ascending order\n    arr_new = neg_list + pos_list\n    arr_new.sort()\n    \n    # iterate through the original array and replace the elements with the elements from the sorted array\n    for i in range(n):\n        arr[i] = arr_new[i]\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Remove all spaces from the string\n    str1 = str1.replace(\" \",\"\")\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq module to find n largest items in list1\n    largest_nums = heapq.nlargest(n, list1)\n    return list(largest_nums)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list to a min heap\n    heap = list1[:n]\n    heapq.heapify(heap)\n\n    # append the remaining items to the min heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    # add the first n elements of the list to the min heap\n    for i in range(n):\n        min_heap.append(list1[i])\n    # add the remaining elements of the list to the min heap\n    for i in range(n, len(list1)):\n        if list1[i] > min_heap[0]:\n            heapq.heappushpop(min_heap, list1[i])\n    # convert the min heap to a list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min heap to keep track of the n largest items\n    min_heap = []\n    for i in range(n):\n        # Add the first item to the min heap\n        min_heap.append(lst[i])\n        # Remove the last item from the min heap if the size exceeds n\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to find the n largest items from the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n largest items from the list\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, list1.pop())\n\n    # add the remaining elements of the list to the max heap\n    for i in range(len(list1)):\n        heapq.heappush(max_heap, list1[i])\n\n    # return the n largest elements from the max heap\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r**2 * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14159*r*r\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_surface_area = (2*3.141592653589793*(r*r)+(2*3.141592653589793*r*h)+(2*3.141592653589793*h*h))/3\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula A = pi * r^2 * h\n    A = math.pi * r ** 2 * h\n\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 #pi is a mathematical constant representing the value of pi\n    lateral_surface_area = area * h #lateral surface area = pi * r^2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h + 2*r*r #Returning the lateral surface area of the cylinder"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = (2 * r * h) + ((2 * r * r) * h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (math.pi * r**2) + (math.pi * r**2 * h)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # cube the side length and return the result"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of the given number\n    even_bits = 0\n    \n    # Iterate through each bit of the given number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # If it is, set the corresponding bit of the even_bits variable to 1\n            even_bits |= (1 << int(bit))\n            \n    # Return the sum of the original number and the even_bits variable\n    return n + even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n & 1 == 0: \n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n    \n    # Iterate over each character in the binary number\n    for i in range(len(binary_num)):\n        # Check if the character is an even bit\n        if int(binary_num[i]) == 0:\n            # If it is, set the even bit to 1\n            binary_num = binary_num[:i] + '1' + binary_num[i+1:]\n    \n    # Convert the binary number back to decimal\n    return int(binary_num, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 0b11111100 # mask out all odd bits, leaving only even bits\n    return even_bits | 0b00000010 # set all even bits to 1 by OR-ing with 0b00000010 (which is 2 in binary)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the count of even bits\n    count = 0\n    # loop through each bit in the number\n    while n > 0: \n        # check if the current bit is even\n        if n & 1 == 0: \n            # set the current bit\n            n |= 1\n            # increment the count of even bits\n            count += 1\n        # shift the number one bit to the right\n        n >>= 1\n    # return the number with all even bits set\n    return n + count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize result variable with 0\n    result = 0\n    \n    # Loop through each bit in the given number\n    for bit in bin(n)[2:]:\n        # Check if the bit is even\n        if int(bit) % 2 == 0:\n            # Set the corresponding bit in the result variable to 1\n            result = result | int(bit)\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    while n > 0:\n        if n & 1 == 0:\n            even_bits |= n\n        n >>= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n & 1 == 0:\n            n |= 1 << 1  # set the bit to 1\n        n >>= 1  # move the bits to the left by 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through all bits in the binary representation of n\n    for i in range(0, 32):\n        # if the i-th bit of the binary representation of n is even\n        if (n >> i) & 1 == 0:\n            # set the i-th bit of the binary representation of n to 1\n            n = n | (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits\n    even_bits = []\n\n    # iterate through the bits of the given number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, append it to the list\n        if int(bit) % 2 == 0:\n            even_bits.append(int(bit))\n\n    # return the sum of all the even bits in the given number\n    return sum(even_bits)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of occurrences\n    count_dict = {}\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter()  # create an empty Counter object\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        counter[tup] += 1  # increment the count of the tuple in the Counter object\n    \n    return dict(counter)  # convert the Counter object to a dictionary and return it"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use Counter to count the frequency of each tuple\n    counter = Counter(test_list)\n\n    # Convert the Counter object to a dictionary\n    result_dict = dict(counter)\n\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of occurrences of each tuple\n    count_dict = {}\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the count dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the occurrences of each unique tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        count = count_dict.get(tup, 0) + 1\n        count_dict[tup] = count\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the number of times each tuple occurs in the list\n    count_dict = Counter(test_list)\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the count_dict, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple and its count to the count_dict\n        else:\n            count_dict[tup] = 1\n            \n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize an empty dictionary to store the count of each substring\n    substring_count = {}\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the current character is a letter, add a new substring to the dictionary\n        if str[i].isalpha():\n            substring = str[i:i+len(str)-1]\n            substring_count[substring] = 1 if substring in substring_count else 0\n\n    # Return the total count of substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize count variable to zero\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each substring of the current character\n        for j in range(i+1, len(str)+1):\n            # check if the substring is non-empty\n            if len(str[i:j]) > 0:\n                # increment the count\n                count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    # Initialize variables\n    count = 0\n    prev_char = None\n    \n    # Loop through each character in the string\n    for char in str:\n        # Check if the current character is equal to the previous character, if so, add 1 to the count\n        if char == prev_char:\n            count += 1\n        else:\n            prev_char = char\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    # Initialize count to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible starting index for the substring\n        for j in range(i, len(str)):\n            # Add 1 to count for each non-empty substring\n            if str[j]!= str[i]:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings) - len(set(substrings))"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    sequence = [1, 1]\n    for i in range(2, n):\n        if sequence[i - 1] + 2 <= m:\n            sequence.append(sequence[i - 1] + 1)\n        else:\n            sequence.append(sequence[i - 1] + 2)\n        total += sequence[-1]\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(1, m+1):\n        # Check if the sum of the current element and the previous element is less than or equal to m\n        if i + i <= m:\n            # If it is, increment the count variable\n            count += 1\n\n    # Return the count of possible sequences of length n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, m + 1):\n        if i >= 2 * (n - 1) and i <= m:\n            total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize the counter to 0\n    count = 0\n    \n    # Initialize the previous element to be None\n    prev_element = None\n    \n    # Loop through all the possible elements\n    for i in range(m, n+1):\n        \n        # If the element is greater than twice the previous element and less than or equal to m, increment the counter\n        if i >= 2*prev_element and i <= m:\n            count += 1\n        \n        # Set the previous element to the current element\n        prev_element = i\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n < 1:\n        return 0\n\n    total_sequences = 1\n    prev_element = float('-inf')\n\n    for i in range(2, m + 1):\n        if i <= 2 * prev_element <= m:\n            total_sequences += get_total_number_of_sequences(m, n - 1)\n        prev_element = i\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    sequence = [0]\n    for i in range(n):\n        max_num = min(m, m + 2 * i)\n        for j in range(1, max_num):\n            if sequence[j-1] < m and sequence[j-1] >= 2*i:\n                sequence.append(j)\n        total_sequences += len(sequence)\n        sequence = [0]\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n that have each element greater than or equal to twice the previous element and less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += m // i + (m % i == 0)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def is_valid_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] < (2 * seq[i-1]) or seq[i] > m:\n                return False\n        return True\n\n    def generate_sequences(seq, n, curr_length):\n        if curr_length == n:\n            if is_valid_sequence(seq):\n                total_sequences += 1\n        else:\n            for i in range(len(seq), m+1):\n                seq.append(i)\n                generate_sequences(seq, n, curr_length+1)\n                seq.pop()\n\n    total_sequences = 0\n    seq = []\n    generate_sequences(seq, n, 0)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    count = 0\n    for i in range(2, m):\n        for j in range(i-1, m-n+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m+1):\n        for j in range(i*2, min(i*2+n, m)+1):\n            total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n    # remove the last element of the first list\n    list1 = list1[:-1]\n    # concatenate the second list with the first list\n    new_list = list1 + list2\n    # return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the length of the first list is greater than the length of the second list\n    if len(list1) > len(list2):\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    else:\n        # If the length of the first list is not greater than the length of the second list, print an error message\n        print(\"The first list is not longer than the second list. Please make sure the second list has more elements than the first list.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Get the index of the last element of the first list\n    last_index = length - 1\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0:\n        return list2\n    else:\n        list1[-1] = list2[-1]\n        return replace_list(list1[:-1], list2[:-1])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        # check if the lengths of the lists are the same\n        list1[-1:] = list2[-1:]\n        # replace the last element of the first list with the elements of the second list\n        list1[-1:] = list2[-1:]\n    else:\n        print(\"Error: The two lists must have the same length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Find the length of the lists\n    len1 = len(list1)\n    len2 = len(list2)\n\n    # Check if the second list is longer than the first list\n    if len2 > len1:\n        # Find the number of times to repeat the second list\n        num_repeats = len2 // len1\n\n        # Calculate the number of elements to add to the first list\n        num_elements = len2 - (len1 * num_repeats)\n\n        # Add the repeated elements to the first list\n        list1.extend([list2[-1]] * num_elements)\n\n        # Remove the repeated elements from the second list\n        list2 = list2[:-num_elements]\n\n    # Check if the second list is shorter than the first list\n    elif len2 < len1:\n        # Find the number of times to repeat the second list\n        num_repeats = len1 // len2\n\n        # Calculate the number of elements to add to the first list\n        num_elements = len1 - (len2 * num_repeats)\n\n        # Add the repeated elements to the first list\n        list1.extend([list2[-1]] * num_elements)\n\n        # Remove the repeated elements from the second list\n        list2 = list2[:-num_elements]\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # get the length of the first list\n    len1 = len(list1)\n\n    # get the length of the second list\n    len2 = len(list2)\n\n    # check if the length of the second list is greater than the length of the first list\n    if len2 > len1:\n        # if the second list is greater, we need to remove elements from the first list to make room for the second list\n        for i in range(len1 - len2, len1):\n            list1.pop()\n        # then we can add the second list to the first list\n        list1 += list2\n    else:\n        # if the second list is less, we need to add elements to the first list to make room for the second list\n        for i in range(len2 - len1, len2):\n            list1.append(list2[i])"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_prime_less_than_N(N):\n        for i in range(N, 2, -1):\n            if is_prime(i):\n                return i\n        return 2\n\n    def find_next_prime_square(N):\n        prime = find_prime_less_than_N(N)\n        square = math.sqrt(prime)\n        while True:\n            next_prime = find_prime_less_than_N(square)\n            if next_prime > square and is_prime(next_prime):\n                return next_prime\n            square += 1\n\n    next_square = find_next_prime_square(N)\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the root of the given number\n    root = math.sqrt(N)\n    # Find the next integer that is a perfect square\n    i = int(math.ceil(root))\n    while (i * i <= N):\n        i += 1\n    # Calculate the next perfect square\n    next_num = i * i\n    # Return the next perfect square\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Define a function to check if a number is a perfect square\n    def is_perfect_square(n): \n        return int(math.sqrt(n))**2 == n\n    \n    # Find the next perfect square greater than N\n    if is_perfect_square(N):\n        i = N + 1\n        while not is_perfect_square(i):\n            i += 1\n        return i\n    else:\n        return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    while True:\n        num = N + 1\n        while num*num > N:\n            num += 1\n\n        if num*num == N:\n            return num\n\n        if num*num > N + 1:\n            break\n\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Use binary search to find the square of the nearest perfect square to N\n    left, right = 1, N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == N:\n            left = mid + 1\n        elif mid * mid < N:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Check if the next perfect square is greater than N\n    if (right + 1) * (right + 1) > N:\n        return (right + 1) * (right + 1)\n    else:\n        return (right + 1) * (right + 1) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number N.\n    '''\n    # check if N is a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        return N + 1\n    else:\n        # find the next higher perfect square\n        while True:\n            sqrt = math.isqrt(N)\n            if sqrt * sqrt == N:\n                break\n            N += 1\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the perfect square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # if sqrt_N is even, increment the integer part of sqrt_N\n    if sqrt_N % 2 == 0:\n        sqrt_N += 1\n\n    # if sqrt_N is odd, divide it by 2\n    else:\n        sqrt_N //= 2\n\n    # calculate the next perfect square\n    next_square = sqrt_N * sqrt_N\n\n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # initialize the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # initialize the current perfect square\n    current_square = 2*sqrt_N*sqrt_N\n\n    # loop until the current perfect square is greater than N\n    while current_square > N:\n        # update the current perfect square\n        current_square -= 2*sqrt_N*sqrt_N\n\n        # decrease the square root of N\n        sqrt_N -= 1\n\n    # return the current perfect square\n    return current_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = math.sqrt(N)\n    while True:\n        N += 1\n        sqrtN = math.sqrt(N)\n        if sqrtN == int(sqrtN):\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # find the next integer greater than or equal to N\n    while True:\n        N += 1\n        if is_prime(N):\n            break\n\n    # find the smallest factor of N\n    for i in range(2, int(math.sqrt(N)) + 1):\n        if N % i == 0:\n            break\n\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # find the difference between N and the smallest factor\n    diff = N - i * sqrt_N\n\n    # find the next prime factor of N\n    while True:\n        i += 1\n        if is_prime(i) and i * sqrt_N > diff:\n            break\n\n    # calculate the next perfect square\n    next_psq = i * sqrt_N\n\n    return next_psq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Calculate the sum of the array\n    arr_sum = sum(arr)\n\n    # Check if the array is already bitonic\n    if is_bitonic(arr):\n        return arr_sum\n\n    # Check if the array is increasing or decreasing\n    if is_increasing(arr):\n        return max_increasing(arr, arr_sum)\n    else:\n        return max_decreasing(arr, arr_sum)\n\n\ndef is_bitonic(arr):\n    \"\"\"\n    Check if the given array is already bitonic. A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1] and arr[i + 1] > arr[i + 2]:\n            return True\n    return False\n\n\ndef is_increasing(arr):\n    \"\"\"\n    Check if the given array is increasing.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True\n\n\ndef max_increasing(arr, arr_sum):\n    \"\"\"\n    Find the maximum sum of a bitonic increasing subsequence.\n    \"\"\"\n    max_sum = arr_sum\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\n\ndef max_decreasing(arr, arr_sum):\n    \"\"\"\n    Find the maximum sum of a bitonic decreasing subsequence.\n    \"\"\"\n    max_sum = arr_sum\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    # check if array is empty or has only one element\n    if len(arr) < 2:\n        return 0\n    \n    # initialize variables\n    left, right = 0, 1\n    max_sum_l, max_sum_r = 0, 0\n    current_sum_l, current_sum_r = 0, 0\n    \n    # loop over array and calculate bitonic subsequence sums\n    while right < len(arr):\n        if arr[right] > arr[left]:\n            current_sum_l += arr[right]\n            if current_sum_l > max_sum_l:\n                max_sum_l = current_sum_l\n        else:\n            current_sum_r += arr[right]\n            if current_sum_r > max_sum_r:\n                max_sum_r = current_sum_r\n        \n        left += 1\n        right += 1\n    \n    # return maximum sum of bitonic subsequence\n    return max(max_sum_l, max_sum_r)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    # If the array is already sorted, return the maximum sum\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        return max(arr)\n    \n    # If the array is not sorted, sort it in ascending order and then find the maximum sum\n    arr.sort()\n    max_sum = arr[-1]\n    \n    # Traverse the array from left to right and update the max_sum\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            max_sum = max(max_sum, arr[i] + max_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)): \n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i+1]: \n            # If increasing, add the current element to the current sum\n            current_sum += arr[i]\n        elif arr[i] < arr[i+1]: \n            # If decreasing, subtract the current element from the current sum\n            current_sum -= arr[i]\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return 0\n\n    # initialize variables\n    left_max = 0\n    right_max = 0\n    max_sum = float('-inf')\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # check if the current number is increasing or decreasing\n        if arr[i] < arr[i - 1]:\n            # if increasing, update left max\n            left_max = max(left_max + arr[i], arr[i])\n        else:\n            # if decreasing, update right max\n            right_max = max(right_max + arr[i], arr[i])\n\n        # update max sum\n        max_sum = max(max_sum, left_max + right_max)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1]\n\n    max_sum = dp[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n        else:\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    n = len(arr) \n    # Calculate the maximum sum of a decreasing subsequence \n    # and the maximum sum of a strictly increasing subsequence \n    decreasing_sum = max_decreasing(arr) \n    increasing_sum = max_increasing(arr) \n  \n    # If both sums are equal, then the subsequence is bitonic \n    if decreasing_sum == increasing_sum: \n        return decreasing_sum \n  \n    # If decreasing sum is greater, then the subsequence is decreasing \n    elif decreasing_sum > increasing_sum: \n        return decreasing_sum \n  \n    # If increasing sum is greater, then the subsequence is increasing \n    else: \n        return increasing_sum \n  \ndef max_decreasing(arr): \n    max_sum = float('-inf') \n    curr_sum = 0 \n  \n    for i in range(len(arr)): \n        if arr[i] >= arr[i+1]: \n            curr_sum += arr[i] \n        else: \n            if curr_sum > max_sum: \n                max_sum = curr_sum \n            curr_sum = 0 \n  \n    if curr_sum > max_sum: \n        max_sum = curr_sum \n  \n    return max_sum \n  \ndef max_increasing(arr): \n    max_sum = float('-inf') \n    curr_sum = 0 \n  \n    for i in range(len(arr)): \n        if arr[i] <= arr[i+1]: \n            curr_sum += arr[i] \n        else: \n            if curr_sum > max_sum: \n                max_sum = curr_sum \n            curr_sum = 0 \n  \n    if curr_sum > max_sum: \n        max_sum = curr_sum \n  \n    return max_sum "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # First, check if the array is bitonic or not\n    increasing = True\n    decreasing = False\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            increasing = True\n        elif arr[i] > arr[i+1]:\n            decreasing = True\n        if increasing and decreasing:\n            return 0\n\n    # Check if the array is monotonic or not\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i+1]:\n            return 0\n\n    # If none of the above conditions are satisfied, then the array is bitonic\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Check if the array is bitonic\n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing = False\n        elif arr[i] < arr[i-1]:\n            decreasing = False\n        if increasing and decreasing:\n            break\n    \n    if increasing:\n        # Check for all increasing subarrays\n        subarray_sum = 0\n        max_sum = 0\n        for i in range(1, n):\n            subarray_sum += arr[i]\n            if subarray_sum < 0:\n                subarray_sum = 0\n            elif subarray_sum > max_sum:\n                max_sum = subarray_sum\n        \n        return max_sum\n    \n    elif decreasing:\n        # Check for all decreasing subarrays\n        subarray_sum = 0\n        max_sum = 0\n        for i in range(1, n):\n            subarray_sum += arr[i]\n            if subarray_sum < 0:\n                subarray_sum = 0\n            elif subarray_sum > max_sum:\n                max_sum = subarray_sum\n        \n        return max_sum\n    \n    else:\n        # Check for all increasing and decreasing subarrays\n        subarray_sum = 0\n        max_sum = 0\n        for i in range(1, n):\n            subarray_sum += arr[i]\n            if subarray_sum < 0:\n                subarray_sum = 0\n            elif subarray_sum > max_sum:\n                max_sum = subarray_sum\n        \n        return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The input number must be non-negative\")\n    elif number == 0:\n        return 0\n    \n    x0 = 0.5\n    x1 = x0\n    while abs(x1**2 - number) > 1e-10:\n        x0 = x1\n        x1 = (x0 + number/x0) / 2.0\n    \n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function uses the babylonian method to compute the square root of a given number.\n    \"\"\"\n    # Initialize variables to keep track of the number of iterations and the estimated value of the square root\n    iterations = 0\n    estimate = number / 2\n    \n    # Loop until the estimated value of the square root is less than or equal to the difference between the number and the estimate\n    while estimate >= number / estimate:\n        # Update the estimate to be the average of the current estimate and the next number in the sequence\n        estimate = (estimate + number / estimate) / 2\n        iterations += 1\n        \n    # Return the estimated value of the square root\n    return estimate"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize variables\n    x = number/2 # start with a guess of half of the number\n    guess_old = x # store the old guess for comparison\n    count = 0 # initialize count of iterations\n    \n    while abs(guess_old - x) > 0.00001: # stop when difference between guess and new guess is less than 0.00001\n        guess_old = x # update the old guess\n        x = (number/x) + x/2 # compute the new guess using the babylonian method\n        count += 1 # increment the count of iterations\n        \n    return x, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 0\n    guess = 0\n    difference = 0.00001\n    result = 0\n    \n    # while loop for guessing the square root\n    while difference > 0.00001:\n        # compute the new guess\n        guess = number / (2 * i + 1)\n        \n        # compute the difference between the new guess and the actual square root\n        difference = abs(guess * guess - number)\n        \n        # update the result and iteration count\n        result = guess\n        i += 1\n    \n    # return the result of the iteration\n    return result"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize guess and delta\n    guess = number / 2\n    delta = 1e-10\n\n    # loop until delta is small enough\n    while delta > 1e-10:\n        # update guess\n        guess = (guess + number / guess) / 2\n        # update delta\n        delta = abs(guess - number / guess)\n\n    # return the final guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise ValueError('Input must be an integer.')\n\n    # Compute the square root using the babylonian method\n    x = 1\n    for i in range(10):\n        x = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error: Input number must be non-negative.\")\n        return None\n    \n    root = 0\n    while True:\n        root = (root + number/root) / 2\n        if abs(root - number/root) < 1e-12:\n            break\n\n    return root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x1 = 1\n    x2 = 0\n    count = 0\n    while abs(x2 - x1) > 1e-6:\n        x0 = x1\n        x1 = x2\n        x2 = x0 - ((number/x0) + x0) / (2 * x1)\n        count += 1\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes square roots using the babylonian method.\n    \"\"\"\n    # initialize variables\n    x0 = 1.0\n    x1 = 1.0\n    x2 = 1.0\n    x3 = 1.0\n    x4 = 1.0\n    x5 = 1.0\n    \n    # compute the first three terms of the series\n    x1 = (x1 + x0) / 2.0\n    x2 = (x2 + x1) / 2.0\n    x3 = (x3 + x2) / 2.0\n    \n    # compute the fourth term of the series\n    x4 = (x4 + x3) / 2.0\n    x5 = (x5 + x4) / 2.0\n    \n    # compute the square root of the input number\n    while True:\n        # check if the current estimate is close enough to the target\n        if abs(x5 - x1) < 1e-10:\n            break\n        \n        # compute the next term of the series\n        x1 = (x1 + x0) / 2.0\n        x2 = (x2 + x1) / 2.0\n        x3 = (x3 + x2) / 2.0\n        x4 = (x4 + x3) / 2.0\n        x5 = (x5 + x4) / 2.0\n    \n    # return the estimated square root\n    return x5"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    x = number\n    y = 1.0\n    while abs(y**2 - x) > 1e-10:\n        x = y\n        y = (x + number/x) / 2.0\n    return y"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store lengths of longest palindrome subsequences\n    table = [[0] * (n + 1) for _ in range(n + 1)]\n    # base cases for table\n    for i in range(n + 1):\n        table[i][0] = 0\n        table[0][i] = 0\n    # fill the table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # return the length of the longest palindromic subsequence\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    # Create a dictionary to store the lengths of longest palindromic subsequences\n    dp = {}\n    \n    # Initialize the longest palindromic subsequence length to 0\n    max_len = 0\n    \n    # Initialize a variable to store the starting index of the current longest palindromic subsequence\n    start = 0\n    \n    # Iterate through the given string\n    for i in range(len(str)):\n        # Compute the length of the current subsequence\n        sub_len = 1\n        while i + sub_len < len(str) and str[i] == str[i+sub_len]:\n            sub_len += 1\n            \n        # Check if the length of the current subsequence is greater than the maximum length seen so far\n        if sub_len > max_len:\n            # If it is, update the maximum length and starting index\n            max_len = sub_len\n            start = i\n            \n        # If the length of the current subsequence is already in the dictionary, update the starting index\n        if sub_len in dp:\n            start = max(start, dp[sub_len])\n        \n        # Store the length of the current subsequence in the dictionary\n        dp[sub_len] = i\n            \n    # Return the longest palindromic subsequence length\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 1:\n        return 1\n\n    # Create a 2D table to store the lengths of LPS for all prefixes of length i\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the length of LPS for all prefixes as 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Calculate the length of LPS for all prefixes of length i\n    for length in range(2, n+1):\n        # Start from i=0 and calculate LPS for prefixes of length i\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                # If the characters match, we can extend the LPS by 1\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                # If the characters don't match, we need to extend the LPS by the maximum of the LPS for prefixes of length i-1 and length i\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # The length of the longest palindromic subsequence is stored in the last element of the last row of the table\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # length of the string \n\n    # create a table to store the length of the longest palindromic subsequence ending at index i \n    # for all indices i from 0 to n-1 \n    table = [[0] * n for i in range(n)] \n\n    # fill the table using dynamic programming \n    for i in range(n): \n        for j in range(i, n): \n            # if the characters at indices i and j are same, \n            # then the longest palindromic subsequence ending at index j \n            # can be obtained by extending the longest palindromic \n            # subsequence ending at index i \n            if str[i] == str[j]: \n                if j - i <= 1: \n                    table[i][j] = 1\n                else: \n                    table[i][j] = table[i+1][j-1] + 2 \n\n    # return the length of the longest palindromic subsequence \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the length of LPS for substrings of length i\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # populate the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                # if the characters are same, then the length of LPS is length of LPS for substring of length i-1 + 1\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                # if the characters are not same, then the length of LPS is max of length of LPS for substrings of length i-1 and length of LPS for substrings of length j\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # return the length of LPS for the complete string\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 1:\n        return 1\n    # Create a 2D table to store length of longest palindromic subsequence for all prefixes of the given string\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and first column of the table\n    dp[0][0] = 1\n    # Fill the table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    # Return the length of the longest palindromic subsequence in the given string\n    return dp[n - 1][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Find the length of the longest palindrome in the string\n    n = len(str)\n    max_len = 1\n\n    # Initialize a 2D array to store the longest palindromic subsequences for all possible substrings\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Fill in the 2D array using dynamic programming\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n                if str[i] == str[j]:\n                    max_len = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    # Table to store the length of the longest palindromic subsequence ending at i \n    # for the substring s[0:i] \n    table = [0] * len(s) \n  \n    # Initialize LPS length as 0 \n    LPS = 0 \n  \n    # Compute LPS length for all indexes from 0 to n-1 \n    for i in range(1, len(s)): \n  \n        # If s[i] and s[i-1] are same, then LPS for current substring \n        # is LPS for previous substring plus 2 \n        if s[i] == s[i-1]: \n            table[i] = table[i-1] + 2 \n  \n        # Else LPS for current substring is maximum of LPS for \n        # substring ending at i-1 and substring ending at i-2 \n        else: \n            table[i] = max(table[i-1], table[i-2]) \n  \n        # If LPS for current substring is greater than LPS found so far, \n        # then update LPS \n        if table[i] > LPS: \n            LPS = table[i] \n  \n    return LPS "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Check if the string is empty or has only one character\n    if len(str) <= 1: \n        return len(str)\n\n    # Initialize two pointers i and j to start of the string and i+1 to end of the string\n    i = 0\n    j = 0\n\n    # Initialize the longest palindromic subsequence length to 1\n    max_length = 1\n\n    # Iterate through the string from the beginning to the end\n    while j < len(str): \n        # If the characters at i and j are the same, increment both i and j\n        if str[i] == str[j]: \n            i += 1\n            j += 1\n            max_length = max(max_length, j - i)\n\n        # If the characters at i and j are not the same, move the j pointer to the next character\n        else: \n            # If the length of the longest palindromic subsequence ending at the i pointer is greater than the length of the longest palindromic subsequence ending at the j pointer, move the i pointer to the next character\n            if j - i > max_length: \n                i += 1\n            # If the length of the longest palindromic subsequence ending at the j pointer is greater than the length of the longest palindromic subsequence ending at the i pointer, move the j pointer to the next character\n            else: \n                j += 1\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    for i in range(n):\n        if i == 0 or str[i] == str[i - 1]:\n            dp[i][i] = 1\n            max_len = 1\n        else:\n            dp[i][i] = 2\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + (1/n)**2 + (1/n)**3 +... + (1/n)**(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1/(n-1)) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Initialize the sum and count variables to zero\n    sum = 0\n    count = 0\n\n    # Calculate the harmonic sum\n    while count < n - 1:\n        sum += 1 / count\n        count += 1\n\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/2) * (n * (n+1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return 2*n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return 2 * (n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1))/(2*(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [4, 5, 6, 7, 8]\nresult = intersection_array(array_nums1,array_nums2)\nprint(result)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from array_nums1\n    set1 = set(array_nums1)\n    # create an empty list to store the common elements\n    common = []\n    # loop through array_nums2\n    for num in array_nums2:\n        # if the number is in set1, add it to common\n        if num in set1:\n            common.append(num)\n    # return the common elements\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a list of their intersection.\n    \"\"\"\n    # Create an empty set to store the common elements of the two arrays.\n    common_set = set()\n    \n    # Iterate through the first array and check if each element is present in the second array.\n    for num in array_nums1:\n        if num in array_nums2:\n            # If it is, add it to the common set.\n            common_set.add(num)\n    \n    # Convert the common set back to a list and return it.\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Loop through each element in the first array\n    for num1 in array_nums1:\n        # Loop through each element in the second array\n        for num2 in array_nums2:\n            # If the elements are equal, add the element to the set\n            if num1 == num2:\n                common_set.add(num1)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1 to remove duplicates\n    unique_nums1 = set(array_nums1)\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through array_nums2 and add any elements that are also in unique_nums1 to intersection\n    for num in array_nums2:\n        if num in unique_nums1:\n            intersection.add(num)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): A list of integers.\n    array_nums2 (list): A list of integers.\n\n    Returns:\n    list: The intersection of the two input arrays.\n    \"\"\"\n\n    # Create a set from the first array to remove duplicates\n    set_nums1 = set(array_nums1)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set(array_nums2))\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays of integers and returns an array of the intersection of those two arrays.\n    \"\"\"\n    # create an empty set to store the intersection\n    intersection = set()\n\n    # iterate over each element in the first array\n    for num1 in array_nums1:\n        # check if the element is also in the second array\n        if num1 in array_nums2:\n            # add the element to the set if it's not already there\n            intersection.add(num1)\n\n    # convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create an empty list to store the common elements\n    common_elements = []\n\n    # loop through the first array\n    for num in array_nums1:\n        # loop through the second array\n        for element in array_nums2:\n            # if the current element is equal to the current number, add it to the common elements list\n            if element == num:\n                common_elements.append(element)\n\n    # return the common elements list\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): A list of integers.\n    array_nums2 (list): A list of integers.\n\n    Returns:\n    list: A list of integers that are the intersection of the two input arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Create an empty list to store the intersection\n    intersection = []\n\n    # Iterate through array_nums2 and check if each element appears in freq\n    for num in array_nums2:\n        if num in freq and freq[num] > 0:\n            intersection.append(num)\n            freq[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    for num in set1:\n        if num in set2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, ele):\n    '''\n    This function takes in a list and an element as input and inserts the element before each element in the list. It returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(ele)\n        new_list.append(lst[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i,element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [elem] + lst[:-1] + [lst[-1]] + lst[1:]"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # print the converted number\n        print(f\"{num} (r = {r}, theta = {cmath.pi * theta / 180:.2f} degrees)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number\n        polar_number = complex(real**2 + imag**2, 2 * real * imag)\n        print(polar_number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            print(f'{num} in Polar form is: {cmath.polar(num)}')\n        else:\n            print(f'{num} is not a complex number.')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r, theta = cmath.polar(num)\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []  \n    for num in numbers:  \n        real = cmath.rect(num.real)  \n        imag = cmath.rect(num.imag)  \n        mag = cmath.sqrt(real**2 + imag**2)  \n        angle = cmath.phase(num)  \n        result.append((mag, angle))  \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        if isinstance(number, cmath.complex):\n            r = cmath.abs(number)\n            phi = cmath.phase(number)\n            polar_numbers.append((r, phi))\n        else:\n            polar_numbers.append(number)\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        print(\"Magnitude of\", num, \"is\", magnitude)\n        print(\"Phase of\", num, \"is\", phase)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        if imag == 0:\n            result.append((abs(real), 0))\n        else:\n            angle = cmath.phase(complex(real, imag))\n            result.append((abs(real), angle))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Create a generator expression to generate all combinations of length n with repetition\n    combos = (tuple(c) for c in combinations_with_replacement(l, n))\n    \n    return list(combos)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l) - n + 1):\n        combo = tuple(l[i:i+n])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function returns True if the given number is prime, else False.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    This function checks whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            if count >= n:\n                break\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Create a boolean list of size n+1 and initialize all values as True\n    prime_nums = [True] * (n+1)\n\n    # Initialize count of prime numbers\n    count = 0\n\n    # Use Sieve of Eratosthenes algorithm to find primes\n    for i in range(2, int(n**0.5)+1):\n        if prime_nums[i]:\n            for j in range(i*i, n+1, i):\n                prime_nums[j] = False\n\n    # Iterate through the list of prime numbers and count the number of primes less than n\n    for i in range(2, n+1):\n        if prime_nums[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in test_tup1:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    for num in test_tup2:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n    \n    # iterate over the tuple elements and compare them\n    max_value = test_tup1[0]\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n    \n    # return the maximum value as a tuple\n    return (max_value,)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Sort the input tuples\n    sorted_tup1 = sorted(test_tup1)\n    sorted_tup2 = sorted(test_tup2)\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Iterate through the sorted tuples and append the maximum element to the result tuple\n    for i in range(len(sorted_tup1)):\n        if sorted_tup1[i] > sorted_tup2[i]:\n            result_tup += (sorted_tup1[i],)\n        else:\n            result_tup += (sorted_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a list to store the tuples as tuples\n    test_list = [(a, b) for a in test_tup1 for b in test_tup2]\n    \n    # Sort the list of tuples by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Create a new list of tuples to store the maximum values of the first element and the second element of each tuple\n    max_list = []\n    for i in range(len(test_list)):\n        if i == 0 or test_list[i][1] > test_list[i-1][1]:\n            max_list.append(test_list[i])\n    \n    # Return the maximum values as a tuple\n    return tuple(max_list)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_val = max(test_tup1)\n    test_tup1 = max(test_tup1, test_tup2)\n    test_tup2 = max(test_tup2, max_val)\n    return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a list to store the elements from the tuples\n    max_elements = []\n\n    # Compare the length of each tuple\n    if len(test_tup1) > len(test_tup2):\n        max_elements = test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        max_elements = test_tup2\n    else:\n        # If the lengths are equal, compare the elements\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_elements.append(test_tup1[i])\n            else:\n                max_elements.append(test_tup2[i])\n\n    # Return the max_elements list as a tuple\n    return tuple(max_elements)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to hold max values for each tuple element\n    max1 = max2 = 0\n    \n    # Loop through each element of the tuple and update max values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max1 = test_tup1[i]\n        else:\n            max2 = test_tup2[i]\n            \n    # Return the tuple with the maximum value for each element\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple with the maximum elements.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    elif test_tup2 > test_tup1:\n        return test_tup2\n    else:\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(test_tup1)\n    max_index = test_tup1.index(max_value)\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n            max_index = i\n    return max_value, max_index"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 2\n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n    while i * i <= n:\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n        i += 1\n    return [i for i in range(2, n+1) if is_prime[i]][-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n\n    def next_prime(num): \n        '''\n        Helper function to find the next prime number.\n        '''\n        while True: \n            if num in primes: \n                return primes[num]\n            num += 1\n\n    primes = {2: 2}\n    count = 0\n    current = 3\n    while count < n: \n        if is_prime(current): \n            primes[current] = current\n            count += 1\n        current = next_prime(current)\n\n    return primes[n]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if num in [2, 3] or (num % 2 == 0 and num!= 2):\n            num += 1\n        else:\n            count += 1\n            num += 2\n    return num - 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    p = 1\n    \n    # Iterate until n is reached\n    while count < n:\n        # Check if the number is prime\n        if p > 1:\n            for i in range(2, int(p**0.5)+1):\n                if p % i == 0:\n                    break\n            else:\n                count += 1\n        \n        # Increment the number\n        p += 1\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        p = 3\n        while True:\n            is_prime = True\n            for i in range(2, int(p ** 0.5) + 1):\n                if p % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                p += 2\n            if p ** 2 > n:\n                return p - 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the prime number list\n    prime_list = [2]\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    while len(prime_list) < n:\n        # Calculate the next newman\u2013shanks\u2013williams prime number\n        nth_prime = max(prime_list[-1] + 6, 3*max(prime_list[-1], 1))\n\n        # Add the nth newman\u2013shanks\u2013williams prime number to the list\n        if nth_prime not in prime_list:\n            prime_list.append(nth_prime)\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Create a list of all prime numbers less than or equal to n\n    primes = []\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            primes.append(i)\n    if n > 1:\n        primes.append(n)\n    # Return the nth prime number in the list\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize a variable to store the result\n    result = 2\n\n    # Keep looping until we find the nth newman\u2013shanks\u2013williams prime number\n    while True:\n        # Check if the current result is a newman\u2013shanks\u2013williams prime number\n        if is_newman_shanks_williams_prime(result):\n            # If it is, return it\n            if n == 1:\n                return result\n            # If it's not the last result, decrement the count and continue looping\n            else:\n                n -= 1\n        # If the current result is not a newman\u2013shanks\u2013williams prime number, increment it and try again\n        else:\n            result += 1\n\ndef is_newman_shanks_williams_prime(n):\n    \"\"\"\n    Check if a given number is a newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Define the newman\u2013shanks\u2013williams prime numbers\n    newman_shanks_williams_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 9"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    This function takes an integer n as input and returns the nth Newman-Shanks-Williams prime number.\n    '''\n\n    # The Newman-Shanks-Williams primes are all odd integers greater than 2.\n    newman_primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # If n is less than 2, return None.\n    if n < 2:\n        return None\n\n    # If n is 2 or 3, return the 2nd and 3rd Newman-Shanks-Williams primes, respectively.\n    elif n == 2:\n        return newman_primes[1]\n    elif n == 3:\n        return newman_primes[2]\n\n    # If n is odd, iterate from 5 to the square root of n.\n    else:\n        # Initialize a variable to keep track of the prime numbers.\n        primes = []\n        for i in range(5, int(n**0.5)+1, 2):\n            # If i is a prime number, add it to the list of primes.\n            if n % i == 0:\n                primes.append(i)\n\n        # Iterate from 7 to n-3, checking if each number is a prime number.\n        for i in range(7, n-3, 2):\n            # If i is a prime number, check if it is also a multiple of any of the primes found so far.\n            if i % 2 == 1:\n                for prime in primes:\n                    if i % prime == 0:\n                        break\n                else:\n                    # If i is not a multiple of any of the primes found so far, add it to the list of primes.\n                    primes.append(i)\n\n        # Return the nth prime number in the list of primes.\n        return primes[n-3]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 2\n    \n    # Loop until count reaches n\n    while count < n:\n        # Check if prime number\n        for i in range(3, prime):\n            if prime % i == 0:\n                break\n        else:\n            # If prime, increment count and update prime\n            count += 1\n            prime += 1\n    \n    return prime - 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length\")\n        return\n\n    # Perform element-wise division across the two tuples\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero\")\n            return\n\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples should be the same\")\n    \n    # Perform element-wise division of the two tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n        \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two input tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length.\")\n    # Perform element-wise division of two tuples\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must have the same length.')\n    # Perform element-wise division on the tuples\n    result_tup = tuple(a/b for a,b in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the lengths of the two input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n\n    # Perform element-wise division operation\n    result_tup = tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return None\n    \n    # Perform element-wise division operation\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n\n    # create an empty list to store the result of element-wise division\n    result_list = []\n\n    # loop through each element of the first tuple and perform element-wise division\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n\n    # return the list of result\n    return result_list"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n % 2 == 0:\n        mid = L\n    else:\n        mid = (L + 1) // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(lst)\n    if L > n:\n        raise ValueError(\"L should be less than or equal to the length of the input list\")\n    mid = L // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Slice the list to get the first L elements\n    part1 = list1[:L]\n    # Slice the list to get the remaining elements\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes a list and an integer L as input,\n    and splits the list into two parts such that the length of the first part is L.\n    The function returns a tuple containing the two parts of the list.\n    '''\n    if len(lst) % L!= 0:\n        print(\"Error: The length of the list is not divisible by the given length.\")\n        return None\n    \n    mid = len(lst) // 2\n    part1 = lst[:mid]\n    part2 = lst[mid:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    for i in range(L):\n        list2.append(list1.pop(0))\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('L is greater than the length of the list')\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    mid = len(lst) // 2\n    return (lst[:mid], lst[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create an empty list to hold the first part of the list\n    first_part = []\n    # create an empty list to hold the second part of the list\n    second_part = []\n    # loop through the list and add elements to the first part of the list until the length of the first part reaches L\n    for i in range(L):\n        first_part.append(lst[i])\n    # loop through the list and add elements to the second part of the list until the end of the list is reached\n    for i in range(L, len(lst)):\n        second_part.append(lst[i])\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age / 100)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(height_inches):\n    # Convert height_inches to meters\n    height_meters = height_inches * 0.0254\n\n    # Calculate age in dog years\n    dog_years = height_meters / 0.001\n\n    # Return dog age in years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # calculate dog's age in dog's years\n    dog_age_years = h_age * 7\n\n    # return the calculated age\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    This function takes a dog's height in inches as input and returns the dog's age in dog years.\n    \"\"\"\n    # Define the number of dog years in a standard dog year\n    dog_years = 7\n\n    # Calculate the dog's age in dog years\n    dog_age = h_age / dog_years\n\n    # Return the dog's age in dog years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_per_meter = 7\n    feet_per_meter = 3.28084\n    dog_years = h_age / (feet_per_meter * years_per_meter)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age # 7 is the number of years a dog has\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Converting human age to dog's age in dog's years\n    dog_age = 7 * h_age\n    # Returning the dog's age in dog's years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = 7 * h_age\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Define the number of days in a year\n    days_per_year = 365\n\n    # Calculate the dog's years based on the dog's height in inches\n    dog_years = h_age * 7 / 2.5\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_lists = []\n    for i in range(0, len(S), step):\n        split_lists.append(S[i:i+step])\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S) # convert the input list to a mutable list\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if step > n:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list to store results\n    result = []\n    \n    # loop through list and split every nth element\n    for i in range(0, len(S), step):\n        # create new list and append to result\n        new_list = S[i:i+step]\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create an empty list to store the resulting lists\n    result = []\n    \n    # loop through the list from the beginning\n    for i in range(0, len(S), step):\n        # split the list at the nth element\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step) if i+step < len(S)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = max(1, step)\n    return [S[i:i+n] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the volume of the cube\n    volume = l**3\n    \n    # calculate the lateral surface area of the cube using the formula:\n    # lateral surface area = 2 * (base * height)\n    lateral_surface_area = 2 * (l * l)\n    \n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the volume of the cube\n    volume = l**3\n    \n    # calculate the lateral surface area of the cube\n    surface_area = (2 * l**2) + (2 * l**2) + (2 * l**2)\n    \n    # return the lateral surface area of the cube\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2) + 12 * l + 8"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < n:\n        total += count ** 2\n        count += 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n+1, 2, -2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(2, n+1, 2):\n        odd_numbers.append(i)\n    square_sum = sum(map(lambda x: x**2, odd_numbers))\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i**2  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # Initialize sum to 0\n    sum_of_squares = 0\n    # Loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current number to the sum\n        sum_of_squares += i*i\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print(\"*\" * (n-i+1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        return n * (n + 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        for i in range(1, n+1):\n            print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    stars = \"*\"\n    result = \"\"\n    for i in range(1, n + 1):\n        result += stars\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 1\n    \n    for i in range(1, n+1):\n        result *= i\n    \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each digit of the number n\n    for digit in str(n): \n        # Convert each digit to an integer\n        digit = int(digit)\n        \n        # Multiply the digit by 10 raised to the power of its position\n        result += digit ** digit\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n-1) + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    if n == 1:\n        return 1\n\n    return n * (n + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the number of rows and columns in the star matrix\n    rows = 5\n    columns = 5\n    \n    # Initialize the star matrix\n    star_matrix = [['' for x in range(columns)] for y in range(rows)]\n    \n    # Define the value of the star for each row and column\n    for i in range(rows):\n        for j in range(columns):\n            if i == 0 or i == rows-1 or j == 0 or j == columns-1 or (i < rows-1 and j < columns-1):\n                star_matrix[i][j] = '*'\n            else:\n                star_matrix[i][j] =''\n    \n    # Print the star matrix\n    for i in range(rows):\n        print(' '.join(star_matrix[i]))\n    \n    # Find then'th star number\n    for i in range(1, n+1):\n        # Print the current row of the star matrix\n        print(' '.join(star_matrix[i-1]))\n        \n        # If i is divisible by 2, rotate the matrix 90 degrees\n        if i % 2 == 0:\n            temp = star_matrix[0][i-1]\n            for j in range(i-1):\n                star_matrix[j][i-1] = star_matrix[i-1][rows-1-j]\n                star_matrix[i-1][rows-1-j] = star_matrix[rows-1-j][columns-1-i]\n                star_matrix[rows-1-j][columns-1-i] = star_matrix[columns-1-i][j]\n                star_matrix[columns-1-i][j] = temp\n    \n    # Print the final row of the star matrix\n    print(' '.join(star_matrix[-1]))\n    \n    return n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (10 ** (n - 1))"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    k = k.upper()\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII value\n    ascii_value = ord(k)\n    \n    # Return the ASCII value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                sum_even_index += 1\n\n    return sum_even, sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n\n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n            \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if i % 2 == 0:\n                count += 1\n                \n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum variable to 0\n    even_power_sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the value of the i^5 and add it to the sum variable\n        even_power_sum += i**5\n\n    # return the sum of even natural numbers raised to the fifth power\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_numbers = [i for i in range(2, 2*n+1, 2)]  # Generate a list of even natural numbers between 2 and 2n\n    even_powers = [i**5 for i in even_numbers]  # Generate a list of even numbers raised to the fifth power\n    even_sum = sum(even_powers)  # Calculate the sum of the even numbers raised to the fifth power\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize a variable to store the sum of even numbers raised to the fifth power\n    power_sum = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the power of the even number raised to the fifth power\n        power = i ** 5\n        # add the power to the power_sum\n        power_sum += power\n        \n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    even_power_sum = 0\n    i = 0\n\n    while i < n:\n        even_power_sum += i ** 5\n        i += 1\n\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i*i*i*i\n        i += 1\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        rear = tup[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_obj in test_list:\n        rear_list.append(tuple_obj[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to store the rear elements\n    rear_list = []\n    # iterate through the tuples in the input list\n    for tup in test_list:\n        # get the rear element of the tuple and append it to the rear_list\n        rear_list.append(tup[-1])\n    # return the rear_list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two tuples does not match.\")\n        return\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        # check if the two elements are equal\n        if test_tup1[i] == test_tup2[i]:\n            # if they are, set the value of the corresponding index in the result tuple to 0\n            test_tup1[i] = 0\n\n    # return the result tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Loop through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a counter variable\n    count = 0\n    # Initialize the sum variable\n    sum = 0\n    # Loop through all possible pairs of numbers from 0 to n-1\n    for i in range(2*n):\n        # If the even number is in the pair, add it to the sum\n        if i % 2 == 0:\n            sum += math.comb(n, count)\n        # Increment the count variable\n        count += 1\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Calculate the sum of even index binomial coefficients up to index n\n    even_binomial_sum = 0\n    for i in range(2, n+1):\n        even_binomial_sum += math.comb(n, i-1)*math.pow(2, i-2)\n\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize variables for sum of even index coefficients\n    even_sum = 0\n    coefficient = 1\n\n    # loop through odd indices of binomial coefficients\n    for i in range(1, n+1, 2):\n        even_sum += coefficient\n\n        # calculate next coefficient for odd indices\n        coefficient = coefficient * i / (i-1)\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    The even index binomial coefficients are defined as follows:\n\n    B(n,k) = n! / (k!(n-k)!)\n\n    where n and k are positive integers.\n\n    The function returns the sum of these even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1, 2):\n        even_coeff = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n        sum_even_coeffs += even_coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += (2*i-1)*(2*i-3)//2\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += math.comb(n,i) * 2**i\n    return sum\n\nn = 6\nprint(even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum to 0\n    sum_even = 0\n\n    # iterate through all pairs of numbers from 0 to n\n    for i in range(2*n+1):\n        # calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n\n        # if the index is even, add it to the sum\n        if i % 2 == 0:\n            sum_even += coeff\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    if n < 0:\n        print(\"Invalid input\")\n        return\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 0\n\n    if n == 3:\n        return 0\n\n    if n == 4:\n        return 0\n\n    if n == 5:\n        return 0\n\n    if n == 6:\n        return 0\n\n    if n == 7:\n        return 0\n\n    if n == 8:\n        return 0\n\n    if n == 9:\n        return 0\n\n    if n == 10:\n        return 0\n\n    if n == 11:\n        return 0\n\n    if n == 12:\n        return 0\n\n    if n == 13:\n        return 0\n\n    if n == 14:\n        return 0\n\n    if n == 15:\n        return 0\n\n    if n == 16:\n        return 0\n\n    if n == 17:\n        return 0\n\n    if n == 18:\n        return 0\n\n    if n == 19:\n        return 0\n\n    if n == 20:\n        return 0\n\n    if n == 21:\n        return 0\n\n    if n == 22:\n        return 0\n\n    if n == 23:\n        return 0\n\n    if n == 24:\n        return 0\n\n    if n == 25:\n        return 0\n\n    if n == 26:\n        return 0\n\n    if n == 27:\n        return 0\n\n    if n == 28:\n        return 0\n\n    if n == 29:\n        return 0\n\n    if n == 30:\n        return 0\n\n    if n == 31:\n        return 0\n\n    if n == 32:\n        return 0\n\n    if n == 33:\n        return 0\n\n    if n == 34:\n        return 0\n\n    if n == 35:\n        return 0\n\n    if n == 36:\n        return 0\n\n    if n == 37:\n        return 0\n\n    if n == 38:\n        return 0\n\n    if n == 39:\n        return 0\n\n    if n == 40:\n        return 0\n\n    if n == 41:\n        return 0\n\n    if n == 42:\n        return 0\n\n    if n == 43:\n        return 0\n\n    if n == 44:\n        return 0\n\n    if n == 45:\n        return 0\n\n    if n == 46:\n        return 0\n\n    if n == 47:\n        return 0\n\n    if n == 48:\n        return 0\n\n    if n == 49:\n        return 0\n\n    if n == 50:\n        return 0\n\n    if n == 51:\n        return 0\n\n    if n == 52:\n        return 0\n\n    if n == 53:\n        return 0\n\n    if n == 54:\n        return 0\n\n    if n == 55:\n        return 0\n\n    if n == 56:\n        return 0\n\n    if n == 57:\n        return 0\n\n    if n == 58:\n        return 0\n\n    if n == 59:\n        return 0\n\n    if n == 60:\n        return 0\n\n    if n == 61:\n        return 0\n\n    if n == 62:\n        return 0\n\n    if n == 63:\n        return 0\n\n    if n == 64:\n        return 0\n\n    if n == 65:\n        return 0\n\n    if n == 66:\n        return 0\n\n    if n == 67:\n        return 0\n\n    if n == 68:\n        return 0\n\n    if n == 69:\n        return 0\n\n    if n == 70:\n        return 0\n\n    if n == 71:\n        return 0\n\n    if n == 72:\n        return 0\n\n    if n == 73:\n        return 0\n\n    if n == 74:\n        return 0\n\n    if n == 75:\n        return 0\n\n    if n == 76:\n        return 0\n\n    if n == 77:\n        return 0\n\n    if n == 78:\n        return 0\n\n    if n == 79:\n        return 0\n\n    if"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Helper function to calculate n choose k\n    def choose(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n    # Initialize the sum to 0\n    sum_even = 0\n\n    # Iterate through all possible even index values of n\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = choose(i, n-i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the coefficient to the sum\n            sum_even += coeff\n\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    area = 3.14 * r**2  # formula for area of a cylinder\n    volume = area * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * (r**2) * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/4)*pi*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = (1/3) * 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = \u03c0r\u00b2h\n    V = (3.14159265 * r**2 * h)\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * pi * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == 0:\n            return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_elements = 0\n    for i in range(len(test_tup)-1):\n        if i == len(test_tup)-2:\n            num_elements += 1\n            break\n        elif test_tup[i+1] == test_tup[i]:\n            num_elements += 1\n    return num_elements"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i, element in enumerate(test_tup):\n        if element == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        elif test_tup[i] == test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1]!= test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1]!= test_tup[i]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_number = 1\n    while i <= n:\n        decagonal_number += i\n        i += 1\n    return decagonal_number\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number and False otherwise.\n    A decagonal number is a positive integer that is equal to the sum of its decagonal neighbours.\n    For example, 15 is a decagonal number, since 1 + 12 = 15.\n    '''\n\n    # Get the number of rows in the decagonal matrix\n    rows = n // 2 + 1\n\n    # Initialize the matrix with zeros\n    matrix = [[0 for j in range(rows)] for i in range(rows)]\n\n    # Fill the matrix with decagonal numbers\n    for i in range(rows):\n        for j in range(rows):\n            if i == 0 and j == 0:\n                matrix[i][j] = 1\n            elif i == 0 and j > 0:\n                matrix[i][j] = 1 + matrix[i][j-1]\n            elif j == 0 and i > 0:\n                matrix[i][j] = 1 + matrix[i-1][j]\n            elif i > 0 and j > 0:\n                matrix[i][j] = 1 + matrix[i-1][j-1]\n\n    # Check if n is a decagonal number in the matrix\n    for i in range(rows):\n        for j in range(rows):\n            if i == 0 and j == 0:\n                if matrix[i][j] == n:\n                    return True\n            elif i == 0 and j > 0:\n                if matrix[i][j] == n - matrix[i][j-1]:\n                    return True\n            elif j == 0 and i > 0:\n                if matrix[i][j] == n - matrix[i-1][j]:\n                    return True\n            elif i > 0 and j > 0:\n                if matrix[i][j] == n - matrix[i-1][j-1]:\n                    return True\n\n    # If n is not a decagonal number in the matrix, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Check if the given number is an integer or not\n    if not isinstance(n, int): \n        return \"The input is not an integer.\"\n\n    # Check if the given number is a positive integer or not\n    if n <= 0: \n        return \"The input must be a positive integer.\"\n\n    # Initialize the first two decagonal numbers\n    d1 = 1\n    d2 = 5\n\n    # Iterate from 3 to n, calculating the decagonal numbers\n    for i in range(3, n + 1): \n        # Calculate the decagonal number\n        d = (d1 + d2) ** 2\n\n        # Check if the decagonal number is equal to n\n        if d == n: \n            return d\n\n        # Update the values of d1 and d2\n        d1 += 2 * (d2 - d1)\n        d2 += 2 * (d2 - d1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer argument n and returns True if n is a valid decagonal number and False otherwise.\n    A decagonal number is a positive integer such that the sum of its digits raised to the power of 2 is equal to n.\n    For example, 15 is a decagonal number because 1^2 + 5^2 = 15.\n    '''\n\n    # Initialize sum variable to 0\n    sum_digits = 0\n\n    # Loop through each digit of n\n    while n > 0:\n        # Get the last digit of n\n        digit = n % 10\n        # Add the last digit to the sum\n        sum_digits += digit\n        # Remove the last digit from n\n        n //= 10\n\n    # Check if the sum of digits raised to the power of 2 is equal to n\n    return sum_digits**2 == n\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Define the constant to find the nth decagonal number\n    A = 1.5\n\n    # Find the nth decagonal number\n    return int(A + n*(3*A**2 - 1))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Define the base\n    base = 1\n    # Define the number of rows and columns\n    rows = 1\n    cols = 1\n    # Initialize the current number\n    num = base\n    # Loop through each row\n    while rows <= n:\n        # Loop through each column\n        while cols <= n:\n            # Check if the number is equal to n\n            if num == n:\n                return True\n            # Increment the number and the base\n            num += base\n            base += 2\n        # Reset the number and the base\n        num = base\n        base = 1\n        # Increment the number of rows and the number of columns\n        rows += 1\n        cols = 0\n    # If the loop completes without returning True, the number is not a decagonal number\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (5 * n * n) + 5 * n + 10\n\nn = int(input(\"Enter a number: \"))\nprint(\"The {}th decagonal number is: {}\".format(n, is_num_decagonal(n)))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define a function to convert a number to a string\n    def num_to_string(num):\n        return str(num)\n\n    # Define a function to get the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    # Define a function to calculate the decagonal number\n    def decagonal_number(n):\n        num_str = num_to_string(n)\n        return int(num_str[0] + num_str[-1])\n\n    # Define a function to calculate the decagonal number using the sum_natural_numbers function\n    def decagonal_number_sum(n):\n        return decagonal_number(sum_natural_numbers(n))\n\n    # Calculate the decagonal number using the sum_natural_numbers function\n    nth_decagonal = decagonal_number_sum(n)\n\n    # Return the nth decagonal number\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    while decagonal_num < n:\n        decagonal_num += decagonal_num + 1\n        if decagonal_num == n:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    d = 1\n    \n    # Iterate through the first n rows of the decagonal triangle\n    for i in range(n):\n        # Print each row of the decagonal triangle\n        print(a, end=' ')\n        a, b, c, d = b, a + b, c + b, a + c\n    \n    # Return the nth row of the decagonal triangle\n    return a"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # initialize the index to -1\n    index = -1\n\n    # loop through the list of elements\n    for i in range(len(dlist)):\n        # check if the current element is equal to the search item\n        if dlist[i] == item:\n            # set the index to the current index position\n            index = i\n            # break out of the loop\n            break\n\n    # return a tuple containing the boolean and index position\n    return (item in dlist, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an item and returns a tuple containing a boolean and an index position of the item.\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, and False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set from the given list to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        # If they are equal, the list is unique\n        return True\n    else:\n        # If they are not equal, the list is not unique\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty dictionary to store the unique elements of the list\n    unique_elements = {}\n    # Loop through each element in the list\n    for element in test_list:\n        # Check if the element is already in the dictionary\n        if element in unique_elements:\n            # If it is, return False (not all unique)\n            return False\n        else:\n            # If it's not, add it to the dictionary and move on to the next element\n            unique_elements[element] = True\n    # If we get through the entire loop without returning False, we know all elements are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set from the list to check for duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicate elements\n    test_set = set(test_list)\n\n    # Check if the length of the set is equal to the original list length\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    # check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # create an empty list to store the result\n    result = []\n    \n    # subtract each element of the two lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists should have the same length')\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    \n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x,y in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of the same length\")\n        return []\n    else:\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return 'Error: The two lists must have the same length.'\n\n    # create a new list to hold the result\n    result = []\n\n    # iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # subtract the elements and add the result to the new list\n        result.append(nums1[i] - nums2[i])\n\n    # return the new list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in freq:\n        if digit > 0 and digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # Convert the integer to a string and iterate over its digits\n    for digit in str(n):\n        # Increment the frequency of the current digit in the dictionary\n        freq[digit] = freq.get(digit, 0) + 1\n    # Iterate over the frequency dictionary and check if the frequency of each digit is less than or equal to its value\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    # If all digits have a frequency less than or equal to their value, the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in freq:\n        if digit > n // len(str(n)):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Split the string into individual digits\n    digits = [int(d) for d in num_str]\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq_dict = {}\n\n    # Iterate through the digits and update the frequency dictionary\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            print(False)\n            return\n\n    print(True)"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = [0] * 10\n    digits = [int(digit) for digit in str(n)]\n    \n    for digit in digits:\n        frequency[digit] += 1\n    \n    for i in range(10):\n        if frequency[i] > frequency[i] - 1:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    for digit in count:\n        if count[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    \n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    \n    # If all the digits have the same frequency, then the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    for digit in freq:\n        if digit > n // 10:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    count = [0]*10 # initialize a list to store the count of each digit in the number\n    for i in str(n):\n        count[int(i)] += 1 # count the frequency of each digit in the number\n    for i in range(10):\n        if count[i] > i:\n            return False # if count of digit i is greater than the digit itself, return False\n    return True # if all digits have a count less than or equal to the digit itself, return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(lst, ele):\n    \"\"\"\n    This function takes in a list and an element and returns a boolean value indicating whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == ele for x in lst)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b\\d{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(?=b{2,3})b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b.{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<=\\w)(ab{2,3})(?=\\w)')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(b{2,3})?'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a(b{2,3})\"\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # Find the largest sum of a contiguous array\n    max_sum = a[0]\n    \n    # Iterate through the array with the given k times\n    for i in range(k):\n        # Repeat the array i times\n        for j in range(n):\n            a[j] = a[j] * i\n        \n        # Calculate the sum of the repeated array\n        repeated_sum = sum(a)\n        \n        # Compare the sum of the repeated array with the sum of the original array\n        if repeated_sum > original_sum:\n            max_sum = repeated_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and its index\n    max_sum = float('-inf')\n    max_sum_index = 0\n\n    # Initialize the sum of the original array\n    sum_original = sum(a)\n\n    # Repeat the original array k times to form the modified array\n    for i in range(k):\n        # Repeat the original array and add it to the sum\n        a = a + a\n        # Calculate the sum of the modified array\n        sum_modified = sum(a)\n        # Update the maximum sum and its index if the current sum is larger than the previous maximum sum\n        if sum_modified > max_sum:\n            max_sum = sum_modified\n            max_sum_index = i\n\n    # Return the index of the maximum sum in the original array\n    return max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    This function takes an array a, its length n, and the value of k as input. It returns the maximum sum of a contiguous subarray that can be formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum and the current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Repeat the given array k times and calculate the maximum sum of a contiguous subarray\n    for i in range(k):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Repeat the given array k times to get the maximum sum of a contiguous subarray\n    curr_sum = 0\n    for i in range(k, n):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # loop through array and find maximum subarray sum\n    for i in range(n):\n        # calculate current subarray sum\n        for j in range(k):\n            if i+j < n:\n                curr_sum += a[i+j]\n            else:\n                break\n        # update maximum subarray sum\n        max_sum = max(max_sum, curr_sum)\n        # reset current subarray sum\n        curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Initialize a variable to store the current sum\n    curr_sum = 0\n\n    # Iterate through the given array n times\n    for _ in range(n):\n        # Repeat the current array k times\n        for i in range(k):\n            # Add the element to the current sum\n            curr_sum += a[i]\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n        # Reset the current sum to 0\n        curr_sum = 0\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return -1\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n    \n    for i in range(k):\n        repeated_sum += a[0]\n        current_sum += a[0]\n        \n        for j in range(1, n):\n            repeated_sum += a[j]\n            current_sum += a[j]\n            \n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # repeat the array k times\n    a = a * k\n\n    # find the maximum subarray sum\n    max_sum = float('-inf')\n    cur_sum = 0\n    for i in range(n):\n        cur_sum = max(cur_sum + a[i], a[i])\n        max_sum = max(max_sum, cur_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum of first k elements\n    sum1 = sum(a[:k])\n    # Initialize the maximum sum\n    max_sum = sum1\n\n    # Initialize the sum of elements from the 2nd k elements\n    sum2 = sum(a[k:])\n    # Initialize the maximum sum of the first k elements\n    max_sum_of_first_k = sum1\n\n    # Initialize the sum of elements from the 2nd k to n-k+1 elements\n    sum3 = sum(a[k:n-k+1])\n    # Initialize the maximum sum of the first k to n-k+1 elements\n    max_sum_of_first_k_to_n_k = sum3\n\n    # Iterate over all possible k values\n    for i in range(2, n-k+2):\n        # Calculate the sum of elements from the i-th k to i+n-k elements\n        sum_i = sum(a[i-k:i+n-k-1])\n        # Update the maximum sum of the first k to n-k+1 elements\n        max_sum_of_first_k_to_n_k = max(max_sum_of_first_k_to_n_k, sum_i)\n        # Update the maximum sum of the first k elements\n        max_sum_of_first_k = max(max_sum_of_first_k, sum1 + max_sum_of_first_k_to_n_k)\n        # Update the maximum sum\n        max_sum = max(max_sum, max_sum_of_first_k)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the original array k times\n    modified_array = [a[i] for i in range(n) for j in range(k)]\n    # Find the maximum sum of a contiguous array in the modified array\n    max_sum = max(modified_array)\n    # Initialize variables for finding the largest subarray\n    curr_sum = 0\n    max_subarray = []\n    # Traverse the modified array and update the curr_sum and max_subarray as required\n    for num in modified_array:\n        curr_sum += num\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_subarray = [num]\n        elif curr_sum == max_sum and num not in max_subarray:\n            max_subarray.append(num)\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n    \n    # Initialize the sum of the first k elements\n    sum_of_first_k = sum(a[:k])\n    \n    # Initialize the index of the first k elements\n    first_k_index = 0\n    \n    # Initialize the maximum sum of the first k elements\n    max_sum_of_first_k = sum_of_first_k\n    \n    # Initialize the sum of the modified array\n    sum_of_modified_array = sum_of_first_k\n    \n    # Loop through the rest of the array\n    for i in range(k, n):\n        # Calculate the sum of the modified array\n        sum_of_modified_array += a[i] - a[i-k]\n        \n        # Update the sum of the first k elements\n        sum_of_first_k = sum_of_modified_array - a[i-k]\n        \n        # Update the index of the first k elements\n        first_k_index = i\n        \n        # Update the maximum sum of the first k elements\n        if sum_of_first_k > max_sum_of_first_k:\n            max_sum_of_first_k = sum_of_first_k\n        \n        # Update the maximum sum\n        if max_sum_of_first_k > max_sum:\n            max_sum = max_sum_of_first_k\n            \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum of squares as 0\n    total_square = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the total sum\n        total_square += i**2\n    \n    # return the total sum of squares\n    return total_square"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(2, n+1, 2):\n        sum += i**2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize sum variable to zero\n    total_sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the even natural number to the sum\n        total_sum += i*i\n\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Initialize the maximum length to zero\n    max_len = 0\n\n    # Loop through the list of lists\n    for sublist in list1:\n        # Check if the length of the current sublist is greater than the maximum length found so far\n        if len(sublist) > max_len:\n            # Update the maximum length to the length of the current sublist\n            max_len = len(sublist)\n\n    # Return the list of maximum length\n    return [sublist for sublist in list1 if len(sublist) == max_len]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), len(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    This function takes in a list of lists and returns a list containing the maximum length for each sublist in the original list.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(sublist) == len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        if length > max(max_lengths) or not max_lengths:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum lengths in each list.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        length = len(list1[i])\n        if length > max_lengths[0]:\n            max_lengths = [length]\n        elif length > max_lengths[1]:\n            max_lengths[1] = length\n        elif length > max_lengths[2]:\n            max_lengths[2] = length\n        elif length > max_lengths[3]:\n            max_lengths[3] = length\n        elif length > max_lengths[4]:\n            max_lengths[4] = length\n        elif length > max_lengths[5]:\n            max_lengths[5] = length\n        elif length > max_lengths[6]:\n            max_lengths[6] = length\n        elif length > max_lengths[7]:\n            max_lengths[7] = length\n        elif length > max_lengths[8]:\n            max_lengths[8] = length\n        elif length > max_lengths[9]:\n            max_lengths[9] = length\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxList = []\n\n    for subList in list1:\n        if len(subList) > maxLength:\n            maxLength = len(subList)\n            maxList = subList\n\n    return maxList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_lengths) or (len(list1[i]) == len(max_lengths) and list1[i][0] > max_lengths[0][0]):\n            max_lengths = [list1[i]]\n        elif len(list1[i]) == len(max_lengths) and list1[i][0] == max_lengths[0][0]:\n            max_lengths.append(list1[i])\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i-1 < 0:\n                dp[i][j] = dp[i-1][j]\n            elif j-1 < 0:\n                dp[i][j] = dp[i][j-1]\n            elif dp[i-1][j] == 0:\n                dp[i][j] = dp[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n                \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Sort the fence array in ascending order\n    fence = sorted(list(range(1, n + 1)))\n\n    # Initialize a variable 'count' to 0\n    count = 0\n\n    # Loop through the sorted fence array\n    for i in range(len(fence)):\n        # Check if the color of the current post is same as the color of the adjacent post\n        if fence[i] == fence[i + 1]:\n            # If the current post has the same color as the adjacent post, increment the count\n            count += 1\n        else:\n            # If the current post has a different color from the adjacent post, we can't paint the adjacent post with the current post as they have the same color. Therefore, we can break out of the loop\n            break\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list to store the number of ways for each possible arrangement of the posts\n    ways = [0]*(2*k)\n    \n    # Initialize the first element of the list to 1 because we can have exactly 0 colors for the first post\n    ways[0] = 1\n    \n    # Initialize the second element of the list to 1 because we can have exactly 1 color for the first and second posts\n    ways[1] = 1\n    \n    # Initialize the third element of the list to 1 because we can have exactly 2 colors for the first, second and third posts\n    ways[2] = 1\n    \n    # Loop through all possible arrangements of the posts\n    for i in range(3, 2*k+1):\n        # For each possible arrangement, check if the last two adjacent posts have the same color\n        for j in range(i-2, i-k):\n            # If the last two adjacent posts have the same color, add the number of ways for the remaining posts to the list\n            if ways[i-1] == ways[j] == ways[i-2]:\n                ways[i] += ways[j]\n    \n    # Return the number of ways for the given arrangement of posts\n    return ways[2*k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize the variable to store the count of ways\n    count = 0\n    \n    # Iterate through all possible combinations of colors for the fence\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # Calculate the number of ways by using the formula for 2-color fences\n            count += (n-i+1) * (k-j+1)\n    \n    # Return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize two variables for storing the number of ways and the count of colors\n    ways = 0\n    count = 0\n    \n    # Loop through all possible fence sizes\n    for i in range(1, n+1):\n        # Initialize a variable for the current count of colors\n        current_count = 0\n        \n        # Loop through all possible colors and count them in the current fence size\n        for j in range(1, k+1):\n            # Check if the current color can be used in the current fence size\n            if (i-1 >= 0) and (j <= 1) and (j >= current_count) and (i-j <= 2):\n                current_count = j\n                \n                # If the current count of colors is greater than 2, skip it since we need at most 2 adjacent posts with the same color\n                if current_count > 2:\n                    continue\n                \n                # Increment the count of ways by 1\n                ways += 1\n        \n        # If the current count of colors is less than or equal to 2, skip it since we need at most 2 adjacent posts with the same color\n        if current_count <= 2:\n            continue\n        \n        # Increment the count of colors by 1\n        count += 1\n    \n    # Return the number of ways and count of colors\n    return ways, count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a boolean array to store whether each post has the same color or not\n    color_status = [False] * n\n\n    # Initialize an integer variable to keep track of the number of ways of painting the fence\n    count = 0\n\n    # Check for all possible combinations of the first k colors for the first post\n    for i in range(k):\n        count += color_status.count(False)\n        color_status[0] = True\n\n    # Check for all possible combinations of the remaining colors for the remaining posts\n    for i in range(1, n):\n        for j in range(i):\n            # If the j-th post is colored differently from the (i-1)-th post, add the count of the number of ways of painting the (i-1)-th post with the (j-1)-th post colored differently from the j-th post\n            if color_status[j]!= color_status[i-1]:\n                count += color_status[i-1]\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D list of size (n+1) x (k+1), where each element represents the number of ways to paint the fence with n posts and k colors.\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Base cases\n    ways[0][0] = 1\n    ways[1][0] = 1\n    ways[1][1] = 1\n\n    # Fill in the rest of the 2D list\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n\n    # Return the total number of ways to paint the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Base case: If there are only two colors left, then there is only one way to paint the fence\n    if k == 2:\n        return 1\n\n    # Initialize variables to store the number of ways and count of ways\n    ways = 0\n    count = 0\n\n    # Iterate over all possible values of the last color\n    for i in range(1, k+1):\n\n        # Count the number of ways to paint the fence with last i colors\n        count = count_no_of_ways(n, k-i)\n\n        # Multiply the count of ways with the count of ways with (i-1) colors\n        ways = ways + count * count_no_of_ways(n-1, i-1)\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    def count_ways(n, k, current_color, color_count):\n        if n == 0:\n            return 1\n        elif current_color == k:\n            return 0\n        else:\n            ways = 0\n            for color in range(k):\n                if color == current_color:\n                    continue\n                ways += count_ways(n-1, k, color, color_count)\n            return ways\n    \n    return count_ways(n, k, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a 2D matrix to store the number of ways for each color combination\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Initialize the first row and column of the matrix\n    for i in range(n+1):\n        dp[i][0] = 1\n        dp[0][i] = 1\n    \n    # Fill the rest of the matrix using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                # If we only have 1 post, we can paint it with any color\n                dp[i][j] = dp[i][j-1]\n            else:\n                # If we have at least 2 posts, we can paint the first and last posts with any color,\n                # and then paint the middle post with the same color as the first post\n                if dp[i-1][j] == dp[i][j-1]:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Check if m is 0\n    if m == 0:\n        return \"Cannot divide by zero\"\n\n    # Calculate the quotient using integer division\n    quotient = n // m\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Check if n is a negative number\n    if n < 0:\n        # If n is negative, multiply -n and m and add 1 to get the correct quotient\n        quotient = -(-n // m) + 1\n    else:\n        # If n is positive, multiply n and m and divide the result by m\n        quotient = n // m\n    \n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Check if m is zero\n    if m == 0:\n        return None\n\n    # Calculate the quotient using the Euclidean algorithm\n    while n >= m:\n        temp = m\n        m = n % m\n        n = temp\n\n    return n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # check if m is zero\n    if m == 0:\n        # if m is zero, return n\n        return n\n    # check if m is positive\n    elif m > 0:\n        # if m is positive, calculate the quotient\n        quotient = n // m\n        # check if the remainder is greater than zero\n        if n % m!= 0:\n            # if the remainder is greater than zero, add 1 to the quotient\n            quotient += 1\n        # return the quotient\n        return quotient\n    # if m is negative\n    else:\n        # if m is negative, calculate the quotient and multiply by -1\n        quotient = n // abs(m)\n        # check if the remainder is greater than zero\n        if n % abs(m)!= 0:\n            # if the remainder is greater than zero, subtract 1 from the quotient\n            quotient -= 1\n        # return the quotient multiplied by -1\n        return -1 * quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return q"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s ** 2 - w ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2)+(h**2))\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    #calculate the other side of the triangle\n    o = math.sqrt(s ** 2 - h ** 2)\n    return o"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two inputs `w` and `h` for the length of the base and height of the triangle, respectively. \n    It calculates and returns the third side of the triangle using the Pythagorean theorem.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the square root of the semi-perimeter\n    sqrt_s = math.sqrt(s)\n\n    # Calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the third side of the triangle\n    b = sqrt_s * A\n\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of one side of the triangle\n    s = math.sqrt((w**2)+(h**2))\n    # Calculate the length of the other side of the triangle\n    o = math.sqrt(w**2+h**2-s**2)\n    # Calculate the length of the hypotenuse of the triangle\n    h = math.sqrt((w**2+h**2))\n    # Calculate the area of the triangle\n    a = (s*(s-w))/2\n    # Calculate the semi-perimeter of the triangle\n    p = (w+h+o)/2\n    # Calculate the third side of the triangle\n    t = math.sqrt((s**2)-(p**2))\n    # Return the value of the third side of the triangle\n    return t"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w * h) / 2\n    # use Heron's formula to calculate the semiperimeter\n    sp = math.sqrt(s * (s - w) * (s - h))\n    # use the law of cosines to calculate the hypotenuse\n    a = sp / math.sin(math.pi / 3)\n    return a"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value to the smallest possible value of an integer\n    max_val = float('-inf')\n    \n    # loop through the list and find the maximum value\n    for item in listval:\n        if type(item) == int or type(item) == float:\n            if item > max_val:\n                max_val = item\n                \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == max_num.__class__ and listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first value in the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list\n    for value in listval[1:]:\n        # If the current value is greater than max_val, update max_val\n        if value > max_val:\n            max_val = value\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the maximum value in it.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        print(\"List is empty.\")\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List cannot be empty.\")\n    max_val = listval[0]\n    for item in listval[1:]:\n        if type(item) > type(max_val):\n            max_val = item\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Use a loop to iterate over all numbers from 1 to the square root of the number\n    divisor_sum = 0\n    for i in range(1, int(number ** 0.5) + 1):\n        # Check if the number is divisible by i\n        if number % i == 0:\n            # If it is, add i to the sum\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    divs = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += n - j # n - j because we are comparing jth element with i+1th element.\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            if arr[i] < arr[left]:\n                left += 1\n            elif arr[i] > arr[right]:\n                right -= 1\n            else:\n                # Swap arr[i] and arr[right]\n                arr[i], arr[right] = arr[right], arr[i]\n                left += 1\n                right -= 1\n                inv_count += right - left\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n): \n        # counting inversions for elements before i\n        for j in range(i+1, n): \n            # counting inversions for elements after i\n            inv_count += merge_sort(arr, i, j)\n    return inv_count\n\ndef merge_sort(arr, left, right): \n    # Base case\n    if left >= right: \n        return 0\n\n    # Divide the array into two halves\n    mid = (left + right) // 2\n    inv_count_left = merge_sort(arr, left, mid)\n    inv_count_right = merge_sort(arr, mid+1, right)\n\n    # Merge the two halves back together\n    inv_count = inv_count_left + inv_count_right\n    i = left\n    j = mid + 1\n    k = left\n    while i <= mid and j <= right: \n        if arr[i] <= arr[j]: \n            inv_count += mid - i + 1\n            arr[k] = arr[i]\n            i += 1\n        else: \n            arr[k] = arr[j]\n            j += 1\n        k += 1\n\n    while i <= mid: \n        arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right: \n        arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions.\n    '''\n    n = len(arr)\n    # Base case: if the array has less than 2 elements or is already sorted, return 0\n    if n < 2 or all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 0\n    # Recursive case: divide the array into two halves and count the inversions in each half\n    left_inv = get_Inv_Count(arr[:n//2])\n    right_inv = get_Inv_Count(arr[n//2:])\n    # Use the two halves to count inversions in the full array\n    inv = 0\n    i, j = 0, n-1\n    while i <= j:\n        if arr[i] <= arr[j]:\n            inv += j-i+1\n            i += 1\n        else:\n            j -= 1\n    # Combine the inversions in the two halves and return the total\n    return left_inv + right_inv + inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                inv_count += i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # count inversions using merge sort\n    merge_sort(arr, 0, n-1)\n    return inversion_count(arr, 0, n-1)\n\ndef merge_sort(arr, l, r):\n    \"\"\"\n    Sort an array using merge sort.\n    \"\"\"\n    if l < r:\n        m = (l+r)//2\n        merge_sort(arr, l, m)\n        merge_sort(arr, m+1, r)\n        merge(arr, l, m, r)\n\ndef merge(arr, l, m, r):\n    \"\"\"\n    Merge two sorted arrays using merge sort.\n    \"\"\"\n    n1 = m - l + 1\n    n2 = r - m\n    left = [0] * n1\n    right = [0] * n2\n    for i in range(n1):\n        left[i] = arr[l+i]\n    for j in range(n2):\n        right[j] = arr[m+1+j]\n    i = 0\n    j = 0\n    k = l\n    while i < n1 and j < n2:\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n        k += 1\n    while i < n1:\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < n2:\n        arr[k] = right[j]\n        j += 1\n        k += 1\n\ndef inversion_count(arr, l, r):\n    \"\"\"\n    Count inversions in an array using merge sort.\n    \"\"\"\n    n = r - l + 1\n    count = 0\n    for i in range(1, n):\n        count += merge_count(arr, l, r, i)\n    return count\n\ndef merge_count(arr, l, r, m):\n    \"\"\"\n    Count the number of inversions in a subarray of the array using merge sort.\n    \"\"\"\n    n1 = r - l + 1\n    n2 = m - l + 1\n    count = 0\n    i = j = 0\n    while i < n1 and j < n2:\n        if arr[l+i] <= arr[l+j]:\n            i += 1\n        else:\n            j += 1\n            count += n1 - i\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide the array into two halves\n    left = [0] * n\n    right = [0] * n\n    for i in range(n):\n        left[i] = arr[i]\n        right[i] = arr[i]\n    \n    # Count inversions in the left half\n    inv_count += get_Inv_Count(left)\n    \n    # Count inversions in the right half\n    inv_count += get_Inv_Count(right)\n    \n    # Merge the two halves\n    i = j = 0\n    while i < n and j < n:\n        if left[i] < right[j]:\n            arr[i+j] = left[i]\n            i += 1\n        else:\n            arr[i+j] = right[j]\n            j += 1\n            inv_count += (n-i)\n    \n    # Copy the remaining elements of left and right half to the end\n    while i < n:\n        arr[i+j] = left[i]\n        i += 1\n    \n    while j < n:\n        arr[i+j] = right[j]\n        j += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inversions = 0\n    \n    # Divide the array into two halves and find the inversions in each half\n    for i in range(n//2):\n        left_half = sorted(arr[:i+1])\n        right_half = sorted(arr[i+1:])\n        \n        # Find the inversions in both halves and add them to the total count\n        inversions += sum([min(left_half[j], right_half[k]) > left_half[j+1] for j in range(len(left_half)-1) for k in range(len(right_half))])\n    \n    # Add the inversions in the remaining half of the array to the total count\n    inversions += sum([arr[i] > arr[i+1] for i in range(n-1)])\n    \n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # Count inversions using merge sort algorithm \n    inv_count = 0 \n    merge_sort(arr, 0, n-1, inv_count) \n    return inv_count \n\ndef merge_sort(arr, low, high, inv_count): \n    if low < high: \n        mid = (low + high) // 2 \n        merge_sort(arr, low, mid, inv_count) \n        merge_sort(arr, mid+1, high, inv_count) \n        inv_count += merge(arr, low, mid, high, inv_count) \ndef merge(arr, low, mid, high, inv_count): \n    i = low \n    j = mid + 1 \n    inv_count += high - low + 1  # count the number of inversions to merge \n    L = [0] * len(arr) # create an auxiliary array to store the merged elements \n    k = 0 # index to store the merged elements \n    while i <= mid and j <= high: \n        if arr[i] <= arr[j]: \n            L[k] = arr[i] \n            i += 1 \n        else: \n            L[k] = arr[j] \n            j += 1 \n            inv_count += mid - i + 1 # count the number of inversions to merge \n            \n    while i <= mid: \n        L[k] = arr[i] \n        i += 1 \n        k += 1 \n        \n    while j <= high: \n        L[k] = arr[j] \n        j += 1 \n        k += 1 \n        \n    for i in range(low, high+1): \n        arr[i] = L[i-low] \n        \n    return inv_count "
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Helper function to flatten a nested list\n    def flatten(nested_list):\n        # Initialize an empty list to store the flattened list\n        flat_list = []\n        # Loop through each element in the nested list\n        for element in nested_list:\n            # If the element is a list, recursively flatten it and append the flattened elements to the flat list\n            if type(element) is list:\n                flat_list.extend(flatten(element))\n            # If the element is not a list, append it to the flat list\n            else:\n                flat_list.append(element)\n        # Return the flattened list\n        return flat_list\n\n    # Return the flattened list\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    :param lst: A nested list to flatten.\n    :return: A flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    :param lst: the nested list to flatten\n    :type lst: list\n    :return: the flattened list\n    :rtype: list\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for i, (item, price) in enumerate(stdata):\n        max_agg[item] += price\n        if max_agg[item] > max_agg['max_agg']:\n            max_agg['max_agg'] = max_agg[item]\n    return max_agg['max_agg']"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    max_dict = defaultdict(int)\n\n    for i in stdata:\n        for j in i:\n            max_dict[j] += i[j]\n\n    max_val = max(max_dict.values())\n\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n\n    for s, t in stdata:\n        max_dict[s] += t\n\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each key in the data\n    max_dict = defaultdict(int)\n\n    # loop through the data and update the maximum aggregate for each key\n    for item in stdata:\n        for key in item:\n            max_dict[key] = max(max_dict[key], item[key])\n\n    # find the maximum aggregate from the dictionary\n    max_agg = max(max_dict.values())\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the max aggregate for each customer\n    max_aggs = defaultdict(int)\n    for item in stdata:\n        customer, amount = item\n        # Add the amount to the max aggregate for the customer\n        max_aggs[customer] += amount\n    # Find the maximum aggregate from the dictionary\n    max_agg = max(max_aggs.values())\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    for data in stdata:\n        for key in data:\n            if key not in max_aggregate_list:\n                max_aggregate_list.append(key)\n            if data[key] > max_aggregate_list[max_aggregate_list.index(key)]:\n                max_aggregate_list[max_aggregate_list.index(key)] = data[key]\n\n    max_aggregate_dict = defaultdict(lambda: 0)\n    for i in max_aggregate_list:\n        max_aggregate_dict[i] = max_aggregate_dict[i] + 1\n    \n    max_aggregate_dict = dict(sorted(max_aggregate_dict.items(), key=lambda x: (-x[1], x[0])))\n    \n    max_aggregate_list = list(max_aggregate_dict.keys())\n    max_aggregate_dict = dict(sorted(max_aggregate_dict.items(), key=lambda x: (-x[1], x[0])))\n    \n    return max_aggregate_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the max aggregate for each month\n    max_agg_per_month = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for month, amount in stdata:\n        # Update the max aggregate for the current month\n        max_agg_per_month[month] = max(amount, max_agg_per_month[month])\n\n    # Return the maximum aggregate for all months\n    return max(max_agg_per_month.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n\n    for item in stdata:\n        for num in item:\n            max_dict[num] += 1\n\n    for key, value in max_dict.items():\n        max_sum += key * value\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate value for each customer\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max_agg dictionary\n    for customer, purchase in stdata:\n        max_agg[customer] = max(max_agg[customer], purchase)\n\n    # Iterate through the max_agg dictionary and find the customer with the maximum aggregate\n    max_cust = max(max_agg, key=max_agg.get)\n\n    # Return the maximum aggregate value for the customer\n    return max_agg[max_cust]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int) # create a defaultdict to store the maximum aggregate for each item\n    for item, price in stdata: # loop through the list of tuples\n        max_aggr[item] = max(max_aggr[item], price) # update the maximum aggregate for each item\n    return max(max_aggr.values()) # return the maximum aggregate across all items in the dictionary"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in seq[:n]) == sum(int(bit) for bit in seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        sum_bits = int(bits[0:n]) + int(bits[-n:])\n        if sum_bits == 2**(2*n-1):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = i\n        last_sum = 0\n        for j in range(n):\n            last_sum += (i & 1)\n            i = i >> 1\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    def sum_binary(n):\n        '''\n        This function takes an integer n as input and returns the sum of its binary representation.\n        '''\n        binary = bin(n)[2:]\n        return int(binary, 2)\n\n    def is_binary_seq(binary_seq, n):\n        '''\n        This function takes a binary sequence and an integer n as input and returns True if the sum of the first n bits is equal to the sum of the last n bits, otherwise False.\n        '''\n        first_sum = sum_binary(binary_seq[:n])\n        last_sum = sum_binary(binary_seq[-n:])\n        return first_sum == last_sum\n\n    count = 0\n    for i in range(2, 2**n+1, 2**n):\n        if is_binary_seq(bin(i)[2:], n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        first_sum = sum(int(digit) for digit in binary[:n])\n        last_sum = sum(int(digit) for digit in binary[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # initialize count of binary sequences\n    count = 0\n    \n    # iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        \n        # extract the first n bits of the sequence\n        seq = bin(i)[2:].zfill(n)\n        \n        # extract the sum of the first n bits\n        first_sum = sum(int(bit) for bit in seq[:n])\n        \n        # extract the sum of the last n bits\n        last_sum = sum(int(bit) for bit in seq[-n:])\n        \n        # check if the sum of the first n bits and the sum of the last n bits are equal\n        if first_sum == last_sum:\n            count += 1\n    \n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**n+2**n):\n        first_n_bits = bin(i)[2:]\n        last_n_bits = bin(i+2**n)[2:]\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = 0\n        last_sum = 0\n        for j in range(n):\n            if i & (1<<j):\n                first_sum += j\n        for j in range(n):\n            if i & (1<<(n-1-j)):\n                last_sum += j\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables\n    count = 0\n    seq = 0\n    curr_bit = 0\n\n    # Iterate over all possible sequences of length 2n\n    for i in range(2**n):\n        # Add the current bit to the sequence\n        seq += curr_bit * 2**i\n\n        # If the sum of the first n bits is equal to the sum of the last n bits, increment the count\n        if (seq >> 1) == ((seq >> n) & ((1 << n) - 1)):\n            count += 1\n\n        # Set the current bit to the next bit\n        curr_bit = (curr_bit + 1) % 2\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n, 2**n):\n        bit_sum = i & ((1 << n) - 1)\n        if i >> n == i - bit_sum:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for k in d:\n        depth = max(depth, dict_depth(d[k]))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth = max(depth, dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            depth += dict_depth(v)\n        return depth\n    elif isinstance(d, list):\n        depth = 1\n        for item in d:\n            depth += dict_depth(item)\n        return depth\n    elif isinstance(d, (int, float, str, bool, type(None))):\n        return 0\n    else:\n        raise ValueError(\"Unsupported type\")"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter to 0\n    depth = 0\n    # iterate through the dictionary using a loop\n    for key in d:\n        # check if the key is a dictionary\n        if isinstance(d[key], dict):\n            # if it is, increment the depth counter by 1\n            depth += 1\n        # if the key is not a dictionary, break out of the loop\n        else:\n            break\n    # return the final depth value\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = dict_depth(d[key]) if depth > 0 else depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            count += 1\n            count += dict_depth(value)\n    return count"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the array, rotation and index as input and returns the element at the given index after rotating the array by the given number of rotations.\n\n    Args:\n        arr (list): The list of elements to be rotated.\n        ranges (list): The list of rotations, each rotation corresponds to a range of indices to be rotated.\n        rotations (int): The number of rotations to be applied.\n        index (int): The index for which the element is to be found.\n\n    Returns:\n        The element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n\n    # Initialize the result\n    result = None\n\n    # Iterate over the ranges and rotations\n    for r, n in zip(ranges, rotations):\n        # Calculate the start and end indices\n        start = (index + r) % len(arr)\n        end = (start + n) % len(arr)\n\n        # Check if the range is valid\n        if end <= start:\n            continue\n\n        # Extract the range of elements to be rotated\n        range_arr = arr[start:end]\n\n        # Rotate the range of elements\n        rotated_arr = range_arr[::-1]\n\n        # Check if the rotated range is empty\n        if not rotated_arr:\n            continue\n\n        # Find the element at the index\n        if index < len(rotated_arr):\n            result = rotated_arr[index]\n            break\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and the number of rotations, and an index.\n    It then finds the element at the given index after the number of rotations.\n\n    Args:\n        arr (list): The array to be searched.\n        ranges (list): A list of lists, where each sublist represents a range of the array.\n        rotations (int): The number of rotations to perform.\n        index (int): The index to find the element at.\n\n    Returns:\n        int: The element at the given index after the number of rotations.\n    \"\"\"\n    # Calculate the rotation index\n    rotation_index = index - rotations\n\n    # Find the element at the rotation index\n    if rotation_index >= 0:\n        return arr[rotation_index % len(arr)]\n    else:\n        # If the rotation index is negative, we need to find the element at the actual index\n        return arr[index % len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges and rotations as input and returns the element at the given index after the given number of rotations.\n    The function first calculates the remaining rotations and their lengths. Then, it finds the remaining element and returns it.\n    '''\n\n    # Calculate the remaining rotations and their lengths\n    remaining_rotations = rotations % len(ranges)\n    remaining_lengths = [ranges[rotations - i] - ranges[rotations - i - 1] + 1 for i in range(remaining_rotations)]\n\n    # Calculate the remaining element index\n    remaining_index = (index - ranges[rotations - 1]) % remaining_lengths[0]\n\n    # Find the remaining element at the given index\n    remaining_element = arr[index - remaining_lengths[0] + remaining_index]\n\n    return remaining_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after rotating the array by a certain number of times.\n    \n    Args:\n    arr (list): The array to be rotated.\n    ranges (list): The range of the array to be rotated.\n    rotations (int): The number of times to rotate the array.\n    index (int): The index of the element to be found.\n    \n    Returns:\n    int: The element at the given index after rotating the array by the specified number of times.\n    \n    \"\"\"\n    \n    # Define the helper function to rotate the array.\n    def rotate_array(arr, ranges, rotations, index):\n        \"\"\"\n        Rotate the array by a certain number of times.\n        \n        Args:\n        arr (list): The array to be rotated.\n        ranges (list): The range of the array to be rotated.\n        rotations (int): The number of times to rotate the array.\n        index (int): The index of the element to be found.\n        \n        Returns:\n        list: The rotated array.\n        \n        \"\"\"\n        \n        # Initialize the result list and the list to store the rotated elements.\n        result = []\n        rotated = []\n        \n        # Store the length of the array.\n        n = len(arr)\n        \n        # Calculate the number of rotations that need to be done.\n        rotations = rotations % n\n        \n        # Rotate the array using the given range and number of rotations.\n        for i in range(n):\n            if i < ranges[0]:\n                rotated.append(arr[(i + rotations) % n])\n            elif i >= ranges[1]:\n                rotated.append(arr[(i - rotations) % n])\n            else:\n                rotated.append(arr[i])\n                \n        # Copy the rotated elements to the result list.\n        for i in rotated:\n            result.append(i)\n            \n        # Return the rotated array.\n        return result\n    \n    # Call the helper function to find the element at the given index after rotating the array.\n    return rotate_array(arr, ranges, rotations, index)[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the final index after rotations\n    final_index = (index + rotations) % len(arr)\n    \n    # check if final index is within the range of the array\n    if final_index < 0:\n        final_index += len(arr)\n    \n    # calculate the element at the final index\n    element = arr[final_index]\n    \n    # return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, and the number of rotations\n    and returns the element at the given index after the specified number of rotations.\n    '''\n\n    # Calculate the sum of the elements in the range\n    range_sum = sum(arr[range_[0]:range_[1]] for range_ in ranges)\n\n    # Calculate the sum of the elements after the rotations\n    rotated_sum = sum(arr[(i * rotations) % len(arr)] for i in range(index + 1))\n\n    # Calculate the element at the given index\n    result = rotated_sum - (range_sum * (rotations - 1))\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the number of elements after each rotation\n    after_rotations = [(range + rotations) % len(arr) for range in ranges]\n\n    # Initialize the index of the last element rotated\n    last_rotated_index = -1\n\n    # Initialize the current index\n    current_index = index\n\n    # Iterate through all the rotations and find the element at the given index\n    for rotation in range(rotations):\n        # Find the index of the last element rotated\n        last_rotated_index = (current_index - rotation) % len(arr)\n\n        # Calculate the element at the given index after the rotation\n        element_at_index = arr[(current_index + rotation) % len(arr)]\n\n        # Check if the element at the given index matches the element at the last rotated index\n        if element_at_index == arr[last_rotated_index]:\n            # If yes, return the element at the given index\n            return element_at_index\n\n        # Update the current index for the next iteration\n        current_index = (current_index + after_rotations[last_rotated_index]) % len(arr)\n\n    # If no element is found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize variables\n    min_range = min(ranges)\n    max_range = max(ranges)\n    mod = 10**9 + 7\n    n = len(arr)\n\n    # Calculate the total sum of elements\n    total_sum = 0\n    for i in range(n):\n        total_sum += arr[i]\n\n    # Calculate the new array after rotations\n    new_arr = [0] * n\n    for i in range(n):\n        new_arr[i] = (total_sum + arr[i] - arr[index] + mod) % mod\n\n    # Calculate the cumulative sums of new array\n    cumulative_sum = [0] * n\n    cumulative_sum[0] = arr[0]\n    for i in range(1, n):\n        cumulative_sum[i] = (cumulative_sum[i-1] + new_arr[i]) % mod\n\n    # Calculate the new index after rotations\n    new_index = (index - min_range + max_range - min_range + mod) % mod\n\n    # Calculate the sum of the elements in the range that the new index lies in\n    sum_range = 0\n    for i in range(new_index, min_range, -1):\n        sum_range = (sum_range + arr[i]) % mod\n\n    # Calculate the sum of the elements in the range that the new index lies after rotations\n    sum_new_range = (sum_range + (cumulative_sum[new_index] - cumulative_sum[min_range]) % mod) % mod\n\n    # Calculate the element at the new index after rotations\n    element = (sum_new_range - (cumulative_sum[new_index] - arr[new_index]) % mod + mod) % mod\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, a list of rotations, and an index as inputs.\n    It returns the element at the given index after performing the specified number of rotations.\n\n    Args:\n    arr (list): An array of integers.\n    ranges (list): A list of pairs of integers indicating the range of rotations for each element.\n    rotations (list): A list of integers indicating the number of rotations to perform for each element.\n    index (int): The index of the element to find after rotations.\n\n    Returns:\n    int: The element at the given index after performing the specified number of rotations.\n    \"\"\"\n\n    # Loop through the array and find the element at the specified index after rotations.\n    for i in range(len(arr)):\n        if i in ranges and i + rotations[i] == index:\n            return arr[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at index after rotations\n    temp = arr[0]\n    for i in range(len(rotations)):\n        temp = temp + rotations[i]\n        temp = temp % (arr[i+1] - arr[i])\n    temp = temp + (index - len(ranges)) * (arr[i+1] - arr[i])\n\n    # Find the element at index after number of rotations\n    for i in range(len(ranges)):\n        temp = temp + ranges[i]\n        temp = temp % (arr[i+1] - arr[i])\n\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words_with_p = re.findall(pattern, words)\n    if len(words_with_p) > 1:\n        return words_with_p[0], words_with_p[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = re.findall(pattern,''.join(words))\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0].lower() == 'p']\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = pattern.findall(words)\n    \n    if len(matches) < 2:\n        return \"There are less than 2 words starting with 'p'.\"\n    \n    return \"The first word starting with 'p' is: {}\\nThe second word starting with 'p' is: {}\".format(matches[0], matches[1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^[Pp][a-z]*')\n    matches = re.findall(pattern, words)\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w*p\\w*'\n    for word in words:\n        if re.search(pattern, word):\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define pattern to find words starting with letter 'p'\n    pattern = r'^p\\w+'\n    # use re.findall() function to find all words starting with 'p'\n    matches = re.findall(pattern, words)\n    # return two words starting with 'p'\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matched_words = re.findall(pattern, words)\n    return matched_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_sum_so_far = float('-inf')\n\n    # Consider the first element of the increasing subsequence\n    max_sum_so_far = a[index]\n    max_sum = max_sum_so_far\n\n    # Consider all the remaining elements\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            # If the element is greater, then the maximum sum of the current increasing subsequence is the sum of the element and the maximum sum of the previous subsequence\n            max_sum_so_far = max(a[i] + max_sum_so_far, max_sum_so_far)\n\n            # Update the maximum sum of the increasing subsequence\n            max_sum = max(max_sum_so_far, max_sum)\n\n    # Add the kth element to the maximum sum of the increasing subsequence\n    if k > index:\n        max_sum_so_far += a[k]\n\n    return max_sum_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    \n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n    \n    max_sum = float('-inf')\n    max_sum_ending_at_i = 0\n    \n    for i in range(index, n + 1):\n        if i >= k:\n            break\n        \n        curr_sum = prefix_sum[i]\n        for j in range(index, i):\n            curr_sum = max(curr_sum, prefix_sum[j] + prefix_sum[i] - prefix_sum[j] + a[i - 1] - a[j])\n        \n        max_sum = max(max_sum, curr_sum)\n        max_sum_ending_at_i = curr_sum\n    \n    return max_sum, max_sum_ending_at_i"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    prefix_sum = [0] * (n+1)\n    max_sum = 0\n    \n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + a[i]\n        \n        if i > index:\n            if i == k-1:\n                if a[k-1] > a[i-1]:\n                    max_sum = max(max_sum, prefix_sum[i+1])\n                else:\n                    max_sum = max(max_sum, prefix_sum[i+1] - a[i-1])\n            elif i < k-1:\n                max_sum = max(max_sum, prefix_sum[i+1])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize an array to store the maximum sum of increasing subsequence\n    max_sum = [0]*(k+1)\n    # initialize the maximum sum of increasing subsequence for the given index as 0\n    max_sum[index] = a[index]\n    # loop through the array from index+1 to n-1\n    for i in range(index+1, n):\n        # if the current element is greater than kth element, update the maximum sum of increasing subsequence to include the current element and the maximum sum of increasing subsequence from prefix until i-1\n        if a[i] > k:\n            max_sum[i] = max(max_sum[i], max_sum[i-1] + a[i])\n        # if the current element is less than or equal to kth element, update the maximum sum of increasing subsequence to include the current element only\n        else:\n            max_sum[i] = max_sum[i-1] + a[i]\n    # return the maximum sum of increasing subsequence\n    return max_sum[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize the maximum sum to the first element and set it to the maximum sum of the first element\n    max_sum = a[0]\n    max_ending_here = a[0]\n    \n    # Iterate over the remaining elements of the array\n    for i in range(1, n):\n        # Check if the current element is greater than the kth element\n        if a[i] > k:\n            # Calculate the maximum sum of the current element and the sum of the current element and the maximum sum of the previous element\n            max_sum = max(max_sum, a[i] + max_ending_here)\n            # Update the maximum sum of the current element as the maximum sum of the previous element\n            max_ending_here = max_sum\n    \n    # Return the maximum sum of the increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the maximum sum of increasing subsequence for each prefix\n    max_sum = [0] * n\n\n    # Initialize the first prefix\n    max_sum[0] = a[0]\n\n    # Calculate the maximum sum of increasing subsequence for the remaining prefixes\n    for i in range(1, n):\n        # If the current element is less than or equal to the kth element,\n        # then add it to the current maximum sum of increasing subsequence\n        if a[i] <= k:\n            max_sum[i] = max(max_sum[i], max_sum[i-1] + a[i])\n        else:\n            max_sum[i] = max_sum[i-1]\n\n    # Initialize the maximum sum of increasing subsequence up to index i\n    max_sum_up_to_i = max_sum[:index+1]\n\n    # Initialize the maximum sum of increasing subsequence including the kth element\n    max_sum_including_k = max(max_sum_up_to_i) + a[k]\n\n    return max_sum_including_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + a[i], dp[i])\n    return dp[k] - dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    for i in range(n):\n        if i == index:\n            dp[i] = max(dp[i], a[i] + dp[k - 1])\n        elif i > index:\n            dp[i] = max(dp[i], dp[i - 1])\n\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize a list to store the sum of increasing subsequence\n    # from prefix until the ith index\n    subseq_sum = [0] * (n + 1)\n    \n    # Initialize a list to store the index of the last element of\n    # each increasing subsequence from prefix until the ith index\n    last_index = [0] * (n + 1)\n    \n    # Initialize a variable to store the maximum sum of increasing\n    # subsequence from prefix until the kth index\n    max_sum = 0\n    \n    # Initialize a variable to store the index of the last element of\n    # the maximum sum of increasing subsequence from prefix until the kth index\n    max_last_index = 0\n    \n    # Initialize a variable to store the index of the ith element\n    current_index = index\n    \n    # Initialize a variable to store the current sum of increasing\n    # subsequence from the current index\n    current_sum = 0\n    \n    # Loop through the array from the current index to the end of the array\n    while current_index <= n:\n        # Check if the current index is greater than or equal to the given kth element\n        if current_index >= k:\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum and its last index\n                max_sum = current_sum\n                max_last_index = current_index\n        # Check if the current index is the end of the array\n        if current_index == n:\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum and its last index\n                max_sum = current_sum\n                max_last_index = current_index\n        # Check if the current index is in the array\n        if current_index <= n:\n            # Calculate the sum of the increasing subsequence from the current index to the end of the array\n            current_sum = a[current_index] + subseq_sum[current_index - 1]\n        # Update the list of last elements of increasing subsequences\n        last_index[current_index] = max_last_index\n        # Update the current index\n        current_index += 1\n    \n    # Return the maximum sum of increasing subsequence from prefix until the kth index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": ""
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(deepcopy(tuplex[i:i+m]) for i in range(0, len(tuplex), m))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m <= 0 or n <= 0:\n        return ()\n    \n    colons = ()\n    for i in range(m):\n        colons += (i+1,) * n\n        \n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): Tuple to colonize.\n        m (int): Row index of the first row to colonize.\n        n (int): Column index of the first column to colonize.\n\n    Returns:\n        tuple: Colonized tuple.\n    '''\n    # Get the dimensions of the original tuple\n    rows, cols = len(tuplex), len(tuplex[0])\n\n    # Check if m and n are within range\n    if m < 0 or m >= rows or n < 0 or n >= cols:\n        raise ValueError(\"Invalid row or column index.\")\n\n    # Create a new empty tuple\n    new_tuplex = ()\n\n    # Copy the first row and column to the new tuple\n    for i in range(m):\n        new_tuplex += (tuplex[i][n],)\n    for j in range(n):\n        new_tuplex += (tuplex[m][j],)\n\n    # Copy the remaining rows and columns to the new tuple\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            new_tuplex += (tuplex[i + 1][j + 1],)\n\n    # Check if the dimensions of the new tuple are correct\n    if len(new_tuplex)!= rows * cols:\n        raise ValueError(\"Invalid dimensions for colonized tuple.\")\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new list with the same elements as the original list\n    new_list = deepcopy(tuplex)\n\n    # slice the list into chunks of size n and m\n    colon = [new_list[i:i+m] for i in range(0, len(new_list), n)]\n\n    # flatten the colon into a single list\n    flat_colon = [item for sublist in colon for item in sublist]\n\n    return flat_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j] = None\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n>len(tuplex[0]):\n        return None\n    else:\n        return (tuplex[0][:n], tuplex[1][:m], tuplex[2][:n])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    for i in range(m-1):\n        col = col[0]\n    for j in range(n-1):\n        col = col[1:]\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # copy the original tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # iterate over the rows of the matrix\n    for i in range(m):\n        # iterate over the columns of the matrix\n        for j in range(n):\n            # get the value of the current cell\n            cell_val = new_tuplex[i][j]\n            # if it's not the last column, print a colon\n            if j < n-1:\n                print(cell_val, end=' ')\n            # otherwise, print the last value of the cell\n            else:\n                print(cell_val)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize the result tuple\n    result = ()\n    # Iterate over the rows\n    for i in range(m):\n        # Initialize the current row\n        curr_row = ()\n        # Iterate over the columns\n        for j in range(n):\n            # Get the value of the cell\n            val = tuplex[i][j]\n            # Add the value to the current row\n            curr_row += (val,)\n        # Add the current row to the result\n        result += (curr_row,)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex: A tuple of integers.\n    m: An integer indicating the number of rows of the colon to be formed.\n    n: An integer indicating the number of columns of the colon to be formed.\n\n    Returns:\n    A list of lists containing the colon formed by the given tuple.\n\n    \"\"\"\n\n    # Initialize an empty list to store the colon\n    colon = []\n\n    # Create a copy of the tuple for modification\n    tuplex_copy = deepcopy(tuplex)\n\n    # Sort the tuple in ascending order\n    tuplex_copy.sort()\n\n    # Calculate the size of the tuple and the number of rows and columns to be formed\n    tuplex_len = len(tuplex_copy)\n    num_rows = m\n    num_cols = n\n\n    # Get the index of the first element of the first row\n    first_elem_idx = 0\n    first_elem_val = tuplex_copy[first_elem_idx]\n\n    # Loop through the rows of the colon\n    for i in range(num_rows):\n\n        # Get the indices of the elements to be printed in the current row\n        row_elems = get_row_elements(first_elem_idx, tuplex_len, num_cols)\n\n        # Add the row elements to the colon\n        colon.append(row_elems)\n\n        # Update the index of the first element of the next row\n        first_elem_idx += num_cols\n\n    # Return the colon formed by the tuple\n    return colon\n\n\ndef get_row_elements(first_elem_idx, tuplex_len, num_cols):\n    \"\"\"\n    Get the indices of the elements to be printed in a row.\n\n    Args:\n    first_elem_idx: An integer indicating the index of the first element of the row.\n    tuplex_len: An integer indicating the length of the tuple.\n    num_cols: An integer indicating the number of columns of the row.\n\n    Returns:\n    A list of integers containing the indices of the elements to be printed in the current row.\n\n    \"\"\"\n\n    # Initialize an empty list to store the row elements\n    row_elems = []\n\n    # Loop through the columns of the row\n    for j in range(num_cols):\n\n        # Calculate the index of the element to be printed in the current column\n        elem_idx = first_elem_idx + j\n\n        # Check if the element index is within the tuple range\n        if elem_idx < tuplex_len:\n\n            # Add the element index to the row elements list\n            row_elems.append(elem_idx)\n\n        # If the element index is outside the tuple range, repeat the last element\n        else:\n            elem_idx -= tuplex_len\n            row_elems.append(elem_idx)\n\n    # Return the row elements list\n    return row_elems"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the variables to store the maximum product for each list\n    max_product1 = max_product2 = float('-inf')\n\n    # Loop through each number in the list and compare the product with the current maximum\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product > max_product1:\n                max_product1 = product\n            if product > max_product2:\n                max_product2 = product\n\n            # If we have found the N largest products, break out of the loop\n            if max_product1 > max_product2:\n                if N == 1:\n                    return max_product1\n                elif N == 2:\n                    return max_product1, max_product2\n\n    return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        max1, max2 = max(nums1), max(nums2)\n        result.append(max1*max2)\n        nums1 = [x for x in nums1 if x!= max1]\n        nums2 = [x for x in nums2 if x!= max2]\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products list\n    largest_products = []\n\n    # Loop through the input lists until the specified number of products have been found\n    for i in range(N):\n        # Calculate the product of the next two largest numbers\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current largest product, add it to the list\n        if product > largest_products[-1] if largest_products else 0:\n            largest_products.append(product)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the largest product of two numbers\n    def max_product(num1, num2):\n        return max(num1 * num2, num2 * num1)\n\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Initialize a variable to store the current product\n    current_product = 0\n\n    # Loop through the input lists until we have found the desired number of products\n    for i in range(N):\n        # Calculate the current product of the two largest numbers from the two input lists\n        current_product = max_product(nums1[i], nums2[i])\n\n        # Update the largest_product1 and largest_product2 if the current product is larger\n        if current_product > largest_product1:\n            largest_product2 = largest_product1\n            largest_product1 = current_product\n        elif current_product > largest_product2:\n            largest_product2 = current_product\n\n    # Return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    num1_max = max(nums1)\n    num2_max = max(nums2)\n    large_products = []\n\n    # Find the largest products for each factor\n    for i in range(1, N+1):\n        product1 = 1\n        product2 = 1\n\n        # Find the largest product for factor i from list 1\n        for num in nums1:\n            product1 *= num\n\n        # Find the largest product for factor i from list 2\n        for num in nums2:\n            product2 *= num\n\n        if product1 > num1_max:\n            num1_max = product1\n        if product2 > num2_max:\n            num2_max = product2\n\n        # Append the largest product for factor i to a list\n        if product1 == num1_max:\n            large_products.append(product1)\n        if product2 == num2_max:\n            large_products.append(product2)\n\n    # Return the list of largest products\n    return large_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_product = float('-inf')\n    for i in range(len(nums1)):\n        product1 = nums1[i] * nums2[i]\n        if product1 > largest_product:\n            largest_product = product1\n            factor1 = nums1[i]\n            factor2 = nums2[i]\n        if i >= N:\n            break\n    for i in range(len(nums2)):\n        product2 = nums1[i] * nums2[i]\n        if product2 > largest_product:\n            largest_product = product2\n            factor1 = nums1[i]\n            factor2 = nums2[i]\n        if i >= N:\n            break\n    print(\"Largest products: {} x {}\".format(factor1, factor2))\n    print(\"Largest product: {}\".format(largest_product))"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the product of the largest N elements from both lists\n    largest_product1 = max(nums1[:N]) * max(nums1[-N:])\n    largest_product2 = max(nums2[:N]) * max(nums2[-N:])\n\n    # Find the number of times the largest products occur in each list\n    count1 = nums1.count(largest_product1)\n    count2 = nums2.count(largest_product2)\n\n    # Find the product of the remaining N elements in each list\n    product1 = max(nums1[N:]) * max(nums1[:-N])\n    product2 = max(nums2[N:]) * max(nums2[:-N])\n\n    # Find the maximum of the products of the two lists\n    max_product = max(product1, product2)\n\n    # Divide the maximum product by the smallest element in each list to get the answer\n    answer = max_product / min(largest_product1, largest_product2)\n\n    return answer"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        product1 = max(nums1)\n        product2 = max(nums2)\n        max_products.append(product1*product2)\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the largest product variables\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    \n    # Loop through the indices\n    for i in range(len(nums1)):\n        # Find the largest product for the first factor\n        for j in range(len(nums2)):\n            product1 = nums1[i] * nums2[j]\n            if product1 > max_product1:\n                max_product1 = product1\n            \n            # Find the largest product for the second factor\n            product2 = nums2[j] * nums1[i]\n            if product2 > max_product2:\n                max_product2 = product2\n        \n        # Reset the maximum product variables for the second factor\n        max_product2 = float('-inf')\n    \n    # Return the N largest products\n    return max(max_product1, max_product2)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    # Initialize variables to store the current index of the two lists\n    i = 0\n    j = 0\n    # Loop through the list of indices\n    for _ in range(N):\n        # Calculate the product of the two lists at the current index\n        product1 = nums1[i] * nums2[j]\n        product2 = nums2[i] * nums1[j]\n        # Update the largest products if necessary\n        if product1 > largest_product1:\n            largest_product1 = product1\n        if product2 > largest_product2:\n            largest_product2 = product2\n        # Increment the indices for the two lists\n        i += 1\n        j += 1\n    # Return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the string into characters\n    chars = list(str1)\n    # Convert the list of characters to a tuple\n    tup = tuple(chars)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the bit count to 0\n    bit_count = 0\n\n    # Iterate through the binary representation of n and count the number of set bits\n    while n!= 0:\n        bit_count += n & 1\n        n >>= 1\n\n    # Set the left-most unset bit\n    if bit_count % 2 == 0:\n        return n - 1\n    else:\n        return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Traverse the bits of the number from right to left\n    for i in range(31, -1, -1):\n        # Check if the bit is unset\n        if n & (1 << i) == 0:\n            # Set the bit and break the loop\n            n = n | (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the position of the left most unset bit\n    left_most_unset_bit = 31 - n.bit_length()\n\n    # Set the left most unset bit to 1\n    n |= 1 << left_most_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Get the index of the leftmost unset bit\n    index = 0\n    while n & (1 << index) == 0:\n        index += 1\n    # Set the leftmost unset bit\n    n |= 1 << index\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize a variable to store the number of set bits\n    set_count = 0\n\n    # Count the number of set bits in the binary representation of n\n    while n:\n        set_count += n & 1\n        n >>= 1\n\n    # Set the left most unset bit to 1\n    left_most_unset_bit = 1 << set_count\n\n    # Set the unset bits of n to 0\n    n &= ~left_most_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 ** ((n.bit_length() - 1) // 2) + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Iterate through all possible binary values of the number\n    for i in range(1, n+1):\n        # Check if the current binary value has all set bits to the left of it\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function returns the bitwise AND of all integers from 0 to n, except for the left-most bit.\n    \n    For example, if n is 15, the function returns 12, since 15 has all bits set to 1 except for the left-most one (which is 0).\n    \"\"\"\n    return n & (n - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variable to store unset bits\n    unset_bits = 0\n    # Loop through each bit of the number\n    for i in range(32):\n        # If the current bit is 0, set unset_bits to 1 and break out of the loop\n        if n & (1 << i) == 0:\n            unset_bits = 1\n            break\n    # If the number has no unset bits, return n unchanged\n    if unset_bits == 0:\n        return n\n    # Otherwise, set the left most unset bit to 1 and return the result\n    else:\n        return n | (1 << (unset_bits-1))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit in an integer n.\n    '''\n\n    # Initialize the count of unset bits in n\n    count = 0\n\n    # Iterate through each bit of n\n    for i in range(32):\n        if n & (1 << i):\n            count = i\n            break\n\n    # Set the leftmost unset bit to 1\n    n |= 1 << count\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function finds the volume of a cone.\n\n    Inputs:\n        r (float): radius of the base of the cone\n        h (float): height of the cone\n\n    Returns:\n        float: volume of the cone\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters, r and h, which represent the radius and height of a cone respectively.\n    It returns the volume of the cone as a float.\n    '''\n\n    # Calculate the volume of the cone using the formula V = pi * r^2 * h / 3\n    volume = math.pi * r**2 * h / 3\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with the given base radius r and height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Formula to find the volume of a cone using Heron's formula\n    vol = (1/3) * math.pi * r**2 * h\n    \n    # Return the volume of the cone\n    return vol"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to a given number n.\n    \"\"\"\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    If n is already a power of 2, it will return n itself.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 2**highest_Power_of_2(n-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    power = 0\n    while (n > 1):\n        power += 1\n        n = n >> 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to a given number.\n    \n    :param n: The number to find the highest power of 2 for.\n    :type n: int\n    :return: The highest power of 2 that is less than or equal to n.\n    :rtype: int\n    \"\"\"\n    # Initialize the highest power of 2 found so far to -1.\n    highest_power = -1\n\n    # Loop through the numbers 2 to n.\n    for i in range(2, n+1):\n        # Check if i is a power of 2.\n        if i == 1:\n            # If i is 1, then it is the highest power of 2 found so far.\n            highest_power = i\n        elif i % 2 == 0:\n            # If i is even, it is a power of 2. Check if it is greater than the highest power found so far.\n            if i > highest_power:\n                highest_power = i\n\n    # Return the highest power of 2 found.\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**highest_Power_of_2(n-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // (1 - 2**(-n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the nth lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        lucas_number = (2**n - 1) // (2**n - 1 - 2**(n-1))\n        return lucas_number"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string % item"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"All lists must have the same length\")\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize empty nested dictionary\n    d = {}\n\n    # Iterate over lists\n    for i in range(len(l1)):\n        # Check if current item is a dictionary\n        if isinstance(l1[i], dict):\n            # Merge current dictionary with existing dictionary\n            d = {**d, **l1[i]}\n        else:\n            # Append current item as a key in the nested dictionary\n            d[l1[i]] = l2[i] if i < len(l2) else l3[i - len(l2)]\n\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create a nested dictionary\n    d = {}\n\n    # iterate over the lists and add the elements to the nested dictionary\n    for i in range(len(l1)):\n        d[str(i+1)] = {'list1': l1[i], 'list2': l2[i], 'list3': l3[i]}\n\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # creating an empty dictionary to store the final nested dictionary\n    result_dict = {}\n    \n    # iterating over the first list to create the nested dictionary\n    for i in range(len(l1)):\n        # creating a new dictionary to store the current element of the first list\n        current_dict = {}\n        \n        # iterating over the second list to populate the current dictionary\n        for j in range(len(l2)):\n            current_dict[l2[j]] = l1[i][j]\n        \n        # iterating over the third list to populate the current dictionary\n        for k in range(len(l3)):\n            current_dict[l3[k]] = l1[i][k+len(l2)]\n        \n        # appending the current dictionary to the result dictionary\n        result_dict[l1[i]] = current_dict\n    \n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through each list and append the values to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = [l2[i], l3[i]]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to hold the data\n    data = {}\n    \n    # iterate over the lists and add the data to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        data[l1[i]][l2[i]] = l3[i]\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1 (list): List of numbers\n    l2 (list): List of strings\n    l3 (list): List of dictionaries\n\n    Returns:\n    dict: Nested dictionary of lists\n\n    Example:\n    convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], [{'name': 'John', 'age': 30}, {'name': 'Jane', 'age': 25}])\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary\n    result = {}\n\n    # Iterate through each list and add it as a key in the result dictionary with a value of an empty list\n    for lst in [l1, l2, l3]:\n        result[lst] = []\n\n    # Iterate through each list and append each element to the corresponding key in the result dictionary\n    for lst in [l1, l2, l3]:\n        for item in lst:\n            result[lst].append(item)\n\n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n\n    # loop through each list and add values to dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n\n    # loop through each list and add values to nested dictionary\n    for j in range(len(l3)):\n        result[l3[j]][l1[j]] = l3[j+1]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n    # iterate over the lists\n    for i, lst in enumerate([l1, l2, l3]):\n        # iterate over the elements of the list\n        for item in lst:\n            # if the element is a dictionary, add it to the result\n            if isinstance(item, dict):\n                result.update(item)\n            # if the element is a list, recursively convert it to a nested dictionary\n            elif isinstance(item, list):\n                nested_result = convert_list_dictionary(*item)\n                result.update(nested_result)\n            # if the element is a scalar, add it to the result as a key-value pair\n            else:\n                key = f\"item_{i}_{lst.index(item)}\"\n                result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # Define an empty dictionary to hold the final result\n    result = {}\n\n    # Iterate over the input lists\n    for i in range(len(l1)):\n        # If the current index is a multiple of 3, add the list as a key to the result dictionary\n        if i % 3 == 0:\n            result[l1[i]] = l2[i]\n\n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*2\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is 1, it's the only element, so its sum is n.\n    if n == 1:\n        return n\n    \n    # Recursive case: sum up all possible values of f(n/2), f(n/3), f(n/4), f(n/5), and add n.\n    left_sum = get_max_sum(n//2) + n\n    right_sum = get_max_sum(n//3) + n\n    middle_sum = get_max_sum(n//4) + n\n    all_sum = max(left_sum, right_sum, middle_sum)\n    return all_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 21\n\n    # Recursive case\n    else:\n        # Find maximum sum for each possible choice of division of n\n        max_sum1 = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        max_sum2 = n\n\n        # Find maximum sum of the two cases\n        max_sum = max(max_sum1, max_sum2)\n\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    # Base case: if n is 1, it is the maximum sum possible\n    if n == 1:\n        return n\n\n    # Recursive case: calculate the maximum sum using the given equation\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case: if n is 1, the max sum is n\n    if n == 1:\n        return n\n    \n    # recursive case: calculate the max sum for n/2, n/3, n/4, and n/5\n    max_sum_half = get_max_sum(n//2)\n    max_sum_third = get_max_sum(n//3)\n    max_sum_fourth = get_max_sum(n//4)\n    max_sum_fifth = get_max_sum(n//5)\n    \n    # calculate the max sum for n using the given equation\n    max_sum = max(max_sum_half + max_sum_third + max_sum_fourth + max_sum_fifth, n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    result = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            result = [item]\n        elif len(item) == max_len:\n            result.append(item)\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Given a list, find the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the tuple contains duplicates\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove any duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty (i.e. all elements are unique)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Find the character with the smallest frequency\n    for char, freq_count in freq.items():\n        if freq_count == 1:\n            return char\n    \n    # If all characters have frequency greater than 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # Convert the string to a set, which automatically removes duplicates\n    unique_chars = set(str1)\n    # Loop through the unique characters and return the first one that appears more than once\n    for char in unique_chars:\n        if unique_chars.count(char) > 1:\n            return char\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    :param str1: a string\n    :return: the first non-repeated character in the string or None if no non-repeated character exists\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate through the frequency dictionary and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeated character exists, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq[char] += 1\n\n    # Loop through the dictionary again and find the first character with a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n    # Convert the set back to a list to sort the characters\n    sorted_chars = sorted(list(unique_chars))\n    # Find the first non-repeated character\n    for char in sorted_chars:\n        if sorted_chars.count(char) == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to a set to remove duplicates\n    str1 = set(str1)\n\n    # if there are no non-repeating characters, return None\n    if len(str1) == 1:\n        return None\n\n    # otherwise, iterate through the set to find the first non-repeating character\n    for char in str1:\n        return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(pattern, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the middle element\n    middle_element = sorted_numbers[1]\n    \n    # Return the middle element\n    return middle_element"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    # Sort the input numbers in ascending order\n    a_sorted = sorted([a,b,c])\n\n    # Calculate the midpoint of the sorted array\n    midpoint = len(a_sorted) // 2\n\n    # Check if the length of the sorted array is odd or even\n    if len(a_sorted) % 2 == 0:\n        # Calculate the average of the two middle numbers\n        median = (a_sorted[midpoint-1] + a_sorted[midpoint]) / 2\n    else:\n        # Return the middle number\n        median = a_sorted[midpoint]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of those numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Find the middle index of the sorted array\n    mid = len(nums) // 2\n\n    # If the length of the array is odd, return the middle element\n    if len(nums) % 2!= 0:\n        return nums[mid]\n\n    # If the length of the array is even, return the average of the two middle elements\n    else:\n        return (nums[mid - 1] + nums[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the midpoints of the sorted numbers\n    midpoint_a = sorted_numbers[1]\n    midpoint_b = sorted_numbers[2]\n\n    # Calculate the median based on the midpoints\n    median = (midpoint_a + midpoint_b) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median of the three numbers\n    median = sorted_numbers[len(sorted_numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the length of the list\n    n = len(numbers)\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If the list has an even number of elements, take the average of the two middle elements\n        median = (numbers[n//2-1] + numbers[n//2]) / 2.0\n    else:\n        # If the list has an odd number of elements, take the middle element\n        median = numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    numbers = sorted([a, b, c])\n    # Find the median\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the midpoint of the list\n    midpoint = len(sorted_list) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[midpoint]\n\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_list[midpoint - 1] + sorted_list[midpoint]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    # Calculate the length of the list\n    n = len(sorted_list)\n    # Calculate the middle index of the list\n    mid = n // 2\n    # If the length of the list is odd, the median is the middle number\n    if n % 2 == 1:\n        return sorted_list[mid]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Check if the sorted list has an odd number of elements\n    if len(sorted_numbers) % 2 == 1:\n        # Return the middle element\n        return sorted_numbers[len(sorted_numbers)//2]\n    else:\n        # Return the average of the two middle elements\n        return (sorted_numbers[len(sorted_numbers)//2-1] + sorted_numbers[len(sorted_numbers)//2]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits_list.append(digits_sum)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_num = sum(int(digit) for digit in str(num))\n        sum_of_digits_list.append(sum_of_digits_num)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(map(sum, map(int, map(str, nums))))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digits = sum(digits)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= (test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple to hold the xor of the tuples\n    result_tup = ()\n\n    # Iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize an empty list to store the result\n    result_list = []\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # calculate the bitwise xor of the corresponding elements in the two tuples\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # add the xor result to the result list\n        result_list.append(xor_result)\n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create a new tuple with the same length as the first tuple\n    result_tup = (0,) * len(test_tup1)\n    # Perform the mathematical bitwise xor operation on each element of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the resulting tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    # Perform the bitwise xor operation across the tuples\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n        \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Use the bitwise XOR operator to perform the bitwise xor operation\n    result_tup = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each tuple in the list\n    freq_dict = {}\n\n    # Loop through the list and add each tuple to the dictionary with a frequency of 1\n    for item in test_list:\n        if type(item) == tuple:\n            freq_dict[item] = 1\n        else:\n            # Convert the item to a tuple to handle non-tuple elements\n            item = (item,)\n            freq_dict[item] = 1\n\n    # Return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns the number of unique tuples in the list.\n    \"\"\"\n    # creating a set of unique tuples in the given list\n    unique_tuples = set(test_list)\n    # counting the number of unique tuples in the list\n    count = len(unique_tuples)\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(set(i))\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for i in test_list:\n        unique_tuples.add(tuple(i))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Use set to remove duplicates\n    unique_tuples = set(test_list)\n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store the unique tuples\n    unique_set = set()\n\n    # Loop through each element in the list\n    for element in test_list:\n        # If the element is not in the set, add it and increment its count in the set\n        if element not in unique_set:\n            unique_set.add(element)\n            unique_set[element] += 1\n\n    # Return the number of unique tuples\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        for tup in item:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the length of both tuples are equal.\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of both input tuples should be equal.')\n\n    # Initialize a new tuple to store the sum of elements.\n    new_tup = []\n\n    # Iterate over the elements of both tuples.\n    for i in range(len(test_tup1)):\n        # Check if the types of elements in the tuple are same.\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            raise TypeError('The types of elements should be same in both input tuples.')\n\n        # Add the elements of both tuples.\n        new_tup.append(test_tup1[i] + test_tup2[i])\n\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two given tuples must have the same length.\")\n        return\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # iterate over the tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #Checking if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length\")\n        return\n\n    #Iterating over the tuples\n    for i in range(len(test_tup1)):\n        #Appending the index wise addition of elements of both tuples\n        test_tup1[i] += test_tup2[i]\n\n    #Returning the modified tuple\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # get the length of the innermost tuple\n    inner_len = len(test_tup1[0])\n\n    # create a new empty list to store the result\n    result_list = []\n\n    # loop through the innermost tuple\n    for i in range(inner_len):\n        # initialize the current sum to 0\n        current_sum = 0\n\n        # loop through both tuples and add the corresponding elements\n        for tup1_elem, tup2_elem in zip(test_tup1, test_tup2):\n            current_sum += tup1_elem[i] + tup2_elem[i]\n\n        # append the current sum to the result list\n        result_list.append(current_sum)\n\n    # return the resulting tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup2[0])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if both the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both the input tuples must have the same length!\")\n        return\n\n    # Perform index wise addition of tuple elements in the two tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum value.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in the tuple.\") \n    else: \n        print(f\"{tuplex} does not exist in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists within the tuple.\")\n    else:\n        print(\"The element does not exist within the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # Check if tuple1 is a tuple\n    if not isinstance(tuple1, tuple):\n        return False\n    \n    # Check if element exists within tuple1\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # check if the element exists within the tuple\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print(f\"{tuple1} exists in {tuplex}.\") \n    else: \n        print(f\"{tuple1} does not exist in {tuplex}.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which we want to check if an element exists.\n    tuple1 (tuple): The tuple in which we want to search for an element in tuplex.\n\n    Returns:\n    bool: True if an element exists within tuplex, False otherwise.\n    \"\"\"\n    for elem in tuple1:\n        if elem in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!= 0:\n        if x % 2 == 0:\n            parity += 1\n        x = x // 2\n    if parity % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: # if x is even\n        return False # return False if x is even\n    else:\n        return True # return True if x is odd"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if the parity of x is odd, False otherwise.\n    \"\"\"\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = False\n    if x % 2 == 0: # if the number is even, parity is True\n        parity = True\n    return parity # return the parity of the number"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is even or odd\n    if x % 2 == 0:\n        return 'The number is even.'\n    else:\n        return 'The number is odd.'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # define a helper function to rearrange digits\n    def rearrange_digits(num):\n        # convert the number to a string and reverse it\n        s = str(num)[::-1]\n        # initialize the result variable with the reversed string\n        result = \"\"\n        # iterate over the digits in the reversed string\n        for digit in s:\n            # add the digit to the result if it's greater than or equal to 5\n            if int(digit) >= 5:\n                result += digit\n        # return the result as an integer\n        return int(result)\n\n    # initialize the result variable with the original number\n    result = n\n\n    # iterate over the digits in the original number\n    for digit in str(n):\n        # if the digit is less than 5, add it to the result as is\n        if int(digit) < 5:\n            result = result * 10 + int(digit)\n        # if the digit is greater than or equal to 5, rearrange its digits\n        else:\n            # rearrange the digits using the helper function\n            rearranged_digit = rearrange_digits(int(digit))\n            # add the rearranged digit to the result as is\n            result = result * 10 + rearranged_digit\n\n    # return the result as an integer\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    max_num = 9\n    num = n\n    \n    # Find the maximum value of num\n    while num > 0:\n        max_num = max(max_num, num % 10)\n        num //= 10\n    \n    # Rearrange the digits of num to create the next bigger number\n    new_num = 0\n    for i in range(max_num, -1, -1):\n        new_num += num % 10 * (max_num - i)\n        num //= 10\n    \n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a string and split it into its digits\n    digits = list(str(n))\n\n    # Find the largest digit\n    max_digit = max(digits)\n\n    # Find the index of the largest digit in the digits list\n    max_index = digits.index(max_digit)\n\n    # Reverse the digits except for the largest digit\n    for i in range(max_index):\n        digits[i], digits[-i-1] = digits[-i-1], digits[i]\n\n    # Convert the digits back to a number\n    next_bigger = int(''.join(digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Check if the input number is less than 10\n    if n < 10:\n        return n\n\n    # Check if the input number is greater than or equal to 1000000000000000000\n    if n >= 1000000000000000000:\n        n = str(n)\n        n = n[::-1]\n        for i in range(len(n)):\n            n = n[:i] + str(int(n[i])+1) + n[i+1:]\n            n = int(n)\n        return n\n\n    # Check if the input number is greater than or equal to 100000000000000000\n    elif n >= 100000000000000000:\n        n = str(n)\n        n = n[::-1]\n        for i in range(len(n)-1):\n            n = n[:i] + str(int(n[i])+1) + n[i+1:]\n            n = int(n)\n        n = n + str(int(n[-1])+1)\n        return int(n)\n\n    # Check if the input number is greater than or equal to 10000000000000000\n    elif n >= 10000000000000000:\n        n = str(n)\n        n = n[::-1]\n        for i in range(len(n)-2):\n            n = n[:i] + str(int(n[i])+1) + n[i+1:]\n            n = int(n)\n        n = n + str(int(n[-1])+1) + str(int(n[-2])+1)\n        return int(n)\n\n    # Check if the input number is greater than or equal to 1000000000000000\n    elif n >= 1000000000000000:\n        n = str(n)\n        n = n[::-1]\n        for i in range(len(n)-3):\n            n = n[:i] + str(int(n[i])+1) + n[i+1:]\n            n = int(n)\n        n = n + str(int(n[-1])+1) + str(int(n[-2])+1) + str(int(n[-3])+1)\n        return int(n)\n\n    # Check if the input number is greater than or equal to 100000000000000\n    elif n >= 100000000000000:\n        n = str(n)\n        n = n[::-1]\n        for i in range(len(n)-4):\n            n = n[:i] + str(int(n[i])+1) + n[i+1:]\n            n = int(n)\n        n = n + str(int(n[-1])+1) + str(int(n[-2])+1) + str(int(n[-3])+1) + str(int(n[-4])+1)\n        return int(n)\n\n    # Check if the input number is greater than or equal to 10000000000000\n    elif n >= 10000000000000:\n        n = str(n)\n        n = n[::-1]\n        for i in range(len(n)-5):\n            n = n[:i] + str(int(n[i])+1) + n[i+1:]\n            n = int(n)\n        n = n + str(int(n[-1])+1) + str(int(n[-2])+1) + str(int(n[-3])+1) + str(int(n[-4])+1) + str(int(n[-5])+1)\n        return int(n)\n\n    # Check if the input number is greater than or equal to 1000000000000\n    elif n >= 1000000000000:\n        n = str(n)\n        n ="
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    # Initialize the current and next bigger number\n    current = float(\"0.\" + n[1:])\n    next_bigger = float(\"1.\" + n[0])\n    # Check if the current number is greater than the next bigger number\n    if current > next_bigger:\n        # If yes, then move the next bigger number to current number\n        current, next_bigger = next_bigger, current\n    # Rearrange the digits of the next bigger number\n    next_bigger = int(str(next_bigger)[1:])\n    # Calculate the sum of the digits of the next bigger number\n    digit_sum = sum(next_bigger)\n    # Move the digit with the largest sum to the end of the number\n    while next_bigger % 10!= digit_sum:\n        digit_sum -= 10\n        next_bigger -= 1\n    next_bigger = str(next_bigger)[1:]\n    # Combine the digits of the current number and the next bigger number\n    next_bigger = next_bigger.zfill(len(n)) + n\n    # Convert the number to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits of the given number\n    digits = list(str(n))\n    # reverse the list of digits\n    digits.reverse()\n    # create a new list of digits\n    new_digits = []\n    # loop through the digits and append the smaller digits first\n    for digit in digits:\n        if digit < '9':\n            new_digits.append(digit)\n        else:\n            new_digits.append(int(digit) + 1)\n    # convert the new list of digits to a string and return it as the next bigger number\n    return int(''.join(new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.reverse()\n    digits[0] = str(int(digits[0]) + 1)\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    def rearrange_digits(num):\n        \"\"\"\n        Helper function to rearrange the digits of a given number.\n        \"\"\"\n        num = str(num)\n        digits = [int(digit) for digit in num]\n        digits.sort(reverse=True)\n        return int(\"\".join(map(str, digits)))\n\n    # Check if the given number is a palindrome\n    if n == rearrange_digits(n):\n        return rearrange_digits(n) + 1\n    else:\n        return rearrange_digits(n) - 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    n_str = str(n)\n    # reverse the string\n    n_str = n_str[::-1]\n    # loop through each digit and add it to a new string\n    new_str = \"\"\n    for digit in n_str:\n        # convert the digit to integer and add it to the new string\n        new_str += str(int(digit) + 1)\n    # convert the new string to an integer and return it\n    return int(new_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Create a list of digits in the number\n    num_list = [int(digit) for digit in num_str]\n    \n    # Reverse the list of digits\n    num_list.reverse()\n    \n    # Convert the list of digits back to a string\n    next_num_str = ''.join(map(str, num_list))\n    \n    # Convert the next bigger number to an integer and return it\n    return int(next_num_str)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def compare(a, b):\n        return a[1] < b[1]\n\n    heap = []\n    heapq.heapify(heap, key=lambda x: x[1])\n\n    for i in range(len(nums1)):\n        heapq.heappush(heap, [nums1[i], i])\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append([nums2[pair[1]], pair[0]])\n        if len(heap) < k:\n            continue\n        for i in range(len(nums1)):\n            if i == pair[1]:\n                continue\n            heapq.heappush(heap, [nums1[i], i])\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1 (list): A list of integers representing the first array.\n    nums2 (list): A list of integers representing the second array.\n    k (int): The number of pairs to find.\n\n    Returns:\n    list: A list of tuples representing the k smallest pairs. Each tuple contains two integers representing one element from the first array and one element from the second array.\n\n    \"\"\"\n\n    # Use a min heap to keep track of the k smallest pairs\n    heap = []\n\n    # Iterate through each pair of elements from the two arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n\n            # Calculate the absolute difference of the two elements\n            diff = abs(nums1[i] - nums2[j])\n\n            # If the difference is smaller than the smallest pair in the heap or if the heap is empty, add the current pair to the heap\n            if len(heap) == 0 or diff < heap[0][0]:\n                heapq.heappush(heap, (diff, (i, j)))\n\n            # If the heap size exceeds k, remove the smallest pair from the heap and add the current pair\n            elif len(heap) > k:\n                smallest_diff, smallest_pair = heapq.heappop(heap)\n                heapq.heappush(heap, (diff, (i, j)))\n\n            # If the smallest pair is equal to the current pair, compare the absolute difference of the current pair to the smallest pair in the heap and update the heap if necessary\n            else:\n                smallest_diff, smallest_pair = heap[0]\n                if abs(nums1[i] - nums2[j]) < smallest_diff:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (diff, (i, j)))\n\n    # Return the k smallest pairs\n    return [pair[1] for pair in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap of size k for the pairs\n    heap = []\n    count = 0\n    \n    # Iterate through both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Create a pair and add it to the heap if the heap is not full\n            if len(heap) < k:\n                pair = (nums1[i]+nums2[j], (i,j))\n                heapq.heappush(heap, pair)\n                count += 1\n            \n            # If the heap is full, check if the current pair is smaller than the smallest one in the heap\n            else:\n                if nums1[i]+nums2[j] < heap[0][0]:\n                    # Remove the smallest element from the heap\n                    smallest_pair = heapq.heappop(heap)\n                    # Create a new pair and add it to the heap\n                    new_pair = (nums1[i]+nums2[j], (i,j))\n                    heapq.heappush(heap, new_pair)\n                    count += 1\n    \n    # Return the count of pairs\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # Create a set of pairs of elements from both lists\n    pairs = set(zip(nums1, nums2))\n    \n    # Sort the set of pairs based on the sum of elements\n    pairs = sorted(pairs, key=lambda x: sum(x))\n    \n    # Initialize an empty list to store the k smallest pairs\n    result = []\n    \n    # Iterate over the sorted pairs\n    for pair in pairs:\n        # Check if the length of the result list is less than k\n        if len(result) < k:\n            # If yes, add the pair to the result list\n            result.append(pair)\n        # If the length of the result list is equal to k, compare the sum of elements with the minimum sum found so far\n        else:\n            # If the sum of elements is smaller than the minimum sum found so far, replace the minimum sum found so far with the sum of elements\n            if sum(pair) < result[0][0]:\n                result[0] = pair\n    \n    # Return the k smallest pairs found\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize the min heap with the first array\n    min_heap = [(-nums1[0], 0)]\n    \n    # Initialize variables to store the pairs\n    pairs = []\n    \n    # Iterate over the second array\n    for i, num2 in enumerate(nums2):\n        # While the size of the heap is less than k\n        while len(min_heap) < k:\n            # Pop the smallest element from the heap\n            _, index = heapq.heappop(min_heap)\n            # If the element is equal to the current element in the second array, skip it\n            if index == i:\n                continue\n            # Calculate the pair and add it to the pairs\n            pair = (-nums1[index], num2)\n            pairs.append(pair)\n            # Add the pair to the min heap\n            heapq.heappush(min_heap, pair)\n            \n    # Return the pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        value, (num1, num2) = heapq.heappop(heap)\n        result.append((num1, num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k > len(nums1) * len(nums2):\n        return []\n    \n    heap1 = []\n    heap2 = []\n    \n    for num in nums1:\n        heapq.heappush(heap1, -num)\n        \n    for num in nums2:\n        while len(heap1) > 0 and heap1[0] < -num:\n            heapq.heappop(heap1)\n        heapq.heappush(heap2, num)\n    \n    result = []\n    while k > 0 and len(heap2) > 0:\n        diff = -heapq.heappop(heap2)\n        if len(heap1) > 0 and -heap1[0] <= diff:\n            k -= 1\n            heapq.heappush(heap2, diff)\n        elif len(heap1) > 0:\n            diff = -heapq.heappop(heap1)\n            heapq.heappush(heap2, diff)\n        else:\n            result.append(diff)\n            k -= 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Sort the arrays in non-decreasing order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the arrays and find the k smallest pairs\n    i, j = 0, 0\n    while k > 0:\n        # Calculate the sum of the current pair\n        curr_sum = nums1[i] + nums2[j]\n\n        # If the sum is less than the current minimum, update the minimum\n        if not result or curr_sum < result[0][0]:\n            heapq.heappush(result, (curr_sum, (nums1[i], nums2[j])))\n\n        # If the sum is greater than the current maximum, update the maximum\n        if curr_sum > result[0][0]:\n            heapq.heappop(result)\n\n        # Move to the next pair of elements\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n\n        # Decrease the count of pairs\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n\n    for num in nums1:\n        heapq.heappush(heap1, num)\n        if len(heap1) > k:\n            heapq.heappop(heap1)\n\n        for _ in range(k):\n            if len(heap1) == 0:\n                break\n            if len(heap2) == 0:\n                break\n            if (heap1[0], heap2[0]) <= (heap1[0], heap2[1]):\n                heapq.heappush(heap2, heap1.pop(0))\n            else:\n                heapq.heappush(heap1, heap2.pop(0))\n\n    return heap1 + heap2"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the smallest k elements from both arrays\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Return the k smallest pairs as a list of tuples\n    result = []\n    for i in range(k):\n        min1 = heapq.heappop(min_heap)\n        min2 = heapq.heappop(min_heap)\n        result.append((min1, min2))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    # Initialize a variable to store the minimum product found so far\n    min_product = float('inf')\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the corresponding elements in the pairs of tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if this is the first product found so far or if the current product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return \"List is empty\"\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store minimum product and indices of minimum pair\n    min_product = float('inf')\n    min_pair = None\n    min_pair_index = None\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list from the next index\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare to the current minimum product\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n                min_pair_index = (i, j)\n\n    # Return the minimum product and the indices of the minimum pair\n    return min_product, min_pair_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize variables\n    min_product = float('inf')\n    min_pair = None\n\n    # Iterate through the list of tuples\n    for pair in list1:\n        # Check if the product of the pair is smaller than the current minimum\n        product = pair[0] * pair[1]\n        if product < min_product:\n            # Update the minimum if necessary\n            min_product = product\n            min_pair = pair\n\n    # Return the minimum pair\n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # create an empty dictionary to store the minimum products\n    min_products = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples and store it in the dictionary\n            product = list1[i][0] * list1[j][1]\n            min_products[(i, j)] = product\n            min_products[(j, i)] = product\n\n    # find the minimum product from the dictionary\n    min_product = float('inf')\n    for pair in min_products:\n        if min_products[pair] < min_product:\n            min_product = min_products[pair]\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        list1 (list): a list of tuples\n\n    Returns:\n        int: the minimum product of the pairs of tuples in list1\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0] * list1[j][1]\n            if pair_product < min_product:\n                min_product = pair_product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = float('inf')\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element in the list\n    min_val = listval[0]\n    # Iterate through the rest of the elements in the list\n    for val in listval[1:]:\n        # If the current value is smaller than the current minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to a large number\n    min_val = float('inf')\n    \n    # Loop through the list and find the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as an argument and returns the minimum value in the list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize a variable to store the minimum value\n    min_val = float('inf')\n    \n    # iterate over each element in the list\n    for num in listval:\n        # check if the current value is smaller than the minimum value\n        if num < min_val:\n            # update the minimum value\n            min_val = num\n    \n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)')\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    word = re.sub(r'(?<!^)(?=[A-Z])', r' ', word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [w.capitalize() for w in words]\n    # Join the words into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].capitalize()\n    \n    # Convert the rest of the letters to lowercase\n    for i in range(1, len(words)):\n        words[i] = words[i].lower()\n    \n    # Join the words back into a single string and return it\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), *map(str.lower, word[1:])])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into words based on underscores\n    words = re.findall(r'(?<=[a-z0-9])[A-Z]|(?<=\\d)[A-Z](?=[a-z])|(?<=[a-zA-Z0-9])[a-z0-9]+', word)\n\n    # Join the words into a camel case string\n    camel_case_word = ''.join(words).lower()\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word by underscores\n    words = word.split('_')\n    # Capitalizing the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Joining the words with camel case\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Convert each word to camel case format\n    camel_words = []\n    for word in words:\n        camel_word = ''\n        for char in word:\n            if char.isupper():\n                camel_word += char.lower()\n            else:\n                camel_word += char\n        camel_words.append(camel_word)\n    # Join the camel case words into a camel case string\n    return ''.join(camel_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string using regular expressions\n    camel_case_string = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    # Remove the leading and trailing underscores from the camel case string\n    return camel_case_string.lstrip('_').rstrip('_')"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list using a function.\n    \"\"\"\n    # Initialize an empty list to store the even numbers\n    even_list = []\n    # Loop through each number in the list\n    for num in l:\n        # If the number is odd, add it to the even_list\n        if num % 2!= 0:\n            even_list.append(num)\n    # Return the even_list with odd numbers removed\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to store the even numbers\n    even_list = []\n    # iterate over each element in the original list\n    for num in l:\n        # if the number is odd, append it to the even_list\n        if num % 2!= 0:\n            even_list.append(num)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"List is too small to extract element at position\", n)\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes in a list of tuples and an integer n and returns the nth element from the list.\n    If the nth element doesn't exist in the list, it returns None.\n    \"\"\"\n    # Check if the list is not empty\n    if len(list1) == 0:\n        return None\n    \n    # Find the index of the nth element from the end of the list\n    index = len(list1) - n\n    \n    # Check if the index is valid\n    if index < 0:\n        return None\n    \n    # Return the nth element\n    return list1[index]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Convert the list of tuples to a list of lists\n    list_of_lists = []\n    for tup in list1:\n        list_of_lists.append(list(tup))\n\n    # Extract the nth element from the list of lists\n    extracted_element = list_of_lists[n-1]\n\n    # Return the extracted element\n    return extracted_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0 or n > len(list1):\n        raise ValueError('Invalid input. n should be a positive integer less than or equal to the length of the list.')\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and returns the nth element of the list.\n    '''\n    if n > len(list1):\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # if the list is empty\n    if len(list1) == 0:\n        return None\n    # if the list has only one element\n    elif len(list1) == 1:\n        return list1[0][n]\n    # if the list has more than one element\n    else:\n        return list1[0][n] + extract_nth_element(list1[1:], n)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        raise ValueError(\"List has less than {} elements\".format(n))\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n and returns the nth element from the list.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if there is any value in `list1` that is present in `list2` or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n\n    # Create a set to store values in list1\n    set1 = set(list1)\n\n    # Iterate through list2 and check if any value in list2 exists in set1\n    for i in list2:\n        if i in set1:\n            return True\n\n    # If no value in list2 exists in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            print(f\"{item} exists in both lists\")\n            return\n    print(\"No value in list1 exists in list2\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set from list1\n    set1 = set(list1)\n\n    # Loop through list2 and check if each value exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no value in list2 exists in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    # Use a set to store values of list1\n    set1 = set(list1)\n\n    # Iterate over list2 and check if any of its values exist in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no value is found in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes in two lists and returns a boolean indicating whether or not any value in the first list exists in the second list.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1 (list): List of values to check.\n        list2 (list): List of values to check.\n\n    Returns:\n        bool: True if any value exists in both sequences, False otherwise.\n    \"\"\"\n    return any(x in list1 and x in list2 for x in list1 + list2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i])\n            elif product > max_pair[1]:\n                max_pair = (product, arr[j])\n    return max_pair[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    min_product = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n            elif current_product < min_product:\n                min_product = current_product\n                min_pair = (arr[i], arr[j])\n\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize maxProduct as the first element of the array\n    maxProduct = arr[0]\n    # Initialize maxSum as the negative sum of the array\n    maxSum = -sum(arr)\n    # Initialize minSum as the sum of the array\n    minSum = sum(arr)\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Calculate the current element's product and sum\n        currentProduct = arr[i] * maxProduct\n        currentSum = arr[i] * minSum\n\n        # Update maxProduct if current product is greater\n        if currentProduct > maxProduct:\n            maxProduct = currentProduct\n\n        # Update minSum if current product is smaller\n        if currentProduct < minSum:\n            minSum = currentProduct\n\n        # Update maxSum if current sum is greater\n        if currentSum > maxSum:\n            maxSum = currentSum\n\n    # Return the maximum sum\n    return maxSum"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    # create a copy of the array to avoid modifying the original array\n    arr_copy = arr.copy()\n    # sort the array in non-decreasing order\n    arr_copy.sort()\n    # initialize the maximum product and the maximum product for each index\n    max_product = float('-inf')\n    max_product_left = float('-inf')\n    max_product_right = float('-inf')\n    # loop through the array and update the maximum product and maximum product for each index\n    for i in range(len(arr_copy)):\n        if i % 2 == 0:\n            max_product = max(max_product, max_product_left * arr_copy[i])\n            max_product_left = max(max_product_left, max_product_right * arr_copy[i])\n        else:\n            max_product = max(max_product, max_product_right * arr_copy[i])\n            max_product_right = max(max_product_right, max_product_left * arr_copy[i])\n    # return the maximum product found\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest\n    product. If there are multiple pairs with the highest product, it returns the pair with\n    the smallest index. If there are no pairs with the highest product, it returns None.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    A tuple (pair1, pair2) where pair1 and pair2 are tuples of two integers, representing\n    the indices of the elements in arr that form the pair with the highest product. If there\n    are no pairs with the highest product, the function returns None.\n    \"\"\"\n    max_product = -float('inf')\n    max_pair = None\n    min_product = float('inf')\n    min_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (i, j)\n            if product < min_product:\n                min_product = product\n                min_pair = (i, j)\n\n    if max_pair is None:\n        return None\n    else:\n        return (arr[max_pair[0]], arr[max_pair[1]])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    # Initialize the maximum product and the two elements with the maximum product\n    max_product = float('-inf')\n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    # Iterate through the array and update the maximum product and the two elements with the maximum product\n    for num in arr:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max and num!= first_max:\n            second_max = num\n        \n        # Update the maximum product if the current number is part of the pair with the maximum product\n        if (num * first_max) > max_product:\n            max_product = num * first_max\n    \n    # Return the pair with the highest product\n    return first_max, second_max"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the indices of the two numbers that together have the largest product.\n\n    :param arr: A list of integers\n    :return: A tuple of two integers, representing the indices of the two numbers that together have the largest product.\n    \"\"\"\n\n    # Initialize two variables to store the maximum and minimum product\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Calculate the current product\n        current_product = arr[i] * arr[len(arr) - 1 - i]\n\n        # Update the maximum and minimum product if necessary\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n\n    # Return the indices of the two numbers that together have the largest product\n    return (arr.index(max_product), arr.index(min_product))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_product_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (i, j)\n    return max_product_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n\n    for tuple_ in Input:\n        common = True\n        for element in tuple_:\n            if element not in common_elements:\n                common = False\n                break\n        if common:\n            common_elements.append(tuple_[0])\n\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n\n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.remove(tup[0])\n        else:\n            common_elements.append(tup[0])\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = None\n    count = 0\n    for tup in Input:\n        if tup[0] == first_element:\n            count += 1\n        else:\n            if count > 0:\n                print(first_element, count)\n            first_element = tup[0]\n            count = 1\n    if count > 0:\n        print(first_element, count)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and finds the common first element among all the tuples in the list.\n    '''\n    #creating an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    #iterating through the list of tuples\n    for t in Input:\n        #if the first element of the tuple is already in the count_dict, adding 1 to its count\n        if t[0] in count_dict:\n            count_dict[t[0]] += 1\n        else:\n            #if the first element of the tuple is not already in the count_dict, adding it with a count of 1\n            count_dict[t[0]] = 1\n    #finding the first element in the count_dict with the maximum count\n    common_first = max(count_dict, key=count_dict.get)\n    #returning the common first element\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    common = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j and Input[i][0] == Input[j][0]:\n                common.append(Input[i][0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in Input:\n        common.append(i[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common.append(i)\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0] == common_element:\n                pass\n            elif tup[0] < common_element:\n                common_element = tup[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_element.append(Input[i][0])\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                if common_element is None: \n                    common_element = Input[i][0] \n                else: \n                    common_element = (common_element, Input[j][0])\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max([len(s) for s in lst])\n    return [s for s in lst if len(s) == max_len][0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n            max_elem = lst[i]\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an input and returns the element having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # get the length of the list\n    length = len(lst)\n    \n    # initialize variables\n    max_length = length \n    max_element = lst[0]\n    \n    # loop through the list and find the maximum length\n    for i in range(1, length):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    \n    # return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize two variables to store the maximum and minimum length of the list respectively\n    max_length = 0\n    min_length = float('inf')\n\n    # Iterate through each element in the list\n    for i in lst:\n        # Update the maximum and minimum length of the list\n        if len(i) > max_length:\n            max_length = len(i)\n\n        if len(i) < min_length:\n            min_length = len(i)\n\n    # Return the element of the list having the maximum length\n    return lst[lst.index(max(lst, key=len)) if lst.count(max(lst, key=len)) > 1 else 0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num_rounded = round(num)\n        total_sum += num_rounded\n    \n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Define a function to round a number\n    def round_number(num):\n        return round(num)\n    \n    # Round every number in the list\n    rounded_list = [round_number(num) for num in list1]\n    \n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n    \n    # Multiply the total sum by the length of the list and print it\n    print(total_sum * len(rounded_list))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        num = round(num)\n        total += num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        rounded_num = round(i)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    total_sum *= len(list1)\n    return round(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(\"The total sum of the rounded numbers is:\", total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initialize the sum variable and the count variable\n    total_sum = 0\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in list1:\n        # Round the element to the nearest integer\n        rounded_element = round(element)\n        \n        # Update the total sum and count variables\n        total_sum += rounded_element\n        count += 1\n    \n    # Print the total sum multiplied by the length of the list\n    print(total_sum * count)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    cube_sum = 0\n    for num in even_numbers:\n        cube_sum += num ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**3\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**3\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    num = 2\n    while num <= n:\n        sum_of_cubes += num ** 3\n        num += 2\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of a tuple by a delimiter.\n    \n    Args:\n    - test_tup: the tuple to concatenate\n    - delimiter: the delimiter to use for concatenation\n    \n    Returns:\n    - the concatenated string\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): a tuple of strings.\n    delimiter (str): a delimiter to use to join the strings.\n\n    Returns:\n    concatenated_str (str): a string that contains all the concatenated elements of the tuple separated by the delimiter.\n    '''\n    concatenated_str = delimiter.join(test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]  # Removing the last delimiter from the string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-2]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n\n    # Calculate the cube of each natural number and add it to the sum\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    avg = total/count\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, avg))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    sum = 0  \n    for i in range(1,n+1):  \n        sum = sum + i**3  \n    average = sum/n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes/n\n    print(\"The average of cubes of first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(i)\n    return [test_tuple[i] for i in rear_indices]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, x in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_indices.append(x)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    Count the number of sublists containing a particular element in a list.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function filters out odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n        nums: a list of integers\n\n    Returns:\n        a list of odd integers in the input list\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = [num for num in nums if num % 2!= 0]\n    return filtered_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date string to datetime object\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Search for the pattern in the date string using the re.search() function\n    result = re.search(pattern, dt)\n    # If the pattern is found, extract the year, month, and day and convert it to dd-mm-yyyy format\n    if result:\n        year = result.group(0)[0:4]\n        month = result.group(0)[5:7]\n        day = result.group(0)[8:10]\n        formatted_date = day + '-' + month + '-' + year\n        return formatted_date\n    # If the pattern is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regex pattern to match the format of yyyy-mm-dd\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use re.sub() to replace the date format with dd-mm-yyyy\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date format from yyyy-mm-dd to mm/dd/yyyy\n    year_pattern = r'[0-9]{4}'\n    month_pattern = r'[0-9]{2}'\n    day_pattern = r'[0-9]{2}'\n    year = re.sub(year_pattern, r'\\1', dt)\n    month = re.sub(month_pattern, r'\\2', year)\n    day = re.sub(day_pattern, r'\\3', month)\n    yyyy_mm_dd = re.sub(r'[^\\d]', '', dt)\n    # Convert mm/dd/yyyy to dd-mm-yyyy\n    mm_dd_yyyy = '/'.join([day, month, year])\n    # Convert dd-mm-yyyy to dd/mm/yyyy\n    dd_mm_yyyy = re.sub(r'[^\\d]', '', mm_dd_yyyy)\n    return dd_mm_yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match date format\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the date string using the regular expression\n    match = re.match(regex, dt)\n    # Convert the matched date string to a datetime object\n    date_obj = datetime.datetime.strptime(match.group(0), '%Y-%m-%d')\n    # Format the datetime object as dd-mm-yyyy\n    new_date = date_obj.strftime('%d-%m-%Y')\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    # extract the year, month, and day from the match object\n    year, month, day = match.groups()\n    # convert the year, month, and day to dd-mm-yyyy format\n    new_dt = f'{day}-{month}-{year}'\n    # return the new date string\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # use the re.sub() method to replace the format with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # regex to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # using the pattern to search for the date and replace it with dd-mm-yyyy format\n    date_str = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.sub() function to replace the matched pattern with dd-mm-yyyy format\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the length of the list\n    length = len(my_list)\n\n    # Initialize gap value\n    gap = length // 2\n\n    # Main loop to iterate through the list\n    while gap > 0:\n\n        # Perform insertion sort on the list\n        for i in range(gap, length):\n            j = i\n            temp = my_list[i]\n\n            # Move elements of the list that are greater than temp to one position ahead\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            # Insert temp at the correct position\n            my_list[j] = temp\n\n        # Decrease the gap value\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Perform insertion sort on increasing subarrays of size 10\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    # Move the largest element to the end\n    my_list[-1], my_list[0] = my_list[0], my_list[-1]\n\n    # Repeat step 1 on the entire array\n    shell_sort(my_list[:-1])"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array by using shell sort.\n\n    Args:\n        my_list (list): The array to be sorted.\n\n    Returns:\n        list: The sorted array.\n    \"\"\"\n\n    n = len(my_list)\n\n    # The gap sequence is calculated as 3n/2 + 1\n    gap = n // 2\n\n    while gap > 0:\n        # Performing insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 3  # Reducing the gap size\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step size\n    step = n // 2\n    # Keep reducing the step size until it is 1\n    while step > 0:\n        # Insertion sort for elements of size step\n        for i in range(step, n):\n            key = my_list[i]\n            j = i\n            while j >= step and my_list[j-step] > key:\n                my_list[j] = my_list[j-step]\n                j -= step\n            my_list[j] = key\n        # Reduce step size\n        step //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step 1: Find the largest gap such that gap is an integer\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Perform insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            # Move elements of arr[0..i-1], that are\n            # greater than key, to one position ahead\n            # of their current position\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        # Reduce the gap size\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length.\")\n        return None\n    \n    # check if both tuples are of the same type\n    if not all(isinstance(i, type(test_tup1[0])) for i in test_tup1):\n        print(\"Both tuples must have same data type.\")\n        return None\n    \n    # elementwise and of the tuples\n    result_tup = tuple(map(lambda x,y: x&y, test_tup1, test_tup2))\n    \n    # return the resultant tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n\n    # create a new tuple of the same length as the input tuples\n    and_tup = ()\n\n    # iterate through the input tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    # return the new and_tup\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the element-wise and tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return None\n    else:\n        and_tup = tuple([x & y for x, y in zip(test_tup1, test_tup2)])\n        return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Get the lengths of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize an empty list to store the and tuples\n    and_tup = []\n\n    # Loop through each element of the two tuples\n    for i in range(min(len1, len2)):\n        # Extract the i-th element from each tuple\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Compute the and tuple and add it to the list\n        and_tup.append((elem1 & elem2))\n\n    # If the two tuples have different lengths, add the remaining elements\n    if len1 > len2:\n        for i in range(len2, len1):\n            elem1 = test_tup1[i]\n            elem2 = None\n            # Compute the and tuple and add it to the list\n            and_tup.append((elem1 & elem2))\n    elif len2 > len1:\n        for i in range(len1, len2):\n            elem1 = None\n            elem2 = test_tup2[i]\n            # Compute the and tuple and add it to the list\n            and_tup.append((elem1 & elem2))\n\n    # Return the and tuples list\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n\n    # Extract the elementwise and tuples from the input tuples\n    and_tup = [tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (True,)\n        else:\n            result_tup += (False,)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return None\n    else:\n        result_list = []\n        for i in range(len(test_tup1)):\n            result_list.append(test_tup1[i] & test_tup2[i])\n        return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(a & b) for a, b in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        print(\"The directrix is:\", root1, \"and\", root2)\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"The directrix is:\", root)\n    else:\n        print(\"The parabola has no real solutions.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the two roots of the discriminant\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n        # Sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n\n        return root1, root2\n    else:\n        # The discriminant is zero, so the directrix is a single root\n        return (-b) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (-b +/- ((b**2 - 4*a*c)**0.5)) / (2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculating the discriminant\n    disc = b ** 2 - 4 * a * c\n    \n    # Checking if the discriminant is positive or negative\n    if disc >= 0:\n        # Calculating the two roots of the discriminant\n        root1 = (-b + disc ** 0.5) / (2 * a)\n        root2 = (-b - disc ** 0.5) / (2 * a)\n        \n        # Sorting the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Returning the directrix\n        return roots[0]\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c >= 0:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/2/a\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/2/a\n        return x1, x2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root\n    else:\n        print(\"Discriminant is negative, so no roots exist\")\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"No real root\")\n    elif delta == 0:\n        x = -b/(2*a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is\", x1, \"or\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        print(\"The directrix is not real.\")\n    else:\n        x1 = (-b + determinant**0.5)/(2*a)\n        x2 = (-b - determinant**0.5)/(2*a)\n        print(\"The directrix is {:.2f}\".format(x1))\n        print(\"The directrix is {:.2f}\".format(x2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        print(\"The parabola does not have a directrix\")\n    else:\n        root1 = (-b + determinant**0.5) / (2*a)\n        root2 = (-b - determinant**0.5) / (2*a)\n        print(\"The directrix of the parabola is\", root1, \"or\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the quadratic equation ax^2 + bx + c = 0\n    quadratic_equation = (b**2) - (4*a*c)\n\n    # Calculate the two roots of the quadratic equation\n    root1 = (-b + quadratic_equation**0.5) / (2*a)\n    root2 = (-b - quadratic_equation**0.5) / (2*a)\n\n    # Return the root that is closest to the x-axis\n    return root1 if abs(root1) <= abs(root2) else root2\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of all the elements in list1\n    set1 = set(list1)\n\n    # Loop through list2 and check if any of its elements are also in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # If we make it through the entire loop without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    return bool(common_elements)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    # iterate over the first list\n    for element in list1:\n        # check if the element is in the second list\n        if element in list2:\n            # if it is, add it to the list of common elements\n            common.append(element)\n    # if there are any common elements, return True\n    if common:\n        return True\n    # if not, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    # Iterate through the lists and check for common elements\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # check if there is at least one element in common\n    if set1 & set2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height\n    half_height = 0.5 * height\n    left_area = area - half_height * base2\n    right_area = area - half_height * base1\n    mid_area = left_area + right_area\n    median = 0.5 * (base1 * area + base2 * right_area + base1 * left_area + base2 * mid_area)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the length of each half of the trapezium\n    half_height = height / 2\n    \n    # Calculate the length of the first half\n    first_half_length = area / (base1 + base2)\n    \n    # Calculate the length of the second half\n    second_half_length = area - first_half_length\n    \n    # Determine the median length by comparing the lengths of the two halves\n    if first_half_length > second_half_length:\n        median = first_half_length\n    else:\n        median = second_half_length\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    This function takes the base lengths of two trapezium sides and the height of the trapezium as inputs.\n    It then calculates the length of the middle section of the trapezium using the formula:\n    L = (b1 + b2) / 2\n    and the length of the longest section of the trapezium using the formula:\n    L = (b1 + h) / 2\n    Finally, it calculates the median length of the trapezium by comparing the lengths of the two sections.\n    \"\"\"\n    \n    # Calculate the length of the middle section of the trapezium\n    L = (base1 + base2) / 2\n    \n    # Calculate the length of the longest section of the trapezium\n    L_longest = (base1 + height) / 2\n    \n    # Compare the lengths of the two sections and return the median length\n    if L > L_longest:\n        return L_longest\n    else:\n        return L"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    trapezium_length = 2 * (base1 + base2) + height\n    trapezium_area = 0.5 * (base1 * height + base2 * height)\n    median_length = (trapezium_length - trapezium_area) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    base_area = 0.5 * base1 * height\n    trapezium_area = 0.5 * base2 * height\n    sum_area = area + base_area + trapezium_area\n    median_area = sum_area / 3\n    \n    if median_area > area:\n        return 'The trapezium cannot have a median area greater than its area.'\n    else:\n        return 'The trapezium has a median area of {}'.format(median_area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium given its base1, base2, and height.\n\n    :param base1: The length of the base of the first half of the trapezium.\n    :param base2: The length of the base of the second half of the trapezium.\n    :param height: The height of the trapezium.\n    :return: The median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base2 * height\n\n    # Calculate the length of the longest side of the trapezium\n    longest_side = math.sqrt(2 * area / height)\n\n    # Return the median length of the trapezium\n    return longest_side"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    base = (base1 + base2) / 2\n    half_height = height / 2\n\n    top_area = area - base\n    bottom_area = area - base1 - base2\n    mid_area = area - top_area - bottom_area\n\n    if top_area > bottom_area:\n        if top_area > mid_area:\n            return base1 + 2 * (base1 * top_area / area)\n        else:\n            return base1 + 2 * (base1 * mid_area / area)\n    else:\n        if bottom_area > mid_area:\n            return base2 + 2 * (base2 * bottom_area / area)\n        else:\n            return base2 + 2 * (base2 * mid_area / area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1: float\n        The length of the first base of the trapezium.\n    base2: float\n        The length of the second base of the trapezium.\n    height: float\n        The height of the trapezium.\n\n    Returns:\n    float:\n        The median length of the trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the lengths of the trapezium's base and sides\n    side1 = 0.5 * base1 * (1 - height / 2)\n    side2 = 0.5 * base2 * (1 + height / 2)\n\n    # Calculate the lengths of the trapezium's angles\n    angle1 = (base1 - side1) / (base1 + side1)\n    angle2 = (base2 - side2) / (base2 + side2)\n\n    # Calculate the median length of the trapezium's side\n    if area >= 2 * angle1 + 2 * angle2:\n        median = (side1 + side2) / 2\n    else:\n        median = side1\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the semi-perimeter and area of the trapezium\n    s = (base1 + base2) / 2\n    area = math.sqrt(s * (s - base1) * (s - base2))\n\n    # Calculate the height of the base\n    h = height\n\n    # Calculate the lengths of the bases\n    l1 = base1 * height / 2\n    l2 = base2 * height / 2\n\n    # Calculate the length of the trapezium\n    t = l1 + l2\n\n    # Calculate the length of the midpoint of the trapezium\n    m = (t / 2) + (h / 2)\n\n    # Calculate the median length of the trapezium\n    med = (m + l1 + l2) / 3\n\n    return med"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the half of the trapezium on top and bottom\n    half_area_top = area / 2\n    half_area_bottom = area / 2\n    # Calculate the length of the top and bottom half of the trapezium\n    top_half = half_area_top ** 0.5\n    bottom_half = half_area_bottom ** 0.5\n    # Calculate the length of the trapezium\n    total_length = top_half + bottom_half\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * total_length\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            print(i)\n            break\n    else:\n        print(\"The number is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f'{number} is greater than {i}.')\n            return True\n    print(f'{number} is not greater than any element of the array.')\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=b+b)')\n    return bool(pattern.search(text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b*b*)'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.{1,}b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a(?=b*b)\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if the string contains an a followed by one or more b's, and False otherwise.\n    '''\n    \n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a string that contains only the matched text.\n    '''\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    matched_text = ''\n    for match in matches:\n        matched_text += match\n    return matched_text"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function finds the last digit of a given number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The last digit of the given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the integer.\n    \"\"\"\n    # check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    # check if the input is greater than zero\n    elif n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    # find the last digit of the input number\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nums = []\n    for num in list1:\n        if num < 0:\n            negative_nums.append(num)\n    return negative_nums"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with odd characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if ord(char) % 2 == 1:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Initialize a variable to keep track of the count of even characters\n    even_count = 0\n    # Loop through the list of characters\n    for char in str_list:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is odd, remove it from the list\n            str_list.remove(char)\n            # Increment the count of even characters\n            even_count += 1\n    # Return the modified list with even characters removed\n    return ''.join(str_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    # Convert the string to a list of characters\n    chars = list(string)\n\n    # Create an empty list to store the even characters\n    even_chars = []\n\n    # Loop through the characters and add the even characters to the even_chars list\n    for char in chars:\n        if char % 2 == 0:\n            even_chars.append(char)\n\n    # Join the even characters back into a string and return it\n    return ''.join(even_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty string to store the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is odd, add it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the odd characters\n    odd_str = \"\"\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is an odd number, add it to the odd_str\n        if int(char) % 2!= 0:\n            odd_str += char\n    # Return the odd_str\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char in ['a', 'e', 'i', 'o', 'u']])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns a new string where all the odd characters are removed.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            if char.isupper():\n                new_str += char.lower()\n            elif char.islower():\n                new_str += char.upper()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the new string\n    new_str = ''\n    # loop through each character in the original string\n    for char in str1:\n        # if the character is even, add it to the new string\n        if char % 2 == 0:\n            new_str += char\n        # if the character is odd, add an underscore to the new string\n        else:\n            new_str += '_'\n    # return the new string with all odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count bidirectional tuple pairs in a list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] or test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0:i+1] and (test_list[j][0], test_list[i][1]) in test_list[i][0:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through the list of integers\n    for num in L:\n        # If the current number is a multiple of 3, add it to the result variable\n        if num % 3 == 0:\n            result += num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    single_num = 1\n    for num in L:\n        single_num = single_num * num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n    \n    # Iterate over the list of integers\n    for num in L:\n        # If the current integer is a multiple of 3, add it to the result\n        if num % 3 == 0:\n            result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of integers\n    sum_of_integers = 0\n    # iterate over the list of integers\n    for num in L:\n        # check if the current integer is multiple of 3\n        if num % 3 == 0:\n            # add the integer to the sum\n            sum_of_integers += num\n        else:\n            # otherwise, multiply the integer by 3 and add it to the sum\n            sum_of_integers += 3 * num\n    # return the sum of integers\n    return sum_of_integers"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the single integer with 0\n    single_int = 0\n    \n    # Loop through the list of integers and add them to the single integer\n    for num in L:\n        single_int += num\n        \n    # Return the single integer\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for num in L:\n        single_number *= num\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over each element in the list\n    for num in L:\n        # If the element is a multiple of 3, add 3 to the result\n        if num % 3 == 0:\n            result += 3\n        # If the element is a multiple of 4, add 4 to the result\n        elif num % 4 == 0:\n            result += 4\n        # If the element is a multiple of 6, add 6 to the result\n        elif num % 6 == 0:\n            result += 6\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(very|very\\s?much|actually|just|sooooo|alright|very\\s?good|very\\s?well|extremely|well|great|well\\s?done|awfully|well\\s?done\\s?done|actually\\s?done|awfully\\s?good|much|very\\s?much\\s?done|perfectly|incredibly|amazingly|amazingly|awesomeness|awesomeness\\s?done)\\b'\n\n    # Use the regular expression pattern to search for adverbs in the given text\n    matches = re.finditer(adverb_pattern, text)\n\n    # Create a list to store the adverb and its position in the sentence\n    adverbs = []\n\n    # Iterate over the matches and add the adverbs and their positions to the list\n    for match in matches:\n        adverb = match.group()\n        adverb_pos = match.start()\n\n        # Check if the previous character is a whitespace or a punctuation mark\n        prev_char = text[adverb_pos-1]\n        if prev_char in (' ', '.', ',', '!', '?'):\n            adverb_pos -= 1\n            prev_char = text[adverb_pos-1]\n\n        # Check if the previous character is a punctuation mark\n        if prev_char in (',', '.', '!', '?'):\n            adverb_pos -= 1\n            prev_char = text[adverb_pos-1]\n\n        # Check if the previous character is a noun or a pronoun\n        if not (prev_char.isalpha() and prev_char.lower() in ('a', 'an', 'the')):\n            adverb_pos -= 1\n\n        # Add the adverb and its position to the list\n        adverbs.append((adverb, adverb_pos))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\w+', text)\n\n    # Initialize variables to store the adverb and its position in the sentence\n    first_adverb = None\n    adverb_position = None\n\n    # Iterate through the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b\\w+\\b', word, re.IGNORECASE):\n            # Check if this is the first adverb\n            if not first_adverb:\n                first_adverb = word\n                adverb_position = i\n            # If this is not the first adverb, check if this is a separate adverb\n            elif re.search(r'\\b\\w+\\b', words[i+1], re.IGNORECASE):\n                adverb_position = i+1\n                break\n\n    # Return the adverb and its position\n    return first_adverb, adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Use regular expressions to find all adverbs in the sentence\n    adverb_pattern = re.compile(r'\\b(?:adverb|adv|adv\\w*)\\b')\n    # Find all matches of the pattern in the text\n    matches = adverb_pattern.findall(text)\n    # Iterate over the matches and extract the adverb and its position in the sentence\n    for match in matches:\n        # Split the match into the adverb and its position\n        parts = match.split(' ')\n        # If the position is a number, convert it to an integer\n        if parts[1].isdigit():\n            parts[1] = int(parts[1])\n        # Add the adverb to the list of adverbs and its position to the list of adverb positions\n        adverbs.append((parts[0], parts[1]))\n    # Sort the adverb positions by position\n    adverbs.sort(key=lambda x: x[1])\n    # Return the adverb positions and their adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Pattern to match adverbs\n    pattern = re.compile(r'\\b(very|very\\s*fast|quite|rather|much|hardly|slightly|slightly\\s*slow|slowly|rudely|seriously|extremely)\\b')\n\n    # Find all matches in the given sentence\n    matches = pattern.findall(text)\n\n    # Check if any matches were found\n    if not matches:\n        return None\n\n    # Sort the matches by their position in the sentence\n    matches = sorted(matches, key=lambda x: text.find(x))\n\n    # Find the first adverb and its position\n    adverb = matches[0]\n    position = text.find(adverb)\n\n    # Return the adverb and its position\n    return adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Use regular expressions to find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*[a-z]*[aeiou]\\w*s?[a-z]*\\b', text)\n    \n    # Print the adverbs and their positions\n    print(\"Adverbs and their positions in the sentence:\")\n    for i, adverb in enumerate(adverbs):\n        print(f\"{i+1}. {adverb}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(really|badly|well|kindly|sadly|angrily|helpfully|amazingly|fantastically|delightfully|amazingly|amazingly|fantastical|delightful|awfully|unusually|terribly|wholly|quite|partly|really|fairly|quickly|seriously|completely|pretty|extremely|absolutely|positively|enthusiastically|excitedly|elegantly|thrillingly|insanely|dramatically|gloriously|horrifically|horribly|grossly|massively|massively|screamingly|incredibly|aweso|awesom|awesomen|awesomer|awesomest|awesomestly|awesomity|awesomize|awesomizing|awesomeness|awesomnesses|awesomnesses|awesomnesses|awesomness|awesomnesses|awesomnesses|awesomnes|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesomnesses|awesom"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b([a-zA-Z]+)\\b\\s*([a-zA-Z]+)\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    for match in matches:\n        # Append the adverb and its position to the list\n        adverbs.append((match[0], match[1]))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(very|really|seriously|hardly|barely|not|quite|soooo|absolutely|frankly|ultimately|certainly|almost|actually|actually|probably|probably|definitely|absolutely|irretrievably|surely|surely|totally|absolutely|absolutely|just|just|right|right|wrong|wrong|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    # regex pattern for finding adverbs\n    pattern = r'\\b([a-z]+)\\b\\s*(?=\\W)'\n\n    # iterate over words in the sentence\n    for word in re.findall(pattern, text):\n        # check if the word is an adverb\n        if re.match(r'\\b([a-z]+)\\b', word):\n            adverbs.append((word, text.index(word)))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    \n    # create a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n    \n    # loop through each adverb and its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        # if the adverb is not in the dictionary, add it\n        if adverb not in adverb_positions:\n            adverb_positions[adverb] = []\n        # add the position of the adverb to the list of adverb positions for that adverb\n        adverb_positions[adverb].append(i)\n    \n    # return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Define the surface area of a cube as the volume of the cube multiplied by 6\n    surface_area = l**3 * 6\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using the formula 6*l^2\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using the formula A = 6 l^2\n    A = 6 * l**2\n    \n    # Return the surface area\n    return A"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l * l # surface area of a cube\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 6 * l + 6\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = 0\n    negative_num = 0\n    for num in nums:\n        if num > 0:\n            positive_num += 1\n        else:\n            negative_num += 1\n    ratio = float(positive_num) / (positive_num + negative_num)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i', [n for n in nums if n > 0])\n    negative_nums = array('i', [n for n in nums if n < 0])\n    total_nums = len(nums)\n    positive_count = len(positive_nums)\n    negative_count = len(negative_nums)\n    return positive_count / total_nums, negative_count / total_nums"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_array = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in num_array:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i')\n    \n    # loop through the array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            positive_array.append(1)\n        else:\n            positive_array.append(0)\n    \n    # calculate the ration of positive numbers\n    total_count = sum(positive_array)\n    positive_ratio = total_count / len(nums)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a list to store the positive numbers\n    pos_nums = []\n    # Loop through the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Add it to the positive number list\n            pos_nums.append(num)\n    # Check if there are any positive numbers\n    if not pos_nums:\n        # Return 0 if there are no positive numbers\n        return 0\n    # Calculate the sum of the positive numbers\n    pos_sum = sum(pos_nums)\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_sum / len(nums)\n    # Return the ration\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an empty array to store the count of positive numbers\n    count = array('i', [0])\n\n    # Loop through the input array and increment the count for positive numbers\n    for num in nums:\n        if num > 0:\n            count.itemset(0, count.item(0) + 1)\n\n    # Calculate the ration of positive numbers and return it as a float\n    return count.item(0) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Count the number of positive numbers in the array\n    count = nums.count(1)\n    # Calculate the ratio of positive numbers to the total number of numbers\n    ratio = count / len(nums)\n    \n    # Return the ratio as a float\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array to store the positive numbers\n    pos_nums = array('i')\n\n    # Iterate through the array and add the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n\n    # Check if there are any positive numbers in the array\n    if not pos_nums:\n        return 0\n\n    # Calculate the length of the positive numbers array\n    pos_count = len(pos_nums)\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        total += 1\n    return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0] * (1 + max(nums)))\n    for num in nums:\n        count[num] += 1\n    positive_ratio = sum(x / len(nums) for x in count[1:])\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # Initialize largest negative number to be the first element of the list\n    largest_neg_num = list1[0]\n\n    # Traverse through the list to find the largest negative number\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n\n    return largest_neg_num\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # Initialize largest negative number with negative infinity\n    \n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') #initialize maximum negative number to negative infinity\n\n    #loop through the list and compare each element with the current maximum\n    for num in list1:\n        if num < 0:\n            if num > max_neg: #if the current number is greater than the current maximum\n                max_neg = num #update the maximum negative number\n\n    return max_neg #return the maximum negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number in a list of integers.\n\n    Args:\n        list1 (list): A list of integers.\n\n    Returns:\n        int: The largest negative number in the list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            max_neg = max(max_neg, num)\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    '''\n    Function to find the largest negative number from a given list of numbers.\n    '''\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') # initialize the max_neg variable as negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg: # if the current number is negative and greater than max_neg, update max_neg\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(len(test_list[i])):\n            if j < K:\n                temp.append(test_list[i][j])\n        result.append(tuple(temp))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i:i+K] for i in range(len(tup), 0, -1))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            trimmed_list.append(test_list[i][:K])\n        else:\n            trimmed_list.append(test_list[i])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize the list to store the trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # If the length of the tuple is greater than or equal to K, trim it and append it to the list\n        if len(tup) >= K:\n            trimmed_list.append(tup[K:])\n        # If the length of the tuple is less than K, pad it with zeros and append it to the list\n        else:\n            padded_tup = (0,) * (K - len(tup)) + tup\n            trimmed_list.append(padded_tup)\n    # Return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i:i+K] for i in range(0, len(tup), K))\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        while len(tup) > K:\n            tup = tup[:-1]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        trimmed_list = [j for j in test_list[i] if j!= None]\n        test_list[i] = trimmed_list[:K] if len(trimmed_list) > K else trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Checking if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1) == len(test_tup2):\n        # Initializing the result tuple with the same length as the input tuples\n        result_tup = tuple([0] * len(test_tup1))\n        # Looping through the tuples and multiplying the elements at their respective indexes\n        for i in range(len(test_tup1)):\n            result_tup[i] = test_tup1[i] * test_tup2[i]\n        # Returning the result tuple\n        return result_tup\n    else:\n        # If the length of the input tuples is not equal, raise an exception\n        raise Exception(\"The length of the two input tuples must be equal.\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = [0]*len(test_tup1)\n\n    # Perform the index wise multiplication\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid length of tuples'\n\n    # Initialize a new tuple to store the result\n    result_tup = ()\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Multiply the elements of the two tuples and add the result to the result tuple\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # Return the new result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for elem in tup:\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) # Count the frequency of each element in the list\n    count_dict = {k: v for k, v in count_dict.items() if k in tup} # Filter the count dictionary to only include elements in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are the count of each element in the tuple.\n    '''\n    count = Counter(tup)\n    return {k: v for k, v in count.items() if k in lst}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    count = Counter(lst)\n    for elem in tup:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_dict = dict(count)\n    for key in count_dict:\n        if key in lst:\n            count_dict[key] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(tup)\n    count_dict.update(lst)\n\n    for key, value in count_dict.items():\n        print(f\"{key}: {value}\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter from collections module to count the occurrence of each element in the list\n    count = Counter(lst)\n    # Using Counter from collections module to count the occurrence of each element in the tuple\n    for i in tup:\n        if i in count:\n            count[i] += 1\n    # Return the final dictionary of count of occurrence of all elements in the tuple\n    return dict(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    result = [] \n    for i in tup: \n        if i in count: \n            result.append(count[i]) \n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result_dict = {}\n    for key, value in count_dict.items():\n        for t in tup:\n            if key == t:\n                if key in result_dict:\n                    result_dict[key] += value\n                else:\n                    result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two parameters - tup and lst.\n    tup is the tuple which we want to count the occurrence of elements in lst.\n    lst is the list which we want to count the occurrence of elements in tup.\n\n    This function will return a dictionary with the count of each element of lst in tup.\n    '''\n    count = {}\n    for i in tup:\n        count[i] = lst.count(i)\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_num = 0\n    for i in range(1, n+1):\n        sum_num += (3*i**2) - (2*i) + 1\n    return sum_num"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30]\n    perrin_numbers = perrin_numbers[:n]\n    sum_perrin_numbers = sum(perrin_numbers)\n    return sum_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through the range of numbers to calculate sum\n    for i in range(1, n+1):\n        # Calculate the sum of perrin numbers\n        sum += i\n\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 10**(n-1)\n    return perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648]\n    total_sum = 0\n    \n    for num in perrin_nums:\n        total_sum += num\n        if total_sum > n:\n            break\n    \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum to 0\n    total = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number\n        p = (n/i)*((2*i)+1)\n        \n        # add the perrin number to the sum\n        total += p\n        \n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number\n        p = 2*i*(i+1)\n        # Add the perrin number to the total\n        total += p\n    # Return the total\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * (i + 1)) // 2\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), l):\n        result.append(' '.join(str_list[i:i+l]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a new list containing the extracted strings.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in l:\n        if len(string) == l:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and a length l as input. It returns a new list containing the first l elements of the input list.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input, and returns a new list containing only the specified size of strings from the input list.\n    '''\n    new_list = []\n    for string in str_list:\n        if len(string) == size:\n            new_list.append(string)\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [value[:l] for value in l if len(value) == l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= l:\n            new_list.append(str_list[i][:l])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a desired size for each string to be extracted.\n    It returns a list of strings with the desired size for each string in the input list.\n    \"\"\"\n    extracted_strings = []\n    for str in str_list:\n        if len(str) > size:\n            extracted_strings.append(str[:size])\n        else:\n            extracted_strings.append(str)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_str_list = []\n    for i in range(0, len(str_list), size):\n        extracted_str_list.append(' '.join(str_list[i:i+size]))\n    return extracted_str_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    # Use regular expression to remove whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Regular expression to remove whitespaces\n    pattern = r'\\s+'\n    # Use the re.sub() function to remove all matches\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_rate = 0.1 # assume 10% loss rate\n    \n    if sale_amount > actual_cost:\n        loss_amount = (sale_amount - actual_cost) * loss_rate\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost: \n        return 0\n    else: \n        return sale_amount - actual_cost"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            evenFactors += i + n // i + n // (i+2)\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of its even factors.\n    \"\"\"\n    even_factors = 0\n    num = n\n    while num > 1:\n        if num % 2 == 0:\n            even_factors += num\n        num = num // 2\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum variable\n    even_sum = 0\n    # iterate through odd numbers up to the square root of the input number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if i divides the input number without leaving a remainder\n        if n % i == 0:\n            # if i divides the input number, add it to the sum\n            even_sum += i\n    # return the sum of even factors\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Calculate the sum of even factors using a loop\n    even_factors = []\n    for i in range(2, n+1):\n        if n%i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize the sum of even factors to 0\n    evenSum = 0\n\n    # Loop through each odd number from 3 to the square root of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # If the odd number is a factor of n, add it to the sum of even factors\n        if n % i == 0:\n            evenSum += i\n\n    # Return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sum_of_even_factors(n):\n    '''\n    This function takes an integer n as input and returns the sum of its even factors.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize variables\n    count = 0\n    sum_of_factors = 0\n    # loop through odd numbers\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        # check if the number is divisible by the odd number\n        if n % i == 0:\n            count += 1\n            # add the even factors to the sum\n            sum_of_factors += i\n\n    # return the sum of even factors\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if (n % i) == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum "
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b\\s*z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expression to match words containing 'z'\n    pattern = re.compile(r'\\b[A-Za-z]+z\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ]\\w*'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define regex pattern for matching 'z' in a word\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    \n    # Use re.findall() method to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    # check if the month number is a valid number\n    if not monthnum2.isdigit():\n        return \"Invalid month number.\"\n\n    # convert the month number to an integer\n    monthnum = int(monthnum2)\n\n    # check if the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number.\"\n\n    # check if the month has 31 days\n    if monthnum in [4, 6, 9, 11]:\n        return \"The month has 31 days.\"\n    else:\n        return \"The month does not have 31 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"31 days\")\n    elif monthnum2 in [4, 6, 9, 11]:\n        print(\"30 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = {\n        1: 31,  # January\n        2: 28,  # February\n        3: 31,  # March\n        4: 30,  # April\n        5: 31,  # May\n        6: 30,  # June\n        7: 31,  # July\n        8: 31,  # August\n        9: 30,  # September\n        10: 31,  # October\n        11: 30,  # November\n        12: 31  # December\n    }\n    if monthnum2 in months:\n        return months[monthnum2]\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Check if the given month number is valid or not\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n\n    # If the month number is valid, check if it contains 31 days or not\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    else:\n        return \"Other months have different number of days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum % 2 == 0:\n        if monthnum in (4, 6, 9, 11):\n            return True\n        elif monthnum in (1, 3, 5, 7, 8, 10, 12):\n            return False\n        else:\n            return True\n    else:\n        if monthnum in (4, 6, 9, 11):\n            return False\n        elif monthnum in (1, 3, 5, 7, 8, 10, 12):\n            return True\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Month number must be between 1 and 12.\")\n        return None\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            print(\"29 days in leap years.\")\n        else:\n            print(\"28 days in non-leap years.\")\n    elif monthnum2 in [4, 6, 9, 11]:\n        print(\"30 days in months of April, June, September, and November.\")\n    else:\n        print(str(monthnum2) + \" days in all other months.\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists as input and returns the sublist with the minimum length.\n    '''\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < len(min_lst):\n            min_lst = i\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize minimum length variable to the maximum possible value\n    min_len = float('inf')\n\n    # iterate through all the sublists in the list\n    for i in range(1, len(lst)): \n\n        # calculate the length of the current sublist\n        curr_len = len(lst[i:])\n\n        # check if the current sublist is shorter than the minimum length\n        if curr_len < min_len: \n            # update the minimum length\n            min_len = curr_len\n\n    # return the sublist having minimum length\n    return lst[:min_len]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in lst:\n        for j in i:\n            if len(j) < min_length:\n                min_length = len(j)\n                min_sublist = j\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_list = None\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n                min_list = lst[i:j]\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of sublists as input and returns the sublist having the minimum length.\n    '''\n    sublist_with_min_length = lst[0]\n    min_length = len(sublist_with_min_length)\n    \n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            sublist_with_min_length = sublist\n            min_length = len(sublist)\n    \n    return sublist_with_min_length"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    This function finds the sublist having minimum length in a given list.\n    '''\n    # Initialize a variable to store the minimum length of a sublist\n    min_length = len(lst)\n    # Initialize a variable to store the index of the minimum length sublist\n    min_index = 0\n    # Loop through the list of sublists\n    for i in range(len(lst)):\n        # Get the length of the sublist at index i\n        sublist_length = len(lst[i])\n        # If the length of the sublist is less than the current minimum length, update the minimum length and index\n        if sublist_length < min_length:\n            min_length = sublist_length\n            min_index = i\n    # Return the sublist at the minimum index\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist which has minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    result = pattern.sub(r'', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # compile the regular expression pattern for uppercase substrings\n    pattern = re.compile(r'([a-z])([A-Z])')\n    \n    # find all matches of the pattern in the input string\n    matches = pattern.findall(str1)\n    \n    # iterate over the matches and replace uppercase substrings with empty strings\n    for match in matches:\n        str1 = str1.replace(match[0] + match[1], '')\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = re.sub(r'[A-Z]', '', string)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile(r'(?i)[A-Z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile('[A-Z]+')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use the regular expression to remove all uppercase substrings\n    pattern = re.compile(r'(?i)\\b[A-Z][a-z]+\\b')\n    str2 = pattern.sub('', str1)\n    \n    # Return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]\\w*\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = r'\\p{Lu}'\n\n    # Use the re.sub() function to replace all uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n\n    # Return the resulting string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    upper_substrings = pattern.findall(str1)\n    # Iterate through the list of uppercase substrings and remove them from the string\n    for i in range(len(upper_substrings)):\n        str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create a list to store the extracted elements\n    extracted = []\n    \n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # Extract the first element of the sublist\n        extracted.append(sublist[0])\n    \n    # Return the extracted list\n    return extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element from each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create a new list to store the extracted elements\n    extracted_list = []\n    # loop through each sublist in the original list\n    for sublist in lst:\n        # get the first element of the sublist and append it to the extracted_list\n        extracted_list.append(sublist[0])\n    # return the extracted_list\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list of lists and returns a new list of the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    # Helper function to generate combinations of a list\n    def gen_combinations(lst, n):\n        \"\"\"\n        This helper function generates all possible combinations of a list of length `n`.\n        \"\"\"\n        # Initialize an empty list to store the combinations\n        result = []\n\n        # Loop through all possible indices of length n\n        for i in range(len(lst) - n + 1):\n            # Create a combination of length n from the list\n            combination = lst[i:i+n]\n\n            # Check if the combination is already in the result list\n            if combination not in result:\n                # Add the combination to the result list\n                result.append(combination)\n\n        return result\n\n    # Return the list of all possible combinations of the input list\n    return gen_combinations(lst, len(lst))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    def helper(curr, prefix):\n        if not prefix:\n            result.append(curr)\n            return\n        for i in range(len(lst)):\n            if i > 0 and lst[i] == lst[i - 1]:\n                continue\n            curr.append(lst[i])\n            helper(curr, prefix[1:])\n            curr.pop()\n\n    result = []\n    helper([], lst)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list of tuples to store the combinations\n    combinations = []\n\n    # Loop through the list of elements\n    for i in range(1, len(list1)+1):\n\n        # Create a sublist of length i and append it to combinations\n        sublist = list1[:i]\n        combinations.append(tuple(sublist))\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    list1 = list(set(list1))  # remove duplicates and convert to a list\n    length = len(list1)\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    res = []\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            temp = []\n            for k in range(j, j+i):\n                temp.append(list1[k])\n            res.append(temp)\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i:j+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations of elements in the given list.\n\n    :param lst: list of elements\n    :return: a list of all possible combinations of the elements in the given list\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        for j in range(len(lst) - i + 1):\n            result.append(lst[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Get the length of the list\n    n = len(list1)\n    # Create a list of all possible combinations\n    combinations = []\n    # Loop through all possible indices\n    for i in range(1, n+1):\n        # Create a list of the current combination\n        combination = []\n        # Loop through all possible starting indices\n        for j in range(n-i+1):\n            # Add the current element to the combination list\n            combination.append(list1[j])\n        # Add the current combination to the master list\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n\n    # generate all combinations of the list using itertools\n    comb = list(combinations(list1, len(list1)))\n\n    # return the combinations list\n    return comb"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        max_product = max(max_product, current_product)\n        current_product *= arr[i]\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n    arr (list): List of integers\n\n    Returns:\n    int: Maximum product subarray\n    \"\"\"\n    max_product = float('-inf')  # Initialize maximum product to negative infinity\n    max_ending_here = 1  # Initialize maximum ending here to 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Traverse through the array\n    for i in range(1, len(arr)):\n        # Update current product\n        current_product = max(arr[i], current_product * arr[i])\n        # Update max product if current product is greater\n        max_product = max(max_product, current_product)\n\n    # Return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        if num < 0:\n            curr_product = 1\n            \n        curr_product *= num\n        \n        if curr_product > max_product:\n            max_product = curr_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(current_product * num, num)\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i])\n        max_so_far = max(max_so_far, max_product * arr[i])\n        min_so_far = min(min_so_far, min_so_far * arr[i])\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here *= arr[i]\n        elif arr[i] < 0:\n            if max_ending_here > 0:\n                max_ending_here *= arr[i]\n            elif min_ending_here > 0:\n                min_ending_here *= arr[i]\n            else:\n                max_ending_here = arr[i]\n                min_ending_here = arr[i]\n        else:\n            max_ending_here = 1\n            min_ending_here = 1\n        max_ending_here = max(max_ending_here, 1)\n        min_ending_here = min(min_ending_here, 1)\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum product subarray.\n\n    Args:\n    arr (list): an array of integers\n\n    Returns:\n    int: the maximum product subarray of the input array\n\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here*arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[0]\n    for i in range(1, n):\n        if dict[i]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[i] == dict[n] for i in dict)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    all_values = set(dict.values())\n    if len(all_values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    \n    value = dict.values()[0]\n    \n    for val in dict.values():\n        if val!= value:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict.keys())!= len(set(dict.values())):\n        return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if the dictionary is empty\n    if len(dict) == 0:\n        return True\n\n    # initialize the first value in the dictionary\n    val = list(dict.values())[0]\n\n    # check if all the values in the dictionary are same as the first value\n    for i in dict.values():\n        if i!= val:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if n == value:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if isinstance(value, str) and value.strip() == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    return max_product * min_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    # Initialize the maximum product as negative infinity\n    max_product = float('-inf')\n    \n    # Initialize a variable to store the sum of current increasing subsequence\n    curr_sum = 0\n    \n    # Initialize a variable to store the sum of the previous increasing subsequence\n    prev_sum = 0\n    \n    # Iterate through the array and for each element, check if it's greater than the current sum\n    for num in arr:\n        if num > curr_sum:\n            # If yes, update the maximum product and the current sum\n            max_product = max(max_product, curr_sum * num)\n            \n            # Update the current sum\n            curr_sum += num\n        else:\n            # If no, update the previous sum\n            prev_sum += num\n            \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    cur_product = 1\n\n    for i in range(len(arr)):\n        cur_product *= arr[i]\n        max_product = max(max_product, cur_product)\n        if cur_product < 0:\n            cur_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if i == 0 and j == 1:\n                max_product = max(max_product, arr[j] * arr[j+1])\n            else:\n                max_product = max(max_product, arr[j] * arr[j+1] * arr[j+2])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize the maximum product to be the first element\n    max_product = arr[0]\n    # Initialize a variable to keep track of the current subsequence sum\n    current_sum = arr[0]\n    # Initialize a variable to keep track of the current subsequence product\n    current_product = arr[0]\n\n    # Iterate over the remaining elements in the array\n    for i in range(1, n):\n        # If the current element is greater than the first element in the subsequence,\n        # update the subsequence sum and product\n        if arr[i] > arr[0]:\n            current_sum += arr[i]\n            current_product *= arr[i]\n        # If the current element is less than or equal to the first element in the subsequence,\n        # update the maximum product\n        else:\n            if current_sum > 0:\n                if current_product > max_product:\n                    max_product = current_product\n            current_sum = arr[i]\n            current_product = arr[i]\n\n    # If the last element of the subsequence is greater than the first element,\n    # update the maximum product\n    if current_sum > 0:\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    def increasing_subseq_product(arr):\n        max_product = float('-inf')\n        prev = float('-inf')\n        for num in arr:\n            if num < prev:\n                max_product = max(max_product, prev * num)\n            prev = num\n        return max_product\n\n    max_product_increasing = float('-inf')\n    for i in range(len(arr)):\n        max_product_increasing = max(max_product_increasing, increasing_subseq_product(arr[i:]))\n\n    max_product_descending = float('-inf')\n    for i in range(len(arr)-1, -1, -1):\n        max_product_descending = max(max_product_descending, increasing_subseq_product(arr[i:]))\n\n    return max(max_product_increasing, max_product_descending)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        # update max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        # update min_ending_here\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        # update max_so_far\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n\n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            curr_product = arr[i] * arr[j]\n            max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize max_product with first element\n    max_product = arr[0]\n    # Initialize max_ending_here with first element\n    max_ending_here = arr[0]\n    # Initialize min_ending_here with first element\n    min_ending_here = arr[0]\n\n    # Traverse through the array\n    for i in range(1, n):\n        # Update max_ending_here if current element is greater\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        # Update min_ending_here if current element is less\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        # Update max_product if max_ending_here is greater\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to hold the sum of neighboring elements\n    sum_pairwise = 0\n    # Loop through the tuple and add the sum of neighboring elements to the sum_pairwise variable\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    # Return the sum of neighboring elements\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"The given tuple has less than 2 elements.\"\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    \n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2 == 0:\n        result = sum(test_tup[i:i+2] for i in range(0, n-1, 2))\n    else:\n        result = sum(test_tup[i:i+2] for i in range(1, n-1, 2))\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add = 0\n    if len(test_tup) >= 2:\n        for i in range(len(test_tup)-1):\n            add += test_tup[i] + test_tup[i+1]\n        return add\n    else:\n        return \"The given tuple must have at least two elements.\""
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 0\n    result = 1\n\n    # Iterate through the array and multiply each element by result modulo n\n    for num in arr:\n        result = (result * num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    # calculate the product of the array\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    # calculate the remainder of the product modulo n\n    remainder = product % n\n\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    \n    # Initialize result variable to 1\n    result = 1\n    \n    # Iterate through the array\n    for num in arr:\n        \n        # Multiply the result by the current number modulo n\n        result = (result * num) % n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of the array\n    product = 1\n    for i in arr:\n        product *= i\n\n    # Calculate the remainder\n    remainder = product % n\n\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array arr and an integer n as input and returns the remainder of the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Calculate the product of all elements in the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    # check for consecutive numbers \n    consecutive = False \n    prev_num = None \n    for num in l: \n        if prev_num is not None and num == prev_num + 1: \n            consecutive = True \n            break \n        prev_num = num \n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n <= 1:\n        return False\n\n    for i in range(n):\n        if l[i]!= l[i+1]:\n            return True\n        if i == n-2 and l[i] == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            print(\"The list contains consecutive numbers.\")\n            return\n    print(\"The list does not contain consecutive numbers.\")"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        for i in range(2, len(l)):\n            if l[i]!= l[i-1]+1:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    # check if the list contains consecutive numbers\n    if len(l) > 2:\n        if l[0] == l[1] + 1: # check if the first two elements are consecutive\n            for i in range(2, len(l)): # check if there are any consecutive numbers after the first two elements\n                if l[i]!= l[i-1] + 1: # check if the current element is consecutive\n                    return False\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # create a set of all the numbers in the list\n    set_nums = set(l)\n\n    # check if all the numbers in the set are consecutive\n    if len(set_nums) == len(l):\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection back to tuples and sort them in ascending order\n    result = tuple(sorted(intersection))\n\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuples = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                common_tuples.append(tup1)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function finds the intersection of two lists of tuples irrespective of their order.\n\n    Args:\n    test_list1: list of tuples\n    test_list2: list of tuples\n\n    Returns:\n    a set of tuples that are common to both input lists of tuples.\n    '''\n\n    # Convert lists to sets to avoid duplicates in the final result\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    common_tuples = list(set1.intersection(set2))\n\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two tuple lists and returns the tuple intersection of their elements, irrespective of their order.\n    \"\"\"\n    intersection_list = []\n    for element1 in test_list1:\n        for element2 in test_list2:\n            if element1 == element2:\n                intersection_list.append(element1)\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from each tuple list to get unique elements\n    unique_list1 = set(test_list1)\n    unique_list2 = set(test_list2)\n\n    # Find the intersection of the sets and convert it back to a list\n    intersection_list = list(unique_list1.intersection(unique_list2))\n\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the elements of the first list\n    dictionary1 = {}\n    for i in range(len(test_list1)):\n        dictionary1[test_list1[i]] = i\n\n    # Create another dictionary to store the elements of the second list\n    dictionary2 = {}\n    for i in range(len(test_list2)):\n        dictionary2[test_list2[i]] = i\n\n    # Find the intersection of the two dictionaries\n    intersection = set(dictionary1) & set(dictionary2)\n\n    # Create a list to store the intersection of elements\n    intersection_list = []\n\n    # Iterate over the elements of the intersection set and append them to the intersection list\n    for i in intersection:\n        intersection_list.append(i)\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(min(len(test_list1), len(test_list2))):\n        if test_list1[i] == test_list2[i]:\n            intersection.append(test_list1[i])\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for i in test_list1:\n        if i in test_list2 and i not in result:\n            result.append(i)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two list of tuples as inputs and returns a new list containing the intersection of\n    all tuples in both lists, irrespective of their order.\n    \"\"\"\n\n    # Create a set to store the unique elements from both lists\n    common_elements = set(test_list1) & set(test_list2)\n\n    # Convert the set to a list and return it\n    return list(common_elements)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The string to be modified.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace the old character with.\n\n    Returns:\n    str: The modified string with the character replaced.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the current character is the search character\n        if char == ch:\n            # Add the replacement character to the new string\n            new_str += newch\n        # Otherwise, add the original character to the new string\n        else:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in a string and two characters as inputs, replaces the first character with the second character,\n    and returns the modified string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in three arguments: a string, a character to be replaced, and a new character to replace it with.\n    The function replaces all occurrences of the character in the string with the new character, and returns the modified string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character in a string.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is the character to be replaced\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n            break\n    # Return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string with the characters replaced\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    # Re-create the dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value in decreasing order.\n    \n    Args:\n        dict1 (dict): A dictionary whose values are sortable.\n        \n    Returns:\n        sorted_dict (dict): A sorted dictionary in decreasing order of values.\n    '''\n    \n    # Convert the dictionary to a Counter object to sort by values\n    sorted_counter = Counter(dict1)\n    \n    # Convert the Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter.items())\n    \n    # Sort the dictionary by value in decreasing order\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True))\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_count = count.most_common()\n    sorted_dict = dict(sorted_count)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items()))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    \n    # sort the counter by value in descending order\n    sorted_counter = counter.most_common()\n    \n    # create a new dictionary from the sorted counter\n    sorted_dict = {k:v for k,v in sorted_counter}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter to count the frequency of each value in the dictionary\n    count = Counter(dict1.values())\n    # Sort the dictionary by value\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the maximum and minimum value in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the sum of the maximum and minimum value\n    sum_max_min = max_val + min_val\n\n    # Return the sum of the maximum and minimum value\n    return sum_max_min"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers and returns the sum of the largest and smallest value in the array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = min(nums)\n    smallest = max(nums)\n    \n    # Add the largest and smallest values to get the sum of the array\n    sum_array = largest + smallest\n    \n    return sum_array"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # find the largest value\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # find the smallest value\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables to store the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n\n    # loop through each value in the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return nums[0]\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    lower_string = string.lower()\n    # Return the lower case string\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.findall() function to find all substrings in the input string that match the pattern\n    matches = re.findall(pattern, string)\n    # Loop through each match and remove it from the input string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string with lowercase substrings removed\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the given string\n    str2 = re.sub('([a-z]+)', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]'\n    # Use the re.findall() method to find all substrings in the given string that match the pattern\n    lowercase_substrings = re.findall(pattern, str1)\n    # Remove the lowercase substrings from the given string using the replace() method\n    str2 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function takes a string as input and removes all lowercase substrings from it.\n    \"\"\"\n    pattern = r'([a-z])'\n    return re.sub(pattern, r'\\1', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all the lowercase substrings in the input string\n    lowercase_substrings = pattern.findall(str1)\n    # Iterate over the list of lowercase substrings and replace them with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the pattern to find all the lowercase substrings in the given string\n    matches = re.findall(pattern, str1)\n    # Use a list comprehension to convert the matches list into a set to remove duplicates\n    unique_matches = set(matches)\n    # Use the set to join the lowercase substrings back into a string\n    return ''.join(unique_matches)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns a new string without any lowercase substrings.\n    '''\n    # Use regex to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n\n    # Iterate over the list of lowercase substrings and remove them from the string\n    for lowercase_substring in lowercase_substrings:\n        str1 = re.sub(lowercase_substring, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 1000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # convert the first character of the string to an integer\n    first_digit = int(str_n[0])\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer n and returns the first digit of n.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Access the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers as input and returns only the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list \n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n\n    # Find the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Find the difference between the sum of cubes and the sum of natural numbers\n    diff = sum_cubes - sum_natural\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        sum_natural += i\n\n    difference = sum_cubes - sum_natural\n\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculate the sum of the first n natural numbers\n    for j in range(1, n+1):\n        sum_natural += j\n    \n    # Find the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Define the function to find the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return n * (n + 1) * (2 * n + 1) / 6\n    \n    # Define the function to find the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return n * (n + 1) / 2\n    \n    # Find the difference between the two sums\n    difference = sum_cubes(n) - sum_natural_numbers(n)\n    \n    # Print the difference\n    print(difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        sum_natural += i\n    diff = sum_cubes - sum_natural\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of first n natural numbers\n    cubes = [x**3 for x in range(1, n+1)]\n    sum_cubes = sum(cubes)\n\n    # calculate the sum of first n natural numbers\n    sum_natural_numbers = sum(range(1, n+1))\n\n    # find the difference between the sum of cubes and sum of natural numbers\n    difference = sum_cubes - sum_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    natural_sum = sum(range(1, n+1))\n    return cubes_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_sum = sum(A[i])\n        if xor_sum % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a Python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        xor = A[i] ^ A[(i+1) % N]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate over all possible pairs of elements in A\n    for i in range(N):\n        for j in range(i+1,N):\n            # Calculate xor of i and j\n            xor = A[i] ^ A[j]\n            \n            # Check if xor is odd\n            if xor % 2!= 0:\n                # Increment count if xor is odd\n                count += 1\n    \n    # Return count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes in two lists A and N, where A is the list of integers to check for odd pairs and N is the list of integers to check for even pairs. \n    It then returns the number of odd pairs.\n    \"\"\"\n    Odd_Pairs = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                Odd_Pairs += 1\n    return Odd_Pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    xor_sum = sum(A)\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1 and xor_val < xor_sum:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(string)\n    # loop through each character in the list\n    for i in range(len(char_list)):\n        # check if the character is uppercase or lowercase\n        if char_list[i].isupper():\n            # if it's uppercase, convert it to lowercase\n            char_list[i] = char_list[i].lower()\n        else:\n            # if it's lowercase, convert it to uppercase\n            char_list[i] = char_list[i].upper()\n    # convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # check if the character is uppercase\n        if string[i].isupper():\n            # convert the character to lowercase\n            string[i] = string[i].lower()\n        # check if the character is lowercase\n        elif string[i].islower():\n            # convert the character to uppercase\n            string[i] = string[i].upper()\n    # return the modified string\n    return ''.join(string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # create an empty string to store the result\n    result = ''\n    # iterate over each character in the string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            result += char.lower()\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            result += char.upper()\n        # otherwise, add it as is to the result string\n        else:\n            result += char\n    # return the result string with all characters toggled\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Convert each character to its opposite case\n    for i in range(len(string)):\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # Convert the string back to uppercase\n    return string.upper()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between the two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # Find the maximum length of the two lists of digits\n    max_length = max(len(num1_digits), len(num2_digits))\n\n    # Compare the lists of digits from left to right, accumulating the per-digit difference\n    digit_difference = 0\n    for i in range(max_length):\n        diff = abs(num1_digits[i] - num2_digits[i])\n        digit_difference += diff * (9 - i)\n\n    return digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables\n    sum_diff = 0\n    # loop through each digit of each number\n    for i in range(len(str(n1))):\n        num1 = int(str(n1)[i])\n        num2 = int(str(n2)[i])\n        # calculate the difference between the digits\n        diff = abs(num1 - num2)\n        # add the difference to the sum of differences\n        sum_diff += diff\n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n\n    sum_diff = 0\n    for i in range(10):\n        diff_i = abs(diff % 10 - i)\n        sum_diff += diff_i\n        diff //= 10\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    for i in range(10):\n        diff = abs(n1%10 - n2%10)\n        count += diff\n        n1 //= 10\n        n2 //= 10\n    return count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Helper function to find the absolute difference of two integers\n    def abs_diff(a, b):\n        return (a - b) if a > b else (b - a)\n\n    # Helper function to find the sum of the per-digit differences\n    def sum_per_digit_diff(a, b):\n        return sum(abs_diff(digit(a, i), digit(b, i)) for i in range(len(str(a)) + 1))\n\n    # Helper function to find the digit of an integer at a given position\n    def digit(n, i):\n        return n // (10 ** (len(str(n)) - i - 1)) % 10\n\n    # Main function to find the sum of the per-digit differences\n    return sum_per_digit_diff(n1, n2)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    digit_sum = 0\n    for i in range(10):\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Calculate the sum of per-digit differences between two integers.\n\n    :param n1: An integer.\n    :param n2: An integer.\n    :return: The sum of per-digit differences between n1 and n2.\n    \"\"\"\n    # Initialize the sum variable to zero\n    digit_diff = 0\n\n    # Convert both integers to strings and split them into lists of digits\n    str1 = str(n1)\n    str2 = str(n2)\n    digits1 = list(str1)\n    digits2 = list(str2)\n\n    # Calculate the per-digit difference between each pair of digits\n    for i in range(len(digits1)):\n        digit_diff += abs(int(digits1[i]) - int(digits2[i]))\n\n    # Return the sum of per-digit differences\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n    # Convert the strings to lists of digits\n    digit_list1 = [int(digit) for digit in num1]\n    digit_list2 = [int(digit) for digit in num2]\n    # Calculate the per-digit differences\n    digit_diff_list = [abs(digit1 - digit2) for digit1, digit2 in zip(digit_list1, digit_list2)]\n    # Calculate the sum of the differences\n    digit_sum = sum(digit_diff_list)\n    # Return the sum of the differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings so that we can work with them as individual digits\n    str1 = str(n1)\n    str2 = str(n2)\n    # create a list to store the differences between each pair of digits\n    differences = []\n    # iterate through the digits of the two numbers\n    for i in range(len(str1)):\n        # compute the difference between the corresponding digits\n        difference = abs(ord(str1[i]) - ord(str2[i]))\n        # add the difference to the list of differences\n        differences.append(difference)\n    # compute the sum of the differences and return it as the result\n    return sum(differences)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 // 10**i - n2 // 10**i)\n        sum_diff += diff * (diff + 1) // 2\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    This function takes two arguments - the list of numbers and the size of the subarray to consider.\n    It finds the maximum sum subarray of size'size' in the list and returns the sum.\n\n    Algorithm:\n    - Initialize two variables'max_sum' and 'current_sum' to zero.\n    - Iterate through the list starting from the first element.\n    - For each element, add it to 'current_sum'.\n    - If 'current_sum' is greater than'max_sum' so far, update'max_sum' with 'current_sum'.\n    - If 'current_sum' is smaller than'max_sum', remove the first element from 'current_sum' and start again with the next element.\n    - Repeat the above step until 'current_sum' becomes less than'max_sum'.\n    - Return'max_sum' as the sum of the largest contiguous subarray of size'size'.\n\n    Time Complexity: O(n)\n    '''\n    max_sum = 0\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n\n    max_so_far = max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the array and find the maximum sum\n    for i in range(len(a)):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return 0\n    \n    max_so_far = max_ending_here = sum(a[:size])\n    \n    for i in range(size, len(a)):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n\n    return a[current_start:current_start+max_sum]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the list\n    for i in range(size):\n        curr_sum += a[i]\n\n        # Update the maximum sum if the current sum is larger\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum becomes negative, reset it to zero\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1 + test_tup2)\n    sorted_union_set = sorted(union_set)\n    return sorted_union_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to hold the union of the two tuples\n    union = set()\n\n    # add the elements of both tuples to the set\n    union.update(test_tup1)\n    union.update(test_tup2)\n\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union))\n\n    # output the union of the two tuples in sorted order\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Convert the combined tuple to a set to get unique elements\n    unique_set = set(combined_tup)\n    # Sort the set in ascending order\n    sorted_set = sorted(unique_set)\n    # Convert the sorted set back to a tuple\n    final_tup = tuple(sorted_set)\n    # Return the final tuple\n    return final_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two given tuples\n    union = set(test_tup1) | set(test_tup2)\n    \n    # convert the union set to a list and sort it in ascending order\n    union_list = sorted(list(union))\n    \n    # output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n\n    # sort the union elements in ascending order\n    sorted_union = sorted(union_set)\n\n    # output the union elements\n    print(\"Union of elements in sorted order:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Convert the list to a set to remove duplicates\n    unique_set = set(combined_list)\n    \n    # Convert the set back to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n    \n    # Convert the list back to a tuple and return it\n    return tuple(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set from the first tuple and convert it to a list\n    set1 = list(set(test_tup1))\n    # create a set from the second tuple and convert it to a list\n    set2 = list(set(test_tup2))\n    # create a new set by adding all elements from both sets\n    union_set = set1 + set2\n    # convert the new set back to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # creating a set to store unique elements of the two tuples\n    unique_elements = set(test_tup1 + test_tup2)\n    # sorting the unique elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    # printing the sorted elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # create a set to hold the unique elements from both tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # sort the elements in ascending order and print them\n    print(*sorted(all_elements))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the maximum length to zero\n    max_length = 0\n\n    # Loop through the list of sublists\n    for sublist in lst:\n\n        # Find the length of the current sublist\n        current_length = len(sublist)\n\n        # Update the maximum length if the current sublist is longer than the previous longest sublist\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 1\n    for i in range(1, len(lst)):\n        if len(lst[i]) > longest:\n            longest = len(lst[i])\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n        if i[-1]!= ',':\n            current_length += 1\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > length:\n                length = len(lst[i:j+1])\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 1\n    start = 0\n    \n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # If the current element is equal to the previous element, increment the current length\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            # If the current length is greater than the max length, update the max length and start index\n            if current_length > max_length:\n                max_length = current_length\n                start = i-max_length+1\n            \n            # Reset the current length\n            current_length = 1\n    \n    # If the last sublist is longer than the max length, update the max length and start index\n    if current_length > max_length:\n        max_length = current_length\n        start = len(lst)-max_length\n    \n    # Return the max length and start index\n    return max_length, start"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1  \n    for i in range(len(lst)):  \n        length = 0  \n        for j in range(i, len(lst)):  \n            length += 1  \n        if length > max_length:  \n            max_length = length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    This function takes a list of lists as input and returns the length of the longest sublist.\n\n    Input:\n    lst: A list of lists\n\n    Output:\n    The length of the longest sublist in lst\n\n    Example:\n    Find_Max_Length([[1,2,3],[4,5,6],[7,8,9]])\n    Output: 3\n\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    longest_sublist_length = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Calculate the length of the sublist\n        sublist_length = len(sublist)\n\n        # Update the longest sublist length if necessary\n        if sublist_length > longest_sublist_length:\n            longest_sublist_length = sublist_length\n\n    # Return the length of the longest sublist\n    return longest_sublist_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_len = 0\n    current_len = 0\n\n    # loop through the list and calculate the length of each sublist\n    for i in range(len(lst)):\n        if i == 0:\n            current_len = 1\n        else:\n            current_len += 1\n\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0\n    sublist = []\n\n    for i in range(len(lst)):\n        if lst[i] not in sublist:\n            sublist.append(lst[i])\n            if len(sublist) > longest_length:\n                longest_length = len(sublist)\n        else:\n            sublist.pop(sublist.index(lst[i]))\n\n    return longest_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # Match any sequence of characters enclosed in double quotes.\n    values = re.findall(pattern, text) # Find all the matches using the regular expression pattern.\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?P<quote>[\"\\'])(?P<value>.+?)(?P=quote)'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group('value'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=')\\w+(?=')\"\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Define the pattern to match the values between quotation marks\n    pattern = r'\"(?P<value>.+?)\"'\n    # Use the pattern to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Return a list of all the values found\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function extracts values between quotation marks from a string.\n    \"\"\"\n    # Define the regular expression pattern to match quotation marks\n    pattern = re.compile(r'\".*?\"')\n    \n    # Use the pattern to search for all occurrences of quotation marks\n    matches = pattern.findall(text)\n    \n    # Loop through the matches and extract the values\n    values = []\n    for match in matches:\n        # Remove the quotes from the match\n        value = match[1:-1]\n        # Add the value to the list of values\n        values.append(value)\n        \n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"[^\"]*\"')\n\n    # Find all the matches in the text using the pattern\n    matches = pattern.findall(text)\n\n    # Define an empty list to store the extracted values\n    values = []\n\n    # Iterate over the matches and extract the values\n    for match in matches:\n        # Remove the quotation marks from the match\n        value = match[1:-1]\n        # Add the extracted value to the values list\n        values.append(value)\n\n    # Return the values list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?[^\\\\]\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=\")(\\w+)(?=\")')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    # Initialize the count variable to zero\n    count = 0\n    # Loop through the array and for each element, loop through the remaining elements and check if they are unequal\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n    # Loop through all possible pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the elements at the current indices are unequal\n            if arr[i]!= arr[j]:\n                # If they are not, increment the counter variable\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each character in the string\n    for digit in num_str:\n        # Convert each character to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum of digits\n        sum_of_digits += digit_int\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the given integer to a string and split it into a list of digits\n    digits = list(str(n))\n\n    # Initialize a variable to store the sum of the digits\n    sum = 0\n\n    # Iterate over the list of digits and add each digit to the sum\n    for digit in digits:\n        sum += int(digit)\n\n    # Return the final sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Loop through each character in the string\n    for digit in num_str:\n        # Convert each character to an integer\n        digit_int = int(digit)\n        \n        # Add the integer to the total sum\n        total_sum += digit_int\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # convert n to a string\n    n_str = str(n)\n    # loop through each digit in n_str\n    for digit in n_str:\n        # add the integer value of the digit to sum\n        sum += int(digit)\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over each digit of the string\n    for digit in n_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then sum up its digits\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each digit in the number\n    while n > 0:\n        # Get the last digit\n        digit = n % 10\n        # Add it to the total sum\n        total += digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        for i in range(1, len(list1)-1):\n            if list1[i] <= list1[i-1] or list1[i] >= list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(list1) <= 1:\n        # If it is, return True since the list is already sorted\n        return True\n    # Initialize a variable to keep track of whether the list is sorted or not\n    sorted_list = True\n    # Loop over the list from the second element to the last element\n    for i in range(1, len(list1)):\n        # If the current element is greater than the next element, the list is not sorted\n        if list1[i] < list1[i-1]:\n            sorted_list = False\n            break\n    # Return the result of the check\n    return sorted_list"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        if list1[1] < list1[0]:\n            return False\n        else:\n            return issort_list(list1[1:])\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if it is sorted and False otherwise.\n\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    else:\n        return issort_list(lst[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return False\n    else:\n        for i in range(1, len(list1)-1):\n            if list1[i] < list1[i-1]:\n                return False\n            elif list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a boolean value indicating whether the list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_dict = {}\n    result = []\n    for i in range(length):\n        result.append(empty_dict.copy())\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of the given list\n    for sublist in list1:\n        # Sort the sublist in alphabetical order\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(lists):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in lists:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    unique_nums = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    unique_nums = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function removes duplicate numbers from a given number of lists.\n    \"\"\"\n    # Convert the input lists to sets to remove duplicates\n    sets = [set(num_list) for num_list in nums]\n\n    # Convert the sets back to lists and remove duplicates\n    result = []\n    for set_ in sets:\n        result.extend(list(set_))\n    return list(set(result))"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through the lists and add unique numbers to the set\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    # Loop through the input lists and add unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list with all the unique numbers from all the lists.\n    \"\"\"\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through each list in the nums list\n    for num_list in nums:\n        # Add all the unique elements of each list to the unique_nums set\n        unique_nums.update(num_list)\n\n    # Convert the set back to a list\n    unique_nums = list(unique_nums)\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and removes duplicate numbers from each list.\n    Returns the list of lists with unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        unique_num_list = []\n        for num in num_list:\n            if num not in unique_num_list:\n                unique_num_list.append(num)\n        unique_nums.append(unique_num_list)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # loop through each list in the input list\n    for i in range(len(nums)):\n        # loop through each element in the current list\n        for j in range(len(nums[i])):\n            # add the element to the set if it's not already there\n            if nums[i][j] not in unique_nums:\n                unique_nums.add(nums[i][j])\n    \n    # convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 1 else unique_nums[0] * unique_product(unique_nums[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and calculates the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # create a set of unique numbers from the list\n    product = 1  # initialize the product to 1\n    for num in unique_numbers:  # iterate over the unique numbers\n        product *= num  # multiply the product by the number\n    return product  # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # convert the list to a set to remove duplicates\n    return 1 if len(unique_numbers) == 0 else unique_numbers[0] * unique_product(unique_numbers[1:]) # check for an empty list and return the product of the unique numbers if there are any, otherwise return 1"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    unique_nums = sorted(unique_nums)\n    return 1 if len(unique_nums) == 1 else unique_nums[0] * unique_nums[1]\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h + 2 * pi * r * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # A = 2*pi*(r^2 + h^2)\n    # and return the result.\n    A = 2 * 3.14159 * (r**2 + h**2)\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2+h)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder:\n    # (2*pi*r^2)*h\n    surface_area = (2*3.14*r**2)*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Using the formula for the surface area of a cylinder\n    surfacearea = 2*3.14159*r**2 + 2*3.14159*h + 2*3.14159*r*h\n    \n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the half-length of the cylinder\n    L = r*2\n    \n    # Calculate the surface area of the cylinder\n    surface_area = 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*h**2\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \n    Args:\n    r: Radius of the cylinder (float)\n    h: Height of the cylinder (float)\n    \n    Returns:\n    surface_area: The surface area of the cylinder (float)\n    \"\"\"\n    \n    # Calculate the area of the base\n    area_base = 3.14 * r**2\n    \n    # Calculate the surface area of the cylinder\n    surface_area = area_base + 2 * 3.14 * r * h\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2 * 3.14159 * r * r) + (2 * 3.14159 * r * h) + (2 * 3.14159 * h * h)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    for i in range(len(A)): \n        if A[i] not in B: \n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    if len(A) == 0:\n        return True\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        else:\n            i = 0\n        j += 1\n\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    n = len(A)\n    m = len(B)\n    i = 0\n    j = 0\n\n    while i < n:\n        if A[i:i+m] == B[j:j+m]:\n            return True\n        i += 1\n        j += 1\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    i = 0 # pointer for list A\n    j = 0 # pointer for list B\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            if A[i] > B[j]:\n                i += 1\n            else:\n                j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i] in B:\n            j = B.index(A[i])\n            if i <= j:\n                return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Checks whether the first list is a sublist of the second list.\n    \"\"\"\n    if not isinstance(B, list):\n        raise ValueError(\"Second argument must be a list\")\n    if not isinstance(A, list):\n        raise ValueError(\"First argument must be a list\")\n    if len(B) > len(A):\n        raise ValueError(\"Second argument must be a sublist of the first argument\")\n    for item in B:\n        if item not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    elif len(A) > len(B):\n        for i in range(len(A) - len(B) + 1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False\n    else:\n        for i in range(len(B) - len(A) + 1):\n            if B[i:i+len(A)] == A:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j=0,0\n    while j<len(B):\n        if A[i]==B[j]:\n            j+=1\n            i+=1\n            if j==len(B):\n                return True\n        else:\n            i=i-j+1\n            j=i+1\n            if i>=len(A):\n                return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n        return None\n    elif n == 0 or n == 1:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 10\n            n //= 10\n        return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize the result variable\n    result = 0\n    # initialize the input variable\n    num = n\n    # loop over the digits in the input number\n    while num > 0:\n        # get the last digit of the input number\n        digit = num % 10\n        # add the last digit to the result\n        result += digit\n        # remove the last digit from the input number\n        num //= 10\n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert integer to string\n    str_num = str(n)\n    \n    # find the last digit of the factorial\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # convert the factorial to a string and find its last digit\n    factorial_str = str(factorial)\n    last_digit = factorial_str[-1]\n    \n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Check if the input number is positive or not\n    if n <= 0:\n        print(\"Please enter a positive number.\")\n        return\n\n    # Initialize the factorial of n\n    fact = 1\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the factorial of i\n        fact *= i\n\n    # Extract the last digit of the factorial\n    last_digit = int(fact/10**n)\n\n    # Print the last digit of the factorial\n    print(\"The last digit of the factorial of\", n, \"is\", last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the factorial of n\n    factorial = 1\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1): \n        # calculate the factorial of each number\n        factorial *= i\n    \n    # extract the last digit of the factorial and return it\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert the given number to a string\n    n = str(n)\n    \n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding the factorial of the number\n    factorial = 1\n    i = 1\n    while i <= n:\n        factorial *= i\n        i += 1\n    \n    # Getting the last digit of the factorial\n    last_digit = factorial // 10 % 10\n    \n    # Returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Error: n must be a positive integer.\"\n    \n    # Initialize variable for result\n    result = 0\n    \n    # Convert n to a string\n    n = str(n)\n    \n    # Find the last digit of the factorial\n    for i in range(len(n)):\n        if n[i]!= '0':\n            result = int(n[i])\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    # Check if all lists have the same length\n    if len(list1) == len(list2) == len(list3):\n        # Loop through the lists\n        for i in range(len(list1)):\n            # Append the i-th element from each list to the interleaved list\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        # Return the interleaved list\n        return interleaved_list\n    else:\n        # Raise an exception if the lists do not have the same length\n        raise ValueError(\"All lists must have the same length.\")"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Loop through each element of the first list\n    for element in list1:\n        # Append the current element to the interleaved list\n        interleaved_list.append(element)\n\n    # Loop through each element of the second list\n    for element in list2:\n        # Append the current element to the interleaved list\n        interleaved_list.append(element)\n\n    # Loop through each element of the third list\n    for element in list3:\n        # Append the current element to the interleaved list\n        interleaved_list.append(element)\n\n    # Return the final interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Ensure all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved elements\n    result = []\n\n    # Use a for loop to iterate through each element in each list\n    for i in range(len(list1)):\n        # Append the first element of each list to the result list\n        result.append(list1[i])\n        # Append the second element of each list to the result list\n        result.append(list2[i])\n        # Append the third element of each list to the result list\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes 3 lists of the same length and returns a single list\n    that interleaves them in the order they are given.\n    '''\n    # create an empty list to store the interleaved list\n    interleaved_list = []\n\n    # loop through the length of the first list\n    for i in range(len(list1)):\n        # add the i-th element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # add the i-th element of the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # add the i-th element of the third list to the interleaved list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # find the length of the longest list\n    max_length = max(len(list1),len(list2),len(list3))\n    \n    # create an empty list to store the interleaved lists\n    result = []\n    \n    # iterate through the longest list and add each element to the result list\n    for i in range(max_length):\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Iterate through the first tuple\n    for element in test_tup1:\n        # If the element is not in the second tuple, add it to the dissimilar set\n        if element not in test_tup2:\n            dissimilar_set.add(element)\n\n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Get the elements of the two tuples\n    tup1_elements = test_tup1\n    tup2_elements = test_tup2\n\n    # Find the elements that are present in tup1 but not in tup2\n    diff_elements = set(tup1_elements) - set(tup2_elements)\n\n    # Return the dissimilar elements in the tuple\n    return diff_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using set() to find unique elements in both tuples\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n    # Subtracting the two sets to find the dissimilar elements\n    dissimilar_elements = unique_tup1.symmetric_difference(unique_tup2)\n    # Converting the set to a list and returning it\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the current element in the first tuple is the same as the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # if the elements are not the same, add them to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    # return the dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize empty list to store dissimilar elements\n    dissimilar_list = []\n    # loop through the first tuple\n    for i in test_tup1:\n        # check if the element is not present in the second tuple\n        if i not in test_tup2:\n            # if the element is not present, append it to the dissimilar list\n            dissimilar_list.append(i)\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    def remove_none(x):\n        return x is not None\n\n    def remove_non_even(x):\n        return even_fnc(x)\n\n    nested_list = [remove_none(x) for x in test_tuple]\n    even_list = [x for x in nested_list if isinstance(x, list)]\n    even_tuples = [tuple(x) for x in even_list]\n    return [x for x in even_tuples if remove_none(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to hold the even elements\n    even_list = []\n\n    # Loop through the tuple and check if each element is even\n    for element in test_tuple:\n        if even_fnc(element):\n            even_list.append(element)\n\n    # Return the even list\n    return even_list\n\ndef is_even(num):\n    '''\n    A simple function to check if a number is even.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    def remove_uneven(elem):\n        \"\"\"\n        Remove uneven elements from the mixed tuple.\n        \"\"\"\n        if isinstance(elem, tuple):\n            return tuple(remove_uneven(subelem) for subelem in elem if isinstance(subelem, (int, float)))\n        else:\n            return even_fnc(elem)\n\n    result = remove_uneven(test_tuple)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    def remove_none(lst):\n        \"\"\"\n        Helper function to remove None elements from a list.\n        \"\"\"\n        return [x for x in lst if x is not None]\n\n    def is_even(x):\n        \"\"\"\n        Helper function to check if a value is even.\n        \"\"\"\n        return x % 2 == 0\n\n    def get_even_elements(lst):\n        \"\"\"\n        Helper function to extract even elements from a list.\n        \"\"\"\n        return [x for x in lst if is_even(x)]\n\n    nested_tuple = [([1, 2, 3], [4, 5, 6], [7, 8, 9]), ([10, 11, 12], [13, 14, 15], [16, 17, 18]), ([19, 20, 21], [22, 23, 24], None)]\n\n    # remove None elements in nested tuple\n    filtered_nested_tuple = [remove_none(lst) for lst in nested_tuple]\n\n    # extract even elements from nested tuple\n    even_elements = [get_even_elements(lst) for lst in filtered_nested_tuple]\n\n    # remove uneven elements using the even_fnc function\n    even_elements = [even_fnc(x) for x in even_elements]\n\n    # print the even elements\n    print(even_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))\n\ndef even_odd(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Convert the nested tuple to a list\n    test_list = list(test_tuple)\n\n    # Remove all elements that are not even using a for loop\n    for i in range(len(test_list)):\n        if even_fnc(test_list[i]):\n            test_list.pop(i)\n            i -= 1\n\n    # Convert the list back to a tuple\n    new_tuple = tuple(test_list)\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # loop through each element in the tuple\n    for i in range(len(test_tuple)):\n        \n        # check if the current element is an even number\n        if even_fnc(test_tuple[i]):\n            \n            # if the element is even, append it to a new list\n            new_list.append(test_tuple[i])\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    filtered_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            filtered_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            filtered_tuple.append(item)\n    return filtered_tuple\n\n\ndef even_integer(num):\n    \"\"\"\n    A function to check if a number is even.\n    \"\"\"\n    return num % 2 == 0\n\n\ntest_tuple = ((1, 2, 3, (4, 5)), (6, 7, 8, (9, 10), (11, 12)), (13, 14, 15, (16, 17)))\nresult = even_ele(test_tuple, even_integer)\nprint(result)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2 * b * s + 2 * b * b + s * s\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = 0.5 * b * s * (s + b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base and height of the pyramid\n    base = b\n    height = s\n    \n    # Calculate the area of the base\n    area_base = base * base\n    \n    # Calculate the area of the pyramid\n    area_pyramid = area_base + area_base + height\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 6 * area_base\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = b * b\n    \n    # Calculate the area of the pyramid\n    pyramid_area = (b * s) / 2\n    \n    # Calculate the total surface area\n    total_area = base_area + pyramid_area\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the surface area of the base of the pyramid\n    base_area = b * s\n    # Calculate the surface area of the pyramid\n    pyramid_area = base_area * 4\n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square pyramid\n    area = 0.5 * b * s\n    \n    # Return the surface area of the square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = (b * s * 2) + (b * s * 2) + ((b * b) * s * 2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the base area\n    base_area = (b ** 2) * s\n    \n    # Find the top area\n    top_area = b * s\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 2 * (base_area + top_area)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s + (b*b + b*s) + (b*b + b*s) + b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s)**2"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num + 1):\n            result += catalan_number(i) * catalan_number(num - i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Compute the nth Catalan number using formula:\n    C(n) = (2n)! / (n! * (n-1)!)\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n)! / (n! * (n-1)!)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # Recursive case\n        return n * catalan_number(n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize variables\n    fact = 1\n    for i in range(1, num + 1):\n        fact *= i\n    return fact"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2*n-1)*(catalan_number(n-1))//(n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    return (1 + 4*n)**n / (1 - 4*n)**(2*n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number.\n    \"\"\"\n    # initialize variables\n    num = 0\n    num1 = 1\n    num2 = 1\n    for i in range(n):\n        # calculate the next two numbers\n        num += num1\n        num1, num2 = num2, num1 + num2\n    # return the result\n    return num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes a positive integer 'num' and returns the nth catalan number.\n    \"\"\"\n    catalan = 1\n    for i in range(1, num+1):\n        catalan = catalan * i / (i+1)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 355\n    if n == 8:\n        return 1094\n    if n == 9:\n        return 2772\n    if n == 10:\n        return 7877\n    if n == 11:\n        return 22031\n    if n == 12:\n        return 64740\n    if n == 13:\n        return 167968\n    if n == 14:\n        return 466560\n    if n == 15:\n        return 1388800\n    if n == 16:\n        return 4398040\n    if n == 17:\n        return 12406832\n    if n == 18:\n        return 39787968\n    if n == 19:\n        return 108324576\n    if n == 20:\n        return 288684352"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using dynamic programming.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    # Initialize the first two Catalan numbers\n    catalan_numbers = [1, 1]\n    # Compute the remaining Catalan numbers using dynamic programming\n    for i in range(2, n + 1):\n        catalan_numbers.append(sum([catalan_numbers[j] * catalan_numbers[n - j] for j in range(i)]))\n    return catalan_numbers[n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for finding adverbs ending with 'ly'\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Search for adverbs in the text and return the positions\n    matches = re.finditer(pattern, text)\n    positions = [match.start() for match in matches]\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match an adverb ending with ly\n    pattern = r'\\b\\w*[aeiou][a-z]*ly\\b'\n    # Use the re.finditer() method to find all the occurrences of the pattern in the input text\n    matches = re.finditer(pattern, text)\n    # Initialize an empty list to store the adverb positions and their corresponding adverbs\n    adverbs = []\n    # Iterate through all the matches and extract the adverb positions and corresponding adverbs\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        # Add the adverb and its position to the adverbs list\n        adverbs.append((start, adverb))\n    # Return the list of adverb positions and corresponding adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r\"(?<![a-z])(ly)\\b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            positions.append(i)\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # use regular expression to find all adverbs ending with 'ly'\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    \n    # check if any adverbs are found\n    if not matches:\n        return None\n    \n    # find the first adverb ending with 'ly' and its position in the text\n    first_ly = min(matches, key=lambda x: text.index(x))\n    pos = text.index(first_ly)\n    return (first_ly, pos)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b([a-zA-Z]+ly)\\b', text)\n    positions = []\n    for i in range(len(adverbs)):\n        positions.append(text.find(adverbs[i]))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None\n\ntext = \"He is a good person.\"\nstart, end = find_adverbs(text)\nif start is not None and end is not None:\n    print(\"Adverb ending with 'ly' found at positions:\", start, end)\nelse:\n    print(\"No adverb found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern to match the adverb ending with ly\n    pattern = r'\\bly\\b'\n    # use re.findall() function to find all the occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    # initialize an empty list to store the positions of all the adverbs\n    positions = []\n    # iterate over all the adverbs found and store their positions in the list\n    for i, adv in enumerate(adverbs):\n        positions.append((i, i+len(adv)))\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, items[i])\n\n    # Iterate through the remaining items and add them to the min heap\n    for item in items[n:]:\n        heapq.heappushpop(min_heap, item)\n\n    # Return the n most expensive items from the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    \n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n    \n    # Add the first n items to the min-heap\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    \n    # Remove the first item from the min-heap and add the next item to it\n    for i in range(n, len(items)):\n        # Remove the item with the minimum price from the min-heap\n        min_price = heapq.heappop(min_heap)\n        \n        # Add the current item to the min-heap with its updated price\n        heapq.heappush(min_heap, (items[i], i))\n    \n    # Extract the n most expensive items from the min-heap and return them\n    result = []\n    for i in range(n):\n        item = heapq.heappop(min_heap)\n        result.append(item[1])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create an empty min heap\n    min_heap = []\n    # Insert the first n elements of the dataset into the heap\n    for item in items[:n]:\n        heapq.heappush(min_heap, item)\n    # Pop and add the next element from the heap to the new dataset until we have n elements\n    while len(min_heap) < n:\n        item = heapq.heappop(min_heap)\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and a number n, return the n most expensive items in the list.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add each item to the heap if its price is cheaper than the smallest item in the heap\n    for item in items:\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n            if len(min_heap) > n:\n                heapq.heappop(min_heap)\n\n    # Extract and return the n most expensive items from the heap\n    result = []\n    while min_heap:\n        result.append(min_heap[0])\n        heapq.heappop(min_heap)\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    \n    # Iterate through the dataset and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n    \n    # Return the n most expensive items from the heap\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Sort the items by their price in descending order\n    items.sort(key=lambda x: x[1], reverse=True)\n    \n    # Extract the n most expensive items from the sorted list\n    return heapq.nsmallest(n, items)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(max_heap, item)\n        # If the heap is full, remove the least expensive item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the n most expensive items\n    return max_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and\n    returns a list containing the n most expensive items in the dataset.\n    '''\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Create a max heap of the top n items\n    max_heap = [heapq.heappushpop(max_heap, item) for item in sorted_items[:n]]\n    # Return the list of max heap values\n    return [item for item in max_heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Add the first part to the end of the second part\n    l = first_part + second_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[n-1]] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if isinstance(l, list):\n        if n < len(l):\n            return [l[n]] + l[:n]\n        else:\n            return [l[n]]\n    else:\n        raise ValueError(\"Input must be a list\")"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Concatenate the first part with the second part\n    result = first_part + second_part\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    \n    arr1 = l[:n]\n    arr2 = l[n:]\n    return arr1 + arr2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list and an index n as input and splits the list at the nth element\n    and adds the first part to the end.\n    \"\"\"\n    if n == 0:\n        return l\n    else:\n        return split_Arr(l[1:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return None\n    \n    # Split the list at the nth element\n    mid = n // 2\n    left = l[:mid]\n    right = l[mid:]\n    \n    # Add the left part to the end of the right part\n    l = right + left\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    # find the difference between the largest and smallest values\n    diff = nums[-1] - nums[0]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between max and min\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    min_val = min(nums)\n    max_val = max(nums)\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # iterate through the list\n    for num in nums:\n        # update max value\n        if num > max_val:\n            max_val = num\n\n        # update min value\n        if num < min_val:\n            min_val = num\n\n    # return the difference between max and min\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for n in range(a, b+1):\n        square = n*n\n        if square == b:\n            squares.append(n)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Start with the smallest number\n    i = a\n\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through the numbers in the range of a to b\n    while i <= b:\n        # Check if the current number is a perfect square\n        if i**2 == i:\n            perfect_squares_list.append(i)\n        i += 1\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through a range of numbers between a and b\n    for i in range(a, b + 1):\n        # Check if the square of the current number is less than or equal to b\n        if i ** 2 <= b:\n            # Print the square of the current number if it is\n            print(i ** 2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns a list of all perfect squares between a and b.\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        square = num ** 2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if a and b are both positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        raise ValueError('Both a and b must be positive integers.')\n\n    # Initialize a list to store the perfect squares found\n    squares = []\n\n    # Loop through a and b in reverse order\n    for i in range(b, a-1, -1):\n        # Check if the current number is a perfect square\n        square = i**2\n        if square == i:\n            # If it is, add it to the list of perfect squares found\n            squares.append(square)\n\n    # Return the list of perfect squares found\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5)+1):\n        squares.append(i**2)\n    squares.append(a**2)\n    for i in range(int(b**0.5)+1):\n        squares.append(b**2)\n    squares.append(b**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Loop through all integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Calculate the square of the current integer\n        square = i*i\n        # Check if the square is equal to the difference between the two numbers\n        if square == b - a:\n            # If it is, return the current integer\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize the list of primes to True\n    primes = [True] * (b + 1)\n\n    # Find the first prime number\n    for i in range(2, int(b**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, b + 1, i):\n                primes[j] = False\n\n    # Initialize a dictionary to store the perfect squares\n    perfect_squares = {}\n\n    # Find the perfect squares between a and b\n    for i in range(a, b + 1):\n        if primes[i]:\n            perfect_squares[i] = i*i\n\n    return perfect_squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert radian to degree\n    theta = cmath.phase(theta) * 180 / cmath.pi\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: The tuple of (x, y) coordinates in rectangular coordinates.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,phi):\n    '''\n    This function takes two parameters, r and phi, and returns the corresponding rectangular coordinates.\n    \n    r: The radius of the circle.\n    phi: The angle from the x-axis (in radians) of the circle.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x+y*1j)\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n\n    # check if the list is empty\n    if length == 0: \n        return newList\n\n    # get the first and last elements of the list\n    firstElement = newList[0]\n    lastElement = newList[length-1]\n\n    # interchange the first and last elements\n    newList[0] = lastElement\n    newList[length-1] = firstElement\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        print(\"The given list should have at least two elements.\")\n        return None"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList) # getting the length of the list\n    if n%2 == 0: # checking if the length is even or odd\n        newList[n-1], newList[0] = newList[0], newList[n-1] # swapping the first and last elements\n    else:\n        newList[n-2], newList[n-1] = newList[n-1], newList[n-2] # swapping the first and second last elements\n    return newList # returning the updated list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return newList \n    else: \n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the length of the list\n    length = len(newList)\n\n    # Find the index of the last element\n    lastIndex = length - 1\n\n    # Interchange the first and last elements\n    newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Interchanging the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Returning the modified list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return None\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    # check if n is negative or k is negative\n    if n < 0 or k < 0:\n        return None\n\n    # check if k is greater than n\n    if k > n:\n        return None\n\n    # check if k is zero or one\n    if k == 0 or k == 1:\n        return 1\n\n    # initialize the sum to zero\n    total = 0\n\n    # iterate through all possible values of k\n    for i in range(k, n + 1):\n        # find the binomial coefficient\n        coeff = binomial(n, i)\n\n        # add the coefficient to the sum\n        total += coeff\n\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(k, n+1):\n        sum += (i*(n-i+1)) // (k*(k-1))\n        count += 1\n\n    return sum, count"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k == 0 or k == n:\n        return 1\n    elif k > n:\n        return 0\n\n    # Initialize the sum and the product of consecutive binomial co-efficients\n    sum_coeff = 0\n    prod_coeff = 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1,k+1):\n        sum_coeff += prod_coeff\n        prod_coeff *= (n-i+1)\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Calculate the binomial coefficient using the formula\n    # C(n,k) = (n!)/(k! * (n-k)!)\n    n_factorial = 1\n    for i in range(1,n+1):\n        n_factorial *= i\n\n    k_factorial = 1\n    for i in range(1,k+1):\n        k_factorial *= i\n\n    k_n_factorial = 1\n    for i in range(1,k+n-1):\n        k_n_factorial *= i\n\n    binomial_coeff = n_factorial // k_n_factorial // k_factorial\n\n    # Calculate the product of consecutive binomial coefficients\n    product = 1\n    for i in range(1,n-k+1):\n        product *= binomial_coeff\n        sum += product\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    if n == 0 or k == 0 or k > n:\n        return 0\n    else:\n        return ((n * (n - 1)) // 2) + binomial_Coeff(n-1, k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    # Initialize the sum to 0\n    coeff_sum = 0\n\n    # Iterate through all possible combinations of k numbers\n    for i in range(n+1-k):\n        # Calculate the binomial coefficient\n        coeff = (n-i) * 1.0 / k\n\n        # Add the binomial coefficient to the sum\n        coeff_sum += coeff\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of binomial coefficients\n    binomial_sum = 0\n\n    # Calculate the binomial coefficient using recursion\n    for i in range(n, n-k, -1):\n        binomial_sum += binomial_Coeff(i,k) * (n-i+1)\n\n    # Return the sum of binomial coefficients\n    return binomial_sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?!\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to remove leading zeroes from the ip address\n    ip = re.sub('^0+', '', ip)\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^(?:\\d{1,3}\\.){3}\\d{1,3}$\"\n    if re.match(pattern, ip):\n        return re.sub(r\"^(?:\\d{1,3}\\.){3}\\d{1,3}\\.0*$\", \"\", ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    ip_parts = re.findall(r'(\\d+\\.\\d+\\.\\d+\\.\\d+)', ip)\n    ip_parts = [re.sub(r'^0+', '', part) for part in ip_parts]\n    # join the octets back together and return\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # remove any leading zeroes from the IP address\n    return re.sub(r'(\\d)([0-9]\\d{3})\\1\\2', r'\\1\\2', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$')\n    if pattern.match(ip):\n        ip_tuple = tuple(map(int, ip.split('.')))\n        ip_tuple = tuple(filter(lambda x: x!= 0, ip_tuple))\n        return '.'.join(map(str, ip_tuple))\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from ip address\n    ip = re.sub('^0+','', ip)\n\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile('^(\\d+\\.\\d+\\.\\d+\\.\\d+)$')\n    if pattern.match(ip):\n        return pattern.sub(r'\\1', ip)\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the input is a list\n    if type(list1)!= list:\n        print(\"Error: Input is not a list.\")\n        return\n    \n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    \n    # Loop through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = even + num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = odd + num\n    \n    # Check if even and odd numbers are both found\n    if even is None or odd is None:\n        print(\"Error: No even or odd numbers found in the list.\")\n        return\n    \n    # Calculate the difference of even and odd numbers and return it\n    diff = abs(even - odd)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    even_odd_diff = even_num - odd_num\n    return even_odd_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and finds the difference between the first even and first odd number in the list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return first_even - num\n        elif first_odd is None:\n            first_odd = num\n        else:\n            return first_odd - num\n    return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store the even and odd numbers in the list\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num -= odd_num\n                odd_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num -= even_num\n                even_num = num\n    \n    # Return the difference of the even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables for even and odd numbers\n    even = 0\n    odd = 0\n\n    # Loop through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    # Calculate the difference between even and odd numbers\n    diff = even - odd\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(list1) < 2:\n        return \"Error: List must have at least 2 elements\"\n\n    # Initialize variables for even and odd numbers\n    even_num = odd_num = None\n\n    # Loop through the list and find the even and odd numbers\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n        else:\n            odd_num = list1[i]\n            break\n\n    # Check if even and odd numbers were found\n    if even_num is None or odd_num is None:\n        return \"Error: Could not find even and odd numbers in the list\"\n\n    # Calculate the difference of the even and odd numbers\n    diff = even_num - odd_num\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n\n    even_num = lst[0]\n    odd_num = lst[1]\n\n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n    else:\n        diff = odd_num - even_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the even number and odd number in the list\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    # Find the difference of the even and odd numbers\n    diff = even_num - odd_num\n\n    # Return the difference of the even and odd numbers\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even number in the list\n    first_even = None\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n            break\n\n    # Find the first odd number in the list\n    first_odd = None\n    for num in list1:\n        if num % 2!= 0:\n            first_odd = num\n            break\n\n    # Calculate the difference between the first even and first odd numbers\n    difference = first_even - first_odd\n\n    return difference"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert both strings to binary\n    binary1 = bin(int(str1))[2:]\n    binary2 = bin(int(str2))[2:]\n\n    # Compare the length of the binary strings\n    len1 = len(binary1)\n    len2 = len(binary2)\n\n    # Initialize two variables to store the number of swaps required\n    swaps = 0\n    swaps_needed = 0\n\n    # Loop through the two binary strings\n    for i in range(len1):\n        # If the characters in the strings do not match, swap the characters and increment the swaps counter\n        if binary1[i]!= binary2[i]:\n            binary1[i], binary2[i] = binary2[i], binary1[i]\n            swaps += 1\n\n            # If the swaps required is greater than the current swaps needed, update the swaps needed\n            if swaps_needed > swaps:\n                swaps_needed = swaps\n\n    # Return the minimum number of swaps required to convert the binary strings\n    return swaps_needed"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert binary strings to binary lists\n    binary1 = [int(i) for i in str1]\n    binary2 = [int(i) for i in str2]\n    # calculate lengths of binary lists\n    n1 = len(binary1)\n    n2 = len(binary2)\n    # initialize count variable to 0\n    count = 0\n    # loop through all possible swap pairs\n    for i in range(n1):\n        for j in range(n2):\n            # if first string is smaller or equal to second string\n            if binary1[i] <= binary2[j]:\n                # if second string is smaller than second element of first string\n                if binary2[j] < binary1[i+1]:\n                    # increment count variable by 1\n                    count += 1\n    # return count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # calculate the number of ones in str1\n    ones1 = sum(1 for bit in str1 if bit == '1')\n    # calculate the number of ones in str2\n    ones2 = sum(1 for bit in str2 if bit == '1')\n    # calculate the number of swaps required to convert str1 to str2\n    swaps = abs(ones1 - ones2)\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the given strings to binary format\n    bin1 = bin(int(str1, 2))[2:].zfill(len(str1))\n    bin2 = bin(int(str2, 2))[2:].zfill(len(str2))\n\n    # Initialize variables for swaps count and maximum swaps\n    count = 0\n    max_swaps = 0\n\n    # Loop through the characters in the binary strings\n    for i in range(len(bin1)):\n        # If the characters are different, swap them and update the count\n        if bin1[i]!= bin2[i]:\n            count += 1\n            # Update the maximum swaps count\n            if count > max_swaps:\n                max_swaps = count\n\n    return max_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert\n    one binary number to another.\n\n    The function uses the dynamic programming approach. We start by creating a 2D table where the first row represents\n    the binary number represented as a string in str1 and the second row represents the binary number represented\n    as a string in str2. We initialize the first row of the table with the values of the first row of the given\n    binary strings.\n\n    Then, we iterate over the second row of the table to calculate the minimum number of swaps required to convert\n    one binary number represented as a string in str2 to a binary number represented as a string in str1. We\n    keep track of the minimum number of swaps seen so far and update it whenever we find a smaller value.\n\n    Finally, we return the minimum number of swaps required to convert one binary number represented as a string in\n    str1 to a binary number represented as a string in str2.\n    \"\"\"\n\n    # Initialize the first row of the table with the values of the first row of the given binary strings\n    dp = [[0]*(len(str2)+1) for _ in range(len(str1)+1)]\n\n    # Fill the first row of the table\n    for i in range(1, len(str1)+1):\n        dp[i][0] = dp[i-1][0] + 1\n\n    for j in range(1, len(str2)+1):\n        dp[0][j] = dp[0][j-1] + 1\n\n    # Fill the rest of the table\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            # Check if the last digit of str1 is less than or equal to the last digit of str2\n            if int(str1[-1]) <= int(str2[-1]):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n            else:\n                # If not, swap the last digits and check if the result is smaller than the current value\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n\n    # Return the minimum number of swaps required to convert one binary number represented as a string in str1\n    # to a binary number represented as a string in str2\n    return dp[-1][-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary representation\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Find the length of the binary strings\n    n1 = len(bin1)\n    n2 = len(bin2)\n\n    # Initialize variables to store the minimum number of swaps required\n    swaps = 0\n    diff = 0\n\n    # Iterate over the binary strings and compare them\n    for i in range(n1):\n        if bin1[i]!= bin2[i]:\n            diff = i\n            break\n\n    # If there is a difference, swap the bits at the difference positions\n    if diff!= 0:\n        for i in range(diff, diff + n1):\n            bin1 = bin1[:i] + bin1[i+1:] + bin1[i]\n            bin2 = bin2[:i] + bin2[i+1:] + bin2[i]\n            swaps += 1\n\n    # Compare the remaining bits of the binary strings and update the swaps variable\n    for i in range(n1, n2):\n        if bin1[i]!= bin2[i]:\n            diff = i\n            break\n\n    # If there is a difference, swap the bits at the difference positions\n    if diff!= 0:\n        for i in range(diff, diff + n2):\n            bin1 = bin1[:i] + bin1[i+1:] + bin1[i]\n            bin2 = bin2[:i] + bin2[i+1:] + bin2[i]\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through all possible swaps\n    for i in range(len(str1)):\n        if str1[i] == '0' and str2[i] == '1':\n            str1 = str1[:i] + '1' + str1[i+1:]\n            str2 = str2[:i] + '0' + str2[i+1:]\n            swaps = 0\n            for j in range(len(str1)):\n                if str1[j]!= str2[j]:\n                    swaps += 1\n                    break\n            if swaps < min_swaps:\n                min_swaps = swaps\n                num1 = int(str1, 2)\n                num2 = int(str2, 2)\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to lists of 0's and 1's\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    # Find the length of the longer string\n    maxLength = max(len(list1), len(list2))\n    # Initialize the variables for the swap count and minimum swaps\n    count = 0\n    minSwaps = maxLength\n    # Iterate through all possible pairs of characters in the strings\n    for i in range(maxLength):\n        # If the i-th character of list1 is different from the i-th character of list2, swap them\n        if list1[i]!= list2[i]:\n            count += 1\n            if count < minSwaps:\n                minSwaps = count\n    # Return the minimum number of swaps required to convert the binary strings\n    return minSwaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # Convert the binary numbers to their decimal values\n    dec1 = int(str1, 2)\n    dec2 = int(str2, 2)\n    \n    # Initialize a variable to store the number of swaps\n    swaps = 0\n    \n    # Compare the decimal values and count the number of swaps required\n    while dec1!= dec2:\n        if dec1 < dec2:\n            dec1 = dec1 << 1\n            swaps += 1\n        else:\n            dec2 = dec2 << 1\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # count number of swaps required\n    swaps = 0\n    while num1!= num2:\n        # check if bits are equal\n        if num1 & 1 == num2 & 1:\n            # bits are not equal, swap bits\n            if num1 & 1 == 1:\n                num1 = (num1 - 1) & num2\n            else:\n                num2 = (num2 - 1) & num1\n            num1 = (num1 + num2) % (1 << 32)\n            num2 = (num1 + num2) % (1 << 32)\n            swaps += 1\n        # bits are equal, remove one of them\n        else:\n            if num1 & 1 == 1:\n                num1 = (num1 - 1) & num2\n            else:\n                num2 = (num2 - 1) & num1\n            num1 = (num1 + num2) % (1 << 32)\n            num2 = (num1 + num2) % (1 << 32)\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Create an empty list to store the sizes in bytes of each element of the tuple\n    sizes = []\n    \n    # Iterate over each element in the tuple\n    for element in tuple_list:\n        # Use the sys.getsizeof() function to get the size in bytes of the element\n        sizes.append(sys.getsizeof(element))\n    \n    # Return the total size of the tuple in bytes by multiplying all the sizes together\n    return sum(sizes)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    def sizeof_fmt(num, suffix='B'):\n        for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n            if abs(num) < 1024.0:\n                return f\"{num:.2f}{unit}{suffix}\"\n            num /= 1024.0\n        return f\"{num:.2f}Yi{suffix}\"\n\n    size_list = []\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        size_list.append(size)\n\n    return sum(size_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            size += sys.getsizeof(tuple_list[i][j])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for tuple in tuple_list:\n        for item in tuple:\n            total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setcheckinterval(1)  # disable recursion limit for large tuples\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays into one sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Find the kth element\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    while i < len(arr1):\n        if i == k:\n            return arr1[i]\n        i += 1\n    while j < len(arr2):\n        if j == k:\n            return arr2[j]\n        j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize variables for the pointers for each array\n    i = j = 0\n\n    # Initialize a variable for the kth element\n    kth = None\n\n    # Compare the elements at the pointers of both arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return (arr1[i], arr2[j])\n            else:\n                k -= 2\n\n        # Move the pointers for the smaller array\n        if len(arr1) - i < len(arr2) - j:\n            i += 1\n        else:\n            j += 1\n\n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers to the start of the arrays\n    i = 0\n    j = 0\n\n    # Iterate until both pointers have iterated through the arrays\n    while i < n1 and j < n2:\n        # Compare the elements at the current pointers\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the elements are equal, increment the pointer for both arrays\n            i += 1\n            j += 1\n\n    # Return the value at the kth pointer\n    if i >= k:\n        return arr1[i-1]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n\n    # Compare the first m elements of the two arrays\n    i = 0\n    while i < m and k > 0:\n        if arr1[i] < arr2[0]:\n            k -= 1\n        i += 1\n\n    # If there are still k elements to go, compare the next n-m elements of the second array\n    if k > 0:\n        j = 0\n        while j < n and k > 0:\n            if arr2[j] < arr1[m]:\n                k -= 1\n            j += 1\n\n    return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        num_digits = len(str(number))\n        sum = 0\n        temp_number = number\n        while temp_number > 0:\n            digit = temp_number % 10\n            sum += digit ** num_digits\n            temp_number //= 10\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # Convert the given number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cubes of all the digits in the number\n    sum_of_cubes = 0\n    for digit in number_str:\n        sum_of_cubes += int(digit)**3\n\n    # Compare the sum of the cubes of all the digits with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Check if the number is less than 10\n    if number < 10:\n        return False\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cubes of the digits of the number\n    sum_cubes = 0\n    for digit in number_str:\n        digit = int(digit)\n        sum_cubes += digit ** 3\n\n    # Compare the sum with the original number\n    if sum_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    number_str = str(number)\n    \n    # Calculate the sum of the cubes of the digits of the number\n    sum_of_cubes = sum([int(digit)**3 for digit in number_str])\n    \n    # Compare the sum with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check if a number is Armstrong or not.\n    \"\"\"\n    s = sum(int(digit)**len(str(n)) for digit in str(n))\n    return s == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    A function to check whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    num_sum = 0\n    temp = num_str\n\n    for i in range(num_len):\n        temp = int(temp)\n        temp = temp ** len(num_str)\n        num_sum += temp\n\n    if num == num_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an Armstrong number, else False.\n    '''\n\n    # Convert the number to a list of digits\n    num_list = [int(i) for i in str(number)]\n\n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = sum([int(digit)**3 for digit in num_list])\n\n    # Compare the sum of cubes with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reverse_num = str(number)[::-1]\n    # Calculate the sum of the cubes of the digits in the number\n    sum_of_cubes = sum(int(digit)**3 for digit in number)\n    # Compare the two sums\n    return sum_of_cubes == int(reverse_num)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def digit_sum(n):\n        '''\n        Returns the sum of the digits of a given number.\n        '''\n        return sum(int(digit) ** len(str(n)) for digit in str(n))\n\n    if number < 10:\n        return False\n\n    return digit_sum(number) == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number else False.\n    \"\"\"\n    n = int(n)\n    total = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return n == total\n\nnum = int(input(\"Enter a number: \"))\n\nif is_armstrong(num):\n    print(\"The number is Armstrong.\")\nelse:\n    print(\"The number is not Armstrong.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= number:\n        sum += count\n        count += 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_list += i\n        count += 1\n    average = sum_list / count\n    return sum_list, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the value of n: \"))\n    if n <= 0:\n        print(\"Invalid input\")\n        return\n    \n    sum_n = 0\n    for i in range(n):\n        num = int(input(\"Enter the {}th number: \".format(i+1)))\n        sum_n += num\n    \n    average = sum_n / n\n    \n    print(\"The sum of the first {} natural numbers is: {}\".format(n, sum_n))\n    print(\"The average of the first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_numbers = 0\n    count = 0\n    total = 0\n    \n    while count < number:\n        count += 1\n        total += count\n        \n        if count == number:\n            sum_numbers += total\n    \n    average = sum_numbers/number\n    \n    return sum_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # loop through the first n numbers\n    for i in range(n):\n        # add the current number to the sum\n        sum += i\n\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    total = 0\n    for i in range(1, number+1):\n        sum += i\n        total += 1\n    average = sum / total\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= number:\n        sum += count\n        count += 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the characters and their counts\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it and set its count to 1\n        else:\n            char_count[char] = 1\n\n    # iterate through each character in the string again\n    for char in str1:\n\n        # if the character count is 2 or more, it is the first repeated character\n        if char_count[char] >= 2:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # loop through the dictionary and find the first repeated character\n    for char, freq in freq.items():\n        if freq > 1:\n            return char\n    # if no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character in the string\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    # Initialize an empty dictionary to store the character counts\n    char_count = {}\n\n    # Iterate through the string and count the occurrence of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the dictionary and return the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize an empty dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to a set to remove duplicates\n    unique_chars = set(str1)\n    # iterate over the unique characters to find the first repeated character\n    for char in unique_chars:\n        if str1.count(char) > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first repeated character in the dictionary\n    for char, count in freq.items():\n        if count > 1:\n            return char\n\n    # if no repeated character found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = []\n    current_num = 0\n    while current_num <= n:\n        if current_num % 3 == 0 and current_num % 5 == 0:\n            lucid_nums.append(current_num)\n        current_num += 1\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    \n    while i <= n:\n        if i % 2 == 0:\n            j = 3\n            while j <= i//2:\n                if i % j == 0:\n                    break\n                j += 2\n        else:\n            j = 1\n            while j <= i//2:\n                if i % j == 0:\n                    break\n                j += 2\n        lucid_numbers.append(i)\n        i += 1\n    \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    while lucid[-1] * lucid[-1] <= n:\n        lucid.append(lucid[-1] * lucid[-1] + 1)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid.append(i)\n        i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i * (i + 1) <= n:\n        lucid_numbers.append(i * (i + 1))\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            if len(lucid_numbers) > 0:\n                lucid_numbers.pop()\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove leading and trailing whitespaces\n    s = s.strip()\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back together\n    reversed_words =''.join([word[::-1] for word in words])\n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the reversed words\n    reversed_words = []\n\n    # Iterate over the words and add them to the reversed list in reverse order\n    for word in words:\n        reversed_words.append(word[::-1])\n\n    # Join the reversed words back into a single string and return it\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into words\n    words = s.split()\n\n    # Reversing the words\n    words = words[::-1]\n\n    # Joining the words back together into a string\n    s =''.join(words)\n\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back together\n    reversed_string =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number to check if it is a prime number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime or not.\n\n    Args:\n    num: an integer\n\n    Returns:\n    True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Args:\n    num: an integer\n\n    Returns:\n    True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n\n    if num == 2 or num == 3:\n        return True\n\n    if num % 2 == 0:\n        return False\n\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if num is less than 2\n    if num < 2:\n        return False\n    # iterate from 2 to the square root of num\n    for i in range(2, int(num ** 0.5) + 1):\n        # check if num is divisible by i\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Returns True if num is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # If the given number is less than 2, then it is not a prime number\n    if num < 2:\n        return False\n    \n    # Check if the given number is divisible by any number from 2 to the square root of the given number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If the given number is divisible by any number from 2 to the square root of the given number, then it is a prime number\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.pi * degree / 180.0\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n\n    rad = math.radians(degree)\n    return rad"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi/180\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    \n    for match in matches:\n        return match[0], match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    result = re.findall(pattern, text)\n    if result:\n        # Return the first match\n        return result[0], 0, len(result[0])\n    else:\n        # Return None if there are no matches\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex to find the pattern\n    matches = re.findall(pattern, text)\n    \n    # Check if matches are found\n    if not matches:\n        return None\n    \n    # Iterate through the matches and return the first one\n    for match in matches:\n        return match"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    start_index = 0\n    end_index = 0\n    for match in matches:\n        start_index = text.index(match, start_index)\n        end_index = start_index + len(match)\n        start_index += len(match)\n    return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # compile the regex pattern\n    regex_pattern = re.compile(pattern)\n\n    # search for the pattern in the text\n    matches = regex_pattern.findall(text)\n\n    # if there are matches, return them\n    if len(matches) > 0:\n        match_start = regex_pattern.search(text).start()\n        match_end = regex_pattern.search(text).end()\n        return matches[0], match_start, match_end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        # Extract start and end indices for each literal found\n        literal_starts = [m.start() for m in matches]\n        literal_ends = [m.end() for m in matches]\n        # Combine start and end indices for each literal found\n        all_matches = [text[start:end] for start, end in zip(literal_starts, literal_ends)]\n        return all_matches\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        return None\n    \n    if n == 0: \n        return 0\n    \n    if n == 1: \n        return 1\n    \n    return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 0\n    b = 1\n    for i in range(2,n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + 4 * bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth Bell number.\n\n    Parameters:\n    n (int): The value of n for which we want to find the Bell number.\n\n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    return n * (n - 1) // 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer\"\n    else:\n        return bin(2**n - 1)[2:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    while k > 0:\n        list1.pop(k)\n        k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return None\n    else:\n        return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # create a copy of the list to remove the k'th element from\n    list2 = list1.copy()\n    # remove the k'th element from list2\n    list2.pop(L-1)\n    # return the updated list2\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a list with the same elements as the input list\n    new_list = list1[:]\n    # Remove the kth element from the list\n    new_list.pop(L-1)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L < 1:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:L] + list1[L+1:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(L):\n        new_list.append(list1[i])\n    new_list.pop(L-1)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Create an empty list to store the new list\n    new_list = []\n\n    # Iterate through the list\n    for i in range(len(list1)):\n\n        # If the current index is not equal to the k'th element\n        if i!= L-1:\n\n            # Append the element to the new list\n            new_list.append(list1[i])\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a position k as input.\n    It removes the kth element from the list and returns the modified list.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Convert the matrix to a numpy array\n    test_matrix = np.array(test_list)\n    \n    # Calculate the max of then'th column\n    max_col = np.max(test_matrix[:,N-1])\n    \n    # Return the max of then'th column\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # loop through each row in the matrix\n    max_val = None\n    for row in test_list:\n        # check if the current row has the nth column\n        if N <= num_cols:\n            # if it does, compare the value in the nth column to the current max value\n            if max_val is None or row[N-1] > max_val:\n                max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize a counter to keep track of the nth column\n    count = 0\n    \n    # loop through the rows of the matrix\n    for row in test_list:\n        # check if we've found the nth column\n        if count == N:\n            # find the maximum value in the column\n            max_val = max(row)\n            # return the maximum value\n            return max_val\n        # increment the counter\n        count += 1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # find the length of the first list in the matrix\n    num_rows = len(test_list)\n\n    # check if N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        print(\"Error: N must be a positive integer.\")\n        return\n\n    # check if N is within range of matrix rows\n    if N > num_rows:\n        print(\"Error: N must be less than or equal to the number of rows in the matrix.\")\n        return\n\n    # find the index of then'th column\n    col_index = N - 1\n\n    # initialize the max value to the first value in the column\n    max_val = test_list[0][col_index]\n\n    # loop through the remaining elements in the matrix\n    for i in range(1, num_rows):\n        # if the value at the current index is greater than the current max, update the max value\n        if test_list[i][col_index] > max_val:\n            max_val = test_list[i][col_index]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n\n    # check if N is a valid input\n    if N >= num_cols:\n        raise ValueError(\"N must be less than or equal to the number of columns in the matrix.\")\n\n    # initialize the max value to the first element in then'th column\n    max_val = test_list[0][N]\n\n    # iterate through the remaining elements of the matrix and find the max value of each row\n    for i in range(1, num_rows):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Check if N is within the bounds of the matrix\n    if N < 0 or N >= num_rows:\n        return \"Invalid N value. N should be between 0 and \" + str(num_rows - 1) + \".\"\n    \n    # Find then'th column\n    nth_col = [row[N] for row in test_list]\n    \n    # Find the maximum value in then'th column\n    max_val = max(nth_col)\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(matrix, n):\n    \"\"\"\n    This function takes a matrix and the nth column to find the maximum value in that column.\n    \"\"\"\n    max_value = 0\n    for i in range(len(matrix)):\n        if matrix[i][n] > max_value:\n            max_value = matrix[i][n]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in matrix:\n        val = row[N-1]\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(matrix)):\n        matrix[i].insert(N, max(matrix[i][N-1], matrix[i][N+1]))\n    return matrix"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    result = []  \n    for i in range(len(lst)):  \n        if i == 0:  \n            result.append([lst[i][0], lst[i][1]])  \n        else:  \n            result.append([lst[i-1][0] + lst[i][0], lst[i-1][1] + lst[i][1]])  \n    return result  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Extract the value from the tuple\n        value = tup[0]\n        \n        # Add the value to the cumulative sum\n        cum_sum += value\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    # Iterate over each tuple in the list\n    for i in test_list:\n        # Check if the value is a number\n        if isinstance(i, (int, float)):\n            # If it is, add it to the cumulative sum\n            cumulative_sum += i\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    if not isinstance(test_list, list):\n        raise TypeError(\"The input should be a list of tuples.\")\n    total = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            total += test_list[i][1] + test_list[j][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes in a tuple list and returns the cumulative sum of all the values present in the list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n\n    # Iterate through the tuple list\n    for item in test_list:\n        # If the item is not None, add its value to the cumulative sum\n        if item is not None:\n            cum_sum += item\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values in the list.\n    '''\n    total = 0\n    for value in test_list:\n        total += value\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for i in nums:\n        total = sum(i)\n        avg = total/len(i)\n        num_list.append(avg)\n    return num_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    avg_list = []\n\n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average value of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average value to the list\n        avg_list.append(avg)\n\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        averages.append(sum/len(i))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        num_of_elements = len(num_tuple)\n        average = total / num_of_elements\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total_sum += num\n            count += 1\n    average = total_sum / count\n    return average"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sub_tuple in nums:\n        total = sum(sub_tuple)\n        averages.append(total/len(sub_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    avg_list = []\n    \n    # iterate over each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize an empty list to store the values in the tuple\n        value_list = []\n        \n        # iterate over each value in the tuple\n        for val in tup:\n            # append each value to the value list\n            value_list.append(val)\n            \n        # calculate the average of the tuple\n        avg = sum(value_list) / len(value_list)\n        \n        # append the average to the average list\n        avg_list.append(avg)\n    \n    # return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for num_tuple in nums:\n        if len(num_tuple) > 0:\n            avg = sum(num_tuple) / len(num_tuple)\n            avg_list.append(avg)\n        else:\n            avg_list.append(0)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return\n    \n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] % test_tup2[i]),)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths must be the same.')\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    # perform element wise modulo\n    result_tup = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < 0:\n            test_tup1[i] += 2**len(test_tup1[i])\n        if test_tup2[i] < 0:\n            test_tup2[i] += 2**len(test_tup2[i])\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Perform element-wise modulo\n    modulo_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n    # Return the modulo tuple\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo operation.\n    '''\n    # Check if the lengths of the input tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the input tuples should be same\")\n    else:\n        # Perform element-wise modulo operation\n        modulo_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n        return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # creating a 2d list to store the path taken\n    path = [[0 for _ in range(steps + 1)] for _ in range(d + 1)]\n\n    # initializing the path with the starting point\n    for i in range(1, d+1):\n        path[i][0] = i\n\n    # iterating through the rest of the points\n    for i in range(1, steps+1):\n        # getting the minimum number of jumps to reach the next point\n        min_jump = min(path[j][i-1] + 1 for j in range(1, d+1))\n\n        # updating the path with the new values\n        for j in range(1, d+1):\n            path[j][i] = min_jump\n\n    # returning the minimum number of jumps required\n    return min(path[j][steps] for j in range(1, d+1))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two arguments, steps and d.\n    steps is the length of the given path and d is the destination point's x-coordinate.\n    The function returns the minimum number of jumps required to reach the destination point.\n    \"\"\"\n    # initialize the number of jumps required to reach (0, 0)\n    min_jumps = 0\n\n    # iterate over each position in the path\n    for step in range(steps):\n        # update the minimum jumps required if the destination point is reached\n        if step == 0 and d == 0:\n            min_jumps = step\n            break\n\n        # if the current position is on the first row\n        if step == 0:\n            # update the minimum jumps required if the destination point is reached\n            if d == 0:\n                min_jumps = step\n                break\n\n            # update the minimum jumps required if the destination point is not reached\n            else:\n                min_jumps += 1\n\n        # if the current position is not on the first row\n        else:\n            # update the minimum jumps required if the destination point is reached\n            if d == 0 and step > 0:\n                min_jumps = step\n                break\n\n            # update the minimum jumps required if the destination point is not reached\n            else:\n                min_jumps += 1\n\n    # return the minimum jumps required to reach the destination point\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    table = [[0] * (steps+1) for _ in range(steps+1)]\n    \n    # Fill first row and first column\n    for i in range(1, steps+1):\n        table[i][0] = 1\n        table[0][i] = 1\n    \n    # Fill table in bottom-up manner\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            table[i][j] = min(table[i-1][j], table[i][j-1]) + 1 if abs(i-j) == d else float('inf')\n    \n    return table[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    x, y = 0, 0\n    count = 0\n\n    # check if starting point is (d, 0)\n    if (d, 0) == (x, y):\n        return count\n\n    # check if starting point is not (d, 0)\n    while x < steps:\n        # move to (d, 0) if possible\n        if y == 0 and x >= d:\n            x -= d\n        # move down if y < d\n        elif y < d:\n            y += 1\n        # move up if y == d\n        else:\n            y -= 1\n            # check if d is possible\n            if x >= d:\n                x -= d\n            else:\n                # jump if possible\n                if x == d:\n                    count += 1\n                    x -= d\n                else:\n                    # check if jump is possible\n                    if d + 1 >= x:\n                        x -= d + 1\n                    else:\n                        x -= d\n        # check if goal point is reached\n        if (x, y) == (steps, 0):\n            break\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    current_pos = 0\n    target_pos = (0, d)\n    \n    while current_pos < len(steps) and target_pos in steps:\n        current_pos += steps[current_pos]\n        jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize a variable to store the number of jumps required\n    jumps = 0\n\n    # Loop through the number of steps\n    for i in range(1, steps+1):\n\n        # If the current step is greater than d, then increment the jumps\n        if i > d:\n            jumps += 1\n\n        # If the current step is not greater than d, then move to the next step\n        else:\n            d -= i\n\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables for jump count and current position\n    jump_count = 0\n    pos = 0\n\n    # Initialize variables for maximum position and maximum jump count\n    max_pos = 0\n    max_jump = 0\n\n    # Iterate through the steps and calculate the maximum position and maximum jump count\n    for i in range(len(steps)):\n        if pos + steps[i] > d:\n            jump_count += 1\n            pos = min(d, pos + steps[i] - d)\n            max_pos = max(max_pos, pos)\n            max_jump = max(max_jump, jump_count)\n\n    # Return the maximum jump count\n    return max_jump"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(1, steps+1):\n        if i >= d:\n            count += 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments: steps and d. Steps is a list of integers representing the number of steps required to reach a point of the form (d, 0).\n    d is the number of units of distance to reach the point (d, 0).\n    \n    The function returns the minimum number of jumps required to reach the point (d, 0) from origin.\n    \n    If d is not reachable from origin, the function will return -1.\n    '''\n    \n    # Sort the list of steps in non-decreasing order\n    steps.sort()\n    \n    # Initialize variables to keep track of the current position and the number of jumps\n    current_pos = 0\n    count = 0\n    \n    # Loop through the sorted list of steps\n    while current_pos < len(steps):\n        \n        # Calculate the next position by adding the current step to the current position\n        next_pos = current_pos + steps[current_pos]\n        \n        # If the next position is less than the given distance, increment the count and move to the next step\n        if next_pos < d:\n            current_pos += 1\n            count += 1\n        # If the next position is equal to the given distance, return the count\n        elif next_pos == d:\n            return count\n        # If the next position is greater than the given distance, decrement the count and move to the next step\n        else:\n            count -= 1\n            current_pos += 1\n    \n    # If the end of the list of steps is reached, return the count\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    current_position = 0\n    destination = (d, 0)\n\n    # Loop through the list of steps\n    while current_position < len(steps):\n        # Check if the current position is equal to the destination\n        if steps[current_position] == destination:\n            return jumps\n        # Calculate the next position and check if it is within the bounds of the list\n        next_position = current_position + steps[current_position]\n        if next_position < 0 or next_position >= len(steps):\n            return -1\n        # Move to the next position and increment the jumps counter\n        current_position = next_position\n        jumps += 1\n    # If the loop completes without finding the destination, return -1\n    return -1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of both lists are equal\n    if len(nums1)!= len(nums2):\n        return \"Both lists should have the same length\"\n    \n    # Initialize a new list to store the result\n    result = []\n    \n    # Loop through each element in the lists\n    for i in range(len(nums1)):\n        # Divide the first element of nums1 by the second element of nums2\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError('Cannot divide by zero')\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    non_num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    return ''.join(non_num_list) + ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    numbers = [char for char in test_str if char.isdigit()]\n    non_numbers = [char for char in test_str if not char.isdigit()]\n\n    return ''.join(numbers + non_numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Loop through the list and add each number to the end of the list\n    for i in range(len(char_list)):\n        if char_list[i].isdigit():\n            num = int(char_list[i])\n            char_list.insert(i+1, num)\n\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    test_str = ''.join(num_list)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a new string to store the non-numeric characters\n    new_str = ''\n    \n    # Iterate through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the new string\n        if char.isdigit():\n            new_str += char\n        # If the character is not a number, append it to the original string\n        else:\n            new_str += char\n    \n    # Return the new string containing all the numbers at the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            test_str = ''.join(num_list) + test_str\n            break\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    nums = []\n    # Iterate through each character in the input string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is, add it to the list of numbers\n            nums.append(char)\n        # If the character is not a digit, append it to the end of the output string\n        else:\n            output += char\n    # Iterate through the list of numbers and reverse them in reverse order\n    for i in range(len(nums)-1, -1, -1):\n        # Add each number to the output string as a string\n        output += nums[i]\n    # Return the output string\n    return output"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into individual characters\n    chars = list(test_str)\n    \n    # initialize two pointers\n    num_ptr = -1\n    end_ptr = len(chars) - 1\n    \n    # while there are still numbers to move\n    while num_ptr < end_ptr:\n        # if the current character is a number\n        if chars[num_ptr].isdigit():\n            # move the number to the end of the string\n            chars[num_ptr], chars[end_ptr] = chars[end_ptr], chars[num_ptr]\n            # decrement the pointers\n            num_ptr += 1\n            end_ptr -= 1\n        else:\n            # increment the number pointer\n            num_ptr += 1\n    \n    # join the characters back into a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the input string to a list of characters\n    char_list = list(test_str)\n\n    # Initialize a boolean flag to keep track of whether a number was found\n    found_num = False\n\n    # Iterate through the list of characters\n    for i in range(len(char_list)):\n        # If a number is found, move it to the end of the list\n        if char_list[i].isdigit():\n            char_list.insert(i, char_list.pop(i))\n            found_num = True\n\n    # If no numbers were found, return the original string\n    if not found_num:\n        return test_str\n\n    # Convert the list of characters back to a string\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pattern = r'\\d+'\n    numbers = re.findall(pattern, test_str)\n    for num in numbers:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = list(a)\n    a.sort()\n    subsets = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            subsets.append(a[i:j])\n    subsets.sort(key=len, reverse=True)\n    for subset in subsets:\n        if all(i % j == 0 for i in subset):\n            return len(subset)\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables to keep track of the maximum size and the last element of the largest subset\n    max_size = 0\n    current_size = 1\n\n    # loop through the list and update the current size and max size if the current element is divisible by the previous element\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n\n    # update the max size with the final size of the largest subset\n    max_size = max(max_size, current_size)\n\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    # Loop through the list\n    for i in range(len(a)):\n        # Check if the next number is divisible by the current number\n        if a[i] % a[current_size] == 0:\n            # If it is, update the current size\n            current_size += 1\n        # If the current size is larger than the maximum size, update the maximum size\n        if current_size > max_size:\n            max_size = current_size\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    The function will take a list of integers as input and return an integer representing the size of the largest subset of numbers such that every pair is divisible.\n\n    For example, if the input is [1, 2, 3, 4, 5, 6, 7], the output should be 4 because the largest subset that is divisible is [2, 3, 4] with a size of 4.\n\n    The function should work for any input list, not just those of the first example.\n    '''\n\n    # Sort the list in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables\n    divisible_count = 0\n    current_subset = []\n    subset_size = 0\n\n    # Iterate through the list\n    for num in a:\n        if num % 2 == 0 and divisible_count < 2:\n            divisible_count += 1\n            current_subset.append(num)\n            subset_size += 1\n        elif num % 2 == 1:\n            divisible_count -= 1\n            if divisible_count == 0:\n                subset_size = max(subset_size, len(current_subset))\n                current_subset = []\n\n    # Return the largest subset size\n    return subset_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    count = 0\n    i = 0\n    while i < len(a):\n        count += 1\n        j = i + 1\n        while j < len(a):\n            if a[i] % a[j] == 0:\n                j += 1\n            else:\n                break\n        i = j - 1\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    for i in range(len(a)):\n        subset = 0\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                subset += 1\n        if subset > max_subset:\n            max_subset = subset\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the list in ascending order\n    a.sort()\n    \n    # initialize the variables for the size of the largest subset and the maximum value\n    max_size = 1\n    max_val = a[0]\n    \n    # loop through the list\n    for i in range(1, len(a)):\n        # check if the current number is divisible by the maximum value\n        if a[i] % max_val == 0:\n            # if it is, increase the size of the largest subset\n            max_size += 1\n            # if the current number is greater than the maximum value, update the maximum value\n            if a[i] > max_val:\n                max_val = a[i]\n    \n    # return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    This function takes a list of numbers as its parameter and returns the size of the largest subset of the numbers that is divisible by each other.\n\n    Example:\n    largest_subset([1, 3, 5, 7, 9]) -> 2\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    largest_subset_size = 0\n    current_subset = [a[0]]\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n\n        # If the current number is divisible by the previous number in the current subset, add it to the current subset\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n        else:\n            # Otherwise, find the largest subset that is divisible by all previous numbers in the current subset\n            for j in range(i-1, -1, -1):\n                if a[j] % current_subset[-1] == 0:\n                    current_subset.append(a[j])\n                    break\n            # Update the largest subset size if the current subset is larger\n            if len(current_subset) > largest_subset_size:\n                largest_subset_size = len(current_subset)\n\n        # If the current subset is divisible by all previous numbers, add it to the largest subset\n        if current_subset[-1] % current_subset[0] == 0:\n            largest_subset_size = max(largest_subset_size, len(current_subset))\n\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in ascending order\n    a.sort()\n    # initialize variables to keep track of the current subset and the maximum subset found so far\n    current_subset = [a[0]]\n    max_subset_size = 1\n    # loop through the input list\n    for i in range(1, len(a)):\n        # if the next element is divisible by the current element, add it to the current subset\n        if a[i] % a[i-1] == 0:\n            current_subset.append(a[i])\n            max_subset_size = max(max_subset_size, len(current_subset))\n        # if the next element is not divisible by the current element, reset the current subset and move on to the next element\n        else:\n            current_subset = [a[i]]\n    # return the size of the maximum subset found\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0] * n for i in range(n)]\n    \n    # Initialize the dp table\n    for i in range(n):\n        dp[i][i] = a[i]\n    \n    # Fill the dp table using dynamic programming\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if a[start] % a[end] == 0:\n                dp[start][end] = dp[start+1][end-1] + 1\n            else:\n                dp[start][end] = max(dp[start][end-1], dp[start+1][end])\n                \n    # Return the size of the largest subset\n    max_size = 0\n    for length in range(2, n+1):\n        max_size = max(max_size, dp[0][n-length+1])\n    return max_size\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of size n and returns their median value.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Find the median index\n    mid = n // 2\n\n    # Check if the array has an odd number of elements\n    if n % 2 == 1:\n        return arr[mid]\n    else:\n        # Return the average of the two middle elements\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # check if the size of both arrays are equal\n    if len(arr1)!= len(arr2):\n        raise ValueError('Both arrays must have the same size.')\n\n    # merge the two sorted arrays\n    merged_arr = arr1 + arr2\n\n    # sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # find the middle index\n    middle_index = len(sorted_arr) // 2\n\n    # return the median\n    if len(sorted_arr) % 2 == 0:\n        return (sorted_arr[middle_index - 1] + sorted_arr[middle_index]) / 2\n    else:\n        return sorted_arr[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Sort the two lists\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the list is even, take the average of the two middle elements\n        median = (sorted_arr1[n//2-1] + sorted_arr1[n//2] + sorted_arr2[n//2-1] + sorted_arr2[n//2]) / 4\n    else:\n        # If the length of the list is odd, take the middle element\n        median = sorted_arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists\n    combined = arr1 + arr2\n    \n    # Sort the combined list\n    combined.sort()\n    \n    # Find the middle index\n    mid = n // 2\n    \n    # If the list has an odd length, return the middle element\n    if n % 2 == 1:\n        return combined[mid]\n    else:\n        # Return the average of the middle two elements\n        return (combined[mid-1] + combined[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the median index\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    if len(arr1) % 2 == 1:\n        # If arr1 is odd-length, the median index is mid1\n        median_index = mid1\n    else:\n        # If arr1 is even-length, the median index is (mid1 + mid2) // 2\n        median_index = (mid1 + mid2) // 2\n    \n    # Find the median values\n    if mid1 >= mid2:\n        median1 = arr1[median_index]\n        median2 = arr2[median_index-mid1]\n    else:\n        median1 = arr1[median_index]\n        median2 = arr2[median_index-mid2]\n    \n    return (median1 + median2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of size n and returns their median.\n    \"\"\"\n    # Concatenate both lists to form a single sorted list\n    arr = arr1 + arr2\n    # Sort the concatenated list\n    arr.sort()\n    # Find the median\n    median = arr[n//2]\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of size n and returns the median of the lists.\n    \"\"\"\n    # Concatenate the two sorted lists into a single list\n    combined_list = arr1 + arr2\n    combined_list.sort()\n    \n    # Calculate the index of the median\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the two middle numbers\n        return (combined_list[mid-1] + combined_list[mid]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        return combined_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): A sorted list of integers\n    arr2 (list): A sorted list of integers\n    n (int): The size of both lists\n\n    Returns:\n    (float): The median of the two lists\n    \"\"\"\n    # Merge the two lists into one\n    merged = arr1 + arr2\n\n    # Sort the merged list\n    merged.sort()\n\n    # Find the median\n    median = merged[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the two lists are of equal size or not\n    if n!= len(arr1) and n!= len(arr2):\n        # Concatenate the smaller list with the larger list\n        if len(arr1) < len(arr2):\n            arr = arr1 + [0] * (len(arr2) - len(arr1)) + arr2\n        else:\n            arr = arr2 + [0] * (len(arr1) - len(arr2)) + arr1\n        # Sort the concatenated list\n        arr = sorted(arr)\n    else:\n        # Sort the two lists\n        arr1 = sorted(arr1)\n        arr2 = sorted(arr2)\n\n    # Find the median\n    if n % 2 == 0:\n        # If the size of the list is even\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If the size of the list is odd\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = []\n    for num in nums:\n        power.append(num ** n)\n    return power"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(newList)\n    else:\n        print(\"The list should have at least two elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # checking if the list is empty or has only one element\n    if len(newList) < 2:\n        return newList\n    else:\n        # swapping the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is of length 0 or 1\n    if len(newList) <= 1:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    while True:\n        s = 2 * r * math.sin(math.acos(r/2))\n        area = max(area, math.pi * s**2)\n        r -= 0.0001\n        if r < 0.0001:\n            break\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r**2\n    b = 2 * r\n    c = r**2\n    s = (a + b + c)**0.5\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Use Heron's formula to calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    s = math.sin(math.pi/3)\n    a = math.sqrt(3) * r / (4 * s)\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a right angle triangle with given radius\n    area = (r**2) * (1/2)\n    \n    # calculate the area of a right angle triangle with radius 1\n    area1 = 1\n    \n    # find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_area = max(area, area1)\n    \n    # return the calculated area\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3*s*s)/(4*math.tan(math.pi/3))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a regular triangle\n    area = 0.5 * r**2\n\n    # Calculate the area of a semi-circle with radius r\n    area_semicircle = 2 * r * (2*r-1)**0.5\n\n    # Calculate the maximum possible area of a triangle inscribed in the semicircle\n    max_area = area_semicircle - area\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Compute the semi-perimeter\n    semi_perimeter = 2 * r\n\n    # Compute the area of the largest triangle with sides of length 2r\n    area_1 = 0.5 * r * r\n\n    # Compute the area of the largest triangle with sides of length 2r/2\n    area_2 = semi_perimeter * 0.5\n\n    # Compute the maximum area\n    area_max = max(area_1, area_2)\n\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-circle parameters\n    a = 2 * r\n    b = r * (math.sqrt(3) / 2)\n    c = r * (math.sqrt(3) / 2)\n    \n    # Calculate the areas of the three triangles\n    area1 = (3 * a ** 2) / (4 * math.tan(math.pi / 3))\n    area2 = (3 * b ** 2) / (4 * math.tan(math.pi / 6))\n    area3 = (3 * c ** 2) / (4 * math.tan(math.pi / 6))\n    \n    # Find the maximum area triangle\n    max_area = max(area1, area2, area3)\n    \n    # Return the maximum area\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of each triangle\n    area1 = (3 * r**2) / 4\n    area2 = (3 * semi_perimeter**2) / 4\n\n    # Find the maximum area\n    max_area = area1\n    if area2 > max_area:\n        max_area = area2\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the semi-circle radius and its area\n    semi_radius = r\n    area = 3.14 * semi_radius ** 2\n    \n    # Define the triangle base and its area\n    base = 2 * semi_radius\n    area_triangle = 0.5 * area * base\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest = area_triangle\n    \n    # Return the calculated area\n    return area_largest"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \n    Args:\n    array (list): The sorted list of natural numbers.\n    \n    Keyword Args:\n    start (int): The starting index of the array. Default is 0.\n    end (int): The ending index of the array. Default is None.\n    \n    Returns:\n    int: The smallest missing number in the array.\n    \n    Raises:\n    TypeError: If the input is not a list of natural numbers.\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, int) for x in array):\n        raise TypeError(\"Input is not a list of natural numbers.\")\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # If end is not specified, find the maximum number in the array\n    if end is None:\n        end = max(array)\n\n    # Initialize the missing number to be the first element in the array\n    missing_num = array[start]\n\n    # Iterate through the array from start to end\n    for num in range(start + 1, end + 1):\n\n        # If the current number is greater than the missing number, update the missing number to be the current number\n        if num > missing_num:\n            missing_num = num\n\n    # Return the missing number\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if not end:\n        end = len(array) - 1\n    \n    if start < 0 or start >= end:\n        return \"Invalid start or end index\"\n    \n    if end >= len(array):\n        return \"Invalid end index\"\n    \n    if not all(isinstance(x,int) for x in array):\n        return \"All elements in the array must be integers\"\n    \n    if not array:\n        return \"The array cannot be empty\"\n    \n    # Sort the array if it is not already sorted\n    if array[start] > array[end]:\n        array = sorted(array)\n    \n    for i in range(start,end):\n        if array[i]!= i + start:\n            return i + start\n    \n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): a sorted list of natural numbers.\n    start (int): the starting index of the array to search in. (default: 0)\n    end (int): the ending index of the array to search in. (default: None)\n\n    Returns:\n    int: the smallest missing number.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    \n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): List of natural numbers.\n        start (int): Start index of the range.\n        end (int): End index of the range.\n\n    Returns:\n        int: Smallest missing number.\n    \"\"\"\n\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i == 0 or array[i - 1] + 1!= array[i]:\n            return array[i]\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the array. Default value is 0.\n        end (int): The ending index of the array. If None, then all the elements in the array are considered. Default value is None.\n\n    Returns:\n        int: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    missing = start\n    for i in range(start, end):\n        if array[i]!= i + start:\n            missing = i + start\n            break\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= i - start:\n            return i + start - 1\n\n    return end + start + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n    for i in range(len(sub)):\n        adj.remove(sub[i])\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = []\n    # check left neighbor\n    if x > 0:\n        neighbors.append((x-1, y))\n    # check right neighbor\n    if x < len(sub)-1:\n        neighbors.append((x+1, y))\n    # check up neighbor\n    if y > 0:\n        neighbors.append((x, y-1))\n    # check down neighbor\n    if y < len(sub[0])-1:\n        neighbors.append((x, y+1))\n    return neighbors"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n\n    # adjacent cells in the x-direction\n    for i in range(x-1, x+2):\n        if 0 <= i < 10:\n            adj_list.append((i, y))\n\n    # adjacent cells in the y-direction\n    for j in range(y-1, y+2):\n        if 0 <= j < 10:\n            adj_list.append((x, j))\n\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n    x, y = ele\n    if x - 1 not in sub and x + 1 not in sub:\n        sub.append((x - 1, y))\n    if y - 1 not in sub and y + 1 not in sub:\n        sub.append((x, y - 1))\n    if x - 1 not in sub and y - 1 not in sub:\n        sub.append((x - 1, y - 1))\n    if x + 1 not in sub and y - 1 not in sub:\n        sub.append((x + 1, y - 1))\n    if x - 1 not in sub and y + 1 not in sub:\n        sub.append((x - 1, y + 1))\n    if x + 1 not in sub and y + 1 not in sub:\n        sub.append((x + 1, y + 1))\n    if y - 1 not in sub and x + 1 not in sub:\n        sub.append((x + 1, y - 1))\n    if y + 1 not in sub and x - 1 not in sub:\n        sub.append((x - 1, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create a list to store the adjacent coordinates\n    adjacent = []\n    # extract the x and y values of the given coordinate tuple\n    x, y = ele\n    # iterate through each row and column of the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # if the current coordinate is adjacent to the given coordinate\n            if abs(i - x) <= 1 and abs(j - y) <= 1:\n                # add the current coordinate to the list of adjacent coordinates\n                adjacent.append((i, j))\n    # return the list of adjacent coordinates\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(-1, 2): \n        for j in range(-1, 2): \n            if i!= 0 or j!= 0: \n                sub.append((x+i, y+j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    \n    # Check for upper left corner\n    if x > 1 and y > 1:\n        adj_list.append((x-1, y-1))\n        \n    # Check for upper right corner\n    if x < len(sub) and y > 1:\n        adj_list.append((x+1, y-1))\n        \n    # Check for lower left corner\n    if x > 1 and y < len(sub[x-1]):\n        adj_list.append((x-1, y+1))\n        \n    # Check for lower right corner\n    if x < len(sub) and y < len(sub[x-1]):\n        adj_list.append((x+1, y+1))\n        \n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    # Get the x and y coordinates of the given element\n    x, y = ele\n    \n    # Get the coordinates of all the neighboring elements\n    adj_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    # Remove any duplicates from the list of adjacent coordinates\n    adj_coords = list(set(adj_coords))\n    \n    # Add the current element's coordinate to the list of adjacent coordinates\n    adj_coords.append(ele)\n    \n    # Add the list of adjacent coordinates to the sublist for each neighbor\n    for neighbor in adj_coords:\n        sub.append(neighbor)\n        \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Check if the element is a coordinate tuple\n    if isinstance(ele, tuple) and len(ele) == 2:\n\n        # Append the element to the sublist\n        sub.append(ele)\n\n        # Extract the adjacent coordinates\n        adj_x = ele[0] + 1, ele[0] - 1\n        adj_y = ele[1] + 1, ele[1] - 1\n\n        # Append the adjacent coordinates to the sublist\n        for x, y in zip(adj_x, adj_y):\n            sub.append((x, y))\n\n        # Recursive call to extract adjacent coordinates of adjacent coordinates\n        return adjac(sub)\n\n    else:\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj_coords = []\n\n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        new_x, new_y = x + dx, y + dy\n        if 0 <= new_x < 3 and 0 <= new_y < 3:\n            adj_coords.append((new_x, new_y))\n    \n    return adj_coords"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        elif text[i] == '_':\n            new_text +=''\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Define the replacement pairs\n    replacements = {\n       '': '_',\n        '_':''\n    }\n\n    # Iterate through each character in the string\n    for i, char in enumerate(text):\n        # Check if the character is a whitespace\n        if char in replacements:\n            # Replace the character with the corresponding replacement character\n            text = text[:i] + replacements[char] + text[i+1:]\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscore\n    text = text.replace(\" \", \"_\")\n    # replace underscore with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Loop through the words and replace spaces with underscores\n    for i in range(len(words)):\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and returns the list with all zeroes moved to the end.\n    '''\n    num_list.reverse()\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - one for moving non-zero elements to the end and the other for finding the last non-zero element\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    # Move all the zeroes to the end\n    while i < len(num_list):\n        num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n        i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    \n    for j in range(len(zero_index)-1, -1, -1):\n        num_list.pop(zero_index[j])\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize the count of zeroes\n    zero_count = 0\n    # Initialize a list to store the non-zero numbers\n    non_zero_list = []\n    \n    # Iterate through the list and move all zeroes to the end of the list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n            # Count the number of non-zero numbers\n            zero_count += 1\n    \n    # Move all the zeroes to the end of the non-zero list\n    for i in range(zero_count):\n        non_zero_list.append(0)\n    \n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            zero_count += 1\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for j in range(len(zero_index)-1, -1, -1):\n        num_list.pop(zero_index[j])\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n        else:\n            break\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum and xor sum variables\n    xor_sum = 0\n    sum_arr = sum(arr)\n    \n    # Iterate over the list and for each element, compute its xor with the sum of the rest of the elements\n    for i in range(n):\n        xor_sum += arr[i] ^ sum_arr - arr[i] * n\n        \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initializing the sum variable to 0\n    xor_sum = 0\n    # Iterating through all pairs of numbers from 0 to n-1\n    for i in range(n):\n        for j in range(i+1,n):\n            # XOR operation of two numbers and storing the result in a variable\n            xor_value = arr[i] ^ arr[j]\n            # Adding the xor value to the sum variable\n            xor_sum += xor_value\n    # Returning the sum of xor values\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) % 2!= 0:\n        arr.append(0)\n\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum ^= arr[i]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list and its size as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all elements in the list\n    xor_sum = sum([arr[i] ^ arr[j] for i in range(n) for j in range(i+1, n)])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # Remove and return the smallest element from the heap\n    while heap:\n        yield hq.heappop(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    hq.heapify(iterable)  # convert the list to a min heap\n\n    sorted_list = []\n    while iterable:  # iterate over the min heap until its empty\n        sorted_list.append(iterable[0])  # add the first element to the sorted list\n        iterable.pop(0)  # remove the first element from the iterable\n\n    return sorted_list  # return the sorted list\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n\n    # sort the list using heap sort\n    hq.heapify(arr)\n    for i in range(len(arr)-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        hq.heapify(arr[:i])\n\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    # Build the max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i, len(lst))\n    # Pop the maximum elements from the heap and add them to the end of the list\n    for i in range(len(lst) - 1, 0, -1):\n        # Replace the root element with the maximum element in the heap\n        lst[0], lst[i] = lst[i], lst[0]\n        # Heapify the new root\n        hq.heapify(lst, 0, i)\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    hq.heapify(iterable)\n    \n    # Extract the elements from the min-heap and append them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap from the list\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # Extract elements from the min-heap and insert them into a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Build a max heap from the sorted list\n    while hq.heapify(iterable) > 1:\n        hq.heappop(iterable)\n\n    # Convert the max heap to a list and return it\n    return list(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # sort the heap\n    for i in range(len(heap)):\n        # remove the smallest element from the heap and append it to the result\n        result.append(heapq.heappop(heap))\n    \n    # convert the result to a list and return it\n    return list(result)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    while len(heap) > 1:\n        max_elem = hq.heappop(heap)\n        hq.heappush(heap, max_elem)\n    return [max_elem]"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount of the sale\n    \n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    \"\"\"\n    if sale_amount <= actual_cost:\n        # If the sale amount is less than or equal to the actual cost,\n        # then there is no profit and no loss\n        return True\n    else:\n        # If the sale amount is greater than the actual cost,\n        # then there is a loss and no profit\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"This amount has no profit and no loss\")\n    else:\n        print(\"This amount has a profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two parameters, actual_cost and sale_amount, which are the \n    actual cost of the items sold and the total sales amount respectively. It returns \n    True if the amount has no profit and no loss, and False otherwise.\n\n    A profit is any amount paid to the buyer, while a loss is any amount received by the \n    seller. A profitable sale is one where the actual cost of the items sold is greater \n    than the sale amount. A lossful sale is one where the actual cost is less than or equal \n    to the sale amount.\n\n    In this problem, we are given the actual cost and the total sales amount. We need to \n    check whether the given amount has no profit and no loss or not. If the actual cost \n    is greater than the sale amount, then the amount has a profit. If the actual cost \n    is less than or equal to the sale amount, then the amount has a loss. If the amount \n    has no profit and no loss, then we return True, otherwise we return False.\n\n    Examples:\n    noprofit_noloss(100, 200) # Returns True\n    noprofit_noloss(20, 20) # Returns False\n    \"\"\"\n\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost: the cost of the items sold\n    sale_amount: the amount of items sold\n\n    Returns:\n    A string indicating whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return \"No profit or loss possible\"\n    elif sale_amount == 0:\n        return \"No profit or loss possible\"\n    elif sale_amount > 0 and actual_cost < sale_amount:\n        return \"Profit\"\n    else:\n        return \"Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost == sale_amount: \n        return True \n    elif actual_cost > sale_amount: \n        return False \n    else: \n        return False \n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        print(\"The sale amount is equal to the actual cost. Therefore, there is no profit and no loss.\")\n    elif sale_amount > actual_cost:\n        print(\"The sale amount is greater than the actual cost. Therefore, there is no profit and no loss.\")\n    else:\n        print(\"The sale amount is less than the actual cost. Therefore, there is a loss.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Calculate the wind chill index using the formula given in the problem statement\n    wc = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * (v / 10)\n    # Round the wind chill index to the nearest integer\n    wc_int = int(round(wc))\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): The wind velocity in km/h.\n        t (float): The temperature in celsius.\n\n    Returns:\n        int: The wind chill index rounded to the next integer.\n    \"\"\"\n    if v < 10:\n        return None\n\n    c = 1.359*(math.log(t+273.15/10)**0.16) + 237.3\n\n    return round(c/math.log(v/1000) + 32)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature to Fahrenheit and calculate the wind chill index\n    F = (t * 9/5) + 32\n    i = 13.12 + 0.6215 * v + 11.37 * math.log(F) - 0.3965 * v**2 - 5.379 * math.log(F)\n    # Round the wind chill index to the nearest integer\n    i = round(i)\n    return i"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 25.5 # temperature conversion factor from celsius to fahrenheit\n    fahrenheit_temperature = c*t + 32\n    fahrenheit_humidity = 100 # constant temperature for humidity\n    wind_chill_temperature = (13.12 + 0.6215*fahrenheit_temperature - 11.37*math.log(fahrenheit_humidity/50) + 0.3965*v*fahrenheit_temperature)/(1.333 + 0.168*math.log(fahrenheit_humidity/50))\n    wind_chill_index = math.ceil(wind_chill_temperature)\n    return wind_chill_index\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 2.0 * math.pi * 6.105 * (t + 273.15) / (math.pow(v, 2) + math.pow(6.105 * (t + 273.15), 2))\n    if c < -40.0:\n        return -40\n    else:\n        return round(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index for a given wind speed and temperature in celsius.\n\n    Args:\n        v (float): Wind speed in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        float: The wind chill index rounded to the nearest integer.\n    \"\"\"\n\n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n\n    # Calculate the heat index\n    hi = 236.87 - 0.0065 * t_k - 11.37 * math.pow(v, 0.16) + 0.3965 * math.pow(v, 0.16) * math.pow(t_k, 0.16)\n\n    # Calculate the wind chill index\n    wc = math.floor(hi / 0.8)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * v + 17.625 * (t - 273.15) - 4.6868 * math.pow(t - 273.15, 2)\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    # Return the wind chill index rounded to the nearest integer\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill in degrees Celsius\n    wc = (v - 2.5*math.log10(t))/(7.5*math.log10(t)) - 459.67\n    \n    # Round the wind chill to the nearest integer\n    wci = int(wc + 0.5)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return \"Invalid input. Wind velocity must be a positive number.\"\n    elif t < -273.15:\n        return \"Invalid input. Temperature must be a temperature in degrees Celsius.\"\n    else:\n        wind_chill_index = 23.42 * (t + 273.15) / (v**0.16) - 459.67\n        wind_chill_index = round(wind_chill_index)\n        return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculate the temperature in Kelvin\n    c = (k - 273.15) / 1.8\n\n    # Calculate the heat index\n    h = math.sqrt(v**2 + c**2)\n\n    # Calculate the wind chill index\n    wc = math.floor(h - 32)\n\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    total_length = sum(len(name) for name in valid_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next one\n            continue\n        # Add the length of the name to the sum variable\n        sum += len(name)\n    # Return the sum of the lengths of the non-lowercase names\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Removing names starting with lowercase letters\n    sample_names = [name for name in sample_names if not name.startswith(name[0].lower())]\n    # Summing the length of the remaining names\n    total_length = sum(len(name) for name in sample_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def filter_lower(name):\n        return name[0].isupper()\n\n    filtered_names = filter(filter_lower, sample_names)\n    total_length = sum(map(len, filtered_names))\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum([len(name) for name in filtered_names])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name.startswith(name[0].upper()):\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name.strip() for name in sample_names]\n    filtered_names = [name for name in names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')  # regular expression to match any parentheses\n    matches = pattern.findall(items)  # find all matches using regular expression\n    for match in matches:  # iterate over matches\n        items = items.replace(match, '')  # remove matched parentheses from the string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parentheses from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    return pattern.sub('', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)') # find all parenthesis\n    items = re.sub(pattern, '', items) # remove parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'(\\([^\\)]+\\))', r'', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*?\\)'  # regular expression pattern to match parenthesis\n    items = re.sub(pattern, '', items)  # replace parenthesis with empty string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove all parenthesis from the string\n    items = re.sub(r'\\([^()]*?\\)', '', items)\n    # remove all spaces in between the parenthesis\n    items = re.sub(r'\\s+','', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    i = 1\n    j = 1\n    # loop until the nth nonagonal number is found\n    while i <= n:\n        # loop through the remaining numbers to find the nth nonagonal number\n        while j <= i:\n            k = i + j\n            if k == n:\n                return True\n            j += 1\n        i += 1\n        j = 1\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is a nonagonal number and False otherwise.\n    A nonagonal number is a positive integer that can be written as the sum of two nonagonal numbers.\n    For example, 6 is a nonagonal number because 6 = 2 + 4.\n    '''\n\n    # first nonagonal number\n    i = 1\n    j = 1\n\n    # second nonagonal number\n    k = 1\n\n    # loop through all nonagonal numbers\n    while k <= n:\n        # check if current nonagonal number is equal to n\n        if k == n:\n            return True\n\n        # check if current nonagonal number is equal to the sum of the two previous nonagonal numbers\n        if k == i + j:\n            return True\n\n        # update values for next iteration\n        i += 1\n        j += 1\n        k += 1\n\n    # if all iterations have not returned True, n is not a nonagonal number\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the nonagonal number\n    num = 1\n    # Loop through the numbers and add up squares\n    for i in range(1, n+1):\n        num += i*i\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (n * (n-1) // 2) - (n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = (n * (n + 1) * 2) // 3\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the variables\n    counter = 0\n    nonagonal = 1\n    \n    # Calculate the nonagonal number using a loop\n    for i in range(1, n+1):\n        nonagonal = (counter + 1) * (2*i-1)\n        counter += 1\n        \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    while b < n:\n        if a % 2 == 0:\n            c += b\n            a += 1\n        else:\n            a += 2\n        b += 1\n    return c"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the sum of the first n terms of the series\n    sum = 1\n\n    # loop through the remaining terms\n    for i in range(2, n+1):\n        # update the sum of the terms\n        sum += i\n\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n    for i in range(1, n+1):\n        nonagonal_number += 2 * i - 1\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters and split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate through each word\n    for i in range(len(words)):\n        # Check if the middle character of the word is 'z'\n        if words[i][-1] == 'z':\n            # If it is, split the word into two parts: the part before 'z' and the part after 'z'\n            before, after = words[i].rsplit('z', 1)\n\n            # Check if the middle character of the first part is 'z' and the middle character of the second part is 'z'\n            if before[-1] == 'z' and after[0] == 'z':\n                # If it is, return True\n                return True\n\n    # If the function hasn't returned yet, it means no 'z' was found in the text\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-zA-Z]+'\n    words = re.findall(pattern, text)\n    result = []\n    for word in words:\n        if word.startswith('z') and word.endswith('z') and word[1:-1]!= 'z':\n            result.append(word)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)(?<!\\w)\\b\\w*[z]\\w*(?!\\w)(?<!\\w)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]\\w*[zZ][a-zA-Z]\\w*\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # define pattern to match 'z' except at the start and end of the word\n    pattern = r'\\b(?!.*\\1)[a-zA-Z]*z\\b(?!.*\\1)[a-zA-Z]*'\n    \n    # use re.search() to check if pattern is found in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-z])(z)(?![a-z])'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match words containing 'z' except at the start and end of the word\n    regex = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    for word in words:\n        if len(word) >= 3 and word[0] == 'z' and word[-1] == 'z':\n            continue\n        elif word[0] == 'z' and word[-1] == 'z':\n            continue\n        elif word[0] == 'z':\n            if word[-1]!= 'z':\n                return True\n        elif word[-1] == 'z':\n            if word[0]!= 'z':\n                return True\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #Reverse the array from the start to k-1\n    input[:k] = input[:k][::-1]\n    #Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #Reverse the first k elements of the array\n    input = input[:k][::-1]\n    #Reverse the remaining elements of the array\n    input = input[k:] + input[:k][::-1]\n    #Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    for i in range(k-1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from index 0 to k-1\n    input = input[::-1]\n    # Reverse the array from k to the end\n    input = input[:k][::-1] + input[k:]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array `input` and a position `k` as input.\n    It reverses the array up to the position `k`.\n    \"\"\"\n\n    # Reverse the array from the beginning to the position k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from position k to the end\n    input[k:] = input[k:][::-1]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_arr = []\n    for i in range(k-1, -1, -1):\n        reverse_arr.append(input[i])\n    return reverse_arr"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array upto a given position.\n\n    Parameters:\n        input (list): The list of elements to be reversed.\n        k (int): The position from where the reversal has to be done.\n\n    Returns:\n        list: The reversed array.\n    \"\"\"\n\n    # Reverse the array upto k-1\n    for i in range(k-1, len(input)-1, -1):\n        input[i], input[i-1] = input[i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        # creating a new list to store reversed elements\n        result = []\n        # creating a loop to reverse the array\n        for i in range(n - k, -1, -1):\n            result.append(input[i])\n        # returning the reversed array\n        return result"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, -1, -1):\n        input[i], input[n-1] = input[n-1], input[i]\n        n -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize two pointers, left and right, to the first and last index of the array respectively\n    left = 0\n    right = len(input) - 1\n\n    # While left pointer is less than or equal to right pointer, swap the elements at the left and right pointers\n    while left <= right:\n\n        # If the left pointer is less than k, increment it\n        if left < k:\n            left += 1\n\n        # If the right pointer is greater than or equal to k-1, decrement it\n        elif right >= k - 1:\n            right -= 1\n\n        # If both conditions are not met, swap the elements at left and right pointers\n        else:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Check if the input is a tuple or a dictionary\n    if isinstance(test_tup, tuple) and isinstance(test_dict, dict):\n        # Create a new tuple with the dictionary added to it\n        result_tup = tuple(test_tup) + (test_dict,)\n    else:\n        raise TypeError(\"The inputs must be both tuples and dictionaries\")\n    \n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the same keys as the test dictionary\n    new_dict = {k: v for k, v in test_dict.items()}\n    # Concatenate the new dictionary with the test tuple\n    output = (test_tup + tuple(new_dict.items()))\n    # Return the concatenated output\n    return output"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    # add the list of tuples to the tuple\n    new_tuple = test_tup + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert test_dict to dictionary format\n    test_dict = dict(test_dict)\n    # add test_dict to test_tup\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to store the key-value pairs from the input dictionary\n    new_dict = {}\n    # Loop through the key-value pairs in the input dictionary and add them to the new dictionary\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    # Add the new dictionary to the input tuple and return the updated tuple\n    return test_tup + (new_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    dict_tuple = tuple(test_dict.items())\n    # Combine the tuple and the dictionary\n    combined_tuple = test_tup + dict_tuple\n    return combined_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    max_sum = float('-inf')\n\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        max_sum = max(max_sum, dp[0][i])\n\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n        max_sum = max(max_sum, dp[j][0])\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            max_sum = max(max_sum, dp[i][j])\n\n    return max_sum / (N * N)\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize a variable to keep track of the maximum average found so far\n    max_avg = 0\n    \n    # Initialize variables to keep track of the total cost and the number of cells visited in the path\n    total_cost = 0\n    num_cells = 0\n    \n    # Traverse the matrix from the top-left to the bottom-right cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Move right\n            if j < len(cost[0])-1:\n                total_cost += cost[i][j]\n                num_cells += 1\n            # Move down\n            if i < len(cost)-1:\n                total_cost += cost[i][j]\n                num_cells += 1\n            # Check if the maximum average found so far is less than the average of this path\n            if total_cost/num_cells > max_avg:\n                max_avg = total_cost/num_cells\n            # Reset the total cost and number of cells for the next path\n            total_cost = 0\n            num_cells = 0\n    \n    # Return the maximum average found\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    # Initialize the maximum average and the current path\n    max_avg = float('-inf')\n    path = []\n    \n    # Initialize the visited cells set and the total cost\n    visited = set()\n    total_cost = 0\n    \n    # Iterate through each cell in the matrix\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell has not been visited yet\n            if (i, j) not in visited:\n                # Add the current cell to the path and visited set\n                path.append((i, j))\n                visited.add((i, j))\n                # Calculate the cost of the current path\n                current_cost = sum([cost[row][col] for row, col in path])\n                # Update the total cost\n                total_cost += current_cost\n                # Recursively call the function for the next cell in the path\n                max_avg = max(max_avg, maxAverageOfPath(cost, visited, total_cost, path))\n                # Remove the current cell from the path and visited set\n                path.pop()\n                visited.remove((i, j))\n                \n    # Calculate the average cost over all paths and return the maximum\n    return max_avg / len(visited)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the number of rows and columns in the matrix\n    N = len(cost)\n    \n    # Initialize variables to store the maximum path average and the current path average\n    max_avg = 0\n    curr_avg = 0\n    \n    # Loop through all possible starting cells\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell has a valid cost\n            if cost[i][j]!= 0:\n                # If the current cell has a valid cost, initialize variables to store the total cost and the number of cells visited\n                total_cost = curr_avg = 0\n                \n                # Initialize a variable to store the current cell\n                curr_cell = (i, j)\n                \n                # Initialize a queue to store the cells visited so far\n                visited = set()\n                \n                # Add the current cell to the visited set\n                visited.add(curr_cell)\n                \n                # Loop until we reach the bottom right cell\n                while curr_cell[0]!= N-1 or curr_cell[1]!= N-1:\n                    # If the current cell is in the valid range, compute the total cost and increment the number of cells visited\n                    if 0 <= curr_cell[0] < N and 0 <= curr_cell[1] < N:\n                        total_cost += cost[curr_cell[0]][curr_cell[1]]\n                        curr_avg += 1\n                    # Otherwise, if the current cell is not in the valid range, break out of the loop and start a new path\n                    else:\n                        break\n                    # Check if the current cell is adjacent to the valid range and can be moved to the next cell\n                    if 0 <= curr_cell[0]-1 < N and curr_cell[0]-1 not in visited:\n                        # Move to the left cell\n                        visited.add((curr_cell[0]-1, curr_cell[1]))\n                        curr_cell = (curr_cell[0]-1, curr_cell[1])\n                    elif 0 <= curr_cell[1]-1 < N and curr_cell[1]-1 not in visited:\n                        # Move to the top cell\n                        visited.add((curr_cell[0], curr_cell[1]-1))\n                        curr_cell = (curr_cell[0], curr_cell[1]-1)\n                    elif 0 <= curr_cell[0]+1 < N and curr_cell[0]+1 not in visited:\n                        # Move to the right cell\n                        visited.add((curr_cell[0]+1, curr_cell[1]))\n                        curr_cell = (curr_cell[0]+1, curr_cell[1])\n                    elif 0 <= curr_cell[1]+1 < N and curr_cell[1]+1 not in visited:\n                        # Move to the bottom cell\n                        visited.add((curr_cell[0], curr_cell[1]+1))\n                        curr_cell = (curr_cell[0], curr_cell[1]+1)\n                    \n                # If the current path has a valid average, update the maximum path average if necessary\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                    \n    # Return the maximum path average\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    max_avg = 0\n    max_path = []\n    visited = set()\n    \n    # Recursively compute average of all paths\n    def helper(i, j, current_cost, path):\n        # Check if we have reached bottom right cell\n        if i == N-1 and j == N-1:\n            # Compute average of path and check if it's greater than current maximum\n            avg = current_cost / (i+j)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path.copy()\n            return\n        \n        # Check if we have already visited this cell\n        if (i, j) in visited:\n            return\n        \n        # Mark cell as visited\n        visited.add((i, j))\n        \n        # Compute cost of moving to next cell in path\n        next_cost = current_cost + cost[i][j]\n        \n        # Move to next cell in path\n        helper(i, j+1, next_cost, path + [(i, j+1)])\n        helper(i+1, j, next_cost, path + [(i+1, j)])\n        \n        # Remove current cell from path\n        del path[-1]\n        \n    # Start from top-left cell\n    helper(0, 0, cost[0][0], [(0, 0)])\n    \n    # Return maximum average\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(row, col, path_cost, path_sum, visited):\n        if (row == N - 1) and (col == N - 1):\n            if visited[row][col] == 1:\n                return path_sum / visited[row][col]\n            else:\n                return float('-inf')\n        \n        if row < 0 or row == N or col < 0 or col == N or visited[row][col] == 1:\n            return float('-inf')\n        \n        visited[row][col] = 1\n        path_sum += cost[row][col]\n        max_avg = max(max_avg, dfs(row + 1, col, path_cost + 1, path_sum, visited))\n        path_sum -= cost[row][col]\n        visited[row][col] = 0\n        return path_sum / visited[row][col]\n    \n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[0] * N for _ in range(N)]\n    \n    dfs(0, 0, 0, 0, visited)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    visited = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    start_cell = (0,0)\n    end_cell = (N-1,N-1)\n    \n    def dfs(cell):\n        nonlocal max_avg\n        \n        if cell == end_cell:\n            visited[cell[0]][cell[1]] = 1\n            total_cost = sum(cost[x][y]*visited[x][y] for x in range(N) for y in range(N))\n            avg = total_cost / visited[end_cell[0]][end_cell[1]]\n            max_avg = max(avg, max_avg)\n        \n        for new_cell in [(cell[0]+1,cell[1]), (cell[0],cell[1]+1)]:\n            if 0 <= new_cell[0] < N and 0 <= new_cell[1] < N and not visited[new_cell[0]][new_cell[1]]:\n                visited[new_cell[0]][new_cell[1]] = 1\n                dfs(new_cell)\n                \n    dfs(start_cell)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # initialize dp1 and dp2\n    dp1 = [[float('-inf')] * N for _ in range(N)]\n    dp2 = [[float('-inf')] * N for _ in range(N)]\n    # initialize the base case\n    for i in range(N):\n        dp1[i][0] = dp1[i][1] = float('inf')\n        dp2[i][0] = dp2[i][1] = float('inf')\n    # fill dp1 and dp2\n    for i in range(2, N):\n        for j in range(N):\n            dp1[i][j] = max(dp1[i][j], dp1[i-1][j] + cost[i-1][j])\n            dp2[i][j] = max(dp2[i][j], dp2[i][j-1] + cost[i][j-1])\n    # find the maximum average\n    return max(max(dp1[N-1]), max(dp2[N-1]))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    max_avg = float('-inf')\n    path = []\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        path.append((i, i))\n\n    for length in range(2, N+1):\n        for i in range(N-length+1):\n            j = i+length-1\n            if length == 2:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                path = [(i, j)]\n            elif dp[i][j] == max_avg:\n                path.append((i, j))\n\n    return path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    \n    # iterate through the dictionary\n    for name, student_info in students.items():\n        height, weight = student_info\n        \n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered list\n            filtered_students.append(name)\n            \n    # return the filtered list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    # Filter students that have a height and weight above the given values\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    \n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    \n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(i+1, len(nums1))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += base % 10\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base and power to integers\n    base = int(base)\n    power = int(power)\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Convert the base to a string and loop through each character\n    for digit in str(base):\n\n        # Calculate the power of the digit to the power of the power variable\n        digit_power = digit ** power\n\n        # Add the digit to the sum variable\n        sum += digit_power\n\n    # Return the sum of all digits to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    while power > 0:\n        digit = base % 10\n        total_sum += digit ** power\n        base //= 10\n        power -= 1\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base and power to integers\n    base = int(base)\n    power = int(power)\n\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Loop through each digit in the base\n    while base > 0:\n        # Get the rightmost digit of the base\n        digit = base % 10\n\n        # Calculate the sum of all digits raised to the power\n        for i in range(digit, power):\n            total += digit\n\n        # Remove the rightmost digit from the base\n        base //= 10\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each digit in the string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Calculate the sum of digits raised to the power\n    power_sum = sum ** power\n    # Return the sum of digits raised to the power\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_num = int(power)\n    sum_digits = 0\n    for digit in base_str:\n        sum_digits += int(digit) ** power_num\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit\n        power //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    # Initialize sum variable\n    sum_digits = 0\n    # Iterate through each digit of the base and add the corresponding value to the sum\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n    # Return the sum of the digits raised to the power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power -= 1\n        base //= 10\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts the values between quotation marks \" \".\n    '''\n    # The regular expression pattern to match the quotation marks \" \"\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # Using re.findall() method to find all the matches in the string\n    matches = re.findall(pattern, text1)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    # Use the pattern to find all matches in the given string\n    matches = pattern.findall(text1)\n    # Extract the values between the quotation marks\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to extract quotation marks and any text between them\n    pattern = r'(?<=\\\")([^\\\"]*)(?=\\\")'\n    match = re.findall(pattern, text1)\n    \n    # Return the list of values between quotation marks\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")\\w+(?=\")'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Remove all the special characters from the string\n    text1 = re.sub('[^a-zA-Z\\s]', '', text1)\n\n    # Split the string into a list of words\n    words = text1.split()\n\n    # Initialize a variable to store the extracted quotation\n    quotation = ''\n\n    # Loop through the list of words\n    for i in range(len(words)):\n\n        # If the current word is a closing quotation mark, break out of the loop\n        if words[i] == '\"' and i+1 < len(words) and words[i+1] == '\"':\n            break\n\n        # If the current word is a quotation mark and the next word is not a closing quotation mark, add the word to the quotation variable\n        elif words[i] == '\"' and i+1 < len(words) and words[i+1]!= '\"':\n            quotation += words[i] +''\n\n    # Return the extracted quotation\n    return quotation.strip()"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression to match quotation marks\n    pattern = r'(?<=[^\\\\])(\")(.*?)(?<!\\\\)\\1'\n\n    # Use the re.finditer() function to find all matches in the text\n    matches = re.finditer(pattern, text1)\n\n    # Create an empty list to store the extracted values\n    values = []\n\n    # Iterate over the matches and add the values to the values list\n    for match in matches:\n        values.append(match.group(2))\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'  # use raw string pattern to escape special characters\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    new_tup.append(test_tup[-1] * test_tup[0])\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    # Loop through the tuple and add the products of adjacent elements to the result tuple\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = tuple(t_1 * t_2 for i in range(N) for t_1 in test_tup for t_2 in test_tup[i+1:])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1 # assuming there's an extra element at the end\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],) # multiplying the current element with the next element\n    result_tup += (test_tup[-1],) # adding the last element\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N-1)])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    return lst1+lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the list by consecutive duplicates and count the number of consecutive duplicates\n    groups = [(k, sum(1 for _ in group)) for k, group in groupby(enumerate(nums), lambda x: x[0] == x[1])]\n\n    # Remove the groups with consecutive duplicates\n    return [num for num, group in groups if group == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == 0:\n            yield from group\n        else:\n            yield from [group[0]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use a groupby function to group the list based on consecutive duplicates\n    grouped_nums = groupby(nums)\n\n    # Create a list to store unique consecutive duplicates\n    unique_nums = []\n\n    # Iterate over the grouped_nums and add each consecutive duplicate to unique_nums\n    for key, group in grouped_nums:\n        unique_nums.extend(list(group))\n\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return list(groupby(nums, key=lambda x: (x,)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n    # Iterate through the list\n    for group in groupby(sorted(nums)):\n        # If the group is consecutive, remove it\n        if len(list(group)) > 1:\n            yield group[0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group by consecutive duplicates\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            yield list(g)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_list = sorted(list(set(nums))) # remove duplicates and sort the list\n    nums_list_sorted = sorted(nums_list) # sort the list again\n    count = 1\n    new_list = []\n    for num in nums_list_sorted:\n        if num == nums_list_sorted[count]:\n            count += 1\n        else:\n            if count > 1:\n                new_list.append(num)\n            count = 1\n    return new_list"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r**2 # side of cone\n    area = 2 * s + math.pi * r * h # lateral surface area of cone\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r * h / 3\n    return area\n\nprint(lateralsurface_cone(5, 10)) # Output: 22.04477393825712"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius and height.\n    '''\n\n    # Calculate the height of the cone and the lateral surface area\n    height = 2 * r * math.sin(math.pi/3)\n    lateral_area = math.pi * r ** 2 * (height / 3)\n\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Use the formula for the lateral surface area of a cone\n    # formula: A = pi*r^2*h\n    A = math.pi * r**2 * h\n    \n    # Return the lateral surface area\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and height h.\n    '''\n\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r**2 * h / 3 \n\n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the area of the base\n    area_base = math.pi * (r**2)\n    # calculate the height of the cone\n    height = h\n    # calculate the area of the cone\n    area_cone = area_base * height\n    # calculate the lateral surface area of the cone\n    lateral_surface_area = 2 * area_cone\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # compute the volume of the cone\n    V = math.pi * r**2 * h\n    # compute the lateral surface area\n    LSA = math.pi * r**2 * h / 3\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*(r**2)*h\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (3*r**2)/math.tan(math.radians(60))\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r\"[\\s,\\.]\")\n    text = pattern.sub(\":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[. ]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expression to replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s|,|\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'([,.])'\n    replacement = r':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|,|\\.', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for matching special characters\n    pattern = r'[,.]'\n    # Use re.sub() method to replace all occurrences of special characters with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[,\\. ]')\n    replacement = ':'\n    return pattern.sub(replacement, text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # check if the array is empty\n    if len(A) == 0:\n        return None\n    \n    # check if the array is sorted in ascending order\n    if A[0] <= A[-1]:\n        for i in range(len(A)):\n            if A[i] == x:\n                return i\n        return None\n    \n    # check if the array is sorted in descending order\n    for i in range(len(A)-1, -1, -1):\n        if A[i] == x:\n            return i\n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    # find the leftmost occurrence of x in the sorted array\n    left = 0\n    right = len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # if x was not found, return -1\n    if left == len(A) or A[left]!= x:\n        return -1\n\n    # if x was found, find its index in the original array\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n\n    # should never get here\n    raise ValueError(\"x not found in A\")"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array.\n        x (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of x, or -1 if x is not in A.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if left < len(A) and A[left] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1  # Return -1 if x is not found"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first element in the array that is greater than or equal to x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    # If the x is not found, return -1\n    if i == len(A):\n        return -1\n    # If x is found, find the index of the first occurrence of x in the remaining part of the array\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    return j - 1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize the result with 0\n    result = 0\n    # initialize an empty list to store the products of subarrays\n    product_list = []\n    # loop through all possible subarrays of the given list\n    for i in range(1, n+1):\n        # loop through all possible starting indices for the subarrays\n        for j in range(n-i+1):\n            # append the product of the subarray to the product_list\n            product_list.append(arr[j]*arr[j+i-1])\n    # loop through all possible starting indices for the subarrays\n    for k in range(n-1):\n        # loop through all possible ending indices for the subarrays\n        for l in range(k+1, n):\n            # check if the current subarray has already been processed\n            if (k,l) not in product_list:\n                # check if the sum of the subarrays is greater than the current result\n                if (product_list[k]+product_list[l]) > result:\n                    # update the result with the sum of the subarrays\n                    result = product_list[k]+product_list[l]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n < 1:\n        return 0\n    \n    # Initialize all subarray products with the first element of the array\n    subarray_products = [arr[0]]\n    current_product = arr[0]\n    total_sum = arr[0]\n    \n    # Loop through the remaining elements of the array\n    for i in range(1, n):\n        # Calculate the product of the current element and the last element of the previous subarray\n        last_subarray_product = subarray_products[-1]\n        current_product *= arr[i]\n        \n        # Update the subarray products by adding the current element to the list of subarray products\n        subarray_products.append(current_product)\n        \n        # Update the total sum by adding the current element to the running sum of subarray products\n        total_sum += current_product\n        \n        # If the current element is zero, we can break out of the loop\n        if arr[i] == 0:\n            break\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # dp[i][j] will store the sum of products of all sublists of arr[i:j+1]\n    dp = [[0] * n for _ in range(n)]\n    \n    # initializing dp[i][i]\n    for i in range(n):\n        dp[i][i] = arr[i] * arr[i]\n    \n    # calculating dp[i][j] for i < j\n    for i in range(1, n):\n        for j in range(i, n):\n            # calculating product of arr[i:j+1]\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            # updating dp[i][j]\n            dp[i][j] = (dp[i][j] + dp[i][j-1]) % 1000000007\n            \n    # calculating sum of products of all sublists of arr\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result = (result + dp[i][j]) % 1000000007\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n    n = len(arr)\n    products = [1] * n\n\n    # initialize all products to 1\n    for i in range(1, n):\n        products[i] = products[i-1] * arr[i-1]\n\n    # compute all products of all sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            products[j] *= products[j-1]\n\n    # compute the sum of products of all sublists\n    sum_of_products = 0\n    for p in products:\n        sum_of_products += p\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the sum of products of all possible sublists\n    total_sum = 0\n\n    # Initialize the current sublist sum\n    curr_sublist_sum = arr[0]\n\n    for i in range(1, n):\n        # Update the current sublist sum\n        curr_sublist_sum += arr[i]\n\n        # Update the total sum of products of all sublists\n        total_sum += curr_sublist_sum\n\n        # If the sum of products of all sublists becomes negative, reset the sublist sum\n        if total_sum < 0:\n            curr_sublist_sum = arr[i]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n\n    # Calculate prefix sum of array\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n\n    # Calculate products of subarrays\n    products = [1] * (n+1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            products[j] *= prefix_sum[j] - prefix_sum[i]\n\n    # Calculate sum of products of all possible subarrays\n    subarray_sum = sum(products)\n    return subarray_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    # create a 2D array to store products of subarrays of size i\n    subarray_products = [[1] * (n - i + 1) for i in range(1, n + 1)]\n    # iterate through all possible subarrays of size i\n    for i in range(1, n + 1):\n        # iterate through all possible starting indices of the subarray\n        for j in range(n - i + 1):\n            # compute the product of the subarray and add it to the corresponding element of the 2D array\n            subarray_products[i][j] = arr[j] * subarray_products[i - 1][j + 1]\n    # compute the sum of products of all subarrays\n    return sum(sum(subarray_products[i]) for i in range(1, n + 1))"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize all products and products of subarrays of length i to 1\n    products = [1]*(n+1)\n    # Initialize all products of subarrays of length i and ending at index j to 0\n    for j in range(n):\n        products[j+1] = products[j] * arr[j]\n    # Initialize the sum of products of subarrays of length 1\n    subarray_sum = products[1]\n    # Initialize the sum of products of subarrays of length 2\n    subarray_sum2 = 1\n    for i in range(2, n+1):\n        subarray_sum2 = subarray_sum2 * (n-i+1)\n        subarray_sum2 = subarray_sum2 / i\n        subarray_sum = subarray_sum + subarray_sum2\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_len = max(len(arr[i:]) for i in range(n))\n    dp = [[0] * (max_len + 1) for _ in range(n)]\n    for i in range(n):\n        for j in range(max_len, -1, -1):\n            if j == 0:\n                dp[i][j] = 1\n            elif j > 0:\n                dp[i][j] = arr[i] * dp[i][j - 1]\n    total_sum = sum(dp[i][j] for i in range(n) for j in range(1, max_len + 1))\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n\n    # Calculate sum of subarray products\n    for i in range(n):\n        sum += arr[i] * i * i\n\n    return sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = 1 << (n.bit_length() - 1)  # get the first bit\n    last_bit = 1 << n.bit_length() - 2    # get the last bit\n    \n    # toggle the middle bits\n    middle_bits = n ^ (first_bit | last_bit)\n    \n    # return the modified number\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Create a copy of the binary representation of n\n    binary = bin(n)[2:]\n\n    # Loop through the binary string from 0 to n\n    for i in range(len(binary)):\n\n        # If the i-th bit is 1, toggle it to 0\n        if binary[i] == '1':\n            binary[i] = '0'\n        # If the i-th bit is 0, toggle it to 1\n        else:\n            binary[i] = '1'\n\n    # Convert the binary string back to an integer\n    n = int(binary, 2)\n\n    # Return the updated value of n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize left and right bits as ones\n    left = right = 1\n\n    # Iterate through the number to find the first and last bits\n    for _ in range(1, len(bin(n)) - 2):\n        if bin(n)[-1] == '1':\n            right <<= 1\n        else:\n            left <<= 1\n\n    # Toggle bits except first and last\n    result = left | right | n ^ left | n ^ right\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    first_bit = 1 << 0\n    last_bit = 1 << (n-1)\n    \n    n = n ^ (first_bit | last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert binary number to integer\n    n = int(n, 2)\n\n    # Calculate the position of the middle bit\n    mid_bit = n.bit_length() // 2\n\n    # Extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**mid_bit - 1)\n\n    # Toggle the middle bit\n    mid_bit_toggled = first_bit + last_bit\n\n    # Combine the toggled middle bit with the first and last bits\n    final_n = first_bit + mid_bit_toggled + last_bit\n\n    # Convert the final integer back to binary\n    final_n = format(final_n, 'b')\n\n    # Return the final binary number\n    return final_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the middle bit of the number\n    middle = n.bit_length() // 2\n\n    # Toggle the middle bit of the number\n    n ^= (1 << middle)\n\n    # Toggle the first and last bit of the number\n    n ^= (1 << (n.bit_length() - 1))\n    n ^= (1 << 0)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(1 << 1) # get the mask of the first and last bit\n    n = n & mask # clear the first and last bit\n    n = n ^ ((n >> 1) ^ (n << 1)) # toggle the middle bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # find the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    # find the middle index\n    middle_index = num_bits // 2\n    # get the first and last bits\n    first_bit = n & (1 << (middle_index - 1))\n    last_bit = n & (1 << middle_index)\n    # toggle bits except for the first and last bit\n    n = n ^ first_bit ^ last_bit\n    # set the first and last bits to the original values\n    n = n | first_bit | last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Extract the first and last bits of the number\n    first_bit = (n & 1) << 31\n    last_bit = (n & 1) << 30\n    \n    # Extract the bits to be toggled\n    toggled_bits = (n & 0x3fffffff) << 1\n    \n    # Combine the first and last bits with the toggled bits\n    n = first_bit | last_bit | toggled_bits\n    \n    # Extract the first and last bits again\n    first_bit = (n & 1) << 31\n    last_bit = (n & 1) << 30\n    \n    # Extract the bits to be toggled again\n    toggled_bits = (n & 0x3fffffff) << 1\n    \n    # Combine the first and last bits with the toggled bits again\n    n = first_bit | last_bit | toggled_bits\n    \n    # Extract the first and last bits again\n    first_bit = (n & 1) << 31\n    last_bit = (n & 1) << 30\n    \n    # Extract the bits to be toggled again\n    toggled_bits = (n & 0x3fffffff) << 1\n    \n    # Combine the first and last bits with the toggled bits again\n    n = first_bit | last_bit | toggled_bits\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    bit_length = len(bin(n)) - 2\n    first_bit = n & ~(1 << (bit_length - 1))  # first bit is unset\n    last_bit = n & ~(1 << bit_length)  # last bit is unset\n    return first_bit | last_bit"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x - 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # using binary search algorithm\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # if element is not present in the list, then return the left insertion point\n    return low"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        return index-1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a)\n    else:\n        return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\""
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 120"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return geometric_sum(n//2) + geometric_sum(n//2)\n    else:\n        return geometric_sum((n//2)+1) + geometric_sum((n//2)+1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case: If n is 1, the geometric sum is 1\n    if n == 1:\n        return 1\n\n    # Recursive case: Compute the geometric sum of n-1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0:\n        return None\n    # Find the smallest triangular number with n digits\n    num = 10 ** (n - 1)\n    while num ** 2 <= 10 ** n:\n        num += 1\n    # Find the index of the smallest triangular number\n    tri_num = num ** 2\n    index = 2 * tri_num + 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Find the first triangular number that is greater than or equal to n\n    for i in range(2, 10**n+1):\n        triangular_num = i * (i + 1) // 2\n        triangular_num_digits = len(str(triangular_num))\n        if triangular_num_digits == n:\n            return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    max_num = 10**(n-1)\n    min_triangular = 0\n    \n    for i in range(1, max_num+1):\n        triangular_num = i*(i+1)/2\n        if triangular_num < min_triangular:\n            min_triangular = triangular_num\n    \n    index = math.floor(math.log10(min_triangular))\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    # Base case for n = 1\n    if n == 1:\n        return 0\n    \n    # Initialize a variable to store the sum of first n digits\n    sum = 0\n    \n    # Initialize a variable to store the largest power of 10 that is less than or equal to n\n    power = 1\n    \n    # Initialize a variable to store the index of the smallest triangular number with n digits\n    index = 0\n    \n    # Loop until the sum of first n digits exceeds the largest power of 10 that is less than or equal to n\n    while sum <= power * 10:\n        # Add the sum of first n digits to the index\n        index += 1\n        \n        # Add the digit that represents the power of 10 to the sum\n        sum += power\n        \n        # Multiply the power by 10\n        power *= 10\n    \n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    \n    # To find the index of the smallest triangular number with n digits, we need to find the largest power of 10 such that the number of digits in the triangular number is greater than or equal to n.\n    max_power = int(math.log10(n))+1\n    \n    # Initialize the sum and index of the smallest triangular number with n digits.\n    sum = 10**(max_power-1)\n    index = max_power\n    \n    # Iterate through the range of powers of 10 from 0 to max_power-1.\n    for i in range(max_power-1):\n        \n        # Calculate the sum of the current triangular number and update the sum and index variables accordingly.\n        sum += 10**i\n        index = i+1\n        \n        # If the sum is greater than or equal to n, then we have found the index of the smallest triangular number with n digits.\n        if sum >= n:\n            break\n    \n    # Return the index of the smallest triangular number with n digits.\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Find the index of the smallest triangular number with n digits\n    index = math.factorial(int(\"\".join([str(i) for i in range(1, n+1)]))) // math.factorial(n)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    last_digit = 0\n    triangular_num = 0\n    smallest_triangular_num = math.pow(10, n - 1)\n\n    # Loop through each digit and add the corresponding triangular number to the count\n    for digit in range(1, n + 1):\n        triangular_num = last_digit + digit\n        count += triangular_num // smallest_triangular_num\n        last_digit = digit\n\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Helper function to check if a number is triangular or not\n    def is_triangular(num):\n        i = 5\n        while i*i <= num:\n            if num % i == 0:\n                return False\n            i += 1\n        return True\n    \n    # Helper function to generate triangular numbers with n digits\n    def generate_triangulars(n):\n        triangulars = []\n        for i in range(n):\n            triangulars.append(i*i*i)\n        return triangulars\n    \n    # Helper function to find the smallest triangular number with n digits\n    def find_smallest_triangular(triangulars, n):\n        smallest = float('inf')\n        for triangular in triangulars:\n            if len(str(triangular)) == n and is_triangular(triangular):\n                if triangular < smallest:\n                    smallest = triangular\n        return smallest\n    \n    # Generate triangular numbers with n digits\n    triangulars = generate_triangulars(n)\n    \n    # Find the smallest triangular number with n digits\n    smallest = find_smallest_triangular(triangulars, n)\n    \n    # Calculate the index of the smallest triangular number\n    index = 0\n    for i in range(n):\n        triangular = i*i*i\n        if triangular == smallest:\n            index = i\n            break\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    triangular_number = [0] * (n+1)\n    triangular_number[1] = 1\n    \n    for i in range(2, n+1):\n        triangular_number[i] = i * (i - 1)\n    \n    # find the smallest triangular number with n digits\n    smallest_triangular = min(triangular_number)\n    \n    # find the index of the smallest triangular number\n    smallest_triangular_index = triangular_number.index(smallest_triangular)\n    \n    return smallest_triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_triangular_number = 10**(n-1)\n\n    while True:\n        triangular_number = min_triangular_number * (10**(n-1))\n        digit = len(str(triangular_number))\n        if digit == n:\n            return triangular_number\n        elif digit < n:\n            min_triangular_number += 1\n        else:\n            min_triangular_number -= 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        key_value_dict[key] = value\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Iterate over the tuple and add the adjacent elements as key-value pairs\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    key_val_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n    return key_val_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # Add the current element as the key and the next element as the value\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Creating a dictionary using key-value pairs\n    d = {}\n    # Looping through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # Adding the key-value pair to the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    # Returning the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    d = {}\n    # iterate through the tuple and add each adjacent pair as a key-value pair to the dictionary\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Using zip function to iterate through the tuple and create a dictionary\n    d = dict(zip(test_tup[::2], test_tup[1::2]))\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Define a dictionary to store the key-value pairs\n    dict_obj = {}\n    # Iterate over the tuple and add the adjacent pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the string is empty\n    if len(s) == 0:\n        return True\n    # Check if the string contains only one character\n    elif len(s) == 1:\n        return True\n    # Check if the string contains only multiple characters\n    else:\n        # Get the first character\n        first_char = s[0]\n        # Check if all characters in the string are the same\n        for char in s:\n            if char!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for key, value in char_count.items():\n        if value!= 1:\n            return False\n            \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same and False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    and False otherwise.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    if s[0]!= s[1]:\n        return False\n    return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    lst = list(s)\n    # Check if all characters are the same\n    if lst.count(lst[0]) == len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a set to remove duplicates\n    set_chars = set(s)\n    # check if the length of the set is 1, i.e. all characters are the same\n    return len(set_chars) == 1"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[len(s)-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side + side + side + side) / 2\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Find perpendicular distances from each point to the origin\n    a = math.sqrt(3) / 2 * side\n    b = math.sqrt(3) / 2 * side\n    c = side - a - b\n    s = (a + b + c) / 2 # Use midpoint of faces as reference\n    \n    # Calculate area using formula\n    area = 1/3 * s * (s - a) * (s - b) * (s - c)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side**2/4\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    return (1/6) * s * (side ** 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/6\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side / 2)**2\n    \n    # Calculate the volume of the tetrahedron\n    v = (1 / 6) * s * math.sqrt(3)\n    \n    # Calculate the area of the tetrahedron\n    A = (1 / 6) * s * (3 * s - 1)\n    \n    return A"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n\n    # Check if the list is empty\n    if len(list) == 0:\n        return list\n\n    # Calculate the number of items to be rotated\n    n = len(list)\n    k = m % n\n\n    # Reverse the list\n    list.reverse()\n\n    # Move the items to the right by k positions\n    for i in range(k):\n        list.append(list.pop(0))\n\n    # Reverse the list again\n    list.reverse()\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if the list is empty\n    if not list:\n        return None\n    \n    # Get the length of the list\n    n = len(list)\n    \n    # Check if the rotation count is greater than the length of the list\n    if m > n:\n        return list\n    \n    # Shift the list by m items to the right\n    new_list = list[-m:] + list[:-m]\n    \n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # handle special cases\n    if m == 0 or m == n:\n        return list\n    elif m >= n:\n        return list[m % n:] + list[:m % n]\n    else:\n        return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list[-m:] = list[-m:][::-1]\n    list[:-m] = list[:-m][::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # calculate the total number of rotations needed\n    rotations = n - m\n    # create a new list to store the rotated items\n    new_list = [0] * n\n    # copy the first m items to the new list\n    for i in range(m):\n        new_list[i] = list[i]\n    # copy the remaining items to the new list starting from the next item after m\n    for i in range(m, n):\n        new_list[i-m] = list[i]\n    # return the rotated list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by n items to the right direction.\n    \"\"\"\n    if n == 0 or n == len(lst):\n        return lst\n    \n    # Get the number of items to rotate\n    m = len(lst) - n\n    \n    # Create a new list with the rotated items\n    new_lst = lst[m:] + lst[:m]\n    \n    return new_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Calculate the number of items to be rotated\n    n = len(list)\n    k = m % n\n    if k == 0:\n        return list\n    # Reverse the first m elements of the list\n    list[:k] = list[:k][::-1]\n    # Reverse the remaining elements of the list\n    list[k:] = list[k:][::-1]\n    # Reverse the entire list\n    list[:] = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n-m):\n        list[i], list[i+m] = list[i+m], list[i]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n    if none_count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if any(test_tup):\n        for value in test_tup:\n            if value is None:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    digits = [int(d) for d in str(startnum)] # convert startnum to a list of digits\n    for i in range(startnum, endnum+1):\n        if all(digit % i == 0 for digit in digits): # check if each digit is divisible by i in the list of digits\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a certain digit\n    check_divisible = lambda x, y: x % y == 0\n    \n    # Loop through all numbers between startnum and endnum\n    for num in range(startnum, endnum+1):\n        # Define a list to store the digits of the number\n        digits = []\n        \n        # Loop through all the digits of the number\n        while num > 0:\n            # Append the last digit of the number to the list of digits\n            digits.append(num % 10)\n            \n            # Remove the last digit of the number from the number\n            num //= 10\n        \n        # Check if all digits in the list are divisible by each other\n        for i in range(len(digits)):\n            if not check_divisible(digits[i], digits[i+1]):\n                break\n        else:\n            # If all digits are divisible by each other, the number is divisible by every digit it contains\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % int(num) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # initialize a list to store the numbers that are divisible by every digit\n    divisible_nums = []\n\n    # loop through each number in the range\n    for num in range(startnum, endnum + 1):\n        # initialize a variable to store the sum of the digits of the current number\n        digit_sum = sum(int(d) for d in str(num))\n\n        # if the sum of the digits is equal to the current number, add it to the list of divisible numbers\n        if digit_sum == num:\n            divisible_nums.append(num)\n\n    # return the list of divisible numbers\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Convert the given range to a list of numbers\n    numbers = list(range(startnum, endnum + 1))\n\n    # Define a lambda function to check if a number is divisible by every digit\n    is_divisible_by_digits = lambda num: all(d in str(num) for d in str(num))\n\n    # Apply the lambda function to every number in the list and filter out the non-divisible ones\n    divisible_numbers = list(filter(is_divisible_by_digits, numbers))\n\n    # Print the resulting list of divisible numbers\n    print(divisible_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function to check if a number is divisible by a given digit\n    check_divisible = lambda num, digit: num % digit == 0\n    # Loop through each number in the range and check if it is divisible by every digit it contains\n    for num in range(startnum, endnum + 1):\n        # Check if the number is divisible by every digit from 0 to 9\n        if all(check_divisible(num, digit) for digit in range(10)):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(num) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, and returns a list of all numbers in the range\n    that are divisible by every digit in the number itself.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(digit % n == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digit(num):\n            print(num)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360.0"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle should not be larger than 360 degrees.\")\n        return None\n    else:\n        area = r * math.sin(math.radians(a/2))**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Convert angle to radians\n    a = a * (math.pi / 180)\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n\n    # Calculate area of sector\n    area = r * r * math.sin(a)\n\n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        # Calculate the arc length of the sector\n        arc_length = 2 * math.pi * r * math.tan(math.radians(a/360))\n        \n        # Calculate the area of the sector using the formula A = pi * r^2 * sin(theta/2)\n        area = math.pi * r**2 * math.sin(math.radians(a/2))\n        \n        # Return the area and arc length of the sector\n        return (area, arc_length)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Find the lengths of all three strings\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store the length of LCS of two substrings\n    table = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill the table to find the length of LCS of all three substrings\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1])\n\n    # Find the LCS of all three substrings\n    lcs = []\n    i = m\n    j = n\n    k = p\n    while i!= 0 and j!= 0 and k!= 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i-1][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] == table[i-1][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    The function uses dynamic programming approach to solve this problem.\n    '''\n    \n    # Initialize the matrix to store the length of longest common subsequence for three strings\n    L = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n    \n    # Fill the matrix using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Find the final length of the longest common subsequence\n    length = L[len(X)][len(Z)]\n    \n    # Create a list to store the actual common subsequence\n    common_subsequence = []\n    \n    # Backtrack through the matrix and add the common subsequence elements to the list\n    i, j = len(X), len(Z)\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            common_subsequence.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Reverse the common subsequence list to get the correct order\n    common_subsequence = list(reversed(common_subsequence))\n    \n    # Return the final length of the longest common subsequence\n    return length, common_subsequence"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D table to store length of LCS for all prefixes of X\n    LCS = [[0] * (o+1) for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j] = LCS[i-1][j-1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1], LCS[i-1][k])\n\n    # Get the length of the longest common subsequence\n    L = LCS[m][n]\n\n    # Create a list to store the common subsequence in reverse order\n    lcs = []\n\n    # Fill the list in reverse order\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if LCS[i-1][j-1] == LCS[i][j]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function finds the longest common subsequence (LCS) of three string sequences.\n    The LCS is the longest sequence of characters that are common to all three sequences.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # create a table to store the lengths of LCS of all possible substrings \n    L = [[0] * (p+1) for i in range(m+1)] \n  \n    # Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    # print the LCS of three sequences \n    i = m \n    j = n \n    k = p \n    lcs = [] \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i][j-1][k]: \n            i -= 1 \n        elif L[i][j-1][k] == L[i][j][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n\n    # Create a table to store lengths of LCS of subproblems\n    L = [[0]*(p+1) for i in range(m+1)]\n\n    # Build L[m+1][p+1] in bottom up fashion\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] == Z[i+j-2]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Backtrack to get LCS\n    i, j = m, p\n    lcs = \"\"\n    while i!= 0 and j!= 0:\n        if X[i-1] == Y[j-1] == Z[i+j-2]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, l = len(X), len(Y), len(Z)\n    dp = [[0] * (l + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1] == Z[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function finds the longest common subsequence (LCS) of three strings X, Y, and Z.\n    \"\"\"\n\n    # Step 1: Initialize a 2D table to store the lengths of LCS for all prefixes of X, Y and Z.\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    L = [[0 for j in range(p+1)] for i in range(n+1)]\n\n    # Step 2: Fill the table L[][] in bottom-up manner.\n    for i in range(1, n+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i+j-2]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Step 3: Print the LCS of X, Y, and Z.\n    i = n\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i+j-2]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store LCS lengths\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # reconstruct the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i - 1][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = [[0] * (n + 1) for i in range(m + 1)] \n\n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n\n    i = m \n    j = n \n    lcs = \"\" \n    while i!= 0 and j!= 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m+1) for i in range(n+1)] \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n    return p[n][m]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define a regular expression to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    \n    # Use the re.sub() function to replace the matched words with spaces\n    result = re.sub(pattern, r'\\1\\ ', str1)\n    \n    # Remove leading and trailing spaces\n    result = result.strip()\n    \n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first letter of each word and join them back into a string\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r\"(?<=[A-Z])([a-z])\", r\" \\1\", str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Convert the list of words to a string and capitalize the first letter of each word\n    str2 =''.join([word.capitalize() for word in words])\n    \n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use the re.sub() function to replace the words starting with capital letters with spaces\n    return re.sub(pattern, r'\\1\\ ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # create a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z](\\w+)\\b')\n    # split the string into words using the pattern\n    words = pattern.findall(string)\n    # loop through the words and replace the first letter with a space\n    for i in range(len(words)):\n        words[i] ='' + words[i]\n    # join the words with spaces\n    result = ''.join(words)\n    # return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b\\w+\\b', string)\n    capitalized_words = [word.capitalize() for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase to make case-insensitive matching easier\n    str1 = str1.lower()\n    # Split the string into words using a regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces and capitalize the first letter of each word\n    words_with_spaces = [word.capitalize() for word in words]\n    # Join the words with spaces and return the result\n    return''.join(words_with_spaces)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert the list of strings to a list of numbers\n    nums = [float(num_str) for num_str in nums_str]\n    # sort the list of numbers\n    nums.sort()\n    # convert the sorted list of numbers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of numbers\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    \n    # Sort the numbers using the built-in sort() function\n    nums.sort()\n    \n    # Convert the sorted list of numbers back to a list of strings\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to float\n    nums_float = [float(num_str) for num_str in nums_str]\n\n    # Sort the float numbers in descending order\n    nums_float.sort(reverse=True)\n\n    # Convert the sorted float numbers back to strings\n    nums_str = [str(num_float) for num_float in nums_float]\n\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list of integers using the built-in sort function\n    nums.sort()\n    # convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            continue\n\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n\n    # Use the built-in `sorted()` function to sort the list\n    nums_sorted = sorted(nums)\n\n    # Convert the sorted list back to strings\n    nums_sorted_str = [str(num) for num in nums_sorted]\n\n    return nums_sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for s in nums_str:\n        nums_int.append(int(s))\n    nums_int.sort()\n    return nums_int"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n        else:\n            nums.append(num_str)\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Create a new list and add the given tuple to it\n    new_list = test_list.copy()\n    new_list.append(test_tup)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Use the extend() method to add the tuple to the list.\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i > 0 and arr[i-1] > arr[i]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i-1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i < 0:\n        return True\n    # check if left child is less than parent\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    # check if right child is less than parent and not equal to left child\n    if i < len(arr) - 1 and arr[i] < arr[i+1]:\n        return False\n    # check if left child is smaller than parent and not equal to right child\n    if i > 0 and arr[i] < arr[i-1]:\n        return False\n    # recursively check left and right subtrees\n    return check_min_heap_helper(arr, i//2) and check_min_heap_helper(arr, i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i  # Initialize smallest as root\n\n    # If left child is smaller than root\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    # If right child is smaller than smallest so far\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # If smallest is not root\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    # Traverse through array from 0 to n-2\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    # Check if root is greater than or equal to last element of array\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # Check if left child is minimum\n    if arr[2 * i] > arr[2 * i + 1]:\n        return False\n    \n    # Recursive call to check if left child is minimum\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if len(arr) % 2 == 1:\n        return False\n    \n    # Check if the first half of the array is a min heap\n    if not check_min_heap_helper(arr, 0):\n        return False\n    \n    # Check if the second half of the array is a min heap\n    if not check_min_heap_helper(arr, len(arr) // 2):\n        return False\n    \n    # If both halves are min heaps, then the entire array is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the root node is greater than its left child, return False\n    if arr[i] > arr[2 * i + 1]:\n        return False\n\n    # If the left child is greater than its parent, return False\n    if arr[2 * i + 1] > arr[i]:\n        return False\n\n    # If the right child is greater than its parent, return False\n    if arr[2 * i + 2] > arr[i]:\n        return False\n\n    # If all the above conditions are true, return True\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Initialize the size of the heap\n    size = len(arr) // 2\n\n    # Traverse the heap to check if it is a min heap or not\n    for i in range(size):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # If the loop completes without any errors, return True\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] > arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_numbers = [1, 1]\n        for i in range(2, n+1):\n            jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n        return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n - 1) - 1) % 1000000007"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, (a + b)\n        # print(a)\n    return b\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2) + 1\n    else:\n        return 2 * jacobsthal_num(n//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Base case: use Lucas number formula\n        return (2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)) % 1000000"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    jac_num = 1\n    luc_num = 1\n\n    # Calculate the jacobsthal number\n    for i in range(1, n+1):\n        jac_num = (2*jac_num*luc_num) + luc_num\n        luc_num = (2*luc_num**2) + luc_num\n\n    return jac_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two jacobsthal numbers to 0 and 1 \n    j0 = 0 \n    j1 = 1 \n\n    # Initialize an empty list to store the jacobsthal numbers \n    jac_num = [] \n\n    # Loop through the number of terms n and append the jacobsthal numbers to the list \n    for i in range(n): \n        # Calculate the next jacobsthal number as the sum of the previous two numbers \n        j = j0 + j1 \n        # Append the new jacobsthal number to the list \n        jac_num.append(j) \n        # Update the values of the previous two jacobsthal numbers \n        j0 = j1 \n        j1 = j \n\n    # Return the last jacobsthal number in the list \n    return jac_num[-1] \n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple in descending order\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples by second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # initialize minimum record count\n    min_count = 0\n    # initialize minimum record count\n    min_sum = 0\n    # iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # if count of consecutive records is greater than k, update minimum sum\n        if min_count == 0 or i - min_count + 1 > K:\n            min_sum = sorted_list[i][0]\n            min_count = 1\n        # if the current record has a sum greater than the minimum sum, update minimum sum\n        elif sorted_list[i][0] > min_sum:\n            min_sum = sorted_list[i][0]\n            min_count += 1\n    # return the minimum sum\n    return min_sum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # sort the list based on first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # initialize minimum k as the first k records\n    min_k_list = sorted_list[:K]\n\n    # initialize minimum k as the second k records\n    min_k_list.append(sorted_list[K])\n\n    # sort the list based on first element of each tuple\n    min_k_list = sorted(min_k_list, key=lambda x: x[0])\n\n    # return the minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each element in the test list\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # Sort the dictionary based on the frequency of the elements in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a list to store the minimum k records\n    min_k_records = []\n    \n    # Iterate over the sorted dictionary\n    for i in range(K):\n        min_k_records.append(sorted_freq[i][0])\n    \n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x:x[1]) # sort the list based on the second element of each tuple\n    return test_list[:K] # return the first K elements of the sorted list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Given a list of tuples, and a number K, find the minimum K records from the list.\n\n    :param test_list: A list of tuples.\n    :param K: An integer, the number of records to return.\n    :return: A list of tuples containing the minimum K records.\n    \"\"\"\n    # Sort the list of tuples based on the first element of the tuple.\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a list to store the minimum K records.\n    min_list = []\n\n    # Iterate through the sorted list of tuples.\n    for i in range(K):\n        # Add the first element of each tuple to the min_list.\n        min_list.append(test_list[i][0])\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # Sort the list based on the second element of the tuple (i.e. the second element is the value we want to sort by)\n    test_list.sort(key=lambda x: x[1])\n\n    # Iterate over the first K elements of the sorted list and keep track of the minimum value seen so far\n    min_values = [test_list[i][1] for i in range(K)]\n    min_value = min_values[0]\n\n    # Iterate over the remaining elements of the sorted list and update the minimum value if we see a smaller value\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if K <= 0:\n        return []\n\n    test_list.sort(key=lambda x: x[0])\n\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(test_list[i])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    min_k = test_list[:K]\n    for i in range(K, len(test_list)):\n        if test_list[i] <= min_k[-1]:\n            min_k.pop()\n            min_k.append(test_list[i])\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[0]) # sort the list of tuples based on first element\n    min_dict = {} # create an empty dictionary to store the minimum values\n    \n    for i in range(len(sorted_list)):\n        if i < K: # for the first K records, add to the dictionary as is\n            min_dict[i] = sorted_list[i]\n        else: # for the remaining records, find the minimum value and add to the dictionary\n            if sorted_list[i][0] < min_dict[0][0]:\n                for key, value in min_dict.items(): # for each key, value pair in the dictionary\n                    if value[0] < sorted_list[i][0]: # if the first element of the current value is less than the first element of the minimum value, update the minimum value\n                        min_dict[key] = sorted_list[i] # update the value in the dictionary\n                        break\n                else: # if the loop completes without finding a smaller value, add the current record to the dictionary\n                    min_dict[len(min_dict)] = sorted_list[i]\n    \n    min_list = [] # create an empty list to store the minimum records\n    for key, value in min_dict.items(): # for each key, value pair in the dictionary\n        min_list.append(value) # add the value to the list\n    \n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i] and l2[i][i] in l3[i][i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    \"\"\"\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the element at the current index is present in l1, l2, and l3\n        if (l1[i] in l1) and (l1[i] in l2) and (l1[i] in l3):\n            # If the element is present in all three lists, add it to the common_elements list\n            common_elements.append(l1[i])\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if all(l2[j] == l1[i] and l3[j] == l1[i] for j in range(len(l2))):\n                common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize the smallest and second smallest variables to infinity\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # Loop through the numbers and update the smallest and second smallest variables accordingly\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n            \n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest or second_smallest is None:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return \"The list should have at least 2 numbers to find the second smallest.\"\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # If there is only one number in the list, return None\n    if len(sorted_numbers) == 1:\n        return None\n    \n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        print(f\"Found {pattern} in {text}\")\n    else:\n        print(f\"Could not find {pattern} in {text}\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+(?!b)'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found at index\", match.start())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'(?<=a)b+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the reverse of i-th string is present in j-th string\n            if test_list[j][::-1] in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Define a function to check if a string is a reverse of another string\n    def is_reverse(s1, s2):\n        if len(s1)!= len(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i]!= s2[len(s1)-1-i]:\n                return False\n        return True\n\n    # Initialize a counter variable to keep track of the number of pairs of reverse strings\n    count = 0\n\n    # Loop through each string in the list\n    for s1 in test_list:\n        # Create a new list containing only the characters in the original string in reverse order\n        s2 = list(s1[::-1])\n\n        # Loop through each string in the list again, and check if the second string is a reverse of the first string\n        for s3 in test_list:\n            if s2 == s3[::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    # Create an empty dictionary to store the count of reverse pairs\n    count = {}\n    # Iterate through the given string list\n    for string in test_list:\n        # Reverse the string and check if it is present in the dictionary\n        reversed_string = string[::-1]\n        if reversed_string in count:\n            # If it is, increment the count of the reverse string\n            count[reversed_string] += 1\n        else:\n            # If not, add the reverse string to the dictionary with a count of 1\n            count[reversed_string] = 1\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize two empty dictionaries to store the characters from the string and its reverse\n    char_dict = {}\n    reverse_dict = {}\n\n    # Loop through each string in the list and append its characters to the corresponding dictionaries\n    for string in test_list:\n        for i in range(len(string)):\n            char_dict[string[i]] = char_dict.get(string[i], 0) + 1\n            reverse_dict[string[::-1]] = reverse_dict.get(string[::-1], 0) + 1\n\n    # Initialize the count of reverse pairs to zero\n    count = 0\n\n    # Loop through each character in the dictionary and find the corresponding reverse character in the reverse dictionary\n    for char, count in char_dict.items():\n        if char in reverse_dict and char!= reverse_dict[char]:\n            count *= 2 # Count both the original and reverse strings\n            count -= reverse_dict[char] # Count the pairs that are not the same as the reverse string\n            count += 1 # Count the pair that is the same as the reverse string\n            count *= (len(test_list) // 2) # Count the total number of pairs (divide by 2 to count the pairs in pairs)\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the number of pairs of reverse strings in the list.\n    The pairs of reverse strings are considered when the strings are swapped in the original list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    # Create a dictionary to store the count of reverse pairs in a string\n    reverse_dict = {}\n    \n    # Iterate through the list of strings\n    for string in test_list:\n        # Convert the string to a list of characters\n        string_list = list(string)\n        # Reverse the list of characters\n        reverse_list = string_list[::-1]\n        # Join the reversed list of characters back into a string\n        reversed_string = \"\".join(reverse_list)\n        # Check if the reversed string is already in the dictionary\n        if reversed_string in reverse_dict:\n            # If it is, increment the count by 1\n            reverse_dict[reversed_string] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            reverse_dict[reversed_string] = 1\n    \n    # Iterate through the dictionary to count the pairs of reverse pairs\n    pair_count = 0\n    for key, value in reverse_dict.items():\n        if value > 1:\n            # If the count of reverse pairs is greater than 1, increment the pair count\n            pair_count += value*(value-1)//2\n    \n    # Return the pair count\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    # Loop through all pairs of strings in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the reversed strings are equal\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for item in list1:\n        sublist_tuple = tuple(item)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # iterate over the sublists in the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in counts:\n            # if it is, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # if it is not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n\n    # return the dictionary of unique sublist counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(list1))\n    result = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist in result:\n                result[tuple_sublist] += 1\n            else:\n                result[tuple_sublist] = 1\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_count[tuple(sublist)] = sublist_count.get(tuple(sublist), 0) + 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    count_dict = {}\n    # Loop through each element in the input list\n    for i in range(len(list1)):\n        # Get the current element\n        element = list1[i]\n        # Check if the element is a list\n        if type(element) == list:\n            # Convert the list to a tuple\n            tuple_element = tuple(element)\n            # Check if the tuple element is already a key in the dictionary\n            if tuple_element in count_dict:\n                # If it is, increment its value by 1\n                count_dict[tuple_element] += 1\n            else:\n                # If it's not, add the key-value pair to the dictionary\n                count_dict[tuple_element] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts of unique lists\n    counts = {}\n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in counts:\n            # if it does, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count = {}\n    # Loop through the list\n    for i in list1:\n        # Convert the list to a tuple\n        tup = tuple(i)\n        # Check if the tuple is already in the dictionary\n        if tup in count:\n            # If it is, increment its count\n            count[tup] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            count[tup] = 1\n    # Return the dictionary\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal.Decimal(num)\n        if '.' in num and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        int_part, dec_part = num.split('.')\n        if len(int_part) > 10 or len(dec_part) > 2:\n            return False\n        for char in int_part:\n            if char not in '0123456789':\n                return False\n        for char in dec_part:\n            if char not in '0123456789':\n                return False\n    else:\n        if len(num) > 12:\n            return False\n        for char in num:\n            if char not in '0123456789':\n                return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        if '.' in num:\n            num = num.replace('.', '')\n            if len(num) > 2:\n                return False\n            for char in num:\n                if not char.isdigit() and char!= '.':\n                    return False\n            return True\n        else:\n            return False\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) > 2:\n                return False\n            elif len(decimal_part) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num == int(num):\n            return True\n    except ValueError:\n        return False\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^-?\\d*\\.?\\d{0,2}$'\n    return bool(re.match(decimal_pattern, num))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the string to a float with 2 decimal places\n        float_num = float(num)\n        # check if the float has exactly 2 decimal places\n        if \"{:.2f}\".format(float_num) == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string is not a valid number, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #check if the input is a string\n    if type(num)!= str:\n        return False\n    \n    #check if the string starts with a digit\n    if num[0] not in '0123456789':\n        return False\n    \n    #check if the string contains any non-digit characters\n    for char in num:\n        if char not in '0123456789':\n            return False\n    \n    #check if the string contains more than 2 non-zero digits\n    digits = [int(char) for char in num]\n    if len(digits) > 2:\n        return False\n    \n    #check if the string contains any non-zero digits after the decimal point\n    if '.' in num:\n        dp = num.index('.')\n        if dp+2 >= len(num):\n            return False\n        for i in range(dp+2, len(num)):\n            if num[i] not in '0123456789':\n                return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            decimal = num - int(num)\n            if decimal >= 0.5 or decimal < -0.5:\n                return True\n            else:\n                return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2 or len(parts[0]) > 2 or len(parts[1]) > 2:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n    if int(parts[0]) > 2147483647 or int(parts[1]) > 2147483647:\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one unique element.\")\n    else:\n        print(\"The list does not contain only one unique element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n        else:\n            break\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    \"\"\"\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = list(set(arr))\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as an input and returns True if all the elements in the list are distinct, else it returns False.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for key in count:\n        if count[key] == 1:\n            return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = []\n    for i in arr:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                days_in_months[2] = 29\n            else:\n                days_in_months[2] = 28\n        if days_in_months[monthnum3 - 1] > 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n    if monthnum3 in months:\n        if months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum <= 12:\n        if monthnum % 2 == 0:\n            if monthnum % 4 == 0:\n                if monthnum % 100 == 0:\n                    if monthnum % 400 == 0:\n                        return True\n                    else:\n                        return False\n                else:\n                    return True\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum3 == 2:\n                return True\n        else:\n            return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number.\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum in [2]:\n        return True if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Calculate the difference between current element and minimum element\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(arr, l, m, r):\n    i = l\n    j = m+1\n\n    temp = []\n\n    while i<=m and j<=r:\n        if arr[i] < arr[j]:\n            temp.append(arr[i])\n            i+=1\n        else:\n            temp.append(arr[j])\n            j+=1\n\n    while i<=m:\n        temp.append(arr[i])\n        i+=1\n\n    while j<=r:\n        temp.append(arr[j])\n        j+=1\n\n    for i in range(l, r+1):\n        arr[i] = temp[i-l]\n\n\ndef merge_sort(arr, l, r):\n    if l < r:\n        m = (l+r)//2\n        merge_sort(arr, l, m)\n        merge_sort(arr, m+1, r)\n        merge(arr, l, m, r)\n\n\ndef find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Loop through the array and calculate the difference between adjacent elements\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize the minimum difference to be a very large number\n    min_diff = float('inf')\n    # Sort the array in ascending order\n    arr.sort()\n    # Iterate over the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf') # initialize minimum difference to infinity\n    for i in range(n): # iterate through all elements in the array\n        for j in range(i+1,n): # iterate through all elements after the current element\n            diff = abs(arr[i]-arr[j]) # calculate the absolute difference between the current and next elements\n            if diff < min_diff: # if the current difference is smaller than the minimum difference, update the minimum difference\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables for minimum difference and minimum element index\n    min_diff = arr[1] - arr[0]\n    min_index = 0\n    \n    # Loop through the array and compare adjacent elements\n    for i in range(1, n):\n        \n        # Calculate the difference between adjacent elements\n        diff = arr[i] - arr[i-1]\n        \n        # If the difference is smaller than the current minimum difference, update the minimum difference and minimum element index\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i-1\n    \n    # Return the minimum difference and minimum element index\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        diff = min(diff, arr[n-1] - arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array should have at least two elements.\"\n\n    min_diff = float('inf')\n    min_pair = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    if min_pair is None:\n        return \"No pair of elements with difference less than infinity.\"\n    else:\n        return \"Minimum difference:\", min_diff, \"between\", min_pair[0], \"and\", min_pair[1]"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and num % 2 == 1:\n            count += 1\n        num += 1\n    return num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function checks if a number is a polite number or not.\n    A polite number is a positive integer whose digits have an even number of occurrences.\n    '''\n\n    # check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return None\n\n    # convert n to a string\n    num_str = str(n)\n\n    # count the occurrences of each digit\n    digit_counts = [0] * 10  # initialize the list with 0s\n    for digit in num_str:\n        digit_counts[int(digit)] += 1\n\n    # check if the number has an even number of occurrences of each digit\n    for count in digit_counts:\n        if count % 2!= 0:\n            return None\n\n    # calculate the nth polite number\n    nth_polite = 0\n    for i in range(n):\n        nth_polite += 1\n        if nth_polite % 2 == 0:\n            if len(str(nth_polite)) % 2 == 0:\n                continue\n            else:\n                return nth_polite\n\n    # if the loop completes, the nth polite number must exist\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    polite = 1\n    for i in range(1, n+1):\n        polite += math.factorial(i)\n    return polite\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function finds the n-th polite number.\n\n    Example:\n    >>> is_polite(1)\n    5\n    >>> is_polite(10)\n    10\n    '''\n    if n < 1:\n        return None\n\n    # Formula to find nth polite number\n    # Polite numbers are those whose last digit is odd\n    # And the first digit is even\n    # So, we need to find the nth polite number\n    # where the last digit is odd\n    # and the first digit is even\n    # Let's start by finding the number of digits\n    # in the given number\n    num_digits = int(math.log10(n)) + 1\n    # Now, let's find the last digit of the given number\n    last_digit = n % 10\n    # Now, let's find the number of polite numbers\n    # whose last digit is odd\n    count = 0\n    for i in range(1, 10):\n        if i % 2 == 0:\n            if (last_digit * 2) % 10 == i:\n                count += 1\n                if count == num_digits:\n                    break\n    # Finally, let's find the nth polite number\n    nth_polite_num = n - (count * 10 ** num_digits)\n    return nth_polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if n is a polite number, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        if n % 4 == 0 and n % 100!= 0:\n            return True\n        elif n % 5 == 0:\n            return True\n    else:\n        if n % 4 == 0 and n % 100!= 0:\n            return True\n        elif n % 5 == 0:\n            return True\n        else:\n            for i in range(3, int(math.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    return False\n    return True\n\ndef nth_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        if is_polite(num):\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    def check_polite(i):\n        if i % 2 == 0:\n            if i == 4 or i == 6 or i == 8:\n                return False\n            elif i == 10 or i == 12 or i == 14 or i == 16 or i == 18:\n                return True\n            else:\n                return (i * (i - 1)) % 10 == 0\n        else:\n            if i == 2 or i == 4 or i == 6 or i == 8 or i == 10:\n                return True\n            elif i == 12 or i == 14 or i == 16 or i == 18:\n                return False\n            else:\n                return (i * (i + 1)) % 10 == 0\n\n    def nth_polite(i):\n        if i == 1:\n            return 4\n        elif i == 2:\n            return 6\n        elif i == 3:\n            return 8\n        else:\n            if check_polite(i):\n                return i\n            else:\n                return nth_polite(i + 1)\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find the nth polite number.\n    '''\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_polite(n):\n        if n == 1:\n            return 1\n        elif is_prime(n):\n            return n + nth_polite(n - 1)\n        else:\n            return 2 * nth_polite(n - 1)\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n <= 1:\n        return n\n\n    # Calculate the sum of first n odd numbers\n    odd_sum = sum(range(1, n + 1, 2))\n\n    # Calculate the sum of first n even numbers\n    even_sum = sum(range(2, n + 1, 2))\n\n    # Calculate the difference between the sum of odd and even numbers\n    difference = abs(odd_sum - even_sum)\n\n    # Find the nth polite number\n    polite_number = n * (difference + 1) // 2\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    polite_numbers.extend(range(2, 25))\n    polite_numbers.extend(range(50, 101))\n    polite_numbers.extend(range(101, 251))\n    polite_numbers.extend(range(251, 501))\n    polite_numbers.extend(range(501, 751))\n    polite_numbers.extend(range(751, 1001))\n\n    return polite_numbers[n-1]\n\nn = 5\n\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sieve_of_eratosthenes(limit):\n    \"\"\"\n    Returns a list of all prime numbers up to the given limit using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i * i, limit + 1, i):\n                primes[j] = False\n\n    return [i for i in range(2, limit + 1) if primes[i]]\n\n\ndef is_polite(n):\n    \"\"\"\n    Finds the nth polite number using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    limit = int(math.sqrt(n))\n    primes = sieve_of_eratosthenes(limit)\n    count = 0\n    for prime in primes:\n        if prime * prime > n:\n            break\n        count += n // prime\n    return count + 1\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    n = len(lst)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Given a list, return a list of all pairs of consecutive items in the list.\n\n    :param lst: A list of any type of elements.\n    :return: A list of tuples containing all pairs of consecutive items in the list.\n    \"\"\"\n\n    if len(lst) < 2:\n        return []\n\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n\n    result = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            break\n        result.append((l1[i], l1[i+1]))\n\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n):\n        if i == n-1:\n            pairs.append((l1[i], l1[0]))\n        elif i < n-1:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(*[iter(l1)]*2)"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and the sum.\n    It returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list and not present in the second list.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains all the elements of list 1 that are not present in list 2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements in li1 that are not present in li2.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    This function finds the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum of fourth power to zero\n    sum_4th_pow = 0\n    \n    # loop through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of the odd number i\n        fourth_pow = i ** 4\n        \n        # add the fourth power to the sum of fourth power\n        sum_4th_pow += fourth_pow\n    \n    # return the sum of fourth power\n    return sum_4th_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    for i in range(1, n+1):\n        num += 1\n        if num % 2!= 0:\n            sum += num ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Use a loop to iterate over the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the fourth power of i to the sum\n        sum += i ** 4\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, 2*n+1, 2):\n        odd_numbers.append(i)\n    fourth_powers = [num ** 4 for num in odd_numbers]\n    fourth_powers_sum = sum(fourth_powers)\n    return fourth_powers_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    i = 0\n    while i < n:\n        if i % 2 == 1:\n            sum_of_fourth_powers += i ** 4\n        i += 1\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_power = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power\n\nn = int(input(\"Enter the number of odd natural numbers: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of the first\", n, \"odd natural numbers is:\", result)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 1:\n            sum += 4 ** count\n        count += 1\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if not ((top == '(' and char == ')') or\n                    (top == '[' and char == ']') or\n                    (top == '{' and char == '}')):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if (char == ')' and stack[-1] == '(') or (char == '}' and stack[-1] == '{') or (char == ']' and stack[-1] == '['):\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = ['(', '[', '{']\n    close_brackets = [')', ']', '}']\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char!= top_char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_count = 0\n    for char in exp:\n        if char == '(':\n            open_count += 1\n            stack.append(char)\n        elif char == ')':\n            open_count -= 1\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    if open_count!= 0:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert string to list of words\n    words = test_str.split()\n    \n    # Create a new list to store the result\n    result = []\n    \n    # Loop through each word in the original list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) < K:\n            # Add the word to the result list\n            result.append(word)\n    \n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    for i, word in enumerate(words):\n        if len(word) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Loop through each word and check its length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            # If the length is K, remove the word from the list\n            words.pop(i)\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Remove all words with length K from the given string.\n\n    Parameters:\n    test_str: str\n        The input string.\n    K: int\n        The length of words to remove.\n\n    Returns:\n    str\n        The modified string.\n    \"\"\"\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a list of words with k length\n    k_length_words = [word for word in words if len(word) == K]\n\n    # Join the words with space and return the result\n    return''.join(k_length_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to lowercase for case-insensitivity\n    test_str = test_str.lower()\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the final output\n    final_output = []\n    # Loop through each word in the string\n    for word in words:\n        # Check if the length of the word is less than or equal to K\n        if len(word) <= K:\n            # If the word is less than or equal to K, append it to the final output\n            final_output.append(word)\n    # Join the final output list into a string and return it\n    return''.join(final_output)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n            \n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with k length\n    k_length_words = []\n    \n    # Loop through the words and check if the length of each word is equal to K\n    for word in words:\n        if len(word) == K:\n            k_length_words.append(word)\n    \n    # Join the list of k-length words into a single string\n    new_str =''.join(k_length_words)\n    \n    # Return the new string\n    return new_str"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    # use regex to search for pattern in text and return the match object\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0], result[0].start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        result = re.findall(pattern, text)\n        if len(result) == 0:\n            return None\n        else:\n            return result\n    except Exception as e:\n        print(e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        matches = re.finditer(pattern, text)\n        for match in matches:\n            print(f\"Found '{match.group()}' at position {match.start()}\")\n    except re.error as e:\n        print(f\"Error: {e}\")\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Substring found at position {match.start()} and with length {match.end()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are matches, return a list of tuples containing the match and its position in the text\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            count += 1\n    return count == len(nums) - 1"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    # iterate through the list and check if the current index is odd\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            # if the current index is even, check if the next index is odd\n            if nums[i] % 2!= 0:\n                return False\n    \n    # if all even indices have odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i == 0 or nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # if i is even\n            if nums[i] % 2 == 0: # if the number at odd index i is even\n                return False # return False if the even number at odd index i is found\n    return True # return True if all odd numbers are found at odd positions"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(i, len(nums), 2)]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if i % 2 == 1:\n            for j in range(len(nums)):\n                if j % 2 == 0 and nums[j] % 2 == 1:\n                    return False\n\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\nsample_str = 'hello world'\nprint(count_vowels(sample_str))"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # create a set to remove duplicates\n    arr_set = set(arr)\n\n    # find the sum of the unique elements\n    unique_sum = sum(arr_set)\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_elements = set(arr)\n    # Initialize the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Loop through each unique element in the set\n    for element in unique_elements:\n        # If the element is in the array, add it to the sum\n        if element in arr:\n            non_repeated_sum += element\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Remove duplicates from the list\n    unique_arr = list(set(arr))\n\n    # Initialize the sum variable\n    sum_non_repeats = 0\n\n    # Iterate over the unique elements in the list\n    for element in unique_arr:\n        # Add the current element to the sum_non_repeats variable\n        sum_non_repeats += element\n\n    return sum_non_repeats"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n\n    # calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n\n    # return the sum of all elements in the list\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to keep track of the non-repeated elements\n    unique_set = set(arr)\n    \n    # convert the set to a list to sort the elements\n    unique_list = sorted(list(unique_set))\n    \n    # initialize a variable to keep track of the sum of the non-repeated elements\n    sum = 0\n    \n    # iterate through the sorted list and add the elements to the sum\n    for num in unique_list:\n        sum += num\n        \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # create a set to store the elements of the list\n    unique_elements = set(arr)\n    \n    # initialize the sum to 0\n    sum = 0\n    \n    # iterate over the unique elements and add their value to the sum\n    for element in unique_elements:\n        sum += element\n    \n    # return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_list = []\n    for i in arr: \n        if i not in unique_list: \n            unique_list.append(i) \n    return sum(unique_list)\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes in a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # creating a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # finding the sum of non-repeated elements\n    sum = 0\n    for num in freq:\n        if freq[num] == 1:\n            sum += num\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Create a generator object that yields a tuple of consecutive duplicates\n    duplicates = (list(g) for k, g in groupby(list1) if k == list1.index(g.grouper))\n\n    # Convert the generator object to a list of sublists\n    packed_duplicates = [list(sublist) for sublist in duplicates]\n\n    return packed_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # function to group consecutive duplicates\n    def group_duplicates(iterable):\n        key = lambda x: x\n        return groupby(iterable, key)\n    \n    # initialize empty list to store packed sublists\n    packed_list = []\n    \n    # loop through the input list\n    for element in list1:\n        # check if the current element is the same as the next element in the list\n        if next(iter(list1), None) == element:\n            # if the next element is the same, add the current element to the same sublist\n            sublist = [element]\n        else:\n            # if the next element is not the same, add the sublist to the packed list and start a new sublist\n            packed_list.append(sublist)\n            sublist = [element]\n            \n    # add the last sublist to the packed list\n    packed_list.append(sublist)\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create an iterator of consecutive elements\n    consecutive_elements = groupby(enumerate(list1), lambda x: x[1] == x[0] + 1)\n    # create an empty list to store sublists\n    packed_list = []\n    # loop through the consecutive elements\n    for key, group in consecutive_elements:\n        # if the group has only one element, append it to the packed list\n        if len(list(group)) == 1:\n            packed_list.append(list(group))\n        # if the group has more than one element, add it to the packed list as a sublist\n        else:\n            packed_list.append(list(group))\n    # return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        list1 (list): A list of elements.\n\n    Returns:\n        list: A list of sublists with consecutive duplicates of the original list elements.\n    \"\"\"\n    # Use the itertools.groupby function to group the elements of the list by their keys\n    grouped_elements = groupby(list1)\n\n    # Create an empty list to store the sublists with consecutive duplicates\n    result = []\n\n    # Loop over each sublist of grouped elements\n    for key, group in grouped_elements:\n        # Check if the group is a consecutive set of duplicates\n        if len(list(group)) == len(group) - 1:\n            # If it is, append the sublist to the result list\n            result.append(list(group))\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using groupby function to group consecutive duplicates elements\n    grouped_items = groupby(enumerate(list1), lambda x: x[1] == x[0][1])\n    \n    # Using list comprehension to create sublists\n    packed_list = [list(group) for key, group in grouped_items]\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n\n    # Create a generator expression to group consecutive duplicates of the list\n    grouped = (list(group) for key, group in groupby(list1) if len(list(group)) > 1)\n\n    # Use the groupby() function to create sublists of consecutive duplicates\n    packed = [list(group) for group in grouped]\n\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    count_dict = {}\n    # Loop through each element in the list1\n    for i in list1:\n        # Check if the element is a list\n        if isinstance(i, list):\n            # If it is a list, convert it to a tuple\n            tup = tuple(i)\n            # Check if the tuple is already in the dictionary\n            if tup in count_dict:\n                # If it is, increment its count\n                count_dict[tup] += 1\n            else:\n                # If it is not, add it to the dictionary with a count of 1\n                count_dict[tup] = 1\n    # Return the final dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple in count:\n                count[item_tuple] += 1\n            else:\n                count[item_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    count = {}\n    \n    # iterate through the list of lists\n    for item in list1:\n        # turn the list into a tuple and add it to the dictionary\n        if tuple(item) in count:\n            count[tuple(item)] += 1\n        else:\n            count[tuple(item)] = 1\n    \n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    counts = {}\n    # Iterate over each element in the list1\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in counts:\n            # If it is, increment the count of the tuple by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # If not, add the sublist as a new tuple with count 1\n            counts[tuple(sublist)] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_counts[tuple(sublist)] = sublist_counts.get(tuple(sublist), 0) + 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in unique_dict:\n            unique_dict[tuple(sublist)] = 1\n        else:\n            unique_dict[tuple(sublist)] += 1\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in list1:\n        for j in i:\n            if j not in count_dict:\n                count_dict[j] = [i.count(j)]\n            else:\n                count_dict[j].append(i.count(j))\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n\n    # Create an empty dictionary to store the count of each sublist\n    sublist_count = {}\n\n    # Loop through each list in the main list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if sublist in sublist_count:\n            # Increment the count for the tuple\n            sublist_count[sublist] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[sublist] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples based on the first element in each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a dictionary to store the combinations\n    combinations_dict = {}\n\n    # Initialize a variable to keep track of the total sum of the current combination\n    current_sum = 0\n\n    # Iterate over each tuple in the list of tuples\n    for i in range(len(test_list)):\n\n        # If the current tuple is the first tuple in the list, add it to the combinations_dict with a sum of 0\n        if i == 0:\n            current_sum = test_list[i][0]\n            combinations_dict[current_sum] = []\n            combinations_dict[current_sum].append(test_list[i])\n\n        # If the current tuple is not the first tuple in the list, check if it can be added to the current combination\n        else:\n\n            # Calculate the difference between the current sum and the current tuple's first element\n            difference = current_sum - test_list[i][0]\n\n            # If the difference is zero, add the current tuple to the combinations_dict and increment the current_sum\n            if difference == 0:\n                current_sum += test_list[i][0]\n                combinations_dict[current_sum].append(test_list[i])\n\n            # If the difference is negative, increment the current sum\n            elif difference < 0:\n                current_sum += test_list[i][0]\n\n            # If the difference is positive, increment the current sum and add the current tuple to the combinations_dict\n            else:\n                current_sum += test_list[i][0]\n                combinations_dict[current_sum].append(test_list[i])\n\n    # Return the combinations_dict\n    return combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples to store unique tuples\n    unique_tuples = set(test_list)\n\n    # create a list of tuples of unique tuples\n    unique_combinations = []\n    for i in range(len(unique_tuples)):\n        for j in range(i+1, len(unique_tuples)):\n            unique_combinations.append((unique_tuples[i], unique_tuples[j]))\n\n    # return the set of unique combinations of sums\n    return set(unique_combinations)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples for easy checking for duplicate combinations\n    test_set = set(tuple(sorted(x)) for x in test_list)\n\n    # Initialize a list to store the combinations of sums\n    combinations_list = []\n\n    # Iterate through all possible sums\n    for i in range(len(test_list[0])):\n        # Initialize a set to store all possible combinations of the current sum\n        current_sum_combinations = set()\n\n        # Iterate through all possible tuples in the given tuple list\n        for tuple_combination in combinations(test_list, i+1):\n            # Check if the combination is a duplicate of any previous combination\n            if tuple_combination not in current_sum_combinations:\n                # If the combination is not a duplicate, add it to the current sum's set of combinations\n                current_sum_combinations.add(tuple_combination)\n\n                # If the current sum's set of combinations is a subset of any previous set of combinations, add it to the overall set of combinations\n                for previous_combination in combinations_list:\n                    if current_sum_combinations.issubset(previous_combination):\n                        break\n                else:\n                    combinations_list.append(current_sum_combinations)\n\n    # Return the list of combinations of sums\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def is_valid_combination(combination):\n        '''\n        This function checks whether the given combination of tuples is valid or not.\n        '''\n        total_sum = sum(combination)\n        return total_sum == sum(test_list)\n\n    valid_combinations = [combination for combination in combinations(test_list, r=2) if is_valid_combination(combination)]\n    return valid_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                result.append(tuple(sorted((test_list[i], test_list[j]))))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate over all the tuples in the given list\n    for i in range(len(test_list)):\n        # Initialize a list to store the current combination\n        current_combination = []\n\n        # Iterate over all the other tuples in the given list\n        for j in range(len(test_list)):\n            # Skip the current tuple if it is equal to the current tuple\n            if i == j:\n                continue\n            # Calculate the sum of the current tuple and the current other tuple\n            current_sum = test_list[i][0] + test_list[j][0]\n            # If the sum is equal to the given sum, add the current tuple and the current other tuple to the current combination\n            if current_sum == target_sum:\n                current_combination.append(test_list[i])\n                current_combination.append(test_list[j])\n\n        # If the current combination is not empty, add it to the combinations list\n        if current_combination:\n            combinations_list.append(current_combination)\n\n    # Return the combinations list\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    \"\"\"\n\n    def find_subsets(test_list):\n        \"\"\"\n        Recursive function to find all subsets of a given list of tuples. \n        \"\"\"\n        if not test_list:\n            return [[]]\n        else:\n            first_element = test_list[0]\n            rest_of_list = test_list[1:]\n            subsets = find_subsets(rest_of_list)\n            result = []\n            for subset in subsets:\n                result.append([first_element] + subset)\n            return result\n\n    def find_combinations_with_sums(subsets, target_sum):\n        \"\"\"\n        Recursive function to find all combinations of sums in the given subsets. \n        \"\"\"\n        if not subsets:\n            return []\n        else:\n            first_subset = subsets[0]\n            rest_of_subsets = subsets[1:]\n            combinations = find_combinations_with_sums(rest_of_subsets, target_sum)\n            result = []\n            for subset in first_subset:\n                for combo in combinations:\n                    result.append(subset + combo)\n            return result\n\n    def find_combinations_with_tuples(test_list, target_sum):\n        \"\"\"\n        Main function to find all combinations of sums with tuples in the given tuple list. \n        \"\"\"\n        subsets = find_subsets(test_list)\n        combinations = find_combinations_with_sums(subsets, target_sum)\n        return combinations\n\n    return find_combinations_with_tuples(test_list, sum(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples to store the distinct tuples in the input list\n    distinct_tuples = set(test_list)\n\n    # Create a list of sums to iterate over\n    sums = []\n    for tup in distinct_tuples:\n        for num in tup:\n            sums.append(num)\n\n    # Find the combinations of sums with tuples in the input list\n    comb_sums = list(combinations(sums, len(test_list)))\n\n    # Create a list of tuples for the combinations of sums\n    comb_tuples = []\n    for tup in comb_sums:\n        comb_tuples.append(tuple(tup))\n\n    return comb_tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Use itertools.combinations to find all combinations of sums in the given tuple list\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            # Check if the sum of the tuple elements is equal to the target sum\n            if sum(comb) == target_sum:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a dictionary to store the count of elements in each tuple\n    count_dict = {}\n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Find all possible combinations of sums\n    all_combinations = set()\n    for i in range(1, len(count_dict)+1):\n        for combo in combinations(count_dict.keys(), i):\n            # Calculate the sum of all elements in the combination\n            total = sum(combo)\n            # Check if the sum is present in the test list\n            if total in test_list:\n                all_combinations.add(tuple(sorted(combo)))\n\n    return all_combinations"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n\ncount_divisors(20)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    \n    # Calculate the count of divisors \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 2 \n            if n // i!= i: \n                count += 1 \n    \n    # Check if the count of divisors is even or odd \n    if count % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns the count of its divisors.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Counts the number of divisors of a given number using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    # Create a list of integers from 2 to n\n    lst = list(range(2, n+1))\n    \n    # Initialize a boolean array of size n+1 with all elements as False\n    prime = [True] * (n+1)\n    \n    # Iterate through each element of the list and mark its multiples as not prime\n    for i in range(2, int(math.sqrt(n))+1):\n        if prime[i]:\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n    \n    # Count the number of prime numbers less than or equal to the square root of n\n    count = sum(1 for p in range(2, n+1) if prime[p])\n    \n    # If the count is even, return True, otherwise return False\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    \n    count = 0\n    for divisor in divisors:\n        count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 1:\n                return False\n    if n > 1:\n        return count % 2 == 0\n    else:\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the count of divisors of a given number n using the algorithm of Sieve of Eratosthenes.\n    The time complexity of this algorithm is O(n log log n), where n is the given number.\n    \"\"\"\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Create a list of all numbers from 2 to n\n    numbers = list(range(2, n+1))\n    \n    # Initialize a boolean list to keep track of prime numbers\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    \n    # Use the Sieve of Eratosthenes algorithm to mark non-prime numbers\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    \n    # Count the number of divisors of n\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += numbers.count(i)\n    \n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns the count of its divisors.\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 2 if i!= n // i else 1\n    return divisors_count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate over each subarray in the array\n    for i in range(len(arr)):\n        \n        # Check if the length of the subarray is odd\n        if len(arr[i]) % 2!= 0:\n            \n            # Add the odd length subarray to the sum\n            sum += sum_odd_length_subarray(arr[i])\n    \n    # Return the final sum\n    return sum\n\ndef sum_odd_length_subarray(arr):\n    '''\n    Helper function to calculate the sum of all odd length subarrays.\n    '''\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate over each element in the subarray\n    for i in range(len(arr)):\n        \n        # If the element is odd, add it to the sum\n        if arr[i] % 2!= 0:\n            sum += arr[i]\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # We need to find the sum of all odd length subarrays\n        # To do this, we can start with the first subarray, which is odd length\n        # Then, we can start with the second subarray, which is also odd length\n        # We can keep adding the next odd length subarray to the running sum until we reach the end of the array\n        sum = arr[0]\n        for i in range(1, n, 2):\n            if i + 1 < n:\n                sum += arr[i] + arr[i + 1]\n            else:\n                sum += arr[i]\n        return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array and returns the sum of all odd length subarrays.\n\n    Args:\n        arr (list): List of integers.\n\n    Returns:\n        int: Sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize sum and count variables\n    sum_odd_length = 0\n    count_odd_length = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is odd, increment the sum and count\n        if arr[i] % 2!= 0:\n            sum_odd_length += arr[i]\n            count_odd_length += 1\n\n        # If the current element is not odd, check if it is the end of an odd length subarray\n        elif count_odd_length > 0:\n            # If the current element is the last element of an odd length subarray, add it to the sum\n            if i == len(arr) - 1:\n                sum_odd_length += arr[i]\n            # If the current element is not the last element of an odd length subarray, subtract the current element\n            else:\n                sum_odd_length -= arr[i]\n            # Reset the count to 0\n            count_odd_length = 0\n\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Find the length of the subarray\n    n = len(arr)\n    subarray_sum = 0\n\n    # Traverse through the array and calculate the sum of odd length subarrays\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            subarray_sum += arr[j]\n\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    sum_of_subarrays = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum_of_subarrays += sum(arr[i:j+1])\n    \n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n, 2):\n            total_sum += arr[j]\n            \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all odd length subarrays.\n\n    :param arr: array of integers\n    :return: sum of odd length subarrays\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    # Loop through all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2!= 0:\n                # Sum up the elements of the subarray\n                subarray_sum = sum(arr[i:j+1])\n                result += subarray_sum\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, start, end):\n    subarray = arr[start:end+1]\n    return sum(subarray)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_of_odd_subarrays = 0\n    \n    for i in range(1, n):\n        if (i%2!=0 and i+2<=n):\n            subarray = arr[i-1:i+2]\n            sum_of_odd_subarrays += sum(subarray)\n            \n    return sum_of_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            current_sum = 0\n            current_len = 1\n            \n            for j in range(i, n):\n                if j == i or arr[j]!= arr[j-1]:\n                    current_sum += arr[j]\n                    current_len += 1\n                    \n            if current_len % 2 == 1:\n                total_sum += current_sum\n                \n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    # Convert r, g, b to integers for calculation\n    r_int, g_int, b_int = int(r*255), int(g*255), int(b*255)\n\n    # Find the maximum and minimum values\n    max_val = max(r_int, g_int, b_int)\n    min_val = min(r_int, g_int, b_int)\n\n    # Find the distance between max and min values\n    delta = max_val - min_val\n\n    # Calculate h, s and v\n    if max_val == min_val:\n        h = 0\n        s = 0\n    elif max_val == r_int:\n        h = (g_int - b_int) / delta\n        s = delta / (max_val + delta)\n    elif max_val == g_int:\n        h = 2 + (b_int - r_int) / delta\n        s = delta / (max_val + delta)\n    else:\n        h = 4 + (r_int - g_int) / delta\n        s = delta / (max_val + delta)\n\n    if s == 0:\n        v = 0\n    else:\n        v = max_val / s\n\n    # Convert h, s, v to floats and return as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G, B to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    # Calculate minimum and maximum values of R, G, B\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    # Calculate the difference between maximum and minimum values\n    diff = max_val - min_val\n    # Calculate the value of V, which is the difference between maximum and minimum values\n    v = max_val\n    # Calculate the value of H, which is the angle between R, G, and B axes\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / diff\n    elif max_val == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n    # If the difference between maximum and minimum values is 0, H is not defined\n    if diff == 0:\n        h = 0\n    # Convert H and S to float values and then multiply by 360 degrees to get final Hue value\n    h = h * 60 if h < 0 else h * 60\n    # If H is less than 0, add 360 degrees to it\n    if h < 0:\n        h += 360\n    # Calculate S, which is the value of Hue, based on the maximum and minimum values of R, G, and B\n    if max_val == min_val:\n        s = 0\n    else:\n        s = diff / max_val\n    # Return the converted HSV color values in a dictionary format\n    return {'Hue': h, 'Saturation': s, 'Value': v}"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color\n    \n    Parameters:\n    r (int): Red value (0-255)\n    g (int): Green value (0-255)\n    b (int): Blue value (0-255)\n    \n    Returns:\n    h (float): Hue value (0-360)\n    s (float): Saturation value (0-1)\n    v (float): Value (0-1)\n    '''\n    \n    # Convert rgb to rgb_linear\n    rgb_linear = [r / 255.0, g / 255.0, b / 255.0]\n    \n    # Convert to XYZ\n    xyz = [\n        rgb_linear[0] * 0.4124 + rgb_linear[1] * 0.3576 + rgb_linear[2] * 0.1805,\n        rgb_linear[0] * 0.2126 + rgb_linear[1] * 0.7152 + rgb_linear[2] * 0.0722,\n        rgb_linear[0] * 0.0193 + rgb_linear[1] * 0.1192 + rgb_linear[2] * 0.9505\n    ]\n    \n    # Convert to xy\n    x, y, z = xyz_to_xy(xyz)\n    \n    # Convert to CIE Lab\n    lab = xyz_to_lab(xyz)\n    \n    # Convert to LCH\n    l, c, h = lab_to_lch(lab)\n    \n    # Convert h to hue\n    if c == 0:\n        h = 0\n    else:\n        h = h * 360\n    \n    return h, c / 100, rgb_linear[2]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color (r, g, b) to an HSV color model.\n\n    :param r: An integer between 0 and 255 representing the red value of the color.\n    :param g: An integer between 0 and 255 representing the green value of the color.\n    :param b: An integer between 0 and 255 representing the blue value of the color.\n    :return: A tuple containing the Hue value, Saturation value, and Value value of the color.\n    \"\"\"\n\n    r, g, b = r/255, g/255, b/255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        hue = 0\n    elif r == max_value:\n        hue = (g - b) / delta\n    elif g == max_value:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / (1 - abs(2 * min_value - 1))\n\n    value = max_value\n\n    return (hue, saturation, value)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    hsv = (h, cmax, cmax)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color.\n\n    Parameters:\n    r (int): Red value of the color.\n    g (int): Green value of the color.\n    b (int): Blue value of the color.\n\n    Returns:\n    h (float): Hue value of the color.\n    s (float): Saturation value of the color.\n    v (float): Value of the color.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    v = cmax\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h / 6\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV color model\n    h = 0\n    s = 0\n    v = 0\n\n    # Find maximum and minimum values in RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find delta value\n    delta = max_val - min_val\n\n    # If delta value is 0, then there is no color in the RGB color model\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        # Find hue value\n        if max_val == r:\n            h = ((g - b) / delta) % 6\n        elif max_val == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n\n        # Convert hue to 0-360 range\n        h = h * 60\n\n        # If hue value is negative, make it positive by adding 360 to it\n        if h < 0:\n            h = h + 360\n\n        # Find saturation value\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        # Find value value\n        v = max_val\n\n    # Return HSV values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color model.\n\n    Args:\n    r: int, red value of the color (0-255)\n    g: int, green value of the color (0-255)\n    b: int, blue value of the color (0-255)\n\n    Returns:\n    h: float, hue value (0-360)\n    s: float, saturation value (0-1)\n    v: float, value value (0-1)\n    \"\"\"\n\n    # Convert RGB values to Hue, Saturation and Value\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = None\n    s = None\n    v = max_val\n\n    if max_val!= 0:\n        # If the maximum value is not zero, there is a hue value\n        delta = max_val - min_val\n        s = delta / max_val\n\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h *= 60\n\n    # Convert Hue value to degrees\n    if h is not None:\n        h = int(h)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB color to HSV color\n    h, s, v = rgb_to_hsv_color(r, g, b)\n    \n    # Convert HSV color to HSL color\n    h, s, l = hsv_to_hsl_color(h, s, v)\n    \n    return h, s, l\n\ndef rgb_to_hsv_color(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n\n    Parameters:\n    r (int): red value in range [0, 255]\n    g (int): green value in range [0, 255]\n    b (int): blue value in range [0, 255]\n\n    Returns:\n    tuple: (h, s, v)\n    \"\"\"\n    # Normalize RGB values to [0, 1]\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find maximum and minimum values of RGB\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    # Calculate difference between maximum and minimum values\n    delta = max_rgb - min_rgb\n    \n    # If maximum value is zero, saturation is zero\n    if max_rgb == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate saturation\n        if l <= 0.5:\n            s = delta / max_rgb\n        else:\n            s = delta / (2 - max_rgb - min_rgb)\n        \n        # Calculate hue\n        if delta == 0:\n            h = 0\n        elif r == max_rgb:\n            h = (g - b) / delta\n        elif g == max_rgb:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Normalize hue to [0, 6]\n        h = h / 6\n        \n        # Convert hue to degrees\n        h *= 360\n    \n    # Calculate value\n    v = max_rgb\n    \n    return h, s, v\n\ndef hsv_to_hsl_color(h, s, v):\n    \"\"\"\n    Convert HSV color to HSL color model.\n\n    Parameters:\n    h (int): hue value in range [0, 360]\n    s (int): saturation value in range [0, 1]\n    v (int): value value in range [0, 1]\n\n    Returns:\n    tuple: (h, s, l)\n    \"\"\"\n    # Normalize HSV values to [0, 1]\n    h = h / 360.0\n    s = s / 1.0\n    v = v / 1.0\n    \n    # Calculate lightness\n    if s == 0:\n        l = v\n    else:\n        if v <= 0.5:\n            l = v * (1 + s)\n        else:\n            l = v + s - v * s\n        \n        l = l / 2\n    \n    # Calculate saturation\n    if l == 0 or l == 1:\n        s = 0\n    else:\n        if l <= 0.5:\n            s = (v - l) / (1 - 2 * l)\n        else:\n            s = (v - l) / (2 - 2 * l)\n    \n    # Calculate hue\n    if s == 0:\n        h = 0\n    elif l == v:\n        h = 0\n    elif l == 1:\n        h = 0\n    else:\n        h = 60 * ((h % 6) - (int(h % 6) % 2))\n    \n    return h, s, l"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    # Initialize variables to store the first even and odd numbers in the list\n    even_num = -1\n    odd_num = -1\n\n    # Iterate through the list and check if the current number is even or odd\n    for num in lst:\n        if num % 2 == 0:\n            if even_num == -1:\n                even_num = num\n            else:\n                even_num = even_num * num\n        else:\n            if odd_num == -1:\n                odd_num = num\n            else:\n                odd_num = odd_num * num\n\n    # Return the product of the even and odd numbers\n    return even_num * odd_num\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0:\n        return None\n    else:\n        return odd_count * even_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    even_prod = 1\n    odd_prod = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_prod *= num\n        else:\n            odd_count += 1\n            odd_prod *= num\n            \n    return even_prod * odd_prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    product = 1\n    \n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # Increment count_even\n            count_even += 1\n            # Check if count_even is greater than count_odd\n            if count_even > count_odd:\n                # Reset count_odd\n                count_odd = 0\n            # Multiply product with num\n            product *= num\n        else:\n            # Increment count_odd\n            count_odd += 1\n            # Check if count_odd is greater than count_even\n            if count_odd > count_even:\n                # Reset count_even\n                count_even = 0\n            # Multiply product with num\n            product *= num\n    \n    # Return product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            break\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[-1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    even_sum = 1\n    odd_sum = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum *= num\n            even_count += 1\n        else:\n            odd_sum *= num\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return \"No even or odd numbers found in the list.\"\n    \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    str_list = test_str.split(',')\n\n    # Convert the list of strings to a list of integers\n    int_list = [int(x) for x in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # define empty list to store the integer values\n    int_list = []\n\n    # loop through each character in the input string\n    for char in test_str:\n\n        # check if the character is a number\n        if char.isdigit():\n\n            # convert the character to integer and append to the list\n            int_list.append(int(char))\n\n    # convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    tuple_str = test_str.split(',')\n    int_tuple = tuple(map(int, tuple_str))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer and append to the integer_list\n    integer_list = []\n    for str in str_list:\n        try:\n            integer_list.append(int(str.strip()))\n        except ValueError:\n            print('Error: \"{}\" is not an integer.'.format(str.strip()))\n    \n    # Return the integer_list as a tuple\n    return tuple(integer_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a tuple of strings\n    str_tuple = tuple(test_str.split())\n    \n    # Convert the strings to integers and return the resulting tuple\n    int_tuple = tuple(int(x) for x in str_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by comma and space\n    lst = test_str.split(', ')\n    # initialize an empty list to store integer values\n    lst_int = []\n    # iterate over the list and convert each string to integer\n    for i in lst:\n        lst_int.append(int(i))\n    # return the integer tuple\n    return tuple(lst_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert tuple string to list of integers\n    lst = [int(x) for x in test_str]\n    # Convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to tuple of integers\n    test_tuple = tuple(int(i) for i in test_str.split(','))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for item in test_str:\n        try:\n            int_tuple += (int(item),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function converts tuple string to integer tuple.\n\n    :param test_str: tuple string\n    :type test_str: str\n    :return: integer tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i-1] == x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using bisect to find the correct index where to insert the new value\n    index = bisect.bisect_right(a, x)\n    # Return the index where the new value needs to be inserted\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize the left and right pointers\n    left = 0\n    right = len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # if the value is equal to the midpoint value, return the midpoint index\n        if a[mid] == x:\n            return mid\n\n        # if the value is greater than the midpoint value, search in the right half\n        elif a[mid] < x:\n            left = mid + 1\n\n        # otherwise, search in the left half\n        else:\n            right = mid - 1\n\n    # if no value is found, return the index where the value should be inserted\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    :param a: a list of sorted integers\n    :param x: a value to locate the right insertion point for\n    :return: the index where the value should be inserted to maintain sorted order\n    \"\"\"\n    # create a binary search tree to locate the right insertion point\n    tree = bisect.bisect_right(a, x)\n    # convert the binary search tree index to the index where the value should be inserted\n    insertion_index = tree - 1\n    # return the insertion index\n    return insertion_index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point for x\n    i = bisect.bisect_right(a, x)\n    # If x is already present in the list, return the index of x\n    if i < len(a) and a[i] == x:\n        return i\n    # Otherwise, insert x at the right insertion point and return the index of the new element\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the index where x should be inserted\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        # If x is greater than all elements in the list, append it to the end\n        a.append(x)\n        i = len(a) - 1\n    elif x > a[i]:\n        # If x is greater than the element at index i, insert it to the right of i\n        a.insert(i+1, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right() to find the insertion point\n    i = bisect.bisect_right(a, x)\n    # If the value is greater than all elements in the array, return the length of the array\n    if i == len(a):\n        return i\n    # If the value is less than or equal to all elements in the array, return the index of the value\n    elif a[i-1] <= x:\n        return i-1\n    # If the value is between two elements in the array, return the index of the value\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a.*?b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b.*b.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return len(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\s*\\d+\\s*b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        print(f\"The text '{text}' contains the pattern '{pattern}' at position(s) {matches}.\")\n    else:\n        print(f\"The text '{text}' does not contain the pattern '{pattern}'.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\w{2}b\\w{2}\\b'\n    return re.search(pattern, text)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_match_three(text)\nif result:\n    print(\"The pattern has been found in the given text.\")\nelse:\n    print(\"The pattern has not been found in the given text.\")"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # check if the input is valid\n    if isinstance(test_list, list) and isinstance(test_str, str):\n        # concatenate the list and the string using tuple packing\n        new_tuple = tuple(test_list + test_str)\n        return new_tuple\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string into a new tuple\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the string to a list\n    test_list = list(test_str)\n    \n    # add the list to the new tuple\n    new_tuple = (test_list, test_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    list_tuple = tuple(test_list)\n    # Split the string into words and convert to a list\n    word_list = test_str.split()\n    # Concatenate the two lists and convert to a tuple\n    combined_tuple = tuple(list_tuple + word_list)\n    # Return the combined tuple\n    return combined_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str +'' + str(i) for i in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine both strings and lists into a new list\n    combined_list = test_list + [test_str]\n    # Convert the new list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # iterate through the list\n    for i in range(len(nums)):\n\n        # if the index is even, check if the value at that index is even\n        if i % 2 == 0 and nums[i] % 2!= 0:\n\n            # if the value at the even index is not even, return False\n            return False\n\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n            if even_count == 0:\n                break\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i:i+2]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            if even_count > 0:\n                break\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    count += 1\n                if count == 0:\n                    return False\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n                if even_count == 2:\n                    return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[0]) + remove_nested(test_tup[1:])\n    else:\n        return []"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    if isinstance(test_tup, tuple):\n        for item in test_tup:\n            remove_nested(item)\n    else:\n        print(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create an empty list to store the nested tuples\n    nested_list = []\n    \n    # iterate through each element in the tuple\n    for elem in test_tup:\n        # if the element is a tuple, add it to the nested list\n        if isinstance(elem, tuple):\n            nested_list.append(elem)\n        # if the element is not a tuple, append it to the list\n        else:\n            test_tup.remove(elem)\n    \n    # return the updated tuple with nested tuples removed\n    return tuple(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n        else:\n            new_tup.extend(remove_nested(i))\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes any nested tuples.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(len(test_tup)):\n            if isinstance(test_tup[i], tuple):\n                remove_nested(test_tup[i])\n        return [x for x in test_tup if not isinstance(x, tuple)]\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function takes a tuple as input and removes all nested tuples.\n\n    Args:\n        test_tup (tuple): The tuple to remove nested tuples from.\n\n    Returns:\n        tuple: The tuple with all nested tuples removed.\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    \n    flat_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            flat_tup.extend(remove_nested(elem))\n        else:\n            flat_tup.append(elem)\n    \n    return tuple(flat_tup)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Counts the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i if i >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters, arr which is the sorted array and x which is the element to find the last position of.\n    The function returns the last position of the element x in the array or -1 if the element is not found.\n    '''\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] == x:\n            return j\n        i += 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers of the array\n    left, right = 0, len(arr) - 1\n\n    # If the element is not found\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the element is present at the middle itself\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n\n        # If the element is greater than the mid element\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the element is smaller than the mid element\n        else:\n            right = mid - 1\n\n    # If the element is not found\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # Element not found in the array"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i>=0 and arr[i]!=x:\n        i-=1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x and returns the last index of the element in the array.\n    If the element is not present in the array, it returns -1.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Find the last occurrence of the element\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the element is present at the mid position\n        if arr[mid] == x:\n            # If it is the last occurrence of the element, return the mid position\n            if mid == left or arr[mid - 1]!= x:\n                return mid\n            # If it is not the last occurrence of the element, move the right pointer to the left of the mid position\n            else:\n                right = mid - 1\n        # If the element is greater than mid element, ignore left half of the array\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the element is smaller than mid element, ignore right half of the array\n        else:\n            right = mid - 1\n\n    # If the element is not present in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=len(arr)-1\n    while arr[i]>=x:\n        i-=1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # find the last index of x in arr using binary search\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n            right = mid-1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes in an array and a value to search for. It returns the last\n    position of the value in the array. If the value is not found in the array, it returns -1.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?=[^b]*b$)'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a[^b]*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*?b\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?P<anything>.*)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    return pattern.search(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes in a dictionary as input and returns the sum of all its items.\n    \"\"\"\n    sum = 0\n    for item in dictionary.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum = 0\n    i = 1\n    # iterate over range from 1 to n\n    while i <= n:\n        # if i is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n        # increment i by 1\n        i += 1\n    # return the sum\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    #initialize sum variable \n    sum_of_odds = 0\n\n    #loop through range of odd numbers \n    for i in range(l, r+1, 2): \n        sum_of_odds += i\n\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total = 0\n    while l <= r:\n        if l % 2!= 0:\n            total += l\n        l += 1\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Take input from user\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # Initialize variables to store the sum of odd numbers\n    sum_odd = 0\n\n    # Loop through all odd numbers between l and r\n    for i in range(l, r+1, 2):\n        # Add each odd number to the sum of odd numbers\n        sum_odd += i\n\n    # Return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, representing the lower and upper limits of the range.\n    It returns the sum of all odd natural numbers within the range.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum_odd = 0\n    current = 1\n    \n    # loop through odd numbers from 1 to n\n    while current <= n:\n        # if current number is odd, add it to the sum\n        if current % 2!= 0:\n            sum_odd += current\n        # increment current number by 2\n        current += 2\n    \n    # return the sum of all odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(arr):\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array cannot be empty\")\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the length of binary representation of number\n    length = len(bin(n)[2:])\n    # Calculate the number of left shifts needed to rotate left by d bits\n    shift = d % length\n    # Calculate the number of bits to be rotated\n    rotated_bits = n >> shift\n    # Calculate the number of bits to be shifted\n    shifted_bits = (n << length) & ((1 << length)-1)\n    # Combine the rotated bits with shifted bits\n    rotated_n = rotated_bits | shifted_bits\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of left rotations to perform\n    num_rotations = d // 32\n    # Calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n    # If the number of bits to rotate is greater than 32, we only need to rotate the upper 8 bits\n    if bits_to_rotate > 32:\n        bits_to_rotate = 32\n    # Rotate the bits to the left\n    rotated_bits = (n << bits_to_rotate) | (n >> (32 - bits_to_rotate))\n    # Perform the required number of left rotations\n    for i in range(num_rotations):\n        rotated_bits = (rotated_bits << 1) | (rotated_bits >> 31)\n    # Return the rotated number\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Calculate the number of zeros to prepend to binary string\n    zeros_to_prepend = 32 - d\n    # Prepend zeros to binary string\n    binary_str = '0' * zeros_to_prepend + binary_str\n    # Convert binary string back to integer\n    rotated_num = int(binary_str, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert n to binary representation\n    binary_n = format(n, '032b')\n    \n    # pad the binary representation with 0s to make the length of the rotated binary representation equal to d\n    padded_binary_n = binary_n.zfill(d)\n    \n    # convert the rotated binary representation back to decimal\n    rotated_n = int(padded_binary_n, 2)\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary format\n    binary_n = bin(n)[2:]\n\n    # Get the number of bits in the binary representation of the number\n    num_bits = len(binary_n)\n\n    # Rotate left d bits\n    rotated_binary = binary_n[-d:] + binary_n[:-d]\n\n    # Convert the rotated binary to an integer\n    rotated_int = int(rotated_binary, 2)\n\n    # Check if the rotated integer is negative\n    if rotated_int >= 2**32:\n        rotated_int -= 2**32\n\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    num_bin = bin(n)[2:]\n    # Get the number of bits in the binary representation\n    num_bits = len(num_bin)\n    # Compute the number of bits to rotate left\n    num_rot = d % num_bits\n    # Compute the mask to select the bits to rotate\n    mask = (1 << num_bits) - 1\n    # Compute the new value of the number using left rotation\n    new_val = (((n >> num_rot) & mask) | (n << (num_bits - num_rot))) & 0xffffffff\n    # Convert the new value to an integer and return\n    return int(new_val, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # mask to keep only the least significant d bits\n    mask = (1<<d)-1\n    \n    # mask the upper bits\n    n = n & mask\n    \n    # shift the upper bits to the left by d bits\n    n = n << d\n    \n    # shift the lower bits to the right by 32-d bits\n    n = n >> (32-d)\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary string to integer\n    n = int(n, 2)\n\n    # Calculate the number of bits to rotate\n    rotation = d % 32\n\n    # Perform the left rotation\n    rotated = (n << rotation) | (n >> (32 - rotation))\n\n    # Convert integer back to binary string\n    rotated = bin(rotated)[2:].zfill(32)\n\n    # Return the rotated binary string\n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # remove all whitespace characters (including newline) using regex\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define regular expression pattern for matching whitespaces\n    pattern = re.compile(r'\\s+')\n    # Replace all whitespaces with a single space\n    text = pattern.sub(' ', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # Convert all whitespaces to a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove any leading or trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n\n    for i in range(x + 1):\n        for j in range(y + 1):\n            for k in range(z + 1):\n                if i + j + k == x + y + z:\n                    count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        if x == i:\n            count += 1\n        for j in range(y+1):\n            if y == j:\n                count += 1\n            for k in range(z+1):\n                if z == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        if x == y or x == z or y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z and x == z!= y and y == z!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if array is already sorted or not\n    if n <= 1:\n        return 0\n\n    # check if array is already sorted in ascending order\n    if arr[0] <= arr[1] and arr[n-1] >= arr[n-2]:\n        return 0\n\n    # check if array is already sorted in descending order\n    if arr[0] >= arr[1] and arr[n-1] <= arr[n-2]:\n        return 0\n\n    # check if array is already sorted in reverse order\n    if arr[0] >= arr[n-1] and arr[n-1] <= arr[0]:\n        return 0\n\n    # count the number of rotations required to generate a sorted array\n    rotations = 0\n    left = 0\n    right = n-1\n\n    # if array is already sorted, count no rotations required\n    if arr[left] <= arr[right]:\n        return 0\n\n    # if array is sorted in reverse order, count no rotations required\n    if arr[left] >= arr[right]:\n        return 0\n\n    # find the pivot element\n    pivot = arr[left]\n\n    # loop while the left and right pointers are not crossed\n    while left < right:\n\n        # if the left element is greater than pivot, move it to the right\n        if arr[left] > pivot:\n            left += 1\n\n        # if the right element is smaller than pivot, move it to the left\n        elif arr[right] < pivot:\n            right -= 1\n\n        # if the left and right element are equal, we have found the pivot element\n        elif arr[left] == arr[right]:\n            return rotations\n\n        # otherwise, rotate the array\n        else:\n            # swap the left and right elements\n            temp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = temp\n\n            # increment the rotation count\n            rotations += 1\n\n            # reassign the pivot element to the last element\n            pivot = arr[right]\n\n            # check if the array is sorted in ascending order\n            if arr[0] <= arr[1] and arr[n-1] >= arr[n-2]:\n                return rotations\n\n            # check if the array is sorted in descending order\n            if arr[0] >= arr[1] and arr[n-1] <= arr[n-2]:\n                return rotations\n\n            # check if the array is sorted in reverse order\n            if arr[0] >= arr[n-1] and arr[n-1] <= arr[0]:\n                return rotations\n\n            # move the left pointer to the right\n            left = right + 1\n\n            # move the right pointer to the left\n            right = left - 1\n\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    if n == 1 or arr[n-1] > arr[n-2]:\n        return 0\n    # initialize the count and start from the end of the array\n    count = 0\n    i = n-1\n    # loop until we find a sorted array\n    while i > 0:\n        # check if the current element is greater than the previous element\n        if arr[i] < arr[i-1]:\n            # we found a sorted array, so we increment the count and move the end pointer to the previous element\n            count += 1\n            i -= 1\n        else:\n            # we found an unsorted array, so we decrement the start pointer and move the end pointer to the next element\n            i -= 1\n    # return the count of rotations required to generate the sorted array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the maximum element in the array\n    max_val = max(arr)\n    # Initialize a hashmap to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    # Initialize a variable to store the count of rotations required\n    count = 0\n    # Iterate through all possible rotations of the array\n    for i in range(max_val + 1):\n        # Calculate the frequency of the element in the current rotation\n        freq_i = freq.get(i, 0)\n        # Calculate the number of rotations required to generate the array\n        rotations_required = 0\n        for j in range(n):\n            rotations_required += freq_i\n        # Add the number of rotations to the count\n        count += rotations_required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            break\n\n    if i == n - 1:\n        return 0\n\n    # Now we have two pointers: one at the beginning and the other at the end.\n    # We will start by moving the pointers towards each other until they meet.\n    count = 1\n    left = i\n    right = n - 1\n    while left < right:\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            right -= 1\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    # initialize variables\n    n = len(arr)\n    count = 0\n\n    # check if array is already sorted\n    if is_sorted(arr):\n        return 0\n\n    # find the number of inversions\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += n - i - 1\n\n    # find the minimum number of swaps required\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n\n    # check if the array is now sorted\n    if is_sorted(arr):\n        return 0\n\n    # if the array is not sorted, count the number of rotations\n    count += 1\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    return count\n\n\ndef is_sorted(arr):\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            return False\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Sort the dictionary based on the frequency of elements\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # Initialize a counter variable to keep track of the number of rotations required\n    count = 0\n\n    # Iterate through the sorted frequency list\n    for i in range(n):\n        # Check if the current element is present at the last position\n        if sorted_freq[i][0] == arr[n - 1]:\n            # If it is, then increment the counter variable\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the pivot element\n    pivot = arr[n // 2]\n\n    # Count the number of inversions\n    count = 0\n    for i in range(n):\n        j = 0\n        while j < i:\n            if arr[j] > pivot:\n                count += i - j\n            j += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Initialize count variable\n    count = 0\n    # Loop through the array\n    for i in range(n):\n        # Loop through the remaining elements of the array\n        for j in range(i+1, n):\n            # Check if the current element is greater than the next element\n            if arr[i] > arr[j]:\n                count += 1\n                # Check if the current element is equal to the next element\n                if i < j:\n                    # Swap the current element with the next element\n                    arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Calculate the maximum number of rotations that can be made\n    max_rotations = (n + 1) // 2\n    # Calculate the minimum number of rotations that can be made\n    min_rotations = n // 2\n    \n    # Calculate the number of rotations required to generate a sorted array\n    if n % 2 == 0:\n        max_rotations -= 1\n        \n    if arr == sorted(arr):\n        return 0\n    elif arr[0] < arr[n - 1]:\n        return min_rotations\n    else:\n        return max_rotations"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer n as input and returns True if the number is a perfect square, False otherwise.\n    The function uses the Newton-Raphson method to approximate the square root of a number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # Initialize the starting value for x and y as 1 and n respectively\n    x, y = 1, n\n\n    # Calculate the square of x and y\n    x_square = x * x\n    y_square = y * y\n\n    # Iterate until the difference between x_square and y_square is less than 1e-6\n    while abs(x_square - y_square) > 1e-6:\n        # Update x and y values using the formula for the quadratic formula\n        new_x = (x_square + y_square) / 2\n        new_y = (x_square * x - y_square * y + n) / (2 * x_square)\n\n        # Update the values of x and y\n        x = new_x\n        y = new_y\n\n        # Calculate the square of x and y\n        x_square = new_x * new_x\n        y_square = new_y * new_y\n\n    # Return True if the difference between x_square and y_square is less than 1e-6\n    return abs(x_square - y_square) < 1e-6"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return n == i * i"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Calculate square root of n\n    root = int(n ** 0.5)\n\n    # Check if square root is an integer\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    def sqrt(x):\n        '''\n        Returns the square root of x using Newton's method.\n        '''\n        z = x\n        while z < 0.5 * x:\n            z = 0.5 * z + x / z\n        return z\n\n    # check if n is a perfect square\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n    \n    # Check for even numbers\n    if n % 2 == 0:\n        return False\n    \n    # Initialize variables\n    num = n\n    square = 0\n    \n    # Calculate square of the number\n    while square * square < num:\n        square += 1\n    \n    # If square is greater than square of number, it is not a perfect square\n    if square * square > num:\n        return False\n    \n    # Check if square is a perfect square or not\n    i = 1\n    while i * i <= square:\n        if square % i == 0:\n            return False\n        i += 1\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n\n    # return False if n is less than 1\n    if n < 1:\n        return False\n\n    # check if n is a perfect square\n    # by checking if the difference between its square and n is less than or equal to 1\n    while n > 0:\n        square = n * n\n        if square == n:\n            return True\n        n = square - n\n\n    # if the loop reaches here, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    # if n is less than or equal to 1, it is a perfect square\n    if n <= 1:\n        return True\n    \n    # check if n is a perfect square by iterating from 1 to the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    \n    for i in range(1, sqrt_n):\n        if n % i == 0:\n            return False\n    \n    # if the loop completes without returning False, n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # check for base cases\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    # check for even and odd numbers separately\n    if n % 2 == 0:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n == i**2:\n                return True\n    else:\n        for i in range(5, int(n**0.5)+1, 2):\n            if n == i**2:\n                return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, otherwise False.\n    \"\"\"\n    # If n is less than or equal to 1, it is not a perfect square\n    if n <= 1:\n        return False\n    # Use the Math module to calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n    # Check if the square root of n is an integer\n    if sqrt_n ** 2!= n:\n        return False\n    else:\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return \"Product is even\"\n    else: \n        return \"Product is odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product is even.\")\n    else:\n        print(\"The product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product is even.\")\n    else:\n        print(\"The product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Initialize product variable to 1\n    product = 1\n    \n    # Iterate through each element of the list\n    for num in arr: \n        # Multiply the product by the current element\n        product *= num\n        \n        # If the product becomes odd, the function returns False\n        if product % 2!= 0: \n            return False\n    \n    # If the loop completes without finding any odd numbers, the function returns True\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                current_sum = lists[i][j][k] + lists[i][j][k+1] + lists[i][j][k+2] + lists[i+1][j][k] + lists[i+1][j][k+1] + lists[i+1][j][k+2] + lists[i+2][j][k] + lists[i+2][j][k+1] + lists[i+2][j][k+2]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = [[lists[i][j][k], lists[i][j][k+1], lists[i][j][k+2]],\n                                [lists[i+1][j][k], lists[i+1][j][k+1], lists[i+1][j][k+2]],\n                                [lists[i+2][j][k], lists[i+2][j][k+1], lists[i+2][j][k+2]]]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize variables to keep track of the highest sum and the index of the list that satisfies this condition\n    highest_sum = float('-inf')\n    highest_index = None\n    # Loop through each list in the input list of lists\n    for index, list_ in enumerate(lists):\n        # Calculate the sum of the elements in this list\n        sum_ = sum(list_)\n        # If the sum is higher than the current highest sum, update the variables\n        if sum_ > highest_sum:\n            highest_sum = sum_\n            highest_index = index\n    # If there was a highest sum, return the corresponding list\n    if highest_sum!= float('-inf'):\n        return [list_[i] for i in range(len(list_))]\n    # If no list in the input list of lists has a highest sum, return None\n    else:\n        return None"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the sum of each sublist\n    sublist_sums = [sum(sublist) for sublist in lists]\n\n    # Find the index of the sublist with the highest sum\n    max_sum_index = sublist_sums.index(max(sublist_sums))\n\n    # Return the corresponding sublist\n    return lists[max_sum_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the current maximum sum and the current list with the maximum sum\n    max_sum = float('-inf')\n    current_sum = 0\n    current_list = []\n    \n    # Loop through each sublist in the input list of lists\n    for sublist in lists:\n        # Loop through each element in the current sublist\n        for element in sublist:\n            # Add the current element to the current sum and update the current sum if the sum is higher than the current maximum sum\n            current_sum += element\n            if current_sum > max_sum:\n                max_sum = current_sum\n                current_list = sublist\n    \n    # Return the current list with the maximum sum\n    return current_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i!= j:\n                new_list = lists[i].copy()\n                new_list.pop(j)\n                new_sum = sum(new_list)\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    max_list = new_list.copy()\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables to store the maximum sum and the maximum list\n    max_sum = float('-inf')\n    max_list = []\n\n    # iterate over each list in the input list of lists\n    for lst in lists:\n        # initialize variables to store the current sum and the current list\n        current_sum = 0\n        current_list = []\n\n        # iterate over each element in the list\n        for elem in lst:\n            # add the element to the current sum\n            current_sum += elem\n\n            # add the current element to the current list\n            current_list.append(elem)\n\n        # check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # update the maximum sum and maximum list\n            max_sum = current_sum\n            max_list = current_list\n\n    # return the maximum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = [lists[i]]\n        elif current_sum == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [lst]\n        elif current_sum == max_sum:\n            max_lists.append(lst)\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the sum of elements in the input list\n    max_sum = 0\n    # Initialize a variable to store the maximum sum of elements in a sublist\n    max_sublist_sum = 0\n    # Initialize a variable to store the maximum list in the input list of lists\n    max_list = []\n\n    # Iterate through each sublist in the input list of lists\n    for sublist in lists:\n        # Initialize a variable to store the sum of elements in the current sublist\n        sublist_sum = 0\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Add the current element to the sublist sum\n            sublist_sum += element\n        # Check if the current sublist sum is greater than the maximum sum of elements in any sublist\n        if sublist_sum > max_sublist_sum:\n            # If it is, update the maximum sum of elements in any sublist\n            max_sublist_sum = sublist_sum\n            # Update the maximum list in the input list of lists\n            max_list = sublist\n    \n    # Return the maximum list in the input list of lists\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i\n        else:\n            count = 0\n\n    if count > max_count:\n        max_count = count\n        start = i\n\n    return max_count, start, end"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # loop through the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            current_run += 1\n        else:\n            # check if the current run is longer than the max run\n            if current_run > max_run:\n                max_run = current_run\n            # reset the current run\n            current_run = 0\n    \n    # check if the last run is longer than the max run\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_len = 0\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            if curr_run > run_len:\n                run_len = curr_run\n            curr_run = 0\n    if curr_run > max_run:\n        max_run = curr_run\n    if curr_run > run_len:\n        run_len = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    count = 1\n    start = 0\n    max_count = 0\n    max_start = 0\n\n    # Loop through the string and count the number of uppercase characters\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        # Check if the current run of uppercase characters is longer than the current maximum run\n        if count > max_count:\n            max_count = count\n            max_start = start\n\n        # Move the start index of the current run of uppercase characters to the next position\n        if test_str[i].isupper():\n            start = i\n\n    # Return the maximum run of uppercase characters\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str)-1 or not test_str[i+1].isupper():\n                if count > max_count:\n                    max_count = count\n                    max_start = start\n                count = 0\n            else:\n                count += 1\n            start = i\n    \n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 1\n    current_run = 1\n    uppercase_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n            if char.isupper():\n                uppercase_count += 1\n        else:\n            current_run = 1\n\n    return max_run, uppercase_count\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    n = len(test_str)\n    run_start = -1\n    run_end = -1\n    run_len = 0\n    max_run_len = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            if i == n-1:\n                run_end = i\n                run_len = 1\n            else:\n                if not test_str[i+1].isupper():\n                    run_end = i\n                    run_len += 1\n                    if run_len > max_run_len:\n                        max_run_len = run_len\n                        run_start = i - run_len + 1\n                        run_end = i\n        else:\n            run_start = -1\n            run_end = -1\n            run_len = 0\n    return (max_run_len, test_str[run_start:run_end+1])"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_run = \"\"\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_run = test_str[i:i+max_count]\n        else:\n            count = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables to keep track of the maximum run of uppercase characters\n    max_run = 0\n    current_run = 0\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run counter\n        if char.isupper():\n            current_run += 1\n            # If the current run is greater than the maximum run so far, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # If the character is not uppercase, reset the current run counter\n        else:\n            current_run = 0\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, the function will return None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:  # check if the number is odd\n            return num  # return the first odd number found\n    return None  # if no odd number is found, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a Python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list. If there are no odd numbers in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a test tuple and a value of k as input and returns a boolean value indicating whether the test tuple contains the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 0:\n        return False\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Loop through both tuples and compare elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return None\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return True\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element in the second tuple is smaller than the corresponding element in the first tuple\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The element in the second tuple is not smaller than the corresponding element in the first tuple.\")\n            return None\n\n    # If we reach this point, all elements in the second tuple are smaller than their corresponding elements in the first tuple\n    print(\"All elements in the second tuple are smaller than their corresponding elements in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples do not have the same length.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Element in first tuple is greater than element in second tuple.\")\n            return False\n            \n    print(\"All elements in both tuples are smaller or equal to their corresponding elements in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    }
]