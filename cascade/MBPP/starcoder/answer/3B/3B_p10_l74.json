[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Find the intersection of the two lists\n    intersection = set(test_tup1) & set(test_tup2)\n\n    # Convert the intersection list to a set to remove duplicates\n    unique_intersection = set(intersection)\n\n    # Convert the first list to a set to remove duplicates\n    first_set = set(test_tup1)\n\n    # Convert the second list to a set to remove duplicates\n    second_set = set(test_tup2)\n\n    # Find the unique elements that are in both lists\n    shared_elements = first_set & second_set\n\n    # Return the shared elements as a list\n    return list(unique_intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_tup1 + test_tup2\n    # Create a set of the combined list\n    combined_set = set(combined_list)\n    # Find the intersection of the sets of common elements\n    shared_elements = combined_set.intersection(set(test_tup1))\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of the shared elements.\n    \"\"\"\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1 and test_tup1[i] not in shared_elements and test_tup2[i] not in shared_elements:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create a set from each list and find the intersection of the two sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n\n    # Return the shared elements as a list\n    return list(shared_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sieve_of_eratosthenes(n):\n    '''\n    This function takes an integer n as input and returns a list of all prime numbers up to n.\n    '''\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    \n    prime_list = []\n    for i in range(2, n + 1):\n        if primes[i]:\n            prime_list.append(i)\n    \n    return prime_list\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether n is a prime number or not.\n    '''\n    prime_list = sieve_of_eratosthenes(int(math.sqrt(n)))\n    for prime in prime_list:\n        if prime > n:\n            break\n        if n % prime == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is 2 or 3\n    elif n == 2 or n == 3:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    elif n % 2 == 0:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return True\n            i += 2\n        return False\n    elif n % 3 == 0:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return True\n            i += 6\n        return False\n    # Check if the number is divisible by the sum of its smallest prime factors\n    else:\n        factors = []\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if i!= n // i:\n                    factors.append(n // i)\n        return sum(factors) % n == 0"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number from 2 to n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer `n` as input and returns True if it is\n    a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number, otherwise False.\n    A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.\n    \"\"\"\n\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    \n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        hq.heappush(min_heap, nums[i])\n\n    # Iterate over the remaining numbers and add them to the heap\n    for i in range(n, len(nums)):\n        if hq.heappushpop(min_heap, nums[i])!= nums[i]:\n            print(\"Error: Duplicate integer found in the input list\")\n            return None\n\n    # Return the heap in descending order\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a max heap of size n and fill it with the numbers from nums\n    max_heap = [-x for x in nums[:n]]\n    hq.heapify(max_heap)\n    \n    # remove and return the n largest numbers from the heap\n    for _ in range(n):\n        largest = hq.heappop(max_heap)\n        yield largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the given list of numbers to a heap\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n\n    # Get the n largest numbers and return them in descending order\n    result = []\n    for _ in range(n):\n        result.append(-heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            hq.heappushpop(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    heap = hq.nlargest(n, nums)\n    # Return the heap as a list\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # initialize an empty heap\n    heap = []\n    # loop through the list of numbers and add them to the heap\n    for num in nums:\n        hq.heappush(heap, -num)\n        # remove the smallest number if the heap size exceeds n\n        if len(heap) > n:\n            hq.heappop(heap)\n    # extract the largest n numbers from the heap and return them in descending order\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Given a list of numbers, returns the n largest integers in descending order.\n    \"\"\"\n    # Convert the list to a min heap\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, -num)\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n    \n    # Convert the heap back to a list and return it\n    return [-num for num in min_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of n largest numbers\n    min_heap = []\n    for i in range(n):\n        hq.heappush(min_heap, nums[i])\n\n    # pop the smallest numbers from the heap and add them to a new list\n    largest_nums = []\n    while len(min_heap) > 0:\n        largest_nums.append(min_heap[0])\n        hq.heappop(min_heap)\n\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a max heap\n    nums_heap = hq.nlargest(n, nums)\n    # Extract the n largest numbers and convert back to a list\n    result = list(nums_heap)\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        x &= x - 1\n    return x == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is 0 or 1\n    if x == 0 or x == 1:\n        return True\n    else:\n        # Find the position of the first bit that is not equal to 0\n        i = 0\n        while x & 1 == 0:\n            x >>= 1\n            i += 1\n        # Check if the remaining bits are all 0\n        return (x == 0) and (x & (x-1) == 0) and (i < 32)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x & (x-1)!= 0: # checking if there is any one bit position where x is different from 2 raised to that power\n        x &= x - 1\n    return x == 1 # checking if x is still 1 after all the bit positions are checked"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the number is a power of 2, False otherwise.\n    A power of 2 is a positive integer that has no digit repeating. In other words, 2, 4, 8, 16, 32, etc.\n    '''\n    if x == 0:\n        return False\n    else:\n        while x > 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                return False\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        x >>= 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power_of_two = 1\n    \n    # Check if x is a power of 2\n    while power_of_two < x:\n        power_of_two <<= 1\n        \n    if power_of_two == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether a given number is a power of two or not.\n    \"\"\"\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x and returns True if it is a power of 2, else False.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    \n    # Check if the number is a power of 2\n    if x & (x - 1) == 0: \n        # Check if the two numbers differ at one bit position only\n        if x!= 2**x: \n            return True\n        else: \n            return False\n    else: \n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regular expression pattern to match words with at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all matches in the text using the pattern\n    matches = re.findall(pattern, text)\n    \n    # Return the matches found\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the given text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words which are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    # Return a list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words\n    words = text.split()\n\n    # initialize empty list to store matching words\n    matches = []\n\n    # loop over each word in the list\n    for word in words:\n        # check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # if it is, add it to the matches list\n            matches.append(word)\n\n    # return the matches list\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into a list of words\n    words = text.split()\n    \n    # Define a regular expression to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all matches of the regular expression in the list of words\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words which are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # find the length of the string\n    n = len(str)\n\n    # initialize a variable to keep track of the minimum number of rotations required\n    min_rotations = float('inf')\n\n    # loop through all possible rotations of the string\n    for i in range(1, n+1):\n        # check if the rotation is a palindrome\n        if str == str[::-1][:i]:\n            min_rotations = min(min_rotations, n-i+1)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    while n > 1:\n        n //= 2\n        rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # sort the characters based on their frequency in descending order\n    sorted_chars = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    # create a list of tuples of the rotated characters\n    rotated_chars = []\n    for i in range(n):\n        rotated_chars.append((sorted_chars[i][0], i))\n    # find the minimum number of rotations required\n    min_rotations = n\n    for i in range(n):\n        # find the number of rotations required to get the i-th character rotated\n        num_rotations = (n - i) // 2\n        # check if the string obtained after rotating i-th character becomes equal to the original string\n        new_str = \"\"\n        for j in range(n):\n            new_str += sorted_chars[j][0]\n            if j < i:\n                new_str += sorted_chars[j][0] * num_rotations\n            elif j == i:\n                new_str += sorted_chars[i][0]\n            else:\n                new_str += sorted_chars[j][0] * (n - j)\n        if new_str == str:\n            min_rotations = min(min_rotations, num_rotations)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # find the length of the string\n    length = len(str)\n    # initialize the number of rotations required to get the same string\n    count = 0\n    # loop through the string and check if the character is at its original index\n    for i in range(length):\n        if str[i] == str[(i+length) % length]:\n            # if yes, increment the count of rotations required\n            count += 1\n    \n    # return the count of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n < 2:\n        return 0\n    \n    min_rotations = float('inf')\n    for i in range(n):\n        # Rotate the string by i positions to the left\n        rotated_str = str[i:] + str[:i]\n        # Check if the rotated string is equal to the original string\n        if rotated_str == str:\n            # If it is, then we found a solution with at least i rotations\n            min_rotations = min(min_rotations, i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            count += 1\n    return count + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize the dictionary to store the count of characters\n    char_count = {}\n    # Count the frequency of characters in the string\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize the count of rotations\n    count = 0\n    # Traverse through all possible rotations\n    while True:\n        # Count the frequency of characters in the rotated string\n        rotated_str = str[n-1:] + str[:n-1]\n        char_count_rotated = {}\n        for char in rotated_str:\n            if char in char_count_rotated:\n                char_count_rotated[char] += 1\n            else:\n                char_count_rotated[char] = 1\n        # Check if the frequency of characters in the rotated string is same as that in the original string\n        if char_count_rotated == char_count:\n            count += 1\n        else:\n            # If not, exit the loop\n            break\n    \n    # Return the minimum number of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Initialize variables to store the required rotations and the current length of the string\n    rotations = 0\n    length = len(str)\n\n    # While the string length is greater than 1\n    while length > 1:\n        # Calculate the new length of the string after rotating by 1\n        length -= 1\n\n        # Increment the required rotations by 1\n        rotations += 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        if str[i]!= str[(i+1)%n]:\n            rotations += 1\n            break\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n <= 1:\n        return 0\n    \n    # create a dictionary to count the frequency of characters in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # create a list of tuples (character, frequency) sorted by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    # initialize a list to store the rotations\n    rotations = []\n    \n    # iterate over the sorted frequency list\n    for char, freq in sorted_freq:\n        # if the frequency of the character in the string is 1, it means we have a rotation\n        if freq == 1:\n            # if the character is already in the list, we don't need another rotation\n            if char in str:\n                return len(rotations)\n            \n            # add the character to the list of rotations and update the frequency of the character in the string\n            rotations.append(char)\n            freq -= 1\n            if freq == 0:\n                del freq[char]\n    \n    # if we reach this point, it means we have found all possible rotations\n    return len(rotations)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and removes the first and last occurrence of the given character from the string.\n    '''\n\n    # remove the first occurrence of the character\n    if s.startswith(ch):\n        s = s.replace(ch, '', 1)\n\n    # remove the last occurrence of the character\n    if s.endswith(ch):\n        s = s[:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrences of a given character from the string.\n\n    Parameters:\n    s (str): the input string\n    ch (str): the character to remove\n\n    Returns:\n    (str): the modified string without the first and last occurrences of the given character.\n\n    \"\"\"\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # create a list of characters in the string\n    char_list = list(s)\n    # remove the first occurrence of the character\n    if char_list[0] == ch:\n        char_list.remove(ch)\n    # remove the last occurrence of the character\n    if char_list[-1] == ch:\n        char_list.remove(ch)\n    # join the list of characters back into a string\n    new_s = ''.join(char_list)\n    # return the new string\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function removes first and last occurrence of a given character from the string s.\n    '''\n    # initializing two pointers to the start and end of the string\n    i = 0\n    j = len(s)-1\n\n    # traversing the string while checking for the first and last occurrence of the character\n    while(s[i]!= ch):\n        i+=1\n    while(s[j]!= ch):\n        j-=1\n\n    # if the character is present in the string, then removing it from the string\n    if(i <= j):\n        s = s[:i] + s[j+1:]\n        return s\n    else:\n        return \"Character not found in the string\""
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        s = s[1:]\n    elif s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    else:\n        return s\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes in a string and a character as input and returns the string with the first and last occurrence of the given character removed.\n    '''\n    # Split the string into a list of characters\n    char_list = list(s)\n\n    # Find the index of the first occurrence of the character\n    first_index = char_list.index(ch)\n\n    # Find the index of the last occurrence of the character\n    last_index = char_list.rindex(ch)\n\n    # Remove the first occurrence\n    del char_list[first_index]\n\n    # Remove the last occurrence\n    del char_list[-1]\n\n    # Join the list of characters back into a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    # split the string into a list of characters\n    s_list = list(s)\n\n    # remove the first occurrence of the character from the list\n    if s_list[0] == ch:\n        del s_list[0]\n\n    # remove the last occurrence of the character from the list\n    if s_list[-1] == ch:\n        del s_list[-1]\n\n    # join the list of characters back into a string and return it\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find first and last occurrence of ch in s\n    index = s.find(ch)\n    if index!= -1:\n        # Remove first occurrence of ch\n        s = s[:index] + s[index+1:]\n        # Remove last occurrence of ch\n        s = s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into two parts based on the character\n        parts = s.split(ch)\n        # Remove the last element of the first part and the first element of the second part\n        return parts[0][:-1] + parts[1][1:]\n    else:\n        # Return the original string if the character is not present\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows based on their sums\n    M = [row for row in M if sum(row) == min(row_sums)]\n    # Sort the remaining columns in ascending order\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize the empty matrix of sums\n    sums = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n    \n    # Calculate the sum of each row in the given matrix\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sums[i][j] = sum(M[i])\n    \n    # Create a new matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n    \n    # Sort the rows of the given matrix in ascending order of their sums\n    for i in range(len(M)):\n        sorted_M[i] = sorted(M[i], key=lambda x: sums[i][x])\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n\n    # Create a new matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(num_cols)] for i in range(num_rows)]\n\n    # Loop through each row of the matrix and find the sum of its elements\n    for i in range(num_rows):\n        row_sum = 0\n        for j in range(num_cols):\n            row_sum += M[i][j]\n        sorted_M[i] = [M[i][j] for j in range(num_cols)]\n        sorted_M[i] = sorted(sorted_M[i], reverse=True)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # transpose the matrix\n    M = [[M[j][i] for j in range(n)] for i in range(n)]\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows based on the sum of each row\n    sorted_rows = sorted(M, key=lambda x: x[0])\n    # re-transpose the matrix\n    sorted_matrix = [[sorted_rows[i][j] for i in range(n)] for j in range(n)]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows by the sum in ascending order\n    M = sorted(M, key=lambda x: sum(x))\n\n    # Find the cumulative sums of the sorted rows\n    row_sums.sort()\n    row_sums.insert(0, 0)\n    cum_sums = [row_sums[0]]\n    for i in range(1, len(M)):\n        cum_sums.append(cum_sums[-1] + row_sums[i])\n\n    # Apply the cumulative sums to the original matrix\n    sorted_M = []\n    for row in M:\n        sorted_row = [0] * len(row)\n        for i in range(len(row)):\n            sorted_row[i] = cum_sums[i] - row_sums[i]\n        sorted_M.append(sorted_row)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-i-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M)-1):\n                if M[k][j] > M[k+1][j]:\n                    M[k], M[k+1] = M[k+1], M[k]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the maximum sum of any row so far\n        max_sum = float('-inf')\n        for j in range(n):\n            if j == i:\n                continue\n            row_sum = sum(M[j])\n            if row_sum > max_sum:\n                max_sum = row_sum\n\n        # Subtract the maximum sum from each row\n        for j in range(n):\n            if j == i:\n                continue\n            M[j] = [x - max_sum if x > max_sum else x for x in M[j]]\n\n    # Sort the matrix in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[j][i]:\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list to store the sum of each row of the matrix\n    row_sums = []\n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        # Append the sum to the row_sums list\n        row_sums.append(row_sum)\n    # Sort the row_sums list in ascending order\n    row_sums.sort()\n    # Loop through each row of the matrix and sort each row based on the row_sums list\n    for row in M:\n        # Sort the row in ascending order based on the row_sums list\n        sorted_row = sorted(row, key=lambda x: row_sums.index(x))\n        # Update the row with the sorted row\n        row[:] = sorted_row"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = l*b*h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5 * l * b * h  # Formula for calculating the volume of a triangular prism\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # calculate volume using formula for triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)(\\w)(?=\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Convert the text to lowercase\n    text = text.lower()\n    \n    # Split the text into words\n    words = re.findall(r'\\b[a-z]+\\b', text)\n    \n    # Check if the words are joined with underscores\n    if all(w[0] == '_' for w in words):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"^[a-z_]*[a-z]+[a-z_]*$\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!_)([a-z]+(?=_))'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z]+_+\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]{1}[a-z]*_[a-z]*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n\n    # Use the pattern to search for matches in the input string\n    matches = re.findall(pattern, text)\n\n    # If any matches are found, return True\n    if matches:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+(_[a-z]+)*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z]|(?<=\\w)_|[A-Z](?=[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Converting string to list\n    string_list = list(string)\n    # Loop through each character of the second string\n    for char in string_list:\n        # Checking if the character is present in the first string\n        if char in string:\n            # Removing the character from the first string\n            string_list.remove(char)\n    # Converting the list back to string\n    result = ''.join(string_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    list_to_remove = list(string)\n    for char in string:\n        if char in list_to_remove:\n            list_of_chars.remove(char)\n            list_to_remove.remove(char)\n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the input string to a list\n    input_list = list(string)\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Loop through each character in the input string\n    for char in input_list:\n        # If the character is not present in the second string, append it to the result list\n        if char not in string:\n            result_list.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    count = 0\n    for i in range(NO_OF_CHARS):\n        if string_list.count(chr(i)) == 0:\n            string_list.remove(chr(i))\n            count += 1\n    print(\"Number of removed characters: \", count)\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove all characters from the first string which are present in the second string\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert the second string to a set to remove duplicates\n    char_set = set(string)\n    # initialize an empty list to store the result\n    result = []\n    # iterate over each character in the first string\n    for char in string:\n        # if the character is not in the set of characters to remove, add it to the result list\n        if char not in char_set:\n            result.append(char)\n    # join the result list into a single string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of characters to remove\n    remove_chars = set(string)\n    # Convert the string to a list\n    str_list = list(string)\n    # Iterate through the list and remove the characters from the list\n    for char in remove_chars:\n        str_list.remove(char)\n    # Convert the list back to a string\n    result = ''.join(str_list)\n    # Return the result\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list of integers\n    string_list = [ord(char) for char in string]\n\n    # Find all the common characters in the two strings\n    common_chars = [chr(i) for i in range(NO_OF_CHARS) if i in string_list]\n\n    # Remove the common characters from the first string\n    result_list = [char for char in string_list if char not in common_chars]\n\n    # Convert the result list back to a string\n    result = ''.join([chr(char) for char in result_list])\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string and removes the characters present in the second string.\n    '''\n    no_of_chars = 256\n    list_of_chars = [chr(i) for i in range(no_of_chars)]\n    for i in range(no_of_chars):\n        if string.count(list_of_chars[i]) > 0:\n            list_of_chars.remove(list_of_chars[i])\n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n\n    # Create a list of characters to be removed from the first string\n    char_list = [chr(i) for i in range(NO_OF_CHARS) if chr(i) not in string]\n\n    # Remove the characters from the first string which are present in the second string\n    for i in range(len(string)):\n        if string[i] in char_list:\n            string = string[:i] + string[i+1:]\n\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    # loop through the array and add each number to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the number of occurrences of each element\n    count = {}\n\n    # Iterate through the array and update the count dictionary with the number of occurrences of each element\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Iterate through the count dictionary and check if there are any duplicate elements\n    for num in count:\n        if count[num] > 1:\n            return True\n\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers and returns True if there is at least one duplicate element,\n    False otherwise.\n    \"\"\"\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # iterate through the dictionary and return True if there is at least one duplicate element, False otherwise\n    for key, value in freq_dict.items():\n        if value > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if the length of the set is less than the length of the original array\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through the array and add unique elements to the set\n    for num in arraynums:\n        if num not in unique_set:\n            unique_set.add(num)\n        else:\n            # If the element is already in the set, return True\n            return True\n\n    # If all elements are unique, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_elements.add(num)\n\n    # Check if the set has any elements in it\n    if len(unique_elements) == len(arraynums):\n        print(\"The array doesn't contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    for num in arraynums:\n        # Check if the element is already present in the set\n        if num in unique_set:\n            # If the element is present, return True\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    elif 2 <= x <= 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x % 10 == 0 or x % 10 == 5 or x % 10 == 7 or x % 10 == 8:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 10:\n        return \"not a woodball\"\n    elif x > 10 and x < 100:\n        return \"a woodball\"\n    else:\n        return \"a woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a list of possible prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Iterate through the list of prime numbers\n    for prime in primes:\n        # If the given number is divisible by the prime number, return False\n        if x % prime == 0:\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 0 and x % 7 == 0 and x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5 or x == 10:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return x % 3 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return \"The given number is 0.\"\n    elif x == 1:\n        return \"The given number is 1.\"\n    elif x % 2 == 0:\n        return \"The given number is even.\"\n    elif x % 2 == 1 and x % 3 == 0:\n        return \"The given number is a multiple of 3.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 42 or x == 43: \n        return True\n    else: \n        return False\n\nprint(is_woodall(42)) # Output: True\nprint(is_woodall(43)) # Output: True\nprint(is_woodall(44)) # Output: False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < 2 * int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == 2 * int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = (rev_num * 10) + rem\n        num = num // 10\n    return (rev_num == 2 * num)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the original number is one less than twice its reverse\n    return num + 1 == reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # Check if the reversed number is one less than twice the original number\n    if rev_num < num + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_int = int(reversed_str)\n    \n    # Compare the original number with the reversed number\n    if num == reversed_int - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == num//2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    return num - rev_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        max_num = max_num * 10 + i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))  # Converting the array of digits from string to integers\n    n = len(arr)  # Number of digits in the array\n    max_sum = float('-inf')  # Maximum sum possible\n\n    for i in range(2**n):\n        # Converting the binary string to an integer\n        num = int(''.join(str(bit) for bit in bin(i)[2:]), 2)\n        # Checking if the current number is a valid number\n        if num >= 10**(n-1) and num <= 10**n-1:\n            # Summing the digits of the current number\n            current_sum = sum(int(digit) for digit in str(num))\n            # Updating the maximum sum if the current number is greater than the previous maximum sum\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            break\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    def power(x, n):\n        if n == 0:\n            return 1\n        elif n % 2 == 0:\n            return power(x, n//2) * power(x, n//2)\n        else:\n            return x * power(x, n//2) * power(x, n//2)\n\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n\n    return power(max_num, len(arr)-1)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize the maximum number to the first number in the list\n    max_num = arr[0]\n    # Iterate over the list of digits and compare each number to the current maximum number\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # To sort the digits in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the largest number\n    max_num = 0\n\n    # Traverse through the sorted digits\n    for digit in arr:\n\n        # Multiply the current digit with the value of max_num to form the current number\n        curr_num = max_num * digit\n\n        # Update the value of max_num if the formed number is greater than max_num\n        if curr_num > max_num:\n            max_num = curr_num\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))\n    max_num = 0\n    for i in range(10):\n        if arr.count(i) == len(arr):\n            temp_num = i * arr.count(i)\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        elif i > 0:\n            max_num = max(max_num, arr[i]*(10**(i-1)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = 0\n            for k in range(j):\n                num += arr[k] * 10**(k)\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0: \n        return False \n    elif x < 0 and y < 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and returns True if they have opposite signs\n    (i.e., x and y have opposite signs), and False otherwise.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return \"Both numbers have the same sign.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have the same sign.\"\n    else:\n        return \"Both numbers have opposite signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integer values as input and returns True if the sign of the two values is opposite, else False.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return False\n    elif x < 0 and y > 0 or x > 0 and y < 0:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0 and y == 0:\n        return \"Both numbers are zero\"\n\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs\"\n\n    if x < 0 and y > 0:\n        return \"First number has opposite sign and second number has positive sign\"\n\n    if x > 0 and y < 0:\n        return \"First number has positive sign and second number has opposite sign\"\n\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    '''\n    return x * y >= 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integer inputs x and y and checks whether they have opposite signs or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"Both inputs have positive signs.\")\n    elif x < 0 and y < 0:\n        print(\"Both inputs have negative signs.\")\n    elif x == 0 and y == 0:\n        print(\"Both inputs are zero.\")\n    else:\n        print(\"One of the inputs is negative and the other is positive.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    if x > 0 and y < 0 or x < 0 and y > 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_right_angled_triangle(n):\n        \"\"\"\n        Helper function to check if a number is a right angled triangle.\n        \"\"\"\n        a = 8 * n * n + 16 * n - 8\n        b = -4 * n * n + 24 * n - 4\n        c = 8 * n * n - 16 * n + 8\n        return a ** 2 + b ** 2 == c ** 2\n    \n    if is_right_angled_triangle(n):\n        octagonal_num = (8 * n * n + 16 * n - 8) ** 0.5\n        return octagonal_num\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return int(n * (8 * n - 1) ** 0.5)\n\nn = int(input(\"Enter the value of n: \"))\n\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return n*8 + (n-1)*2 - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def octagon(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        else:\n            return 5 * (n - 1) + 1\n\n    return octagon(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    return ((2*n-1)*(2*n-3))**0.5 == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2 * (n + 1)\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    def is_right_angled(a, b, c):\n        return a**2 + b**2 == c**2\n    \n    a, b, c = 1, 1, 2*n\n    while is_right_angled(a, b, c):\n        a, b, c = 1, 1, 2*n\n    \n    return c\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return \"n must be greater than or equal to 1\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 37\n    elif n == 4:\n        return 91\n    elif n == 5:\n        return 238\n    elif n == 6:\n        return 588\n    elif n == 7:\n        return 1242\n    elif n == 8:\n        return 2536\n    elif n == 9:\n        return 4356\n    elif n == 10:\n        return 7645\n    else:\n        return \"n must be between 1 and 10\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def octagonal_helper(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 2 * n + 1\n\n    return octagonal_helper(n)\n\ndef nth_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return is_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Helper function to find the square of a number\n    def square(num):\n        return num * num\n    \n    # Check if the input is valid\n    if n <= 0:\n        return False\n    \n    # Calculate the nth octagonal number\n    oct_n = (n * (3 * n**2 + 1)) // 2\n    \n    return oct_n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the frequency of digits for each substring\n    digit_freq = defaultdict(int)\n\n    # count the frequency of digits for each substring in the input string\n    for i in range(len(s)):\n        digit_freq[s[i]] += 1\n\n    # initialize a count variable to store the number of substrings with the desired sum\n    count = 0\n\n    # loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # calculate the sum of digits for the current substring\n            sum_digits = sum(int(d) for d in s[i:j+1])\n\n            # if the sum of digits is equal to the length of the substring, increment the count variable\n            if sum_digits == len(s[i:j+1]):\n                count += 1\n\n    # return the final count variable\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function counts the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n\n    # Iterate through the string and update the frequency of each digit\n    for c in s:\n        freq[ord(c) - ord('0')] += 1\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(freq[ord(c) - ord('0')] for c in s[i:j]) == len(s[i:j]):\n                # Increment the count\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with a given length\n    substring_count = defaultdict(int)\n\n    # Iterate through the string and calculate the sum of digits for each substring\n    for i in range(len(s)):\n        substring = s[i:]\n        substring_sum = sum(int(d) for d in substring)\n        substring_count[substring_sum] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    num_of_digits = 0\n    digit_count = defaultdict(int)\n\n    for char in s:\n        if char.isdigit():\n            num_of_digits += 1\n            digit_count[num_of_digits] += 1\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_sum = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        digit_sum[sum(int(digit) for digit in s[i:])] += 1\n        count += digit_sum[len(s[i:])]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the counts of substrings\n    counts = defaultdict(int)\n    # loop through each substring of s\n    for i in range(len(s)):\n        # loop through each digit in the substring\n        for j in range(i, len(s)):\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if substring_sum == len(s[i:j+1]):\n                counts[i] += 1\n    # return the count of all substrings with sum of digits equal to their length\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # loop through the string and calculate the sum of digits for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # calculate the sum of digits for the substring\n            digit_sum = sum(int(digit) for digit in s[i:j+1])\n            # store the count of substrings with the sum of digits equal to the length of the substring\n            count[len(s[i:j+1])] += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                # Increment the count of the substring in the dictionary\n                count[s[i:j]] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            digits = sum(int(digit) for digit in s[i:j])\n            if digits == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digits_sum = sum(int(digit) for digit in s[i:j+1])\n            count[digits_sum] += 1\n    return count[len(s)]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Find the maximum difference between available pairs in the given list\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = test_list[i][1] - test_list[i+1][0]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][0], test_list[j][0])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the given list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through the list and calculate the difference between each pair of adjacent elements\n    for i in range(len(test_list)-1):\n        curr_diff = test_list[i+1] - test_list[i]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n    # initialize variables to store the maximum and minimum values\n    max_diff = 0\n    min_val = sorted_list[0][1]\n\n    # iterate through the sorted tuple list\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][1] - min_val > max_diff:\n            max_diff = sorted_list[i][1] - min_val\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize max_diff as the first element of the list\n    max_diff = test_list[0][1] - test_list[0][0]\n\n    # Loop through the list and compare each pair of elements with the current max_diff\n    for i in range(len(test_list) - 1):\n        if test_list[i][1] - test_list[i][0] > max_diff:\n            max_diff = test_list[i][1] - test_list[i][0]\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value (i.e., second element) of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if the input list is empty\n    if not data_list:\n        # If the list is empty, return 0\n        return 0\n    # Check if the input list has only one element\n    elif len(data_list) == 1:\n        # If the list has only one element, return the element\n        return data_list[0]\n    # If the input list has more than one element, recursively call the function on the sub-lists\n    else:\n        # Call the recursive function on the first sub-list\n        first_sum = recursive_list_sum(data_list[:len(data_list)//2])\n        # Call the recursive function on the second sub-list\n        second_sum = recursive_list_sum(data_list[len(data_list)//2:])\n        # Return the sum of the first and second sub-sums\n        return first_sum + second_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case: if the list is empty\n        return 0\n    elif isinstance(data_list[0], list): # recursive case: if the first element is a list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else: # regular case: if the first element is a regular element\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list, result_list=None):\n        if result_list is None:\n            result_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flatten(item, result_list)\n            else:\n                result_list.append(item)\n        return result_list\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: empty list or single element list\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n\n    # Recursive case: flatten the list and add its elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Recursively flatten a list.\n        '''\n        if not isinstance(data_list, list):\n            return [data_list]\n        else:\n            return flatten(data_list[0]) + flatten(data_list[1:])\n    \n    flat_list = flatten(data_list)\n    sum_list = [x for x in flat_list if isinstance(x, int)]\n    return sum(sum_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if index == len(data_list):\n        return total\n    else:\n        total += data_list[index]\n        return recursive_list_sum(data_list, index + 1, total)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        if not lst:\n            return []\n        elif isinstance(lst[0], list):\n            return flatten(lst[0]) + flatten(lst[1:])\n        else:\n            return [lst[0]] + flatten(lst[1:])\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Helper function to sum a list of lists\n    def flatten_and_sum(sub_list):\n        # Base case: if the sub_list is empty, return 0\n        if not sub_list:\n            return 0\n        # Recursive case: add the elements of the sub_list and the sum of the sub_list inside it\n        else:\n            return sum(sub_list) + flatten_and_sum(sub_list[1:])\n\n    # Flatten the list\n    flattened_list = [x for sub_list in data_list for x in sub_list]\n\n    # Sum the flattened list\n    return flatten_and_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(1, n+1):\n            count += bell_number(i-1) + bell_number(n-i)\n        return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set to 1\n    ways = 1\n    \n    # Loop over all possible values of n\n    for i in range(1, n+1):\n        # Check if the value of n is divisible by i\n        if n % i == 0:\n            # If it is, multiply the number of ways to partition the set by the number of ways to partition n divided by i\n            ways *= (n//i)**i\n    \n    # Return the number of ways to partition the set\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    # Loop through each number between 1 and n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers using the Bell number formula\n        ways *= 2*i\n    # Return the final value of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    def helper(count, n, memo):\n        if count == n:\n            return 1\n        if count > n:\n            return 0\n        if count == 0:\n            return 1\n        if (count, n) in memo:\n            return memo[(count, n)]\n        memo[(count, n)] = helper(count + 1, n, memo) + helper(count, n - 1, memo)\n        return memo[(count, n)]\n\n    return helper(0, n, {})"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if i % j == 0:\n                bell_numbers.append(i)\n                break\n        else:\n            bell_numbers.append(i)\n    return len(bell_numbers)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n\n    # Define the first bell number\n    bell1 = 1\n\n    # Define the first three bell numbers\n    bell2 = 2\n    bell3 = 1\n\n    # Define the remaining bell numbers\n    for i in range(11, n + 1):\n        bell2 = bell1 + bell2\n        bell3 = bell1 + bell3\n        bell1 = bell2 + bell3\n\n    # Calculate the number of ways to partition the set of bell numbers\n    partition_count = (bell1 + bell2 + bell3) ** n\n\n    return partition_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters\n    ----------\n    n : int\n        The maximum value of the Bell numbers we want to consider.\n\n    Returns\n    -------\n    int\n        The number of ways to partition a set of Bell numbers with maximum value n.\n    \"\"\"\n\n    # Base case: if n is 0, there is only one way to partition the set of Bell numbers\n    if n == 0:\n        return 1\n\n    # Initialize the array to store the number of ways to partition the set of Bell numbers with maximum value n\n    # (i.e., all Bell numbers less than or equal to n)\n    ways_to_partition = [0] * (n + 1)\n\n    # Initialize the first Bell number to 1 (since there is only one way to partition the set of Bell numbers with\n    # value 0)\n    ways_to_partition[0] = 1\n\n    # Iterate over the remaining Bell numbers up to n\n    for i in range(1, n + 1):\n        # If the current Bell number is even, we can partition it into two equal halves\n        if i % 2 == 0:\n            # If the current Bell number is odd, we need to consider all the previous Bell numbers up to\n            # half the current Bell number - 1\n            ways_to_partition[i] = ways_to_partition[i // 2] * ways_to_partition[i // 2 - 1]\n        # If the current Bell number is odd, we can partition it into two odd numbers\n        else:\n            # If the current Bell number is odd and greater than 1, we need to consider all the previous Bell\n            # numbers up to half the current Bell number - 1\n            ways_to_partition[i] = ways_to_partition[i // 2] * ways_to_partition[i // 2 - 1] * (i // 2)\n\n    # Return the number of ways to partition the set of Bell numbers with maximum value n\n    return ways_to_partition[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\ndef partition_bell_numbers(n):\n    '''\n    Given a number n, find the number of ways to partition a set of Bell numbers from 0 to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n)\n\ndef partition_bell_numbers_by_repetitions(n):\n    '''\n    Given a number n, find the number of ways to partition a set of Bell numbers by using repetition.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return partition_bell_numbers(n-1) + partition_bell_numbers(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[1] < A[0]:\n        for i in range(1, len(A)-1):\n            if A[i+1] < A[i]:\n                return False\n        return True\n    elif A[1] > A[0]:\n        for i in range(1, len(A)-1):\n            if A[i+1] > A[i]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if all elements are the same\n    if A[0] == A[-1]:\n        return True\n    \n    # Check if the array is monotonic\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic, False otherwise.\n    '''\n    n = len(A)\n    # check if the array is empty\n    if n == 0:\n        return False\n    # check if the array contains only one element\n    if n == 1:\n        return True\n    # compare the first and last elements of the array\n    if A[0] < A[n-1]:\n        # check if the array is decreasing\n        for i in range(1, n-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    # compare the first and last elements of the array\n    elif A[0] > A[n-1]:\n        # check if the array is increasing\n        for i in range(1, n-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    # if the first and last elements are equal, then the array is not monotonic\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n    An array A is said to be monotonic if its elements are either all increasing or all decreasing.\n    '''\n    \n    if len(A) <= 1:\n        return True\n    \n    if A[1] >= A[0]:\n        return is_Monotonic(A[1:])\n    elif A[1] < A[0]:\n        return is_Monotonic(A[1:]) + is_Monotonic(A[:-1])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # initialize the variables to keep track of the previous element and whether the array is monotonic or not\n    prev = None\n    is_monotonic = True\n\n    # iterate through the array using a for loop\n    for i in range(len(A)):\n        \n        # check if the current element is greater than the previous element\n        if A[i] > prev:\n            \n            # if it is, set the is_monotonic variable to False and break out of the loop\n            is_monotonic = False\n            break\n            \n        # if the current element is less than the previous element, it means that the array is not monotonic\n        elif A[i] < prev:\n            \n            # set the is_monotonic variable to False and break out of the loop\n            is_monotonic = False\n            break\n            \n        # if the current element is equal to the previous element, it means that the array is not monotonic\n        else:\n            \n            # set the is_monotonic variable to False and break out of the loop\n            is_monotonic = False\n            break\n            \n        # update the previous element to the current element\n        prev = A[i]\n        \n    # return the value of the is_monotonic variable\n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Iterate through the array\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # If we reach this point, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return True\n    elif A[0]>=A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(A) < 2: \n        return True \n\n    # Initialize a flag variable to keep track of the direction of increasing or decreasing values\n    flag = 1 \n\n    # Traverse through the array from left to right\n    for i in range(1, len(A)): \n        # If the current element is smaller than the previous element, then it means that the array is not monotonic\n        if A[i] < A[i-1]: \n            flag = -1\n            break \n\n    # Check if the flag variable has been changed from 1 to -1 or vice versa, which means that the array is monotonic\n    return flag "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    elif A[0] < A[1]:\n        return all(A[i] >= A[i-1] for i in range(1, len(A)))\n    elif A[0] > A[1]:\n        return all(A[i] <= A[i-1] for i in range(1, len(A)))\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n            \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True  # base case 1: empty sublist\n    if not l:\n        return False  # base case 2: empty list\n    if l[0] == s[0]:  # base case 3: first elements match\n        return is_sublist(l[1:], s[1:])  # recursive case\n    else:\n        return False  # base case 4: first elements don't match"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    return is_sublist(l[1:], s[1:]) and l[0] in s[0]"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j\n            j = 0\n    if j == len(s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while j < len(s):\n        if s[j] == l[i]:\n            i += 1\n            j += 1\n        elif i > 0:\n            i = max(0, i-1)\n        else:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have the same number of elements\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(x) for x in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    \n    # iterate over the tuples in the list\n    for tup in Input:\n        # check if each tuple has the same length\n        if len(tup)!= len(Input[0]):\n            return False\n    \n    # if we made it this far, all the tuples have the same length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns a boolean value indicating whether all the tuples in the list have the same length or not.\n    '''\n    # Create an empty list to store the lengths of all the tuples in the list\n    lengths = []\n    \n    # Iterate through the list of tuples\n    for tup in Input:\n        # Add the length of each tuple to the lengths list\n        lengths.append(len(tup))\n    \n    # Use the all() function to check whether all the lengths in the lengths list are equal or not\n    return all(len(x) == lengths[0] for x in Input)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have the same length\n    if len(Input) == len(set(len(i) for i in Input)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    # initialize a boolean variable to keep track of whether all tuples have equal length or not\n    result = True\n\n    # loop through the input tuples\n    for i in Input:\n        # check if the length of the current tuple is equal to the length of the first tuple\n        if len(i)!= len(Input[0]):\n            # if the length is not equal, set the result variable to False and break out of the loop\n            result = False\n            break\n\n    # return the result variable\n    return result"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Initialize variables\n    n = len(nums)\n    min_val = nums[0]\n    max_val = nums[n-1]\n    swapped = True\n    gap = n//2\n\n    # Sort the list in ascending order\n    while swapped:\n        swapped = False\n\n        # Calculate the new gap\n        if gap == 0:\n            gap = n\n\n        # Iterate through the list and compare adjacent elements\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                # Swap the adjacent elements if they are out of order\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        # Decrease the gap\n        gap //= 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    The comb sort algorithm is a modification of the bubble sort algorithm.\n\n    The algorithm works as follows:\n\n    1. Start with the range of the unsorted portion of the array from the first element to the last element.\n    2. For each iteration, compare adjacent elements. If they are in the wrong order, swap them.\n    3. Decrease the range to the middle of the unsorted portion of the array.\n    4. Repeat steps 1-3 until the range is one.\n\n    The time complexity of the comb sort algorithm is O(n^2), making it inefficient on large lists.\n    '''\n\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        start += 1\n        end -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap * 10) // 13  # Calculate the new gap size\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j-gap] > nums[j]:\n                nums[j-gap], nums[j] = nums[j], nums[j-gap]\n                j -= gap\n            if nums[j-gap] < nums[j]:\n                break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define the gap sequence\n    gap = len(nums) // 4\n    while gap > 0:\n        # perform the insertion sort for each gap size\n        for i in range(gap, len(nums)):\n            j = i\n            # find the correct position for nums[i]\n            while j >= gap and nums[j-gap] > nums[j]:\n                nums[j-gap], nums[j] = nums[j], nums[j-gap]\n                j -= gap\n        gap = gap // 2"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3) + 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    k = 1\n    while swapped:\n        swapped = False\n        for i in range(n-k):\n            if nums[i] > nums[i+k]:\n                nums[i], nums[i+k] = nums[i+k], nums[i]\n                swapped = True\n        k = 3*k + 1\n        if k >= n:\n            k = n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    min_num = nums[0]\n    max_num = nums[n-1]\n    gap = max_num - min_num\n\n    # iterate until the gap is constant\n    while gap!= 0:\n        # find the new minimum element\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n\n        # shrink the gap size by one element\n        gap = (gap//10) + min_num\n\n        # find the new maximum element\n        for i in range(n-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Define the parameters\n    gap = len(nums) // 2\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n        i += 1\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Using the binary representation of the number to check whether it can be represented as the difference of two squares\n    binary_rep = bin(n)\n\n    # Removing the '0b' from the binary representation\n    binary_rep = binary_rep[2:]\n\n    # Checking if the binary representation can be represented as the difference of two squares\n    if len(binary_rep) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = 2\n    y = n - x\n    square_x = x**2\n    square_y = y**2\n    if square_x + square_y == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Get the square root of the number\n    sqrt_n = n ** 0.5\n\n    # Get the difference of the square root of the number and the square root of itself\n    sqrt_sqrt_n = (sqrt_n + sqrt_n + sqrt_n) / 2\n\n    # Check whether the difference of the square root of the number and the square root of itself is equal to the number itself\n    if sqrt_sqrt_n == sqrt_n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a perfect square\n    if n**0.5**2 == n:\n        # n is a perfect square, so check if n-1 and n+1 are also perfect squares\n        if (n-1)**0.5**2 == n-1 and (n+1)**0.5**2 == n+1:\n            print(\"The difference of two squares can be represented as n-1 and n+1.\")\n        else:\n            print(\"The difference of two squares can be represented as n and n+1.\")\n    else:\n        # n is not a perfect square, so check if n-1 and n-2 are also perfect squares\n        if (n-1)**0.5**2 == n-1 and (n-2)**0.5**2 == n-2:\n            print(\"The difference of two squares can be represented as n-1 and n-2.\")\n        else:\n            print(\"The difference of two squares cannot be represented as n.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number can be represented as the sum of two squares\n    for i in range(int(n/2)+1):\n        for j in range(int(n/2)+1):\n            if i**2+j**2 == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if i * i == n:\n            return True\n        if i * i > n:\n            break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Calculate the difference of squares\n    diff = int((n**2)**0.5) - int(n**0.5)\n    # Check if the difference is a square\n    if diff**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is a perfect square\n    def is_perfect_square(num):\n        return num == int(num**0.5) ** 2\n    \n    # check if the difference of two squares can be represented by the given number\n    def is_difference_square(num):\n        return (num - is_perfect_square(num))**2 == num\n    \n    if is_perfect_square(n):\n        print(f\"{n} is a perfect square.\")\n    elif is_difference_square(n):\n        print(f\"{n} can be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    # Check if the input number is even or odd\n    if n % 2 == 0:\n        return False\n    else:\n        # Calculate the square of the given number\n        square = n ** 2\n        # Calculate the difference between the square and its square root\n        diff = square - int(square ** 0.5)\n        # Check if the difference is even or odd\n        if diff % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Finding the square of the given number\n    square = n**2\n\n    # Checking whether the square can be represented as the difference of two squares or not\n    if square == 0:\n        return False\n    elif square == 1:\n        return True\n    else:\n        # Finding the integer part of the square root of the given number\n        root_int = int(square**0.5)\n\n        # Checking whether the square root can be represented as the difference of two squares or not\n        if root_int**2 == square:\n            return True\n        else:\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    # get the number of colors in the input list\n    n = len(colors)\n    # define a dictionary to map colors to their positions in the sequence\n    colors_map = {colors[i]: i for i in range(n)}\n    # define a list to store the positions in the sequence\n    sequence = []\n    # loop through the patterns and check if they are valid\n    for pattern in patterns:\n        # get the positions in the sequence for the current pattern\n        positions = [colors_map[c] for c in pattern]\n        # check if the positions are equal to the current position in the sequence\n        if positions == sequence:\n            return True\n        # add the current position to the sequence and continue\n        sequence = positions + [sequence[-1]]\n    # if we make it here, the patterns are not valid\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Checks if the given colors sequence follows the given patterns array.\n\n    Args:\n        colors (list): List of colors in the sequence.\n        patterns (list): List of patterns to match the sequence.\n\n    Returns:\n        bool: True if the colors sequence matches the patterns, False otherwise.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i] and patterns[i]!= colors[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    is_same = True\n    current_pattern = 0\n\n    # Check if the length of patterns array is equal to the length of colors array\n    if len(patterns)!= len(colors):\n        return False\n\n    # Loop through the colors array and the patterns array\n    for i in range(len(colors)):\n        if colors[i] == patterns[current_pattern]:\n            # If the current color matches the current pattern, increment the pattern index\n            current_pattern += 1\n        else:\n            # If the current color doesn't match the current pattern, reset the pattern index and set is_same to False\n            current_pattern = 0\n            is_same = False\n            break\n\n    # Return the final value of is_same\n    return is_same"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a dictionary to store the color patterns\n    pattern_dict = {}\n\n    # iterate through the colors array and create a dictionary with the colors as keys and their pattern as values\n    for i, color in enumerate(colors):\n        pattern_dict[color] = patterns[i]\n\n    # iterate through the patterns array and compare it with the corresponding color pattern in the dictionary\n    for i, pattern in enumerate(patterns):\n        if color_pattern[pattern]!= patterns[i]:\n            return False\n\n    # if the loop completes, all the patterns match, so the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize the count of colors for each pattern\n    pattern_colors = {}\n\n    # Iterate through the colors and patterns lists\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        color = colors[i]\n\n        # If the pattern is not in the pattern_colors dictionary, add it with a count of 1\n        if pattern not in pattern_colors:\n            pattern_colors[pattern] = 1\n        # If the pattern is already in the dictionary, increment the count for that pattern\n        else:\n            pattern_colors[pattern] += 1\n\n        # Check if the current color matches the expected color for the current pattern\n        if color!= pattern_colors[pattern]:\n            return False\n\n    # If the loop completes without returning False, it means the sequence follows the given patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    # define the function to check for same patterns\n    def check_patterns(patterns_list):\n        # initialize variables to keep track of colors and pattern indices\n        colors_seen = set()\n        pattern_index = 0\n\n        # loop through the colors list and check each pattern against the current colors seen\n        for color in colors:\n            # check if the current color is in the current pattern and update pattern_index\n            if color in patterns_list[pattern_index]:\n                pattern_index += 1\n\n            # if there are more patterns to check, check if the current pattern is a subset of the next pattern\n            if pattern_index < len(patterns_list):\n                # check if the current pattern is a subset of the next pattern\n                if set(patterns_list[pattern_index]) <= set(patterns_list[pattern_index + 1]):\n                    # if it is, update pattern_index to skip the next pattern\n                    pattern_index += 1\n\n            # add the current color to the set of colors seen\n            colors_seen.add(color)\n\n        # if all the patterns were checked without finding any duplicates, return True\n        return len(colors_seen) == len(patterns_list) * (len(patterns_list) - 1) // 2\n\n    # check if all patterns are the same\n    if all(check_patterns(patterns) for patterns in patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    color_index = 0\n    pattern_index = 0\n    while color_index < n:\n        if colors[color_index] == patterns[pattern_index]:\n            color_index += 1\n            pattern_index += 1\n        else:\n            color_index += 1\n    if pattern_index == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            is_divisible = True\n            for item in test_list[i]:\n                if item % K!= 0:\n                    is_divisible = False\n                    break\n            if is_divisible:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        test_list (list): A list of tuples.\n        K (int): A positive integer.\n\n    Returns:\n        list: A list of tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer k as inputs,\n    and returns a list of tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the tuples with all elements divisible by k from the given list\n    result = []\n\n    # Loop through the given list of tuples\n    for i in test_list:\n        # Check if all the elements of the tuple are divisible by k\n        if all(num % K == 0 for num in i):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(i)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                count += 1\n                break\n        if count == len(test_list[i]):\n            print(test_list[i])\n    return test_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each tuple in the test list\n    for tup in test_list:\n\n        # If all elements of the tuple are divisible by K, add it to the result list\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i][1:]):\n                result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty dictionary to store the count of elements in each tuple\n    count_dict = {}\n\n    # Iterate through the test_list and count the number of elements in each tuple\n    for tuple in test_list:\n        count_dict[tuple] = count_dict.get(tuple, 0) + 1\n\n    # Create an empty list to store the tuples\n    result_list = []\n\n    # Iterate through the count_dict to find the tuples with all elements divisible by K\n    for key, value in count_dict.items():\n        if value == len(key) and all(x % K == 0 for x in key):\n            result_list.append(key)\n\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and checks whether it is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n, \"is divisible by 11\")\n    else:\n        print(n, \"is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # split the string into a list of words\n    odd_len = [] # create an empty list to store the odd length words\n    \n    # loop through the list of words\n    for word in words:\n        # check if the length of the word is odd or even\n        if len(word) % 2!= 0: # if the length of the word is odd, append it to the odd_len list\n            odd_len.append(word)\n    \n    # check if the odd_len list is empty\n    if len(odd_len) == 0:\n        print(\"The string contains no odd length words.\")\n    else:\n        # concatenate the odd_len list into a single string and print it\n        print(\"The string contains the following odd length words:\", \" \".join(odd_len))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word)%2!= 0:\n            print(word + \" is odd-length.\")\n        else:\n            print(word + \" is even-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: # if the length of the word is even\n        print(s + \" is an even length word.\")\n    else:\n        print(s + \" is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for i in word:\n        if len(i) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    # split the input string into words\n    words = s.split()\n    # loop through the words\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Splitting the string into words\n    for word in words:\n        if len(word) % 2 == 1: # Checking if length of the word is odd or not\n            return True # Returning True if length is odd\n    return False # Returning False if all the words are even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # check if the length of the word is odd or even\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even length.\")\n        else:\n            print(word, \"is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    if len(words) == 1:\n        return False\n    else:\n        return len(words[0]) % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the first four tetrahedral numbers\n    tetrahedral_numbers = [1, 5, 14, 42]\n\n    # If n is less than or equal to 4, return the nth tetrahedral number\n    if n <= 4:\n        return tetrahedral_numbers[n-1]\n\n    # If n is greater than 4, return the sum of the first n-4 tetrahedral numbers\n    else:\n        return sum(tetrahedral_numbers[:n-4])"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((4*n**2) + (n-1)**2) + (n-2)**2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the sum of the first n odd numbers\n    sum_n_odd = sum(i for i in range(1, n+1, 2))\n    # Initialize the sum of the last n even numbers\n    sum_n_even = sum(i for i in range(2, n+1, 2))\n    # Calculate the nth tetrahedral number\n    nth_tetrahedral = (2 * (n-1) * sum_n_odd) + (n - 1) * sum_n_even + sum_n_odd\n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 10**i\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += i * (2 * i - 1)\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        print(\"Please enter a positive integer.\") \n        return None \n    else: \n        return (n * (n - 1) * (n - 2) * (n - 3)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the first three tetrahedral numbers\n    t1 = 0\n    t2 = 0\n    t3 = 0\n\n    # Loop through the remaining n-3 tetrahedral numbers\n    for i in range(3, n):\n        # Calculate the current tetrahedral number\n        t = t1 + t2 + t3 + i\n\n        # Update the values of the previous tetrahedral numbers\n        t1 = t2\n        t2 = t3\n        t3 = t\n\n        # Increment n by 1 to avoid duplicate values\n        n += 1\n\n    # Return the last calculated tetrahedral number\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number\n    t = 1\n    \n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Add the current tetrahedral number to the previous one\n        t += i\n        # Multiply the result by 4 to get the next tetrahedral number\n        t *= 4\n    \n    # Return the nth tetrahedral number\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    return (n**4 - 4*n**3 + 6*n**2 - 4*n + 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = n\n    while True:\n        num += 1\n        if num == 4*n**3 + 1:\n            return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in range(len(strr)):\n        result += ord(strr[i])\n    result = result % 26\n    return chr(result + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0  \n    for char in strr:  \n        char_value += ord(char)  \n    char_value %= 26  \n    char_str = chr(char_value + 64)  \n    return char_str  "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    \n    return ascii_value % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for i in range(len(strr)):\n        if i == 0:\n            ascii_val = ord(strr[i])\n        else:\n            ascii_val += ord(strr[i])\n        count += ascii_val\n        ascii_val %= 26\n    return chr(count)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0  \n    for char in strr:  \n        total += ord(char)  \n    return chr((total % 26) + 65)   # convert ASCII value to character and add 65 (offset for A) to convert to uppercase  "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    char = chr((total % 26) + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for i in strr:\n        char_sum += ord(i)\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        next_num = 0\n        for j in range(2):\n            next_num += sequence[j]\n        sequence.append(next_num)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        next_number = len(sequence) % 2 == 0 and sequence[-1] or 3*sequence[-1] + 1\n        sequence.append(next_number)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            print(i, end=\" \")\n        i += 1\n    print()"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = 1\n    for i in range(n):\n        sequence = 3 * sequence + 1\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere given its radius.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula:\n    # A = 4 * pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n    \n    # Return the surface area of the sphere\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using Heron's formula.\n    \n    :param r: The radius of the sphere.\n    :return: The surface area of the sphere.\n    '''\n    \n    # Calculating the semi-perimeter of the sphere\n    semip = 4 * math.pi * r\n    \n    # Calculating the area of the sphere\n    area = math.pi * r**2\n    \n    # Calculating the surface area using Heron's formula\n    s = (3 * semip) / (4 * math.tan(math.pi/5))\n    \n    # Returning the surface area of the sphere\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2 #formula for surface area of a sphere\n    print(\"The surface area of a sphere of radius\", r, \"is\", area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Approximate surface area of a sphere with a constant radius of 1\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the first centered hexagonal number to be 1\n    centered_hex_num = 1\n    \n    # loop through the range of n\n    for i in range(1, n+1):\n        # check if i is odd\n        if i % 2 == 1:\n            # add the i*i centered hexagonal number to the centered hexagonal number\n            centered_hex_num += i*i\n        # check if i is even\n        else:\n            # subtract the i*i centered hexagonal number from the centered hexagonal number\n            centered_hex_num -= i*i\n    \n    # return the centered hexagonal number\n    return centered_hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Formula to calculate centered hexagonal number\n    centered_hex = (2 * n + 1) ** 2 / 6\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Calculate the number of rows and columns required to draw the centered hexagonal number\n    rows = 1\n    cols = 2 * n - 1\n\n    # Initialize the current row and column\n    row = 0\n    col = 0\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through all the rows and columns\n    while rows <= cols:\n        # Add the current row and column to the result\n        result += row + col\n\n        # Move to the next row and column\n        row += 1\n        col += 2\n\n        # Increment the number of rows\n        rows += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 4\n    c = 12\n    for i in range(n):\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            a, b, c = c, a + b, b + c\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # The centered hexagonal number formula is:\n    # c(n) = (n+1)^2 + (n+1)\n    c = (n + 1) ** 2 + (n + 1)\n    # We can find the centered hexagonal number by using the formula\n    # for centered regular hexagonal numbers and multiplying it by -1.\n    return -1 * c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n, i):\n        if n == 0:\n            return i\n        if n % 2 == 0:\n            j = centered_hexagonal_number_helper(n//2, i + 1)\n        else:\n            j = centered_hexagonal_number_helper(n//2, i - 1)\n        return j\n    return centered_hexagonal_number_helper(n, 0)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through each row of the centered hexagonal grid\n    for i in range(n):\n        \n        # Initialize column sum variable to 0\n        col_sum = 0\n        \n        # Loop through each column of the centered hexagonal grid\n        for j in range(n):\n            \n            # Calculate the value of the current centered hexagonal number\n            value = (i+1) + (j+1)\n            \n            # Add the value to the column sum\n            col_sum += value\n            \n            # Check if the column sum is equal to the nth centered hexagonal number\n            if col_sum == (n**2)+n*(n+1):\n                return value\n        \n        # Add the value of the current row to the sum\n        sum += value\n    \n    # If the loop completes without finding the nth centered hexagonal number, return -1\n    return -1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        hexagonal = 2 * n - 1\n        centered_hex = hexagonal - (n - 1)\n        return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Formula: h(n) = 2n + 1\n    # Initialize first centered hexagonal number\n    hexagonal_number = 1\n    \n    # Iterate n times\n    for i in range(n):\n        # Calculate the current centered hexagonal number\n        hexagonal_number += 2 * i + 1\n    \n    return hexagonal_number"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key in merged_dict:\n            merged_dict[key].append(dict2[key])\n        else:\n            merged_dict[key] = [dict2[key]]\n    for key in dict3.keys():\n        if key in merged_dict:\n            merged_dict[key].append(dict3[key])\n        else:\n            merged_dict[key] = [dict3[key]]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Merge dictionaries using the + operator\n    merged_dict = dict1 + dict2 + dict3\n\n    # Create a new dictionary to store the merged values\n    final_dict = {}\n\n    # Iterate through the merged dictionary\n    for key, value in merged_dict.items():\n        # Check if the value is a list or tuple\n        if isinstance(value, (list, tuple)):\n            # Concatenate all the values in the list or tuple\n            final_dict[key] = value[0] + value[1] + value[2]\n        else:\n            # Add the value as is\n            final_dict[key] = value\n\n    return final_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries as input, and returns a single dictionary that contains all the key-value pairs from the three dictionaries.\n\n    Args:\n        dict1: A dictionary that contains key-value pairs.\n        dict2: A dictionary that contains key-value pairs.\n        dict3: A dictionary that contains key-value pairs.\n\n    Returns:\n        A single dictionary that contains all the key-value pairs from the three input dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    count_dict = collections.Counter(lst)\n    return dict(count_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n    :param list1: A list of elements to count the frequency of\n    :type list1: list\n    :return: A dictionary containing the frequency of each element in the list\n    :rtype: dict\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def freq_count(list1):\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use a dictionary to store the frequency of each element in the list\n    freq = collections.Counter(lst)\n    # Convert the dictionary to a list of tuples\n    freq_list = freq.items()\n    # Sort the list of tuples by the frequency in descending order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    # Extract the frequency of each element from the sorted list and return it as a dictionary\n    return {freq_list[i][0]: freq_list[i][1] for i in range(len(freq_list))}"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Get the frequency of all elements in a list, as a dictionary.\n\n    Args:\n        lst: list\n            A list of items.\n\n    Returns:\n        dict: A dictionary with the frequency of each element as keys and the count as values.\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    smallest_num = float('inf')\n    closest_num = float('inf')\n    for num in range(1, N):\n        if num < n and num < smallest_num:\n            smallest_num = num\n        elif num > n and num < closest_num:\n            closest_num = num\n    if closest_num == float('inf'):\n        print(\"There is no smaller number than\", n)\n    else:\n        print(\"The closest smaller number to\", n, \"is\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n\n    # Loop through the numbers from 1 to N\n    for num in range(1, N+1):\n        # Calculate the absolute difference between num and N\n        diff = abs(num - N)\n\n        # If the current number is closer to N, update the smallest and closest values\n        if diff < smallest:\n            smallest = diff\n            closest = num\n\n    # Return the closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables to find closest smaller number\n    smallest = float('inf')\n    closest = float('inf')\n    \n    # iterate through numbers from 1 to n-1\n    for i in range(1, N):\n        # if current number is smaller than smallest number, update smallest and closest\n        if i < smallest:\n            smallest = i\n            closest = i\n        # if current number is closer to the smallest number than the closest number, update closest\n        elif abs(i-smallest) < abs(closest-smallest):\n            closest = i\n            \n    # return closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    n = N\n    while True:\n        if n % 2 == 0:\n            n -= 1\n        else:\n            n += 1\n        if n < 1:\n            return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    smaller_num = N + 1\n    closest_smaller = N\n\n    # Loop through numbers from 1 to N-1\n    for i in range(1, N):\n\n        # Calculate the distance between the current number and N\n        distance = abs(N - i)\n\n        # Update the smaller number and closest smaller number\n        if distance < abs(smaller_num - i):\n            smaller_num = i\n            closest_smaller = i\n\n    # Return the closest smaller number\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    nums = sorted([i for i in range(1, N+1)])\n    return nums[-1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_diff = float('inf')\n    for i in range(1, N+1):\n        if i < smallest:\n            smallest_diff = smallest - i\n            smallest = i\n    return smallest_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = N\n    for num in range(N, 0, -1):\n        if num % 2 == 0:\n            closest = min(closest, num)\n        else:\n            closest = max(closest, num)\n        if closest == num:\n            break\n        if abs(closest - N) < abs(num - N):\n            smallest = num\n            break\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    diff = abs(N - 1)\n    for i in range(1, N):\n        if abs(N - i) < diff:\n            min_num = i\n            diff = abs(N - i)\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the smallest number\n    smallest = min(N)\n\n    # Find the largest number\n    largest = max(N)\n\n    # Find the closest number\n    closest = min(smallest, largest)\n\n    return closest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list of strings.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize the longest word length and the current word length\n    longest_word = 0\n    current_word = 0\n\n    # Loop through each word in the list\n    for word in list1:\n        # Update the current word length\n        current_word = len(word)\n\n        # Update the longest word length if necessary\n        if current_word > longest_word:\n            longest_word = current_word\n\n    # Return the longest word length\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for s in str1:\n            if s in sub_str:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # split the string into a list of words\n    words = str1.split()\n    # iterate through the list of words and check if the substring is present\n    for word in words:\n        if sub_str in word:\n            return True\n    # if the substring is not present in the string, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, list):\n        for string in str1:\n            if sub_str in string:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(\"Substring is present in the given string.\")\n    else:\n        print(\"Substring is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is greater than 1\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n    \n    # Check if the number is divisible by 4 and not divisible by 100\n    if n % 4 == 0 and n % 100!= 0:\n        return True\n    \n    # Check if the number is divisible by 6 and not divisible by 100\n    if n % 6 == 0 and n % 100!= 0:\n        return True\n    \n    # If none of the above conditions are satisfied, then it's not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n - 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return \"The number is not undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # Even number is undulating\n        return True\n    else:\n        # Odd number is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if the given number is undulating or False otherwise.\n    An undulating number is a number which is not divisible by any of the numbers from 1 to 10 (inclusive).\n    For example, 5 is not undulating because it is divisible by 1, 2, 4, 5, 10.\n    '''\n    \n    # List of numbers which are not divisible by any of the numbers from 1 to 10\n    not_divisible = [1, 2, 4, 5, 10]\n    \n    # Check if the given number is not divisible by any of the numbers from 1 to 10\n    if n not in not_divisible:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Define the list of prime numbers up to n\n    primes = [2]\n    for i in range(3, n+1, 2):\n        if all(i % j!= 0 for j in range(3, i//2+1, 2)):\n            primes.append(i)\n\n    # Check whether the given number is in the list of primes\n    return n in primes"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Check if n is a perfect square\n    if n == int(n**0.5)**2:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the number is positive\n    if n < 0:\n        return False\n\n    # Calculate the sum of the squares of the digits in the number\n    sum_of_squares = sum([int(digit) ** 2 for digit in str(n)])\n\n    # Check if the sum of squares is equal to the square of the number\n    return sum_of_squares == n ** 2"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments - a and b.\n    It calculates the value of a to the power b and returns the result.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Use the sorted() function to sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n\n    # Use the itemgetter function to select the second value of each tuple and sort them in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    for i, tup in enumerate(test_list):\n        if tup[1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first element in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to extract the second value from each tuple in the list\n    second_values = list(itemgetter(1)(test_list))\n\n    # Find the index of the minimum second value using the index() method of the list\n    minimum_index = second_values.index(min(second_values))\n\n    # Return the first value of the tuple with the minimum second value\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = 0\n\n    for i, (a, b) in enumerate(test_list):\n        if b < test_list[min_index][1]:\n            min_index = i\n\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') #initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize min_length to the length of the first list in lst\n    min_length = len(lst[0])\n\n    # Loop through each list in lst\n    for i in range(len(lst)):\n        # If the length of the current list is smaller than min_length, update min_length\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize minimum length to infinity\n    min_length = float('inf')\n\n    # Loop through each list in the list\n    for i in lst:\n        # Find the length of the current list\n        length = len(i)\n\n        # Check if the current length is smaller than the minimum length\n        if length < min_length:\n            # Update the minimum length\n            min_length = length\n\n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:  # if length of sublist is smaller than min_length, update min_length\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes in a list of lists and returns the minimum length of the smallest list in the list.\n    \"\"\"\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    frequency = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a count of 1\n        if element not in frequency:\n            frequency[element] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            frequency[element] += 1\n    # Return the frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequencies\n    freq = {}\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # loop through each element in the flattened list\n    for item in flat_list:\n        # if the element is already in the dictionary, increment its frequency\n        if item in freq:\n            freq[item] += 1\n        # otherwise, add it with a frequency of 1\n        else:\n            freq[item] = 1\n    # return the dictionary of frequencies\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if isinstance(element, list):\n            for sub_element in element:\n                if sub_element in freq_dict:\n                    freq_dict[sub_element] += 1\n                else:\n                    freq_dict[sub_element] = 1\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # loop through each item in the list\n    for item in list1:\n        # if the item is already in the dictionary, increment its count\n        if item in freq:\n            freq[item] += 1\n        # if the item is not in the dictionary, add it and set its count to 1\n        else:\n            freq[item] = 1\n\n    # return the dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Count frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Initialize an empty dictionary\n    freq_dict = {}\n\n    # Loop through the flattened list\n    for item in flattened_list:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # Otherwise, add the item to the dictionary with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # loop through the elements of the list and add their frequency to the dictionary\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    # return the dictionary\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    else:\n        product = 1\n        for number in numbers:\n            product *= number\n        return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # multiply all numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # divide with the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    binary_representation = \"\"\n\n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n = n // 2\n\n    return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal number to binary string\n    binary = bin(n)[2:]\n    # Remove leading zeros\n    while binary.startswith('0'):\n        binary = binary[1:]\n    # Return binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    # Initialize an empty string to store the binary equivalent of n \n    binary = \"\" \n  \n    # Convert n to binary using a loop \n    while n > 0: \n        # Take the last digit of n and convert it to binary \n        last_digit = n % 2 \n        # Append the last digit to the beginning of binary string \n        binary = str(last_digit) + binary \n        # Remove the last digit from n \n        n //= 2 \n  \n    # Return the binary string \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0: \n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function converts a given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    # convert decimal number to binary using recursion \n    def helper(num): \n        if num == 0: \n            return \"\" \n        else: \n            return str(num % 2) + helper(num // 2) \n\n    # call helper function to convert decimal number to binary string \n    binary_str = helper(n) \n\n    # remove leading zeros from binary string \n    while binary_str[0] == '0' and len(binary_str) > 1: \n        binary_str = binary_str[1:] \n\n    return binary_str "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n    # Initialize a flag variable to keep track of the current position in the binary string\n    pos = 0\n    # Loop through each digit in the decimal number\n    while n > 0:\n        # Extract the last digit of the decimal number\n        digit = n % 2\n        # Append the digit to the binary string and increment the position\n        binary_str = str(digit) + binary_str\n        n = n // 2\n    # Reverse the binary string to get the correct order of digits\n    binary_str = binary_str[::-1]\n    # Remove any leading zeros from the binary string\n    binary_str = binary_str.lstrip(\"0\")\n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        # Convert the input integer to a string and reverse it\n        num_str = str(num)[::-1]\n\n        # Check if the reversed string is a palindrome\n        if num_str == num_str[::-1]:\n            # If it is, increment the number by 1 and check if it's a palindrome\n            num += 1\n            num_str = str(num)[::-1]\n            if num_str == num_str[::-1]:\n                return num\n        else:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a given integer is a palindrome.\n    \"\"\"\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 10:\n        return num + 1\n    else:\n        num_str = str(num)\n        if num_str[0] == '9':\n            return int(num_str[1:])\n        else:\n            new_num = int(num_str[0]) + 1\n            return new_num\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python3 next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    if is_palindrome(num):\n        print(\"The next smallest palindrome is:\", next_smallest_palindrome(num))\n    else:\n        print(\"The given integer is not a palindrome.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = 0\n    i = 10\n\n    while palindrome < num:\n        palindrome = i * i\n        i += 1\n\n    return palindrome\n\nnum = int(input(\"Enter a positive integer: \"))\n\nif num % 2 == 0:\n    num += 1\n\nprint(\"Next smallest palindrome:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while True:\n        j = 1\n        while True:\n            palindrome = 10**i * j\n            if palindrome == num:\n                break\n            j += 1\n        if j > 9:\n            i += 1\n            j = 1\n        else:\n            break\n    return 10**i * j"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n    The next smallest palindrome of an integer is the smallest integer that is a palindrome of the same digits as the input.\n    For example, if the input is 123, the next smallest palindrome of 123 is 456, which is 610 since 123 is palindrome of 610.\n    '''\n    # Convert the input integer to a string\n    input_str = str(num)\n    # Reverse the string\n    reverse_str = input_str[::-1]\n    # Convert the reversed string to an integer\n    reverse_int = int(reverse_str)\n    # Calculate the difference between the input and the next smallest palindrome\n    diff = num - reverse_int\n    # Return the input plus the difference\n    return num + diff"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Remove any leading zeroes from the number\n    while num and num[0] == '0':\n        num = num[1:]\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Check if the reverse of the number is smaller than or equal to the original number\n    if num_str <= num:\n        return int(num_str)\n\n    # Increment the last digit and convert it to a string\n    next_digit = str(int(num_str[-1]) + 1)\n\n    # Check if the resulting number is a palindrome\n    while next_digit[-1] == '0':\n        next_digit = next_digit[:-1]\n\n    # If it's not a palindrome, decrement the last digit and convert it to a string\n    if next_digit!= next_digit[::-1]:\n        next_digit = str(int(next_digit) - 1)\n\n    # Add the last digit to the reversed number\n    return int(num_str[:-1] + next_digit)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Get the list of digits of the number\n    digits = [int(digit) for digit in str(num)]\n    # Check if the number is a palindrome\n    if digits == digits[::-1]:\n        # If the number is a palindrome, find the smallest positive number greater than it that is also a palindrome\n        for i in range(999, num, -1):\n            digits = [int(digit) for digit in str(i)]\n            if digits == digits[::-1]:\n                return i\n    # If the number is not a palindrome, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # convert the integer to a string\n    num_str = str(num)\n    \n    # convert the string to a list of characters\n    char_list = list(num_str)\n    \n    # reverse the list of characters\n    char_list.reverse()\n    \n    # convert the reversed list to a string\n    reversed_num_str = ''.join(char_list)\n    \n    # convert the reversed string to an integer\n    reversed_num = int(reversed_num_str)\n    \n    # find the next smallest palindrome\n    next_smallest_palindrome = reversed_num + 1\n    \n    # return the next smallest palindrome\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num + 1\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # check if the input number is negative\n    if num < 0:\n        # change the sign of the input number\n        num = -num\n\n    # find the digits of the number\n    digits = [int(digit) for digit in str(num)]\n\n    # find the index of the maximum digit\n    max_index = digits.index(max(digits))\n\n    # create a new list with all digits except the maximum digit and all digits before the maximum digit\n    for i in range(len(digits)):\n        if i!= max_index:\n            digits[i] = 0\n\n    # create a new list with all digits except the maximum digit and all digits before and including the maximum digit\n    new_digits = [digits[max_index]]\n    for i in range(max_index-1, -1, -1):\n        new_digits.append(digits[i] + 1)\n\n    # convert the new list of digits to a number and return it\n    return int(''.join(map(str, new_digits)))\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left_kth = kth_element(arr[:mid], k)\n        right_kth = kth_element(arr[mid:], k - mid)\n        if left_kth:\n            return left_kth\n        else:\n            return right_kth"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Find the length of the array\n    length = len(arr)\n    \n    # Check if the kth element is greater than the length of the array\n    if k > length:\n        return None\n    \n    # Initialize a variable to keep track of the count of elements smaller than the kth element\n    count = 0\n    \n    # Iterate through the array and count the elements smaller than the kth element\n    for i in range(length):\n        if arr[i] < arr[k-1]:\n            count += 1\n        \n        # Stop iterating if the count reaches the kth element\n        if count == k-1:\n            return arr[i]\n    \n    # If the kth element is not found in the array\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Initialize two pointers, one at the beginning and one at the end\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the counter to 1\n    count = 1\n\n    # Loop until the count reaches k\n    while count <= k:\n        # Move the left pointer to the right if the element at the left pointer is smaller\n        if arr[left - 1] < arr[left]:\n            left += 1\n        # Move the right pointer to the left if the element at the right pointer is smaller\n        elif arr[right - 1] < arr[right]:\n            right -= 1\n        # If the element at the left pointer is equal to the element at the right pointer,\n        # increment the counter\n        else:\n            count += 1\n\n    # If the count is equal to k, return the element at the left pointer\n    if count == k:\n        return arr[left - 1]\n    # If the count is greater than k, return the element at the right pointer\n    else:\n        return arr[right - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        left = 0\n        right = n - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[:k-1], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char = None\n    for char in word:\n        if char.isupper() and prev_char is None:\n            camel_case += char.lower()\n        elif char.isupper() and prev_char is not None:\n            camel_case += '_' + char.lower()\n        else:\n            camel_case += char.upper()\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for word in words[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # split the word by underscores\n    snake_words = word.split('_')\n\n    # capitalize the first letter of each word except the first word\n    camel_words = []\n    for i in range(1, len(snake_words)):\n        camel_words.append(snake_words[i].capitalize())\n\n    # join the capitalized words with underscores\n    camel_word = '_'.join(camel_words)\n\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Convert the first word to lowercase\n    word_list[0] = word_list[0].lower()\n    # Concatenate the words with capital letters\n    camel_case_word = ''.join(word_list)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel += word[i].upper()\n        else:\n            camel += word[i].lower()\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the string into words based on underscores\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words into a single string with a capitalized first letter\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    word_list = word.split('_')\n    \n    # Convert the first word to uppercase and join the rest of the words with underscores\n    result = ''.join(word_list[0].title(), *word_list[1:])\n    \n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            if word[i] == \"_\":\n                camel_case += word[i+1].upper()\n            else:\n                camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if m == 1:\n        return n - 1\n    elif n == 1:\n        return m + 1\n    else:\n        return eulerian_num(n - 1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Initialize the first row of Pascal's triangle\n    row = [1] * (m + 1)\n\n    # Initialize the sum of the first row\n    sum_row = row[0]\n\n    # Iterate over the rows of Pascal's triangle\n    for i in range(1, n):\n        # Compute the next row\n        next_row = [0] * (m + 1)\n        next_row[0] = 1\n        for j in range(1, m + 1):\n            next_row[j] = row[j] + row[j - 1]\n        # Update the sum of the current row\n        sum_row = 0\n        for j in range(m + 1):\n            sum_row += next_row[j]\n        # Update the current row and the sum of the previous row\n        row = next_row\n        next_sum_row = 0\n        for j in range(m + 1):\n            next_sum_row += next_row[j]\n        sum_row -= next_sum_row\n\n    # Return the sum of the last row\n    return sum_row"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0 and m > 0:\n        return m\n    elif n > 0 and m == 0:\n        return n\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # To calculate a(n, m), we need to find the maximum value of a(i,j) such that i <= n and j <= m.\n    # We can use dynamic programming to achieve this.\n    # Initialize a(1,1) to 1.\n    a = [[1 for j in range(m+1)] for i in range(n+1)]\n    # Initialize the first row and column of the matrix with 1.\n    for i in range(1, n+1):\n        a[i][1] = 1\n    for j in range(1, m+1):\n        a[1][j] = 1\n\n    # Fill the rest of the matrix using the following recurrence relation:\n    # a(i,j) = a(i-1,j) + a(i,j-1) - a(i-1,j-1)\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    This function takes two integer arguments, n and m, representing the dimensions of a square matrix.\n    The function calculates the Eulerian number a(n, m) by iterating over all possible values of x and y,\n    and counting the number of pairs (x, y) such that 0 <= x < n and 0 <= y < m.\n\n    The formula for the Eulerian number is:\n\n    a(n, m) = (n^2 - m^2 + 1) // 2\n\n    Examples:\n    >>> eulerian_num(2, 2)\n    10\n    >>> eulerian_num(3, 3)\n    60\n    >>> eulerian_num(4, 4)\n    340\n\n    Note: This function is not the most efficient way to calculate the Eulerian number, but it works.\n    \"\"\"\n\n    # Check if n and m are positive integers\n    if not (isinstance(n, int) and isinstance(m, int) and n > 0 and m > 0):\n        raise ValueError(\"Both n and m must be positive integers\")\n\n    # Initialize the counter for the number of pairs\n    count = 0\n\n    # Iterate over all possible values of x and y\n    for x in range(n):\n        for y in range(m):\n            # Count the number of pairs (x, y) such that 0 <= x < n and 0 <= y < m\n            count += sum(1 for i in range(x, n) if i!= x for j in range(y, m) if j!= y)\n\n    # Calculate the Eulerian number a(n, m)\n    a = (n**2 - m**2 + 1) // 2\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # calculate the number of possible combinations\n    num_combinations = n * (n-1) * (n-2) *... * (2) * 1\n    # calculate the factorial of each digit of m\n    factorials = []\n    for i in range(1, m+1):\n        factorials.append(factorial(i))\n    # calculate the product of factorials and divide by the number of combinations\n    return (factorials[0] * factorials[1] * factorials[2] *... * factorials[m]) / num_combinations"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize variables\n    a = 0\n    \n    # Check if n and m are both even\n    if n % 2 == 0 and m % 2 == 0:\n        # Check if n is greater than m\n        if n > m:\n            a = (n + m) / 2\n        else:\n            a = (n + m - 2) / 2\n    \n    # Check if n is odd and m is even\n    elif n % 2!= 0 and m % 2 == 0:\n        a = n / 2\n    \n    # Check if n is even and m is odd\n    elif n % 2 == 0 and m % 2!= 0:\n        a = m / 2\n    \n    # Check if n is odd and m is odd\n    else:\n        a = (n + m) / 2\n    \n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize matrix of size n x m\n    matrix = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the matrix\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            matrix[i][j] = (matrix[i - 1][j] + matrix[i][j - 1] - matrix[i - 1][j - 1]) % 2\n\n    # Calculate the Eulerian number\n    eulerian_num = matrix[n][m]\n\n    # Return the result\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 0\n    a = 0\n    \n    # Check if n and m are odd numbers\n    if (n % 2 == 1) or (m % 2 == 1):\n        print(\"Error: n and m must be odd numbers.\")\n        return None\n    \n    # Check if n is odd and m is even\n    if n % 2 == 1 and m % 2 == 0:\n        # Initialize the sum to 1\n        sum = 1\n        \n        # Loop m times\n        for i in range(m):\n            # Add the sum to a\n            a += sum\n            \n            # Check if the sum is odd\n            if sum % 2 == 1:\n                # Change the sum to the sum of the first half of the range\n                sum = n - (sum - 1)\n                \n            # If the sum is even, divide it by 2\n            else:\n                # If the sum is even, divide it by 2 and check if the result is odd\n                if sum % 4 == 0:\n                    sum = sum // 2\n                else:\n                    # If the sum is even, divide it by 2 and check if the result is even\n                    sum = sum // 2 + (sum % 2)\n        \n        # Return the final value of a\n        return a\n    \n    # Check if n is even and m is odd\n    elif n % 2 == 0 and m % 2 == 1:\n        # Initialize the sum to 1\n        sum = 1\n        \n        # Loop n times\n        for i in range(n):\n            # Add the sum to a\n            a += sum\n            \n            # Check if the sum is odd\n            if sum % 2 == 1:\n                # Change the sum to the sum of the first half of the range\n                sum = m - (sum - 1)\n                \n            # If the sum is even, divide it by 2\n            else:\n                # If the sum is even, divide it by 2 and check if the result is odd\n                if sum % 4 == 0:\n                    sum = sum // 2\n                else:\n                    # If the sum is even, divide it by 2 and check if the result is even\n                    sum = sum // 2 + (sum % 2)\n        \n        # Return the final value of a\n        return a\n    \n    # If neither of the above conditions are met\n    else:\n        print(\"Error: n and m must satisfy the conditions n odd and m even or n even and m odd.\")\n        return None"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        a = (n * m) // 2\n    else:\n        a = n * m // 2 + (m - n) // 2\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of the input list\n    for sublist in input_list:\n        # Use the sort() method to sort the sublist\n        sublist.sort()\n        \n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist of strings in the input list\n    for sublist in input_list:\n        # Convert the sublist to a string and sort it\n        sorted_string = ''.join(sorted(sublist))\n        # Split the sorted string into a list of characters\n        sorted_char_list = list(sorted_string)\n        # Convert the sorted list of characters back to a sorted string\n        sorted_string = ''.join(sorted_char_list)\n        # Replace the original sublist with the sorted sublist\n        sublist[:] = sorted_char_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):   \n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the given lists into tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    \n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    \n    # Convert the tuple back to a list\n    test_list = list(test_tup)\n    \n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup + test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    test_list.extend(test_tup)\n    \n    # Convert the list to a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)  # convert test_list to a list\n    for item in test_list:\n        test_tup = test_tup + (item,)  # append each item to the tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_list) + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # Create a new list by appending the given list to the given tuples\n    new_list = test_list + tuple(test_tup)\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists\n    merged1 = num1 + num2\n    heapq.heapify(merged1)\n\n    # Merge the third list with the merged list\n    merged2 = heapq.merge(num3, merged1)\n    heapq.heapify(merged2)\n\n    # Merge the first and second lists again with the merged list\n    merged3 = heapq.merge(merged2, merged1)\n    heapq.heapify(merged3)\n\n    # Convert the merged list back to a sorted list\n    sorted_list = [heapq.heappop(merged3) for _ in range(len(merged3))]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as arguments and returns a single sorted list that contains all the elements of the three input lists.\n    '''\n    # Create a list that contains all the elements of the three input lists\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the merged list in ascending order\n    heapq.heapify(merged_list)\n    merged_list.sort()\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and returns a single sorted list.\n    \"\"\"\n    # Convert the input lists to sets to remove duplicates\n    list1_set = set(num1)\n    list2_set = set(num2)\n    list3_set = set(num3)\n\n    # Merge the three sets into a single set and convert back to a list\n    merged_set = list(list1_set | list2_set | list3_set)\n\n    # Convert the merged set back to a list and sort it\n    sorted_list = sorted(merged_set)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists of integers as input and merges them into a single sorted list.\n    '''\n\n    # create a list of tuples containing the input lists\n    lists = [(list1, 0), (list2, 0), (list3, 0)]\n\n    # heapify the lists to create a min heap\n    heapq.heapify(lists)\n\n    # create a new list to hold the merged sorted list\n    merged = []\n\n    # while there are still elements in the min heap\n    while lists:\n        # pop the smallest element from the heap\n        current_list = heapq.heappop(lists)[0]\n        # append the smallest element to the merged list\n        merged.append(current_list[current_list[1]])\n\n        # increment the index for the current list\n        current_list[1] += 1\n        # if the end of the current list has been reached, remove it from the heap\n        if current_list[1] == len(current_list[0]):\n            heapq.heappop(lists)\n\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to find the minimum element from each sublist and insert them back into the merged list\n    min_heap = []\n    for num in merged_list:\n        if not min_heap or num <= min_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappop(min_heap)\n\n    return min_heap"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Create a min heap to hold the merged list\n    min_heap = []\n\n    # Insert the first three elements of the three input lists into the min heap\n    heapq.heappush(min_heap, num1[0])\n    heapq.heappush(min_heap, num2[0])\n    heapq.heappush(min_heap, num3[0])\n\n    # Loop through the remaining elements of the lists and add them to the min heap\n    for i in range(1, len(num1)):\n        heapq.heappush(min_heap, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(min_heap, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(min_heap, num3[i])\n\n    # Extract the elements from the min heap and add them to the result list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list\n    by merging them in ascending order.\n    '''\n    # create a list of all the input lists\n    all_lists = [num1, num2, num3]\n\n    # merge all the lists into one sorted list\n    merged_list = heapq.merge(*all_lists)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n\n    # Remove duplicates from the sorted list using heapq\n    return list(heapq.nsmallest(len(merged_list), merged_list))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list using heapq module.\n\n    Args:\n        num1 (list): list of integers\n        num2 (list): list of integers\n        num3 (list): list of integers\n\n    Returns:\n        list: merged list of sorted integers\n\n    \"\"\"\n    # Merge three sorted lists into a single sorted list using heapq module\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n        \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n        \n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n        \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count to zero\n    count = 0\n\n    # Initialize the binary string\n    binary_string = \"\"\n\n    # Loop through each character in the string\n    for char in s:\n        # Convert the character to a binary string\n        binary_string += bin(ord(char))[2:]\n\n    # Loop through each rotation of the binary string\n    for i in range(n):\n        # Rotate the binary string\n        rotated_binary = binary_string[-1:] + binary_string[:-1]\n\n        # Loop through each character in the rotated binary string\n        for char in rotated_binary:\n            # If the character is odd, increment the count\n            if int(char) % 2!= 0:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize the count and odd_count variables to 0\n    count = 0\n    odd_count = 0\n    \n    # Loop through each character in the binary string\n    for char in s:\n        # Check if the character is odd\n        if char == '1':\n            odd_count += 1\n        \n        # Check if the count is equal to the rotation count\n        if count == n:\n            odd_count -= 1\n            \n        # Increment the count\n        count += 1\n            \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string into a list of characters\n    binary_list = list(s)\n\n    # Calculate the length of the binary string\n    length = len(binary_list)\n\n    # Loop through each character in the list\n    for i in range(length):\n        # If the character is odd, increment the count\n        if int(binary_list[i]) % 2!= 0:\n            count += 1\n\n        # If the count reaches the desired number of rotations, exit the loop\n        if count == n:\n            break\n\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = bin(int(s))[2:] # converting the given string to binary and removing the '0b' prefix\n    rotated_binary_string = ''\n    count = 0\n    for i in range(n):\n        rotated_binary_string = rotated_binary_string + binary_string[-1]\n        binary_string = binary_string[:-1] # removing the last character from the binary string\n    for i in range(len(rotated_binary_string)):\n        if rotated_binary_string[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables to keep track of the result and the count of odd values\n    result = 0\n    count = 0\n    \n    # Initialize a list to store the binary digits of the given string\n    binary = [int(i) for i in list(s)]\n    \n    # Rotate the binary list the given number of times\n    for i in range(n):\n        left = binary.pop(0)\n        binary.append(left)\n        right = binary.pop(0)\n        binary.insert(0, right)\n    \n    # Iterate through the binary list and count the number of odd values\n    for i in binary:\n        if i % 2 == 1:\n            count += 1\n    \n    # Return the final count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Check if the string is of even length\n    if len(s) % 2 == 0:\n        print(\"Error: Input string should have an odd length!\")\n        return\n\n    # Initialize count and count odds\n    count = 0\n    odds = 0\n\n    # Loop n times\n    for i in range(n):\n        # Convert the binary string to a list\n        s = [int(x) for x in s]\n\n        # Reverse the list\n        s.reverse()\n\n        # Convert the reversed list back to a binary string\n        s = ''.join(str(x) for x in s)\n\n        # Loop through the binary string and count odds\n        for j in range(len(s)):\n            if s[j] == 1:\n                odds += 1\n\n        # Reset count and odds for the next iteration\n        count += 1\n        odds = 0\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop for n number of rotations\n    for i in range(n):\n        # Initialize a variable to 0\n        j = 0\n        \n        # Loop for length of the binary string\n        for char in s:\n            # If the character is odd, increment count variable\n            if int(char) % 2!= 0:\n                count += 1\n            \n            # If the count is greater than 0, then we need to rotate the string\n            if count > 0:\n                # Initialize a variable to 0\n                temp = 0\n                \n                # Convert the character to integer\n                i = int(char)\n                \n                # Calculate the least significant bit of the character\n                temp = i & 1\n                \n                # Shift the character to the right by one bit\n                i = i >> 1\n                \n                # If the least significant bit is 1, add it to the character\n                if temp == 1:\n                    i += 1\n                    \n                # Convert the integer to character and append it to the new string\n                s = bin(i)[2:].zfill(len(char))\n                \n                # If the count is 0 after rotation, we can stop the loop\n                if count == 0:\n                    break\n            \n            # If the count is 0 after rotation, we can stop the loop\n            if count == 0:\n                break\n            \n        # If the count is 0 after rotation, we can stop the loop\n        if count == 0:\n            break\n        \n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # initialize variables\n    count = 0\n\n    # convert binary string to list of digits\n    binary_list = list(s)\n\n    # rotate the binary string n times\n    for i in range(n):\n        # rotate the first element to the end of the list\n        binary_list.append(binary_list.pop(0))\n\n    # loop through the rotated list and count odd digits\n    for digit in binary_list:\n        if digit % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize variables\n    result = 0\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in list(s)]\n\n    # Rotate the list by n positions\n    rotated_list = binary_list[n:] + binary_list[:n]\n\n    # Iterate over the rotated list and count the odd values\n    for num in rotated_list:\n        if num % 2!= 0:\n            result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize a variable to count odd numbers\n    count = 0\n    \n    # split the binary string into a list of characters\n    binary_list = list(s)\n    \n    # rotate the binary string the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n    \n    # loop through the rotated binary string and count the odd numbers\n    for num in binary_list:\n        if num == '1':\n            count += 1\n    \n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        if all(x in item for x in common):\n            common.extend(item)\n        else:\n            for x in item:\n                if x not in common and x in item:\n                    common.append(x)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n\n    Example:\n    nestedlist = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Output:\n    2, 3, 6\n    '''\n    # initialize an empty set to store common elements\n    common = set()\n    # loop through each nested list\n    for lst in nestedlist:\n        # loop through each element in the current list\n        for num in lst:\n            # add the element to the common set if it is not already present\n            if num not in common and num in lst:\n                common.add(num)\n    # return the common elements in a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] not in common_elements:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def find_common_elements(lst1, lst2):\n        '''\n        Helper function to find the common elements in two lists recursively.\n        '''\n        if not lst1 or not lst2:\n            return []\n        elif lst1[0] == lst2[0]:\n            return [lst1[0]] + find_common_elements(lst1[1:], lst2[1:])\n        else:\n            return find_common_elements(lst1[1:], lst2)\n\n    common_elements = []\n    for lst1 in nestedlist:\n        for lst2 in nestedlist:\n            if lst1!= lst2:\n                common_elements += find_common_elements(lst1, lst2)\n    return list(set(common_elements))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize empty dictionary to store common elements\n    common = {}\n\n    # Iterate over each nested list\n    for item in nestedlist:\n\n        # Iterate over each item in the nested list\n        for subitem in item:\n\n            # If the subitem is already in the common dictionary, increment its count\n            if subitem in common:\n                common[subitem] += 1\n            # Otherwise, add the subitem to the common dictionary with a count of 1\n            else:\n                common[subitem] = 1\n\n    # Find the common elements in the dictionary\n    common_elements = [key for key, value in common.items() if value == len(nestedlist)]\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common.update(sublist)\n    return sorted(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for elem in lst:\n            # Add the element to the set if it is not already present\n            if elem not in common_elements:\n                common_elements.add(elem)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Remove all duplicates from the list\n    unique_list = list(set([str(x) for x in nestedlist]))\n\n    # Initialize an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through each element in the unique list\n    for element in unique_list:\n        # Find the elements that contain the element in the nested lists\n        elements_with_element = [x for x in nestedlist if str(x) in element]\n        # Find the common elements by subtracting the elements that contain the element from the nested lists\n        common_elements = [x for x in elements_with_element if x not in element]\n        # Add the common elements to the common_dict\n        common_dict[element] = common_elements\n\n    # Return the common_dict\n    return common_dict"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for inner_list in nestedlist:\n        common_elements.update(inner_list)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements in the nested list.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    # check if the string starts with a digit\n    if text[0].isdigit():\n        # check if there are any non-digit characters after the first one\n        if all(c.isdigit() for c in text[1:]):\n            # the string represents an integer\n            return True\n        else:\n            # the string does not represent an integer\n            return False\n    else:\n        # the string does not start with a digit\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum of integers to 0\n    int_sum = 0\n    \n    # Iterate through each integer in the tuple\n    for num in nums:\n        # Add the integer to the sum of integers\n        int_sum += num\n    \n    # Return the sum of integers\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple into a list of integers\n    nums_list = list(nums)\n    # Calculate the sum of the integers in the list\n    result = sum(nums_list)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Use reduce() function to add up all the elements in the tuple\n    result = reduce(lambda x, y: x + y, nums)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each sublist in the list\n    for sublist in test_list:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element is a string, try to convert it to a float\n            if isinstance(element, str):\n                try:\n                    float_element = float(element)\n                    # if the conversion was successful, replace the string element with the float element\n                    sublist[sublist.index(element)] = float_element\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                new_sublist.append(item)\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if type(test_list[i][j])!= float and test_list[i][j]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                row[test_list.index(row)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        for element in row:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                continue\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    # Split the string on spaces and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i == arr[i]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i!= arr[i]:\n            return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the count dictionary and return the element with count 1\n    for num in count_dict:\n        if count_dict[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize a list to store the unique elements in the array\n    unique = []\n    for num, count in freq.items():\n        if count == 1:\n            unique.append(num)\n    \n    # return the unique element, if it exists\n    if len(unique) > 0:\n        return unique[0]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize the count and the element to search for\n    count = 0\n    target = arr[0]\n\n    # Loop through the array and count the number of occurrences of the target element\n    for i in range(len(arr)):\n        if arr[i] == target:\n            count += 1\n\n    # If the target element appears only once, return it\n    if count == 1:\n        return target\n\n    # If the target element appears more than once, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    # create a dictionary to store the frequency of elements in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # find the element that appears only once in the array\n    for key in freq:\n        if freq[key] == 1:\n            return key\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == arr[1]:\n        return search(arr[1:])\n    else:\n        return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            print(arr[i])\n            break"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over the array, updating the frequency dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the array again, checking if the frequency of each element is 1\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product of two numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum absolute product between numbers in pairs of tuples\n    within the given list.\n    \"\"\"\n    # Define an empty list to store the maximum absolute product\n    max_product = []\n    \n    # Iterate over the list of tuples\n    for tup in lst:\n        # Initialize two variables to store the current maximum and minimum products\n        max_prod = -1\n        min_prod = 1\n        \n        # Iterate over the numbers in the tuple\n        for num in tup:\n            # Update the maximum product if the current number is greater than the maximum product\n            if num > max_prod:\n                max_prod = num\n            \n            # Update the minimum product if the current number is smaller than the minimum product\n            if num < min_prod:\n                min_prod = num\n                \n        # Calculate the maximum absolute product between the current tuple and the maximum product\n        max_abs_prod = abs(max_prod) * abs(min_prod)\n        \n        # If the maximum absolute product is not already in the list, add it\n        if max_abs_prod not in max_product:\n            max_product.append(max_abs_prod)\n            \n    # Return the list of maximum absolute products\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables for the maximum and minimum values found so far\n    max_product = -float('inf')\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for tup in list1:\n        # Extract the first and second elements of each tuple\n        a, b = tup\n\n        # Calculate the absolute difference between the first and second elements\n        diff = abs(a - b)\n\n        # Update the maximum and minimum products found so far\n        max_product = max(max_product, diff)\n        min_product = min(min_product, diff)\n\n    # Return the maximum absolute product found\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and finds the maximum absolute product between numbers in pairs\n    of tuples within the list.\n\n    The function returns the maximum product as a tuple.\n    \"\"\"\n    max_product = (0, 0)\n    for tup in list1:\n        if tup[0] > max_product[0]:\n            max_product = (tup[0], tup[1])\n        elif tup[1] > max_product[1]:\n            max_product = (tup[1], tup[0])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    current_product = 1\n\n    for tup in list1:\n        if tup[0] > 0:\n            current_product *= tup[0]\n        else:\n            current_product = 1\n        if tup[1] > 0:\n            current_product *= tup[1]\n        else:\n            current_product = 1\n        if abs(current_product) > abs(max_product):\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        temp = []\n        for j in range(len(list1[i])):\n            temp.append(abs(list1[i][j] - list1[i][j+1]))\n        list2.append(temp)\n    max_prod = max(max(row) for row in list2)\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            abs_product = abs(product)\n            max_abs_product = max(max_abs_product, abs_product)\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        else:\n            j = 1\n            while i * j <= limit:\n                if i % j == 0:\n                    break\n                else:\n                    j += 1\n            else:\n                sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable to any number from 1 to itself.\n    \"\"\"\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n        else:\n            pass\n    if num == sum:\n        return True\n    else:\n        return False\n\n\ndef sum_amicable(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if the given number is amicable, False otherwise.\n    \"\"\"\n    if num < 100:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(limit ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, limit + 1, i):\n                primes[j] = False\n    return [i for i in range(2, limit + 1) if primes[i]]\n\ndef amicable_numbers_sum(limit):\n    primes = sieve_of_eratosthenes(limit)\n    amicable_numbers = []\n    for prime in primes:\n        if is_prime(prime) and prime!= 1:\n            for other in primes:\n                if is_prime(other) and prime + other == 28:\n                    amicable_numbers.append(prime + other)\n    return sum(amicable_numbers)\n\nprint(amicable_numbers_sum(10000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit + 1))\n    \n    # Loop through each number in the list\n    total_sum = 0\n    for number in numbers:\n        # Check if the number is a amicable number\n        is_amicable = False\n        for other_number in numbers:\n            if (number!= other_number) and (number % other_number == 0):\n                is_amicable = True\n                break\n        # If the number is a amicable number, add it to the sum\n        if is_amicable:\n            total_sum += number\n    \n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum to zero\n    amicable_sum = 0\n\n    # Loop through all numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num!= 1:\n            # Check if the number is divisible by the sum of the two divisors of the number\n            if num % sum([divisor for divisor in range(1, int(num**0.5)+1) if num % divisor == 0]) == 0 and num % sum([divisor for divisor in range(1, int(num)+1) if num % divisor == 0]) == 0:\n                # Add the number to the sum\n                amicable_sum += num\n\n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Check if the limit is even or odd\n    if limit % 2 == 0:\n        limit += 1\n    \n    # Initialize a list to store the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Loop over all numbers from 1 to the limit\n    for num in range(1, limit):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the sum of the number and its divisors to the sum\n            amicable_sum += num + sum_of_divisors(num)\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    sum_amicable = 0\n    current_num = 1\n    \n    # Check if the input number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Iterate over numbers from 1 to the limit\n    while current_num <= limit:\n        # Check if the current number is amicable\n        if current_num!= 1 and is_prime(current_num) and is_prime(current_num-1):\n            sum_amicable += current_num\n        \n        # Update the current number\n        current_num += 1\n    \n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable to any number up to the square root of the number.\n    \"\"\"\n    sqrt_num = int(num ** 0.5)\n    for i in range(1, sqrt_num + 1):\n        if num % i == 0 and num // i!= i:\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(limit ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if primes[num] and is_amicable(num):\n            amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(limit - i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number as a float value.\n    \"\"\"\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function calculates the angle of a complex number using the arctan function of the cmath module.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle/cmath.pi*180 # convert angle from radians to degrees\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            diff = count_zeros(string[i:j+1]) - count_ones(string[i:j+1])\n            max_diff = max(diff, max_diff)\n    return max_diff\n\n\ndef count_zeros(string):\n    count = 0\n    for char in string:\n        if char == '0':\n            count += 1\n    return count\n\n\ndef count_ones(string):\n    count = 0\n    for char in string:\n        if char == '1':\n            count += 1\n    return count"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count0 += 1\n        elif char == '1':\n            count1 += 1\n        else:\n            pass\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if string[i] == '0' and string[j - 1] == '1':\n                max_diff = max(max_diff, j - i)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    length = 0\n    count = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        if count > length:\n            length = count\n    \n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    \n    for i in range(length):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    def count_zeros_ones(sub_string):\n        zeros = 0\n        ones = 0\n        for bit in sub_string:\n            if bit == '0':\n                zeros += 1\n            else:\n                ones += 1\n        return zeros, ones\n\n    def max_diff(sub_string):\n        zeros_ones = count_zeros_ones(sub_string)\n        diff = abs(zeros_ones[0] - zeros_ones[1])\n        return diff\n\n    sub_strings = [string[i:i+2] for i in range(len(string)-1)]\n    max_diff_sub_strings = [max_diff(sub_string) for sub_string in sub_strings]\n    return max(max_diff_sub_strings)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    for bit in string:\n        if bit == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            \n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables to keep track of the number of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero_count\n        if char == \"0\":\n            zero_count += 1\n        # If the character is a 1, increment the one_count\n        elif char == \"1\":\n            one_count += 1\n        # If the character is neither 0 nor 1, increment both counts\n        else:\n            zero_count += 1\n            one_count += 1\n    # Initialize variables to keep track of the maximum difference between the number of 0s and 1s\n    max_diff = 0\n    # Loop through each pair of adjacent characters in the string\n    for i in range(len(string)-1):\n        # If the current pair of characters has a difference of more than 1, update max_diff\n        if string[i] == \"0\" and string[i+1] == \"1\":\n            max_diff = max(max_diff, abs(zero_count - one_count))\n        # If the current pair of characters has a difference of more than 1, update max_diff\n        elif string[i] == \"1\" and string[i+1] == \"0\":\n            max_diff = max(max_diff, abs(zero_count - one_count))\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of 0s and 1s in each sub-string of the binary string\n    count_dict = {}\n    # Initialize a variable to store the maximum difference between the count of 0s and 1s in each sub-string\n    max_diff = 0\n    \n    # Loop through each sub-string of the binary string\n    for i in range(len(string)):\n        # Check if the current sub-string has already been counted\n        if string[i:i+2] in count_dict:\n            # If yes, calculate the difference between the count of 0s and 1s in this sub-string and the count of 0s and 1s in the previous sub-string\n            diff = count_dict[string[i:i+2]] - count_dict[string[i-1:i]]\n            # Update the maximum difference if the current difference is greater than the maximum difference\n            max_diff = max(max_diff, diff)\n        # If the current sub-string has not been counted, count the count of 0s and 1s in it and add it to the dictionary\n        else:\n            count_dict[string[i:i+2]] = string[i:i+2].count('0') + string[i:i+2].count('1')\n    \n    # Return the maximum difference between the count of 0s and 1s in each sub-string\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_divisors(a,b):\n    \"\"\"\n    This function takes two integers as input and returns a list of their common divisors.\n    \"\"\"\n    # create a list to store the common divisors\n    common = []\n    # loop through the numbers from 1 to the smaller number\n    for i in range(1, min(a,b)+1):\n        # if both numbers have a common divisor, add it to the list\n        if a % i == 0 and b % i == 0:\n            common.append(i)\n    # return the list of common divisors\n    return common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def gcd(a, b):\n    '''\n    Finds the greatest common divisor of two given numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    if a < b:\n        return sum(b, a)\n    common_divisor = gcd(a, b)\n    return a + b - common_divisor - common_divisor\n\nprint(sum(25, 36))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    # Find the divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Find the sum of common divisors\n    sum_divisors = sum(divisors)\n    # Return the sum of common divisors\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisors(n):\n        \"\"\"\n        Return a list of common divisors of n.\n        \"\"\"\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # Find the common divisors of a and b\n    a_divisors = common_divisors(a)\n    b_divisors = common_divisors(b)\n    \n    # Find the intersection of the two lists of divisors\n    common_divisors = [x for x in a_divisors if x in b_divisors]\n    \n    # Calculate the sum of the common divisors\n    sum_common = sum(common_divisors)\n    \n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = [i for i in range(1, a+1) if a % i == 0]\n    divisors_b = [i for i in range(1, b+1) if b % i == 0]\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    This function takes two input parameters a and b, which are the two numbers to find the sum of their common divisors.\n    The function then finds the common divisors of the two numbers and returns their sum.\n    '''\n    # Find the common divisors of the two numbers\n    divisors = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Sum the common divisors\n    result = sum(divisors)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    This function calculates the sum of common divisors of two given numbers.\n    '''\n    # find the greatest common divisor using Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # find all the common divisors of a and b\n    def common_divisors(a, b):\n        divisors = []\n        i = 1\n        while i <= a and i <= b:\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n            i += 1\n        return divisors\n    \n    # calculate the sum of common divisors\n    def sum_of_common_divisors(a, b):\n        common = common_divisors(a, b)\n        return sum(common)\n    \n    # get the input values\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    \n    # find the sum of common divisors and print the result\n    result = sum_of_common_divisors(a, b)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is:\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    :param a: first number\n    :param b: second number\n    :return: the sum of common divisors\n    \"\"\"\n    divisors = []\n    i = 1\n    while i <= a and i <= b:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two positive integers a and b and returns their sum of common divisors.\n    \"\"\"\n    # Initialize variables to store the sum of common divisors and the remaining numbers\n    sum_cd = 0\n    remaining = a + b\n\n    # Loop through the numbers from 1 to the square root of the remaining number\n    while remaining > 1:\n        # Check if the remaining number is a divisor of a and b\n        if a % remaining == 0 and b % remaining == 0:\n            # If it is, add it to the sum of common divisors\n            sum_cd += remaining\n            # Divide the remaining number by the divisor to eliminate it from the sum\n            remaining = remaining // a + remaining // b\n        else:\n            # If it's not, reduce the remaining number by the next number in the sequence\n            remaining = remaining - 1\n\n    return sum_cd"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Splitting the string into a list of words\n    long_words = [] # Creating an empty list to store the long words\n    for word in words:\n        if len(word) > n: # Checking if the length of the word is greater than n\n            long_words.append(word) # Appending the long word to the list of long words\n    return long_words # Returning the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and a value n as input, and returns a list of words that are longer than n characters.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all rows are equal\n    for row in my_matrix:\n        if row!= my_matrix[0]:\n            return False\n\n    # Check if all columns are equal\n    for col in range(len(my_matrix)):\n        col_sum = 0\n        for row in range(len(my_matrix)):\n            col_sum += my_matrix[row][col]\n        if col_sum!= col_sum:\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)-3):\n        for j in range(len(my_matrix)-3):\n            if my_matrix[i][j] + my_matrix[i+1][j+1] + my_matrix[i+2][j+2]!= my_matrix[i+3][j+3]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n    for row in my_matrix:\n        if len(row)!= 3:\n            return False\n    # Check if the matrix has integers only\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n    # Check if the matrix has no duplicate elements\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j]!= my_matrix[i][j+1]!= my_matrix[i][j+2]!= my_matrix[i+1][j]!= my_matrix[i+2][j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Check if the matrix is a magic square\n    for row in my_matrix:\n        for i in range(len(row)):\n            # Calculate the sum of the row and column\n            total = row[i] + my_matrix[i][i]\n            \n            # Check if the sum is equal to the sum of the diagonals\n            if total!= (row[i] + my_matrix[2-i//3][2-i%3]):\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # Check if the row sums to the magic number\n        if sum(my_matrix[i])!= 15:\n            return False\n        # Check if the column sums to the magic number\n        col_sum = 0\n        for j in range(n):\n            col_sum += my_matrix[j][i]\n        if col_sum!= 15:\n            return False\n        # Check if the main diagonal sums to the magic number\n        diag_sum = 0\n        for k in range(n):\n            diag_sum += my_matrix[k][k]\n        if diag_sum!= 15:\n            return False\n        # Check if the secondary diagonal sums to the magic number\n        diag_sum = 0\n        for k in range(n):\n            diag_sum += my_matrix[k][n-k-1]\n        if diag_sum!= 15:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the elements in the matrix\n    sum_elements = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the elements is equal to the number of elements in the matrix\n    if sum_elements == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # Check if all rows have the same length\n    if any(len(row)!= n for row in my_matrix):\n        return False\n    \n    # Check if all columns have the same length\n    if any(len(my_matrix[0])!= n for row in my_matrix):\n        return False\n    \n    # Check for magic squares\n    for i in range(n):\n        row = my_matrix[i]\n        col = [row[j] for j in range(n)]\n        diag1 = [row[i] for i in range(n)]\n        diag2 = [row[j] for j in range(n)]\n        if row!= col or col!= diag1 or diag1!= diag2:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as an argument and returns True if it is a magic square or False otherwise.\n    A magic square is a square grid of numbers in which each row, column, and diagonal contain the same number of distinct values.\n    \"\"\"\n    n = len(my_matrix)\n    if n * n!= len(set(sum(my_matrix, []))):\n        return False\n    for i in range(n):\n        for j in range(n):\n            # Check if the current element is equal to the sum of the elements in the sub-matrix.\n            sub_matrix = [row[j] for row in my_matrix[:i] + my_matrix[i+1:] if j > i]\n            if not all(sub_matrix):\n                return False\n            if not all(set(row[:j]) == sub_matrix for row in my_matrix):\n                return False\n            if not all(set(row[i:]) == sub_matrix for row in my_matrix):\n                return False\n            # Check if the current element is equal to the sum of the elements in the sub-matrix.\n            if not all(row[i] == sum(row[:j]) for j in range(n) if i < j):\n                return False\n            if not all(row[i] == sum(row[j+1:]) for j in range(n-1, -1, -1) if i < j):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    if len(set([len(row) for row in my_matrix]))!= 1:\n        return False\n    # Check if all columns have the same length\n    if len(set([len(row) for row in zip(*my_matrix)]))!= 1:\n        return False\n    # Check if the diagonal has the same elements as the remaining elements in the matrix\n    if sorted(set([row[i] for row in my_matrix for i in range(len(row))]))!= sorted(set([row[i] for row in my_matrix for i in range(len(row)) if i!= j] for j in range(len(row)))):\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= sum(my_matrix[k][j] for k in range(n)):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n    \n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n    \n    # Calculate the sum of the matrix elements\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n    \n    # Check if the sum is a magic number\n    if magic_sum == 0:\n        return True\n    elif magic_sum == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The item with maximum frequency.\n    \"\"\"\n\n    # Count the occurrences of each item in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    # Find the item with maximum frequency\n    max_count = max(counts.values())\n    for num in counts:\n        if counts[num] == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n\n    for item in freq:\n        if freq[item] == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_num = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_num = num\n            break\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n    \n    max_item = max(freq, key=freq.get)\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the maximum frequency of any item\n    max_freq = max(freq.values())\n    \n    # Find the item with maximum frequency and return it\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    \n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n            \n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = []\n\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_str = ''.join(vowels)\n    return str1.replace(vowels_str, vowels_str[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str = char + new_str\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # Separate the string into vowels and consonants\n    vowels_list = list(filter(lambda x: x in vowels, str1))\n    consonants_list = list(filter(lambda x: x not in vowels, str1))\n    \n    # Reverse the vowels\n    reversed_vowels_list = consonants_list[::-1]\n    \n    # Combine the vowels and consonants in the original order\n    final_list = vowels_list + reversed_vowels_list\n    \n    # Convert the list back to a string\n    final_str = \"\".join(final_list)\n    \n    return final_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1_list = list(str1)\n    vowels_list = []\n    for i in str1_list:\n        if i in vowels:\n            vowels_list.append(i)\n    vowels_list.reverse()\n    for i in vowels_list:\n        str1_list.remove(i)\n    str1_list.reverse()\n    reversed_str = ''.join(str1_list)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_set = set(vowels)\n    reversed_str = ''\n    \n    for char in str1:\n        if char in vowels_set:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n            \n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup):\n    '''\n    This function takes a tuple as input and returns a string representation of it.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list to get the elements in the tuple\n    lst = list(tup1)\n    # join the elements of the list with a comma separator and return the result as a string\n    return ', '.join(str(x) for x in lst)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return ', '.join(str(elem) for elem in tup)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the total\n            total += num\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the hexagonal number function\n    def hexagonal(i):\n        return (3 * i ** 2) - 1\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Calculate the nth hexagonal number\n    return hexagonal(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2*n*(n+1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Base case\n    if n == 0: \n        return 0 \n\n    # Calculate the hexagonal number\n    hex_num = 1 + 2 * n * (1 / 2) ** n \n    return hex_num "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*n*n - n*n)//6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n+1)**2 + (2*n-1)**2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1: \n        return \"Invalid input\"\n    elif n == 1: \n        return 1\n    else: \n        return 2 * hexagonal_num(n-1) + 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize an empty array to store the non-zero numbers\n    non_zeros = array('i')\n    \n    # Iterate over each number in the input array\n    for num in nums:\n        # If the number is zero, append it to the non_zeros array\n        if num == 0:\n            non_zeros.append(num)\n    \n    # Calculate the total number of non-zero numbers\n    total_non_zeros = len(non_zeros)\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = (non_zeros.itemsize * total_non_zeros) / (nums.itemsize * len(nums))\n    \n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return float(zeroes) / float(non_zeroes)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * (max(nums) + 1))\n    for num in nums:\n        count[num] += 1\n    non_zero_count = sum(count[1:])\n    zero_count = sum(count[:1])\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the list to an array\n    arr = array('i', nums)\n\n    # Initialize variables for the count of zeroes and the count of non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = zero_count / non_zero_count\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the counts of non-zeroes and zeroes\n    counts = array('i', [0]*(max(nums)+1))\n\n    # Count the non-zeroes and zeroes\n    for num in nums:\n        if num == 0:\n            counts[0] += 1\n        else:\n            counts[num] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = counts[0] / counts[1:]\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    non_zeroes = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            non_zeroes.append(1)\n\n    zero_count = zeroes.count(1) / non_zeroes.count(1)\n\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize two empty arrays to store the non-zero and zero counts\n    non_zeros = array('i', [])\n    zeros = array('i', [])\n\n    # Loop through the array and increment the appropriate counts based on whether each number is zero or non-zero\n    for num in nums:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n\n    # Calculate the ratio of zeroes to non-zeroes using integer division\n    zero_ratio = zeros.count(0) / len(nums)\n\n    # Return the ratio as a float rounded to 2 decimal places\n    return round(float(zero_ratio), 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to an array of integers\n    nums = array('i', nums)\n\n    # Initialize variables to keep track of zeros and non-zeros\n    zeros = 0\n    non_zeros = 0\n\n    # Iterate through the array and count the number of zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # Calculate the ratio of zeros to non-zeros\n    ratio = zeros / non_zeros if non_zeros!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_nonzeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_nonzeros += 1\n            \n    ratio = count_zeros / count_nonzeros\n    \n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return True\n\n    # Check if n is divisible by 8\n    if n % 8 == 0:\n        return True\n\n    # Check if n is divisible by 16\n    if n % 16 == 0:\n        return True\n\n    # Check if n is divisible by 32\n    if n % 32 == 0:\n        return True\n\n    # Check if n is divisible by 64\n    if n % 64 == 0:\n        return True\n\n    # Check if n is divisible by 128\n    if n % 128 == 0:\n        return True\n\n    # Check if n is divisible by 256\n    if n % 256 == 0:\n        return True\n\n    # Check if n is divisible by 512\n    if n % 512 == 0:\n        return True\n\n    # Check if n is divisible by 1024\n    if n % 1024 == 0:\n        return True\n\n    # Check if n is divisible by 2048\n    if n % 2048 == 0:\n        return True\n\n    # Check if n is divisible by 4096\n    if n % 4096 == 0:\n        return True\n\n    # Check if n is divisible by 8192\n    if n % 8192 == 0:\n        return True\n\n    # Check if n is divisible by 16384\n    if n % 16384 == 0:\n        return True\n\n    # Check if n is divisible by 32768\n    if n % 32768 == 0:\n        return True\n\n    # Check if n is divisible by 65536\n    if n % 65536 == 0:\n        return True\n\n    # Check if n is divisible by 131072\n    if n % 131072 == 0:\n        return True\n\n    # Check if n is divisible by 262144\n    if n % 262144 == 0:\n        return True\n\n    # Check if n is divisible by 524288\n    if n % 524288 == 0:\n        return True\n\n    # Check if n is divisible by 1048576\n    if n % 1048576 == 0:\n        return True\n\n    # Check if n is divisible by 2097152\n    if n % 2097152 == 0:\n        return True\n\n    # Check if n is divisible by 4194304\n    if n % 4194304 == 0:\n        return True\n\n    # Check if n is divisible by 8388608\n    if n % 8388608 == 0:\n        return True\n\n    # If none of the conditions are satisfied, then it cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is a power of 2\n    if (n & (n - 1)) == 0:\n        return True\n    \n    # Check if n is a sum of powers of 2\n    for i in range(1, int(n ** 0.5) + 1):\n        if (n - (2 ** i)) in range(i, n + 1):\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # iterate over all possible sums of powers of 2\n    for i in range(1, n):\n        # check if each power of 2 is present in the given number\n        if (i & (i - 1))!= 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        n = n & (n - 1)\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it can be represented as the sum of \n    non-zero powers of 2, otherwise returns False.\n\n    Example:\n    >>> is_Sum_Of_Powers_Of_Two(16)\n    True\n    >>> is_Sum_Of_Powers_Of_Two(25)\n    True\n    >>> is_Sum_Of_Powers_Of_Two(37)\n    False\n    \"\"\"\n    # Iterate through all possible sums of powers of 2\n    for i in range(1, n + 1):\n        # Check if the sum is equal to n\n        if i == n:\n            return True\n        # Check if the sum is divisible by 2\n        elif n % i == 0 and i % 2 == 0:\n            # Check if the sum of its non-zero powers of 2 is equal to n\n            if i * i == n:\n                return True\n            elif i * (i + 1) == n:\n                return True\n            elif i * (i + 2) == n:\n                return True\n    # If no sum is found, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check if the number is power of 2 or not, we can convert it to binary using bitwise operations.\n    # If it is a power of 2, then the bitwise AND operation with 1 will be 0, otherwise it will be 1.\n    # If the sum of power of 2 is less than n, then it cannot be represented as sum of powers of 2.\n    # If the sum of power of 2 is equal to n, then it can be represented as sum of powers of 2.\n    # If the sum of power of 2 is greater than n, then it can be represented as sum of powers of 2 with some numbers missing.\n    binary = bin(n)[2:]  # Convert n to binary string\n    count = 0\n    for i in binary:\n        if i == '1':\n            count += 1\n    if count == 0:  # n is power of 2\n        return True\n    else:\n        count = 0\n        for i in binary:\n            if i == '1':\n                count += 1\n        return count == len(binary)  # If count is equal to the length of binary string, then it can be represented as sum of powers of 2."
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is divisible by 2^k\n    for k in range(1, int(n.bit_length()) + 1):\n        if n % (2**k) == 0:\n            return True\n\n    # Check if n is a sum of powers of 2\n    for i in range(1, n + 1):\n        if n == sum([i] * k for k in range(1, int(n.bit_length()) + 1)):\n            return True\n\n    # If all checks fail, n cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    count = 0\n    temp = n\n    while temp!= 0:\n        if temp % 2 == 0:\n            count += 1\n        temp //= 2\n\n    if count == 0:\n        return \"Can be represented as Sum of Powers of 2\"\n    else:\n        return \"Cannot be represented as Sum of Powers of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # initialize the sum variable\n    sum = 0\n\n    # loop through all the numbers from 2 to sqrt(n)\n    for i in range(2, int(n ** 0.5) + 1):\n        # check if i is a power of 2\n        if n % i == 0:\n            # check if i is a multiple of 2\n            if i % 2 == 0:\n                # if i is a multiple of 2, add i to the sum variable\n                sum += i\n            else:\n                # if i is not a multiple of 2, add 2 to the sum variable\n                sum += 2\n\n    # check if the sum is equal to n\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # 3.14159 is the value of pi\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # approximation of the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters\n    ----------\n    r : float\n        The radius of the circle.\n\n    Returns\n    -------\n    circumference : float\n        The circumference of the circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # use the formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula to find circumference\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    flattened_set = set(flattened_list)\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n    \n    flattened_list = flatten(test_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def rotate(nums, k):\n        n = len(nums)\n        for i in range(k):\n            swap(nums, 0, n-1-i)\n\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # If the maximum element is already in its correct position, stop rotating\n        if i == max_index:\n            continue\n\n        # If not, swap it with the maximum element and rotate the list\n        swap(nums, i, max_index)\n        rotate(nums, n-i-1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Print the list after each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def pancake_sort_helper(nums):\n        n = len(nums)\n        for i in range(n):\n            # Find the largest index j such that nums[j] <= nums[i]\n            max_idx = i\n            for j in range(i+1, n):\n                if nums[j] > nums[max_idx]:\n                    max_idx = j\n            # Swap nums[i] with nums[max_idx]\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            # Reverse the suffix of nums[0:i+1]\n            reverse_suffix(nums, 0, i)\n\n    def reverse_suffix(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    pancake_sort_helper(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # starting index of each pancake\n    starts = [0] * n\n    # ending index of each pancake\n    ends = [n-1] * n\n    # while there are still pancakes to sort\n    while any(starts < ends):\n        # find the pancake with the smallest gap\n        min_idx = None\n        for i in range(n):\n            if starts[i] < ends[i]:\n                if min_idx is None or (ends[i]-starts[i]) < (ends[min_idx]-starts[min_idx]):\n                    min_idx = i\n        # if there are still pancakes to sort, swap the elements at the start and end of the pancake\n        if min_idx is not None:\n            # swap the elements at the start and end of the pancake\n            nums[starts[min_idx]], nums[ends[min_idx]] = nums[ends[min_idx]], nums[starts[min_idx]]\n            # update the starting and ending indices of the pancake\n            starts[min_idx], ends[min_idx] = ends[min_idx], starts[min_idx] + 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the maximum element in the list\n    max_num = max(nums)\n    # Create a list of booleans representing whether each element is in its correct position\n    in_order = [True] * len(nums)\n    \n    # Perform pancake sorting by repeatedly swapping adjacent elements until they are in their correct position\n    for i in range(len(nums) - 1, 0, -1):\n        # Find the index of the largest unsorted element\n        largest_index = in_order.index(False)\n        # Swap the largest element with the element at the current index\n        nums[i], nums[largest_index] = nums[largest_index], nums[i]\n        # Mark the largest element as sorted\n        in_order[largest_index] = True\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Loop through each element of the list\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Print the sorted list\n        print(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    '''\n\n    # Initialize variables\n    swapped = True\n    n = len(nums)\n\n    # Perform pancake sort\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a copy of the input list to avoid modifying the original one\n    sorted_nums = nums[:]\n    \n    # Find the length of the longest increasing subsequence (LIS)\n    def find_length(nums):\n        length = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i-1]:\n                length += 1\n        return length\n    \n    # Check if the LIS is a pancake sort\n    def is_pancake_sort(nums):\n        # Sort the input list in decreasing order\n        nums.sort(reverse=True)\n        \n        # Count the number of inversions in the sorted list\n        inv_count = 0\n        for i in range(len(nums)):\n            if i > 0 and nums[i] < nums[i-1]:\n                inv_count += 1\n        \n        return inv_count == len(nums) - 1\n    \n    # Find the LIS and check if it's a pancake sort\n    length = find_length(sorted_nums)\n    if is_pancake_sort(sorted_nums):\n        # The input list is already sorted\n        return\n    \n    # Generate pancakes of the LIS and sort them\n    pancake_sizes = [0] * length\n    pancake_idx = 0\n    pancakes = []\n    while True:\n        # Find the next pancake of the LIS\n        pancake_size = 1\n        pancake_start = 0\n        for i in range(length):\n            if pancake_sizes[i] < pancake_size and sorted_nums[i] < sorted_nums[pancake_start]:\n                pancake_size = pancake_sizes[i] + 1\n                pancake_start = i\n        pancake_end = pancake_start + pancake_size - 1\n        \n        # Add the pancake to the sorted list\n        for i in range(pancake_end, pancake_start - 1, -1):\n            sorted_nums[i+1] = sorted_nums[i]\n        sorted_nums[pancake_start] = sorted_nums[pancake_end]\n        \n        # Check if the sorted list is a pancake sort\n        if is_pancake_sort(sorted_nums):\n            break\n        \n        # Update the pancake sizes and pancake indices\n        pancake_sizes[pancake_start] = pancake_size\n        pancakes.append(sorted_nums[pancake_start:pancake_end+1])\n        \n        # Reverse the last pancake\n        pancake_idx = len(pancakes) - 1 - pancake_idx\n        pancakes[pancake_idx].reverse()\n    \n    # Reverse the pancakes to get the final sorted list\n    for pancake in pancakes:\n        pancake.reverse()\n    \n    # Return the sorted list\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to find the maximum element in a sublist\n    def find_max(sublist):\n        max_idx = 0\n        for i in range(1, len(sublist)):\n            if sublist[i] > sublist[max_idx]:\n                max_idx = i\n        return max_idx\n\n    # Helper function to permute the elements in a sublist\n    def permute(sublist, start, end):\n        if start == end:\n            return\n        sublist[start], sublist[end] = sublist[end], sublist[start]\n        permute(sublist, start+1, end)\n        sublist[start], sublist[end] = sublist[end], sublist[start]\n\n    # Main function to sort the list of elements\n    def sort(nums):\n        n = len(nums)\n        for i in range(n-1, 0, -1):\n            # Find the maximum element in the first i elements\n            max_idx = find_max(nums[:i])\n            # Swap the maximum element with the first element\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            # Permute the remaining elements\n            permute(nums, i, n-1)\n        return nums\n\n    return sort(nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    :param list1: list of items to compare\n    :type list1: list\n    :param list2: list of items to compare\n    :type list2: list\n    :param list3: list of items to compare\n    :type list3: list\n    :return: number of items that are identical in the same position of three given lists\n    :rtype: int\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    # Loop through all items in the lists\n    for i in range(len(list1)):\n        # Check if the current item is the same as the next item in the list\n        if list1[i] == list2[i]:\n            # Check if the current item is also the same as the item in the next position in the list\n            if list1[i] == list3[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the count of items that are identical in the same position of the lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Returns the maximum absolute difference between any two elements in the given array.\n    \"\"\"\n    if len(arr) < 2:\n        return \"Array must contain at least two elements.\"\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            diff = abs(arr[i]-arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as an input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables to keep track of minimum and maximum values\n    max_diff = arr[0] - arr[1]\n    min_diff = arr[0] - arr[1]\n\n    # Loop through the array and calculate the absolute difference between adjacent elements\n    for i in range(2, len(arr)):\n        curr_diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, curr_diff)\n        min_diff = min(min_diff, curr_diff)\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Using the Gaussian Elimination Method to find a solution to the equation\n    det_a = a\n    det_b = b\n    det_c = n\n    x1 = 0\n    x2 = 0\n    if a == 1:\n        # If a is equal to 1, the equation is simply x = -b / c\n        if b == 0:\n            # If b is equal to 0, there is no solution\n            return None\n        else:\n            x1 = -n / b\n    elif b == 1:\n        # If b is equal to 1, the equation is simply y = -a / c\n        if a == 0:\n            # If a is equal to 0, there is no solution\n            return None\n        else:\n            x2 = -n / a\n    else:\n        # If a and b are not equal to 1, we can use the Gaussian Elimination Method to find x and y\n        det_a = a\n        det_b = b\n        det_c = n\n        p = 1\n        q = 0\n        r = 0\n        if det_b!= 0:\n            r = det_c / det_b\n            q = det_a / det_b\n        else:\n            return None\n\n        if det_a!= 0:\n            p = det_c / det_a\n            q = det_b / det_a\n        else:\n            return None\n\n        if det_c!= 0:\n            r = det_b / det_c\n            q = det_a / det_c\n        else:\n            return None\n\n        x1 = (-r + sqrt(r * r - 4 * p * q)) / (2 * p)\n        x2 = (-r - sqrt(r * r - 4 * p * q)) / (2 * p)\n\n    # Check if x1 and x2 are integers\n    if abs(x1 - int(x1)) >= 0.000001 or abs(x2 - int(x2)) >= 0.000001:\n        # If not, return None\n        return None\n    else:\n        # Otherwise, return a tuple of x1 and x2\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_list = []\n    y_list = []\n    for i in range(1, n // 2 + 1):\n        x = i\n        y = n - a * x - b * y\n        if y >= 0:\n            x_list.append(x)\n            y_list.append(y)\n    x_list = sorted(x_list)\n    y_list = sorted(y_list)\n    if len(x_list)!= len(y_list):\n        return None\n    for i in range(len(x_list)):\n        if x_list[i] * y_list[i]!= n:\n            return None\n    return (x_list[0], y_list[0])"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables to keep track of the current solution\n    x, y = 0, 0\n    # Initialize a variable to keep track of how many solutions we have found\n    count = 0\n    # Loop through all possible values of x\n    for i in range(1, n//a):\n        # Check if the current value of x is divisible by b\n        if i % b == 0:\n            # Check if the current value of x + b divides n\n            if (i + b) % a == 0:\n                # If it does, update the current solution and increment the solution count\n                x = i\n                y = (i + b) // a\n                count += 1\n    # If no solutions were found, return None\n    if count == 0:\n        return None\n    # Otherwise, return the solution as a tuple\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        x = -n / b\n        y = x\n        return (x, y)\n    else:\n        x1 = (-b + sqrt(b**2 - 4*a*n)) / (2*a)\n        x2 = (-b - sqrt(b**2 - 4*a*n)) / (2*a)\n        if x1.is_integer() and x2.is_integer():\n            return (x1, x2)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if n % a == 0:\n        x = n // a\n        y = 1\n    elif n % b == 0:\n        x = 1\n        y = n // b\n    else:\n        x = (b * n) // (a - b)\n        y = (a * n) // (a - b)\n    if x * y == n:\n        return x, y\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Find the values of x and y that satisfy the equation\n    x = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n    y = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n\n    # Check if there is a solution\n    if x ** 2 + y ** 2 == n:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        x1 = (-b + math.sqrt(discriminant))/(2*a)\n        x2 = (-b - math.sqrt(discriminant))/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a is zero\n    if a == 0:\n        return None\n    \n    # Check if b is zero\n    if b == 0:\n        return (n // a, 0)\n    \n    # Calculate d\n    d = n // a - n // b\n    \n    # Calculate x\n    x = (d * b) // a\n    \n    # Calculate y\n    y = n - x * a\n    \n    # Check if y is zero\n    if y == 0:\n        return (x, 0)\n    \n    # Check if x is zero\n    if x == 0:\n        return (0, y)\n    \n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    d = b ** 2 - 4 * a * n\n    if d < 0:\n        return None\n    x1 = (-b + d ** 0.5) / (2 * a)\n    x2 = (-b - d ** 0.5) / (2 * a)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        if i*a + b*i == n:\n            return (i, n//i)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using a set to remove duplicates from list2\n    list2 = set(list2)\n    # Using a list comprehension to remove elements present in list1\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate over each element in list1\n    for i in range(len(list1)):\n        # if the element is present in list2, remove it from list1\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list2.remove(list2[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum of a series starting from 0 to n-x.\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n // 2):\n        series += (n - 2 * i)\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        print(\"The sum of the first\", n, \"terms of an arithmetic progression is:\", sum((2*i+1)**2 for i in range(n//2)))\n    else:\n        print(\"The sum of the first\", n, \"terms of an arithmetic progression is:\", sum((2*i+1) for i in range(n//2)))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return n - 2*sum_series(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nresult = sum_series(n)\nprint(f\"The sum of the series is: {result}\")"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum\n    s = 0\n    # Loop through the numbers from 0 to n // 2\n    for i in range(n // 2):\n        # Calculate the sum for the i-th term\n        term_sum = (n - 2*i)\n        # Add the term to the sum\n        s += term_sum\n    # Return the sum\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    # Calculate the length of each side\n    side = 2 * pi / l\n    for i in range(l):\n        # Calculate the x and y coordinates of each vertex of the polygon\n        x = s * tan(i * side)\n        y = s * (1 - tan(i * side))\n        area += x + y\n    area = 0.5 * s * s * area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\ns = float(input(\"Enter the side of the polygon: \"))\nl = float(input(\"Enter the number of sides of the polygon: \"))\n\narea = area_polygon(s, l)\n\nprint(\"The area of the polygon is:\", area)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l)*tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2)*(tan(pi/l))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        area += s * tan(angle * i * pi / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        area += s * tan(angle * i / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 1/2 * (s * (s - l) * tan(pi/l) + s * tan(pi/l) * tan(pi/l - l/s))\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = (i * 360) / l\n        area += s * tan(angle * pi / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(i*2*pi/l) ** 2)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    num = n\n    \n    while num > 1:\n        # Check if the number is divisible by 2\n        if num % 2 == 0:\n            divisor_sum += 2\n            num //= 2\n        else:\n            # If the number is not divisible by 2, check if it is divisible by odd numbers between 3 and sqrt(num)\n            for i in range(3, int(math.sqrt(num))+1, 2):\n                if num % i == 0:\n                    divisor_sum += i\n                    num //= i\n                    break\n            # If the number is not divisible by any odd number between 3 and sqrt(num) either, then check if it is divisible by odd numbers between 3 and sqrt(num)\n            if num > 1:\n                for i in range(3, int(math.sqrt(num))+1, 2):\n                    if num % i == 0:\n                        divisor_sum += i\n                        num //= i\n                        break\n    \n    if divisor_sum == sum([i for i in range(1, n+1) if n % i == 0]):\n        print(\"The sum of the divisors of\", n, \"is the same as the sum of the integers from 1 to\", n, \".\")\n    else:\n        print(\"The sum of the divisors of\", n, \"is different from the sum of the integers from 1 to\", n, \".\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.add(i)\n            if i!= n//i:\n                divs.add(n//i)\n    if len(divs) == 0:\n        return False\n    elif len(divs) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # Check if div_sum is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Get the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n    divs.sort()\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divs)\n\n    # Check if the sum of the divisors of n is the same as n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    \n    # Check if div_sum is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Determine the sum of the divisors of n\n    divs = [d for d in range(1, int(math.sqrt(n))+1) if n % d == 0]\n    return sum(divs) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the integer is the same,\n    and False otherwise.\n    '''\n    def sum_of_divisors(num):\n        '''\n        This function takes an integer as input and returns the sum of its divisors.\n        '''\n        divisor_sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisor_sum += i\n                if i!= num/i:\n                    divisor_sum += num/i\n        return divisor_sum\n\n    divisor1 = sum_of_divisors(n)\n    divisor2 = sum_of_divisors(2*n)\n\n    return divisor1 == divisor2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    divisors = [1]\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n //= divisor\n            divisor += 1\n        else:\n            divisor += 1\n    divisors.append(n)\n    return sum(divisors) == n * (n + 1) // 2"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Iterate through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is an English alphabet character\n        if char.isalpha():\n            # If the character is not already in the dictionary\n            if char not in char_count:\n                # Add the character to the dictionary with a count of 1\n                char_count[char] = 1\n            # If the character is already in the dictionary, increment its count\n            else:\n                char_count[char] += 1\n\n    # Iterate through the dictionary and count the number of characters at each position in the alphabet\n    count = 0\n    for i in range(26):\n        if i+1 in char_count:\n            count += char_count[str(i+1)]\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            j = i.lower()\n            if str1[j] == str1[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    char_count = {}\n    for i in range(26):\n        char_count[chr(ord('a') + i)] = 0\n    for char in str1:\n        if char.lower() in char_count:\n            char_count[char.lower()] += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97).lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase to ignore case\n    str1 = str1.lower()\n    # create an empty dictionary to store the character counts\n    char_count = {}\n    # iterate over the characters in the string\n    for char in str1:\n        # check if the character is a letter\n        if char.isalpha():\n            # convert the character to its ASCII code\n            ascii_code = ord(char)\n            # add 1 to the count for the letter at the current position\n            char_count[ascii_code] = char_count.get(ascii_code, 0) + 1\n    # return the character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    count = {}\n    for i, char in enumerate(str1.lower()):\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitive comparison\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # Convert the character to its ASCII code\n            ascii_code = ord(char)\n            # Check if the ASCII code is in the dictionary\n            if ascii_code in char_count:\n                # Increment the count if it is already in the dictionary\n                char_count[ascii_code] += 1\n            else:\n                # Otherwise, add the character and its count to the dictionary\n                char_count[ascii_code] = 1\n\n    # Loop through the dictionary and return the count of characters at each position in the English alphabet\n    for ascii_code in range(ord('a'), ord('z') + 1):\n        if ascii_code in char_count:\n            print(chr(ascii_code), char_count[ascii_code])"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of each character in the English alphabet\n    english_char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char in english_char_count:\n            english_char_count[char] += 1\n\n    # Iterate through the dictionary and print the count of each character\n    for char, count in english_char_count.items():\n        print(f\"The character '{char}' occurs {count} times in the string '{str1}'.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create an empty dictionary to store the frequency of characters\n    freq_dict = {}\n\n    # Iterate over the characters in the string\n    for char in str1:\n        # If the character is a letter, update the frequency in the dictionary\n        if char.isalpha():\n            char = char.lower()\n            if char in freq_dict:\n                freq_dict[char] += 1\n            else:\n                freq_dict[char] = 1\n\n    # Calculate the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in freq_dict:\n        # If the character occurs at the same position in the string as in the English alphabet, increment the count\n        if freq_dict[char] == 1 and ord(char) in range(97, 123):\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and (A[i] ^ A[j]) in A:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use binary search to find the smallest power of 2 greater than or equal to n\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid == n:\n            high = mid\n        elif mid < n:\n            low = mid + 1\n        else:\n            high = mid\n    return high"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to an integer\n    n = int(n)\n    \n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result variable to n\n    result = n\n    \n    # Loop until the result is a power of 2\n    while result & (result - 1)!= 0: \n        # Increment the result by 1\n        result += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n - 1):\n        n = n | (n & -n)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to the input integer.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power = 2 * power\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to a given number n.\n    \"\"\"\n    while n & (n-1)!= 0: # check if n is a power of 2\n        n += 1\n    return n # return n if it is a power of 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the least significant bit set to 1 (i.e., the next power of 2)\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return n\n\n    # Find the power of 2 that is less than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Double the power until it is greater than or equal to n\n    while power >= n:\n        power >>= 1\n\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a: \n        if num == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    This function counts the number of occurrences of a given number x in a given list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0 # initialize count to 0\n    \n    for i in a: \n        if i == x: \n            count += 1 # increment count if x is found in a\n    \n    return count # return the final count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list and a number.\n    It returns the number of occurrences of the number in the list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum_of_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_of_range += i\n\n    return sum_of_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the list and add the elements within the specified range\n    for i in range(len(list1)):\n        if m <= i <= n:\n            sum += list1[i]\n            \n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n + 1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices `m` and `n` and returns the sum of the numbers in the list within the range specified by those indices.\n    \"\"\"\n    # Check if indices are valid\n    if m < 0 or m >= len(lst) or n < 0 or n >= len(lst) or m > n:\n        raise ValueError(\"Invalid indices.\")\n\n    # Initialize a variable to store the sum\n    sum_val = 0\n\n    # Loop through the list and add up the values within the range\n    for i in range(m, n+1):\n        sum_val += lst[i]\n\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the semi-perimeter\n    b = a / 2\n    \n    # use the formula for the area of a right triangle to calculate the area of the pentagon\n    area = (5 * b * b) / 2\n    \n    # calculate the perimeter of the pentagon using the formula for the circumference\n    perimeter = 5 * a\n    \n    # print the results\n    print(\"The perimeter of the regular pentagon is\", perimeter)\n    print(\"The area of the pentagon is\", area)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    perimeter = circumference * 5 / 4\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Use the formula for the perimeter of a regular pentagon:\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a  # 5 is the number of sides of a regular pentagon\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        index = s.find('std', start)\n        if index == -1:\n            break\n        else:\n            count += 1\n            start = index + 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple and check its type\n    first_element = type(test_tuple[0])\n    # Loop through the rest of the tuple and check if their types match the first element\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n    # If we get here, all elements have the same data type, so we return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    # loop through the tuple and get the data type of each element\n    element_types = []\n    for element in test_tuple:\n        element_types.append(type(element))\n    # check if all the data types are same or not\n    if all(x == element_types[0] for x in element_types):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])  # getting the data type of the first element of the tuple\n    for element in test_tuple:\n        if type(element)!= data_type:  # checking if the element has different data type from the first element\n            return False  # if not, return False\n    return True  # if all the elements have same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initializing variable to store the type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    # looping through the rest of the tuple elements and checking if they have same type or not\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # initialize a dictionary to store the data type count of each element in the tuple\n    count = {}\n\n    # iterate over each element in the tuple\n    for element in test_tuple:\n        # check if the element is a string\n        if type(element) == str:\n            # if it is a string, check if the string is already in the dictionary\n            if element in count:\n                # if it is, increment the count of the string in the dictionary\n                count[element] += 1\n            else:\n                # if it isn't, add the string to the dictionary with a count of 1\n                count[element] = 1\n        # if the element is not a string, check if it is already in the dictionary\n        elif element in count:\n            # if it is, increment the count of the element in the dictionary\n            count[element] += 1\n        else:\n            # if it isn't, add the element to the dictionary with a count of 1\n            count[element] = 1\n\n    # iterate over the dictionary and check if all the counts are equal to 1\n    all_unique = True\n    for count in count.values():\n        if count!= 1:\n            all_unique = False\n            break\n\n    # if all the counts are equal to 1, return True, indicating that all elements in the tuple have same data type\n    return all_unique"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a variable to keep track of the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    # Iterate over all the elements in the tuple\n    for item in test_tuple:\n        # Check if the data type of the current element is the same as the data type of the first element\n        if type(item)!= data_type:\n            return False\n    # If all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count and candidate to 0\n    count = 0\n    candidate = None\n\n    # Iterate over the array\n    for num in arr:\n\n        # If the current number is the same as the candidate, increment the count\n        if num == candidate:\n            count += 1\n\n        # If the count reaches n/2, return True\n        elif count == n//2:\n            return True\n\n        # If the current number is greater than the candidate, reset the count and candidate\n        elif num > candidate:\n            count = 1\n            candidate = num\n\n    # If the loop completes without finding a majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > n/2:\n            return True\n        elif count == 0:\n            count += 1\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count and candidate variable\n    count = 0\n    candidate = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        \n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        \n        # If the count exceeds n/2, return True\n        elif count > n/2:\n            return True\n        \n        # Otherwise, update the candidate\n        else:\n            candidate = arr[i]\n    \n    # If the loop completes, return False because the element is not the majority\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 # find the least significant bit and add it to the count\n        n >>= 1 # shift the number to the right by one bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] if i%2==0 else '' for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the even index values\n    even_str = ''\n    # Loop through each character of the input string\n    for char in str:\n        # If the index of the character is odd, append it to the even string\n        if (len(even_str) % 2) == 1:\n            even_str += char\n    # Return the even string\n    return even_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = [i for i, char in enumerate(str) if i % 2!= 0]\n    new_str = \"\".join([char for i, char in enumerate(str) if i not in odd_index_values])\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    :param str: A string whose characters need to be removed.\n    :return: A new string with the odd index values removed.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters with odd index values from the given string.\n\n    :param str: A string.\n    :return: A new string without the odd index values.\n    \"\"\"\n    odd_indices = [i for i in range(len(str)) if i % 2!= 0]\n    return ''.join([str[i] for i in range(len(str)) if i not in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str)\n    # Initialize an empty string to store the final string\n    final_str = ''\n    # Loop through the list of characters and append the even index characters to the final string\n    for i in range(0, len(char_list), 2):\n        final_str += char_list[i]\n    # Return the final string\n    return final_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for char in str:\n        if ord(char) % 2 == 1:\n            result += char\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Check if all three numbers are integers\n    if type(a)!= int or type(b)!= int or type(c)!= int:\n        print(\"Error: All three numbers must be integers.\")\n        return None\n    \n    # Find the minimum of the three numbers using conditional operator\n    min_num = min(a, b, c)\n    \n    # Return the minimum number\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n: An integer number denoting the number of bits.\n        l: An integer number denoting the lower bound of the range.\n        r: An integer number denoting the upper bound of the range.\n\n    Returns:\n        A boolean value indicating whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a boolean variable to check whether all the bits are unset or not in the given range\n    all_unset = True\n\n    # Iterate through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check if the bit is set or not\n        if ((n >> i) & 1)!= 0:\n            # If the bit is set, then all the bits are unset\n            all_unset = False\n            break\n\n    # Return the result\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the count of set bits to 0\n    count = 0\n\n    # Iterate through all the bits in the range\n    for i in range(l,r+1):\n\n        # Check if the current bit is set\n        if (n & (1<<i)):\n\n            # Increment the count of set bits\n            count += 1\n\n    # Check if all the bits are unset in the given range\n    if count == 0:\n\n        # Return True\n        return True\n\n    # Return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0:\n        all_unset = True\n        for i in range(l, r+1):\n            if n & (1 << i):\n                all_unset = False\n                break\n        return all_unset\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1')!= n:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # iterate through each bit of the number from left to right\n    for bit in bin(n)[2:]:\n        # check if the bit is 1\n        if int(bit) == 1:\n            # if a bit is set, return False\n            return False\n\n    # if all bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): An integer with n bits.\n    l (int): The least significant bit to check.\n    r (int): The most significant bit to check.\n\n    Returns:\n    bool: True if all bits are set in the given range, False otherwise.\n    \"\"\"\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return ((n & mask) == mask)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check if all bits are set or unset in the range\n    if n == 0:\n        if l == 1:\n            return True\n        else:\n            return False\n\n    # If there is only one bit left, check if it is set or unset in the range\n    if n == 1:\n        if l == 0:\n            return True\n        else:\n            return False\n\n    # Check if the last bit of the number is set or unset in the range\n    if n % 2 == 1:\n        if l == 0:\n            return True\n        else:\n            return False\n\n    # If the last bit of the number is unset, check if all bits before it are set or unset in the range\n    if n % 2 == 0:\n        if l == 0:\n            return True\n        else:\n            return all_Bits_Set_In_The_Given_Range(n//2, l, r)\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the number of bits set in the range\n    count = 0\n    for i in range(l,r+1):\n        count += bin(n & i).count('1')\n    # Check if all the bits are unset in the range\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to binary format\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    \n    # Convert the given number to binary format\n    binary_n = bin(n)[2:]\n    \n    # Remove all the leading zeros from the binary numbers\n    binary_l = binary_l.lstrip('0')\n    binary_r = binary_r.lstrip('0')\n    binary_n = binary_n.lstrip('0')\n    \n    # Check whether all the bits in the binary number are set or not\n    if binary_n == binary_l and binary_n == binary_r:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the result variable to True\n    result = True\n    # Loop through the range [l, r]\n    for i in range(l, r+1):\n        # Check if the i-th bit is set in n\n        if (n & (1 << i))!= 0:\n            # If it is, set the result to False and break out of the loop\n            result = False\n            break\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize variables\n    negative = 0\n    positive = 0\n\n    # loop through array\n    for i in range(len(arr)):\n\n        # check if element is negative\n        if arr[i] < 0:\n\n            # if negative, increment negative counter\n            negative += 1\n\n        else:\n\n            # if positive, increment positive counter\n            positive += 1\n\n    # if n is greater than positive elements, set n to positive elements\n    if n > positive:\n        n = positive\n\n    # initialize negative index and positive index\n    neg_index = 0\n    pos_index = 0\n\n    # loop through array again and re-arrange elements\n    for i in range(len(arr)):\n\n        # check if element is negative\n        if arr[i] < 0:\n\n            # if negative, move negative elements to index 0\n            arr[neg_index] = arr[i]\n            neg_index += 1\n\n        else:\n\n            # if positive, move positive elements to index n\n            arr[pos_index] = arr[i]\n            pos_index += 1\n\n        # if we have reached n negative elements, move to next n positive elements\n        if neg_index >= n:\n            neg_index = 0\n            pos_index += n\n\n    # return modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables\n    negative_count = 0\n    positive_count = 0\n    positive_index = 0\n    negative_index = n\n\n    # loop through the array\n    for i in range(n, len(arr)):\n        # check if the current element is negative\n        if arr[i] < 0:\n            # if negative, increment negative count and move to next position\n            negative_count += 1\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            negative_index += 1\n        else:\n            # if positive, increment positive count and move to next position\n            positive_count += 1\n            arr[i], arr[positive_index] = arr[positive_index], arr[i]\n            positive_index += 1\n\n    # add the remaining positive elements to the end of the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negative_count += 1\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            negative_index += 1\n\n    # remove the excessive negative elements\n    for i in range(negative_index, n):\n        arr.pop()\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Iterate over the array and add each element to the appropriate list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Sort the negative list in ascending order\n    negative.sort()\n\n    # Iterate over the array and add each element to the appropriate position in the new array\n    new_arr = []\n    i = 0\n    for j in range(n):\n        if i < len(negative):\n            new_arr.append(negative[i])\n            i += 1\n        else:\n            new_arr.append(positive[j-i])\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Convert the array to a set to easily remove duplicates\n    unique_set = set(arr)\n    # Create a new empty array to store the re-arranged elements\n    new_arr = []\n    \n    # Loop through the array and add negative elements to the new_arr and positive elements to the original array\n    for num in unique_set:\n        if num < 0:\n            new_arr.append(num)\n            arr.remove(num)\n        elif num >= 0:\n            arr.remove(num)\n    \n    # Add the remaining positive elements to the new_arr\n    new_arr.extend(arr)\n    \n    # Return the new_arr\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to hold the negative and positive elements\n    negative = []\n    positive = []\n    \n    # Loop through the array and add elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    # Re-arrange the negative and positive lists to preserve the relative order\n    negative.sort(reverse=True)\n    positive.sort()\n    \n    # Merge the negative and positive lists into a single list and return it\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for the negative elements and one for the positive elements\n    i, j = 0, 0\n    \n    # Traverse the array from left to right\n    while j < len(arr):\n        # If the current element is negative, increment the negative pointer\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        # If the current element is positive, increment the positive pointer\n        else:\n            j += 1\n    \n    # Reverse the array from the negative pointer to the end\n    arr[i:], arr[:i] = arr[:i][::-1], arr[i:]\n    \n    # Return the final array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # swap negative numbers with first n positive numbers\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[0] = arr[0], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one for the first positive element and another for the first negative element.\n    i, j = 0, 0\n\n    # Traverse the array and swap elements if the difference between i and j is n.\n    while j < len(arr):\n        if arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n\n    # Traverse the array again to rearrange the remaining elements.\n    while i < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n\n    # Return the modified array.\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for each direction\n    i, j = 0, n - 1\n    \n    # Iterate over the array from the end, swapping elements as needed\n    while i < j:\n        # If the element at the current index is negative, move it to the left\n        if arr[i] < 0:\n            i += 1\n            continue\n        # If the element at the current index is positive, move it to the right\n        elif arr[j] > 0:\n            j -= 1\n            continue\n        # If the element at the current index is zero, move it to the left and continue\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n            \n    # Return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',''+char+' ')"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    # replace all blanks with the specified character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\" % char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if char!='' else str1[i] for i in range(len(str1))])"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n\n    max_heap = [0] * n\n    \n    # Add the first n elements of the list to the max heap\n    for i in range(n):\n        heapq.heappushpop(max_heap, lst.pop())\n        \n    # Return the max heap as a list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a max-heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    \n    # Fill the max-heap with the remaining items\n    for i in range(n, len(list1)):\n        heapq.heappush(max_heap, -list1[i])\n    \n    # Extract the n largest items from the max-heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to store the largest n elements of the list\n    min_heap = []\n    # Use a max heap to store the smallest n elements of the list\n    max_heap = []\n    \n    for i in list1:\n        if len(min_heap) < n:\n            # Add i to min_heap if its size is less than n\n            heapq.heappush(min_heap, i)\n        else:\n            # Add i to max_heap if its size is greater than n\n            if i > min_heap[0]:\n                heapq.heappushpop(max_heap, i)\n    # Extract the largest n elements from min_heap and add them to a new list\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    # Extract the n largest items from the list\n    result = [heapq.heappop(max_heap) for i in range(n)]\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize a min heap of size n\n    min_heap = []\n    # Iterate over the list and push each element into the min heap\n    for item in list1:\n        heapq.heappush(min_heap, item)\n    # Pop n elements from the heap and return the result as a list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n\n    # Return the top n elements of the sorted list\n    return sorted_list[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n    \n    lateral_area = 2*r*h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    surface_area = 2 * pi * r * h\n    print(\"The lateral surface area of the cylinder is:\",surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area\n    lateral_sa = 2*r*h\n    \n    # return the lateral surface area\n    return lateral_sa"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    LSA = 2 * pi * r * h\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h  # Lateral surface area = 2r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r * r + math.pi * r * h + math.pi * r * h + 2 * math.pi * r * h * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the lateral surface area\n    lateral_area = math.pi*(r**2) + 2*math.pi*r*h\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r * h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # returning the cube of the side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(128):\n        if (n & (1 << i))!= 0:\n            if i % 2 == 0:\n                result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits \n    even_bits = []\n    # Traverse through each bit of the number using a loop \n    for i in range(32): \n        # Check if the current bit is an even bit \n        if n & 1 == 0: \n            # If it is, append it to the even_bits list \n            even_bits.append(i) \n            # Set the current bit to 1 to mark it as set \n            n = n ^ (1 << i) \n    # Return the number with even bits set to 1 \n    return n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    while n!= 0:\n        even_bits |= n & 1\n        n >>= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            result |= 1 << i\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a counter variable to keep track of the number of even bits \n    count = 0\n    # loop through each bit of the given number\n    for i in range(32): \n        # if the current bit is even, set its corresponding bit in the result to 1\n        if n & (1 << i): \n            count += 1\n            n |= (1 << i) \n    # return the result\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        n &= n - 1 # clear the least significant set bit \n        n |= (n & 1) << 1 # set the even bit to 1 and shift it to the next position \n    return n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert binary number to list of digits\n    binary_list = [int(digit) for digit in bin(n)[2:]]\n    # loop through the list and set even bits to 1\n    for i in range(len(binary_list)):\n        if binary_list[i] == 0:\n            binary_list[i] = 1\n        else:\n            binary_list[i] = 0\n    # convert list of digits back to binary number\n    even_set_binary = ''.join([str(digit) for digit in binary_list])\n    # convert binary number to integer and return result\n    return int(even_set_binary, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0b000000000000000000000000000000\n    even_bits = even_bits | (even_bits << 1)\n    even_bits = even_bits | (even_bits << 2)\n    even_bits = even_bits | (even_bits << 4)\n    even_bits = even_bits | (even_bits << 8)\n    even_bits = even_bits | (even_bits << 16)\n    n = n | even_bits\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits \n    even_bits = [] \n    # Iterate through the bits of the given number and append the even bits to the list \n    for i in range(32): \n        if (n >> i) & 1 == 0: \n            even_bits.append(i) \n    # Set all the even bits of the given number to 1 \n    for i in even_bits: \n        n = n | (1 << i) \n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the integer to binary and split it into individual bits\n    binary_number = bin(n)[2:]\n    # Split the binary number into individual bits\n    binary_bits = [int(bit) for bit in binary_number]\n\n    # Iterate over the individual bits and set the even bits to 1\n    for i, bit in enumerate(binary_bits):\n        if i % 2 == 0:\n            binary_bits[i] = 1\n\n    # Convert the binary bits back into a single integer and return it\n    return int(\"\".join(map(str, binary_bits)), 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter function from the collections module to count the occurrences of each unique tuple\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = counter.most_common()\n    # Return the dictionary\n    return dict(result)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tuple_item in test_list:\n        if tuple_item in count_dict:\n            count_dict[tuple_item] += 1\n        else:\n            count_dict[tuple_item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        count = count_dict.get(tup, 0)\n        count_dict[tup] = count + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter() function from the collections module to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # Create an empty dictionary to store the results\n    result_dict = {}\n    # Loop through each tuple and its count in the Counter object\n    for key, value in counter.items():\n        # Add the key-value pair to the result_dict dictionary\n        result_dict[key] = value\n    # Return the result_dict dictionary\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrences of each tuple\n    count_dict = {}\n    # Iterate through the test list\n    for item in test_list:\n        # Check if the tuple is already in the dictionary\n        if item in count_dict:\n            # Increment the count for this tuple\n            count_dict[item] += 1\n        else:\n            # Add the tuple and its count to the dictionary\n            count_dict[item] = 1\n    # Return the dictionary of occurrences\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter.update([item])\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize the count variable\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible ending position for the substring\n        for j in range(i, len(str)):\n            # Add 1 to the count if the substring is not empty\n            if str[i:j+1]!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j].strip()!= '': \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through each character of the string\n    for i in range(len(str)):\n\n        # Initialize start and end indices of substring\n        start = i\n        end = i\n\n        # Check for non-empty substrings\n        while start >= 0 and str[start] == str[end]:\n            count += 1\n            start -= 1\n            end += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Convert the given string to lowercase\n    str = str.lower()\n\n    # Initialize a count variable to keep track of the number of non-empty substrings\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through all possible substrings starting from the current index\n        for j in range(i+1, len(str)+1):\n            # If the substring is not empty, increment the count variable\n            if len(str[i:j]) > 0:\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Initialize count for each substring\n        count_substring = 0\n\n        # Loop through each character after the current one\n        for j in range(i+1, len(str)+1):\n\n            # If the substring is non-empty and contains the current character\n            if str[i:j]!= '' and str[i] in str[i:j]:\n\n                # Increment count\n                count_substring += 1\n\n        # Increment the count for the current substring\n        count += count_substring\n\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    # Initialize the count variable to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible substring starting at the current index\n        for j in range(i+1, len(str)+1):\n            # Add 1 to the count variable for each substring found\n            count += 1\n    \n    # Return the final count value\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        raise ValueError(\"m should be greater than or equal to 2\")\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n\n    # Initialize the count and an empty list to store the sequences\n    count = 0\n    sequences = []\n\n    # Iterate through all possible combinations of elements\n    for i in range(2, n + 1):\n        for j in range(1, m):\n            if i <= 2 * j:\n                count += 1\n            else:\n                break\n        if j == m:\n            sequences.append(i)\n\n    return count, sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(n+1):\n        for j in range(2,m):\n            if (j-i)%2 == 0 and i+1 <= n and (j-i)/2 <= n:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2 * (i - 1) <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize the count of sequences\n    count = 0\n    \n    # initialize the first element of the sequence\n    prev_element = 2\n    \n    # loop through all elements in the sequence\n    for i in range(n):\n        # check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if prev_element >= 2*prev_element <= m:\n            count += 1\n        \n        # update the previous element to the current element\n        prev_element = i+1\n        \n    # return the count of sequences found\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Calculate the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n    count = 0\n    for i in range(2, m + 1):\n        if i % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the number of possible sequences to 0\n    num_sequences = 0\n    # initialize the previous element to 0\n    prev_element = 0\n    # loop through all possible elements from 2 to m\n    for i in range(2, m+1):\n        # check if the element is between prev_element+2 and prev_element+m\n        if i >= prev_element+2 and i <= prev_element+m:\n            # if the element is valid, increment the number of sequences by 1\n            num_sequences += 1\n        # update the previous element to the current element\n        prev_element = i\n    # return the total number of sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, n+1):\n        if (i % 2) == 0:\n            if (i <= m) or ((i - 1) % 2) == 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(1,m+1):\n        if i >= 2*(n-1):\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the number of sequences\n    num_sequences = 0\n\n    # loop through all possible sequences of length n\n    for i in range(2, n+1):\n        # loop through all possible elements in the sequence\n        for j in range(i, n+1):\n            # check if the element is greater than or equal to twice the previous element and less than or equal to m\n            if j >= 2 * i and j <= m:\n                num_sequences += 1\n\n    # return the number of sequences\n    return num_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # initialize variables for count and length\n    count = 0\n    length = 1\n\n    # loop until length exceeds n\n    while length <= n:\n\n        # check if last element is less than or equal to twice the previous element but less than or equal to m\n        if m % 2 == 0 and length > 2:\n            count += 1\n        m -= 2\n\n        # increment length\n        length += 1\n\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1.append(list2[-1])\n        list1.pop()\n        list2.pop()\n    elif len(list1) > len(list2):\n        list2.append(list1[-1])\n        list1.pop()\n        list2.pop()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # if the length of list1 is less than or equal to 1, then list2 is the new list\n    if len(list1) <= 1:\n        return list2\n    # if the length of list1 is greater than 1, then list2 is the rest of the elements of list1\n    else:\n        return list1[:-1] + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of list2 is less than or equal to the length of list1\n    if len(list2) > len(list1):\n        # If the length of list2 is less than or equal to the length of list1, append the elements of list2 to the end of list1\n        list1.extend(list2)\n    # If the length of list2 is greater than the length of list1, truncate the last element of list1 and append the elements of list2 to the end of list1\n    else:\n        list1[-1] = list2[-1] + list1[-1]\n        list1.extend(list2[:-1])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Get the last index of the first list\n    last_index = len(list1) - 1\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # if the length of list1 is less than or equal to 1, return the list1 as it is\n    if len(list1) <= 1:\n        return list1\n    \n    # if the length of list1 is greater than 1, remove the last element and replace it with the elements of list2\n    list1 = list1[:-1] + list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    # Check if the length of the lists is equal\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return None\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    x = int(math.sqrt(N))\n    while True:\n        x += 1\n        if x*x > N:\n            return x\n        elif x*x == N:\n            return x-1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Finding the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Finding the square of the square root\n    square_sqrt_N = sqrt_N*sqrt_N\n\n    # Finding the difference between the given number and the square of the square root\n    difference = abs(N-square_sqrt_N)\n\n    # Finding the next perfect square\n    next_sqrt_N = sqrt_N + difference\n\n    # Returning the next perfect square\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # find the square root of the next perfect square greater than sqrt_N\n    sqrt_next_psq = math.sqrt(sqrt_N + 1)\n    # multiply sqrt_next_psq by the square root of N to get the next perfect square greater than sqrt_N\n    next_psq = sqrt_next_psq * sqrt_N\n    # return the next perfect square greater than sqrt_N\n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if N == 0:\n        return 1\n    \n    # if N is odd, then we will increment by 2\n    # if N is even, then we will increment by 1\n    if N % 2 == 0:\n        N = N + 1\n    \n    # we will calculate the square root of N using the math.sqrt() function\n    sqrt_N = math.sqrt(N)\n    \n    # if the square root is an integer, then N is already a perfect square, so we will return N+2\n    if sqrt_N.is_integer():\n        return N + 2\n    \n    # if the square root is not an integer, then N is not a perfect square, so we will find the next greater perfect square\n    # we will use a loop to iterate until we find a perfect square\n    while True:\n        sqrt_N += 1\n        \n        # if the square root is not an integer, then we will increment by 1 until we find a perfect square\n        if not sqrt_N.is_integer():\n            sqrt_N += 1\n        \n        # if we find a perfect square, then we will return sqrt_N\n        if sqrt_N**2 > N:\n            return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    return math.sqrt(n) == int(math.sqrt(n))\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n    # If N is a perfect square, return N+1.\n    if is_perfect_square(N):\n        return N + 1\n    \n    # Find the smallest perfect square that is greater than N.\n    i = 1\n    while True:\n        i += 1\n        if i*i > N:\n            break\n    \n    # Return the next perfect square after i*i.\n    return i*i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    N = int(N)\n    x = N\n    while True:\n        x += 1\n        y = int(math.sqrt(x))\n        if y*y == x:\n            return y + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # if the given number is already a perfect square, return it\n    if N * N == N:\n        return N\n\n    # calculate the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # calculate the integer part of the square root\n    sqrt_int = int(sqrt_N)\n\n    # calculate the remaining part of the square root\n    sqrt_rem = sqrt_N - sqrt_int * sqrt_int\n\n    # iterate until the next perfect square is found\n    while True:\n        # check if the remaining part is less than or equal to 0.001 (i.e. it's a perfect square)\n        if sqrt_rem <= 0.001:\n            # if it is, add 0.0001 to it to ensure that it is greater than the given number\n            if sqrt_rem == 0.001:\n                sqrt_rem += 0.0001\n            return sqrt_int * sqrt_int + sqrt_rem\n\n        # if the remaining part is greater than 0.001, add 1 to the integer part\n        sqrt_int += 1\n\n        # recalculate the square root of the integer part\n        sqrt_N = sqrt_int * sqrt_int\n\n        # recalculate the remaining part of the square root\n        sqrt_rem = sqrt_N - sqrt_int * sqrt_int\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    elif N % 4 == 0:\n        p = int(math.sqrt(N)) + 1\n    else:\n        p = int(math.sqrt(N))\n    if p*p == N:\n        return p*p + 1\n    else:\n        return p*p"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # If sqrt_N is an integer, return N+1\n    if sqrt_N.is_integer():\n        return N + 1\n\n    # Otherwise, round up to the nearest integer\n    else:\n        return math.ceil(sqrt_N) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    x = N\n    y = 1\n    \n    while y**2 <= x:\n        y += 1\n    \n    return y**2"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the subsequence is increasing\n        if arr[i] < arr[i+1]:\n            # Calculate the subsequence sum\n            current_sum = arr[i] + arr[i+1]\n            # Check if the subsequence sum is greater than the current max sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Check if the previous subsequence sum is greater than the current subsequence sum\n            elif current_sum < prev_sum:\n                prev_sum = current_sum\n        # Check if the subsequence is decreasing\n        else:\n            # Calculate the subsequence sum\n            current_sum = arr[i] + arr[i+1]\n            # Check if the subsequence sum is greater than the current max sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Check if the previous subsequence sum is greater than the current subsequence sum\n            elif current_sum > prev_sum:\n                prev_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    if n < 3:\n        return max(arr)\n\n    left = [0] * n\n    right = [0] * n\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            left[i] = left[i - 1] + arr[i]\n        else:\n            left[i] = 0\n\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            right[i] = right[i + 1] + arr[i]\n        else:\n            right[i] = 0\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, left[i] + right[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n\n    # check if all elements are the same\n    if n == 1:\n        return arr[0]\n\n    # check if the array is already a bitonic subsequence\n    if arr[0] < arr[1] and arr[-1] > arr[-2]:\n        return max(arr[0], arr[-1])\n\n    # check if the array is decreasing\n    if arr[1] < arr[2]:\n        # if the array is decreasing, then the subsequence starts from the first element\n        # and we need to check if the last element is increasing or not\n        for i in range(2, n):\n            if arr[i] >= arr[i-1]:\n                return max(arr[i], arr[i-1])\n\n    # if the array is increasing, then the subsequence starts from the last element\n    # and we need to check if the first element is decreasing or not\n    else:\n        for i in range(n-2, -1, -1):\n            if arr[i] <= arr[i+1]:\n                return max(arr[i], arr[i+1])\n\n    # if the array is not increasing or decreasing, then we need to find the subsequence that is increasing or decreasing\n    # and calculate the maximum sum of the subsequence\n    max_sum_increasing = max_sum_decreasing = float('-inf')\n    increasing_sum = 0\n    decreasing_sum = 0\n\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            increasing_sum += arr[i]\n            decreasing_sum += 0\n        else:\n            decreasing_sum += arr[i]\n            increasing_sum += 0\n        max_sum_increasing = max(max_sum_increasing, increasing_sum)\n        max_sum_decreasing = max(max_sum_decreasing, decreasing_sum)\n\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Convert the array to a list of lists, where each inner list contains consecutive elements of the original array\n    arr_list = [arr[i:i+2] for i in range(len(arr)-1)]\n\n    # Initialize variables to keep track of the maximum sum and the starting and ending indices of the current subsequence\n    max_sum = float('-inf')\n    start_index = 0\n    end_index = 0\n\n    # Iterate through the list of lists\n    for sublist in arr_list:\n        # If the sublist is increasing, update the maximum sum and the ending index\n        if all(sublist[i] < sublist[i+1] for i in range(len(sublist)-1)):\n            max_sum = max(max_sum, sum(sublist))\n            end_index = len(sublist) - 1\n        # If the sublist is decreasing, update the maximum sum and the starting index\n        elif all(sublist[i] > sublist[i+1] for i in range(len(sublist)-1)):\n            max_sum = max(max_sum, sum(sublist))\n            start_index = len(sublist) - 1\n\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            temp_sum = arr[i] + arr[j]\n            if temp_sum > max_sum and arr[i] < arr[j]:\n                max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is greater than the previous element, add it to the current sum\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        # If the current element is less than the previous element, subtract it from the current sum\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = arr[i]\n            \n    # Add the last element to the current sum\n    max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n    current_sum = 0\n    max_sum = 0\n\n    while left < right:\n        if arr[left] < arr[right]:\n            current_sum += arr[left]\n            left += 1\n        else:\n            current_sum -= arr[right]\n            right -= 1\n\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Calculate the running sum for each element in the array\n    running_sum = [0] * len(arr)\n    for i in range(len(arr)):\n        running_sum[i] = running_sum[i-1] + arr[i]\n\n    # Find the maximum sum of bitonic subsequences\n    max_sum = -float('inf')\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if running_sum[j] < running_sum[j+1] and arr[i-1] < arr[j]:\n                current_sum = running_sum[j] + running_sum[j+1] + arr[i-1] - arr[j]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array. \n    A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n == 1 else 0\n\n    left = 0\n    right = 1\n    max_sum = arr[0]\n\n    while right < n:\n        if arr[left] < arr[right]:\n            # Case 1: increasing subsequence\n            temp_sum = arr[left] + arr[right]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n        else:\n            # Case 2: decreasing subsequence\n            temp_sum = arr[left] - arr[right]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n        left += 1\n        right += 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        return max(arr[0] + max_sum(arr[1:]), max_sum(arr[2:]))\n    else:\n        return max(arr[1] + max_sum(arr[:-1]), max_sum(arr[1:]))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    x = 1\n    y = number / x\n\n    # iterate until convergence\n    while abs(y - x) > 0.00001:\n        x = y\n        y = number / x\n\n    # return the final result\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Initialize variables\n    guess = number // 2\n    prev_guess = guess\n    error = 0.000001\n\n    # Use the babylonian method to find the square root\n    while abs(guess*guess - number) >= error:\n        prev_guess = guess\n        guess = (guess + number/guess) // 2\n\n    # Return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = 0\n    y = number\n    error = 0.001\n\n    # loop until the difference between x and y is less than the error\n    while abs(x**2 - y) > error:\n        x = (x + y/x) / 2\n        y = number / x\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # check if number is negative\n    if number < 0:\n        return None\n\n    # initialize variable to keep track of current approximation\n    x = number / 2\n\n    # initialize variable to keep track of number of iterations\n    count = 0\n\n    # while loop to continue until the difference between x and its square is less than epsilon\n    while abs(x - x**2) > 0.000001:\n        # update count\n        count += 1\n\n        # update x to be the average of the current approximation and its half\n        x = (x + number / x) / 2\n\n    # return the final approximation\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Define the starting and ending values for the babylonian method\n    guess = 1\n    upper_limit = number\n\n    # Keep looping until we find the square root\n    while upper_limit >= guess:\n        guess = (guess + upper_limit / guess) / 2\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            upper_limit = guess\n        else:\n            guess = (guess + number / guess) / 2\n    \n    # If we've gone through the loop without finding the square root, return None\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variable for iteration count\n    count = 0\n    \n    # check if number is negative\n    if number < 0:\n        # set initial guess to half the absolute value of the number\n        guess = abs(number) / 2\n    else:\n        # set initial guess to the square root of the number\n        guess = number ** 0.5\n        \n    # iterate until the difference between the guess and the square root of the number is less than a certain tolerance\n    while abs(guess ** 2 - number) > 0.00001:\n        # update the guess by taking the average of the previous guess and the square of the current guess\n        guess = (guess + number / guess) / 2\n        \n        # increment iteration count\n        count += 1\n        \n    # return the final guess and the number of iterations\n    return guess, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Define the maximum number of iterations and the tolerance\n    MAX_ITERATIONS = 100\n    EPSILON = 1e-6\n\n    # Initialize the current guess and the number of iterations\n    guess = number / 2\n    iterations = 0\n\n    # Loop until the guess is within EPSILON of the square root of the number\n    while abs(guess**2 - number) > EPSILON and iterations < MAX_ITERATIONS:\n        guess = (guess + number / guess) / 2\n        iterations += 1\n\n    # If the guess is still not within EPSILON of the square root of the number, return None\n    if abs(guess**2 - number) > EPSILON:\n        return None\n\n    # Otherwise, return the square root of the number\n    else:\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    y = x/2\n    while y<0.000001 and y!=x:\n        x = y\n        y = (x + number/x)/2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    prev_guess = 0\n    tolerance = 0.001\n    \n    while abs(guess**2 - number) >= tolerance:\n        prev_guess = guess\n        guess = (guess + number/guess) / 2\n        \n    return prev_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    while low <= high:\n        mid = (low + high) // 2\n        root = mid ** 2\n        if root == number:\n            return mid\n        elif root < number:\n            low = mid + 1\n        else:\n            high = mid - 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    if len(str) <= 1:\n        return len(str)\n\n    max_len = 1\n    left = 0\n\n    for i in range(1, len(str)):\n        if str[i] == str[left]:\n            left += 1\n            max_len = max(max_len, left + lps(str[left:]))\n        else:\n            left = 0\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 1:\n        return 1\n\n    dp = [1] * n\n    max_len = 1\n    left = 0\n\n    for i in range(1, n):\n        if str[i] == str[left]:\n            dp[i] = dp[left] + 2\n            left = i\n        elif left == 0:\n            dp[i] = 1\n        else:\n            dp[i] = max(dp[left], dp[i - left - 1])\n\n        if dp[i] > max_len:\n            max_len = dp[i]\n\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize variables to store the lengths of palindrome subsequences\n    lps_table = [[0] * len(str) for _ in range(len(str))]\n\n    # Find lengths of palindrome subsequences for all possible substrings\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            # If characters are same, no need to check for palindrome subsequence\n            if str[i] == str[j]:\n                lps_table[i][j] = 1 + lps_table[i+1][j-1]\n            # If characters are different, check for palindrome subsequence using the Longest Common Subsequence method\n            else:\n                # Check for longest palindrome centered at i, j\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_table[0][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(s, i, j):\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef longest_palindrome_subsequence(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if s[0] == s[-1]:\n        return 2\n    table = [[0] * n for _ in range(n)]\n    max_len = 2\n    left = 0\n    right = 0\n    for i in range(n):\n        table[i][i] = 1\n        if i > 0 and s[i] == s[i-1]:\n            table[i][i-1] = 2\n            if 2 > max_len:\n                max_len = 2\n                left = i\n                right = i\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j] and table[i+1][j-1] == 1:\n                table[i][j] = 2\n                if 2 + length > max_len:\n                    max_len = 2 + length\n                    left = i\n                    right = j\n    return max_len\n\ndef lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if s[0] == s[-1]:\n        return 2\n    table = [[0] * n for _ in range(n)]\n    max_len = 2\n    left = 0\n    right = 0\n    for i in range(n):\n        table[i][i] = 1\n        if i > 0 and s[i] == s[i-1]:\n            table[i][i-1] = 2\n            if 2 > max_len:\n                max_len = 2\n                left = i\n                right = i\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j] and table[i+1][j-1] == 1:\n                table[i][j] = 2\n                if 2 + length > max_len:\n                    max_len = 2 + length\n                    left = i\n                    right = j\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str) \n    lps_length = [0] * n \n  \n    # Compute the length of the longest palindromic subsequence for substring \n    # of length i. \n    for i in range(n): \n        if i == 0 or str[i] == str[i-1]: \n            lps_length[i] = 1 \n        else: \n            lps_length[i] = 1 + lps_length[i-2] \n  \n    # Return the length of the longest palindromic subsequence. \n    return lps_length[n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize a 2D table to store the lengths of longest palindromic subsequences for substrings of length 1, 2,..., n\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n    \n    # Fill in the table in bottom-up manner\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence of length n\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store lengths of substrings\n    L = [[0] * n for _ in range(n)]\n\n    # base case\n    for i in range(n):\n        L[i][i] = 1\n\n    # Fill in the table in bottom up manner\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the length of LPS subsequence for all prefixes of the given string\n    L = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table with 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Fill in the rest of the table using dynamic programming\n    for length in range(3, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                L[start][end] = L[start+1][end-1] + 2\n            else:\n                L[start][end] = max(L[start+1][end], L[start][end-1])\n\n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store lengths of longest palindromic subsequences \n    table = [[0] * n for i in range(n)] \n  \n    # Base cases \n    for i in range(n): \n        table[i][i] = 1  # single character is always a palindrome \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            table[i][i-1] = 2  # if characters are same then they are part of a palindrome \n        else: \n            table[i][i-1] = 1  # if characters are different then only one character can be part of a palindrome \n    \n    # Fill table using dynamic programming \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i+length-1 \n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2 # if characters are same then add 2 to get a palindrome \n            else: \n                table[i][j] = max(table[i+1][j], table[i][j-1]) # if characters are different then take maximum of the two subproblems \n  \n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(s, left, right):\n    while left < right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Initialize two variables to store the length of the longest palindromic subsequences for odd and even length strings respectively\n    len_palindrome_odd = 0\n    len_palindrome_even = 1\n\n    # Iterate through all possible substrings of the string and check if they are palindromic or not\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the substring is a palindrome\n            if is_palindrome(s, i, j-1):\n                # If it is, update the length of the longest palindromic subsequence for odd and even length strings respectively\n                if j-i <= 1:\n                    len_palindrome_odd = j-i\n                    len_palindrome_even = j-i\n                else:\n                    len_palindrome_odd = max(len_palindrome_odd, lps(s[i:j]))\n                    len_palindrome_even = max(len_palindrome_even, lps(s[i:j]))\n\n    # Return the maximum length of the longest palindromic subsequences for odd and even length strings respectively\n    return max(len_palindrome_odd, len_palindrome_even)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_n_minus_one = 0\n    for i in range(n):\n        sum_of_n_minus_one += 1 / (i+1)\n    return sum_of_n_minus_one"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initializing sum to 0\n    sum = 0\n    \n    # iterating from 1 to n-1\n    for i in range(1, n):\n        # calculating the sum of reciprocals\n        sum += 1 / (i + 1)\n    \n    # returning the final sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_of_harmonic = 0\n    for i in range(1, n+1):\n        sum_of_harmonic += 1/i\n    return sum_of_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 / (n * (n - 1)) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/2 * n * (n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return 1 / (n - 1) + (n - 1) / (n - 2) + (n - 2) / (n - 3) +... + (n - i) / (n - i-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # initialize an empty list to store the intersection\n    intersection = []\n    \n    # iterate through the first array\n    for num1 in array_nums1:\n        # check if the number is present in the second array\n        if num1 in array_nums2:\n            # if it is present, add it to the intersection list\n            intersection.append(num1)\n    \n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of those two arrays.\n    '''\n    # Create a set of unique values in array_nums1\n    unique_nums1 = set(array_nums1)\n    \n    # Create an empty set to store the intersection of the two arrays\n    intersection = set()\n    \n    # Loop through array_nums2 and add the values that are in the unique values set to the intersection set\n    for num in array_nums2:\n        if num in unique_nums1:\n            intersection.add(num)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create a set of all the elements in the first array\n    set_nums1 = set(array_nums1)\n\n    # Create a set of all the elements in the second array\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # initialize an empty set to store the common elements\n    common = set()\n\n    # loop through each element in the first array\n    for num1 in array_nums1:\n        # check if the element exists in the second array\n        if num1 in array_nums2:\n            # if it does, add it to the common set\n            common.add(num1)\n\n    # convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from the second array to eliminate duplicates\n    set_nums2 = set(array_nums2)\n    \n    # Create an empty set to store the intersection\n    intersection = set()\n    \n    # Loop through the first array and add any elements that are in the set from the second array\n    for num in array_nums1:\n        if num in set_nums2:\n            intersection.add(num)\n    \n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1, so that we can easily check for membership\n    set_nums1 = set(array_nums1)\n    # Initialize an empty list to store the intersection\n    intersection = []\n    # Iterate over array_nums2, and add each element to intersection if it's in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n        array_nums1 (list): List of numbers.\n        array_nums2 (list): List of numbers.\n\n    Returns:\n        list: List of the common elements between the two arrays.\n    \"\"\"\n    common_elements = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_elements:\n            common_elements.append(num)\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through each element in array_nums1\n    for num in array_nums1:\n\n        # If the element is also in array_nums2, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new empty list to store the resulting list\n    result = []\n    # Loop through each element in the input list\n    for item in list:\n        # Append the element to the result list\n        result.append(item)\n        # Insert the element before the current item in the list\n        result.insert(list.index(item), element)\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Returns a new list with the element inserted before each element in lst.\n    \"\"\"\n    return [element] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        mag = abs(num)\n        phase = cmath.phase(num)\n        polar.append((mag, phase))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        print(f\"({r:.2f}, {phi:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        theta = cmath.phase(num)\n        print(f\"({real}, {imag}) (|r| = {mag}, theta = {theta})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n\n        # Add the polar coordinates to the list\n        polar_coordinates.append((magnitude, angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the list of their corresponding polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Get the magnitude of the complex number and its angle in radians\n        mag = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n\n        # Convert the angle to degrees and append to the polar coordinates list\n        polar_coordinates.append((mag, theta*180/cmath.pi))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        phase = cmath.phase(number)\n        polar_number = complex(magnitude, phase)\n        print(polar_number)\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each complex number in the input list\n    for number in numbers:\n        # Extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        \n        # Calculate the absolute value of the complex number\n        abs_num = abs(number)\n        \n        # Calculate the argument of the complex number\n        arg_num = cmath.phase(number)\n        \n        # Create a tuple with the polar coordinates of the complex number\n        polar_coords = (abs_num, arg_num)\n        \n        # Append the polar coordinates to the list of polar coordinates\n        polar_numbers.append(polar_coords)\n    \n    # Return the list of polar coordinates\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            r, theta = cmath.polar(number)\n            print(f\"{number} in polar coordinates: r = {r}, theta = {theta}\u00b0\")\n        else:\n            print(f\"{number} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        polar_numbers.append((real, imag))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        print(f\"{num} is in the form: {magnitude} * exp({angle} * pi / 180)\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Count the number of integer elements in a given list.\n\n    :param lst: A list of elements.\n    :return: The number of integer elements in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(combinations_with_replacement(l[i:j], n))!= 0:\n                comb_list.append(tuple(combinations_with_replacement(l[i:j], n)))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            color_combination = tuple(l[i:j])\n            result.append(color_combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb = tuple(sorted(l[i:j]))\n            combinations.append(comb)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of the elements of the list\n    combinations = combinations_with_replacement(l, n)\n    # Convert the combinations into a list of tuples\n    result = list(combinations)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all possible combinations of length n with replacement\n    combinations = combinations_with_replacement(l, n)\n    # convert the combinations to tuples\n    combinations = tuple(combination for combination in combinations)\n    # return the list of combinations as a list of tuples\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if the number is prime by checking if it is divisible by any number between 2 and i-1\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            # If the number is not divisible by any number between 2 and i-1, it is a prime number\n            count += 1\n            \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # create a list of numbers from 2 to n (inclusive)\n    nums = list(range(2, n+1))\n    \n    # create a list to store the prime numbers\n    primes = []\n    \n    # iterate through the list of numbers\n    for num in nums:\n        \n        # check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # if the number is prime, add it to the list of primes\n        if is_prime:\n            primes.append(num)\n    \n    # return the number of primes found\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number n as input and returns the number of prime numbers less than the input number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    i = 2\n    \n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n            \n    if n > 1:\n        count += 1\n        \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes a non-negative number as input and returns the number of prime numbers less than the input number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Use a dictionary to compare the elements in the two tuples\n    max_dict = {}\n    for i in range(len(test_tup1)):\n        # Add the current element to the dictionary with its value as 0\n        max_dict[i] = (test_tup1[i], 0)\n    # Loop through the second tuple\n    for i in range(len(test_tup2)):\n        # If the element is not in the first tuple, add it to the dictionary with its value as 0\n        if i not in max_dict:\n            max_dict[i] = (test_tup2[i], 0)\n        # If the element is already in the first tuple, compare it with the current max element\n        else:\n            if test_tup2[i] > max_dict[i][0]:\n                max_dict[i] = (test_tup2[i], 0)\n    # Loop through the dictionary and find the max element\n    max_element = 0\n    for value in max_dict.values():\n        if value[1] > max_element:\n            max_element = value[1]\n    # Loop through the dictionary again and set the value of the max element to 1\n    for value in max_dict.values():\n        if value[1] == max_element:\n            value[1] = 1\n    # Find the indices of the max element in the first tuple\n    max_indices = []\n    for i, value in max_dict.items():\n        if value[1] == max_element:\n            max_indices.append(i)\n    # Sort the max_indices list in descending order\n    max_indices.sort(reverse=True)\n    # Loop through the max_indices list and update the values of the corresponding elements in the first tuple\n    for i in max_indices:\n        test_tup1[i] = max_dict[i][0]\n    # Return the updated first tuple\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value of each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n\n    # Find the maximum value of the two tuples\n    max_value = max(max_tup1, max_tup2)\n\n    # Return the maximum value of the two tuples\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples should have the same length.\")\n        return None\n    \n    # check if the input tuples have the same data type\n    if type(test_tup1[0])!= type(test_tup2[0]):\n        print(\"Both input tuples should have the same data type.\")\n        return None\n    \n    # create a new tuple to store the max values\n    max_tup = []\n    \n    # iterate over the tuple elements and find the max value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n            \n    # return the max tuple\n    return tuple(max_tup)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples should have the same length.\"\n    \n    max_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n            \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    if max_num1 > max_num2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Check if the length of the tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        \n        # Find the maximum value in each tuple\n        max_val1 = max(test_tup1)\n        max_val2 = max(test_tup2)\n        \n        # Check if the maximum value in the first tuple is greater than the maximum value in the second tuple\n        if max_val1 > max_val2:\n            \n            # Return the maximum value in the first tuple\n            return test_tup1\n        \n        else:\n            \n            # Return the maximum value in the second tuple\n            return test_tup2\n        \n    else:\n        \n        # If the length of the tuples is not equal, raise an error\n        raise ValueError(\"The two tuples must have the same length.\")"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple with the\n    maximum value for each element.\n    \"\"\"\n    # Initialize the maximum values for each element to negative infinity\n    max_tup1 = (float('-inf'), float('-inf'), float('-inf'))\n    max_tup2 = (float('-inf'), float('-inf'), float('-inf'))\n    \n    # Iterate over the tuples and compare each element with the current maximum\n    for i in range(3):\n        if test_tup1[i] > max_tup1[i]:\n            max_tup1 = test_tup1\n        if test_tup2[i] > max_tup2[i]:\n            max_tup2 = test_tup2\n    \n    # Return the maximum tuple found\n    return max_tup1 if max_tup1!= max_tup2 else max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Get the maximum value in each position of the input tuples\n    max1, max2 = max(test_tup1), max(test_tup2)\n\n    # Create a new tuple with the maximum values in each position\n    max_tup = (max1, max2)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the sum of the first tuple\n    sum1 = sum(test_tup1)\n    # Find the sum of the second tuple\n    sum2 = sum(test_tup2)\n    # Find the difference between the two sums\n    diff = abs(sum1 - sum2)\n    # If the difference is greater than 0, return the tuple with the highest sum\n    if diff > 0:\n        if sum1 > sum2:\n            return test_tup1\n        else:\n            return test_tup2\n    else:\n        # Otherwise, return the tuple with the highest element count\n        if len(test_tup1) > len(test_tup2):\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 1\n    prime = 2\n\n    # Loop through numbers until the nth prime number is found\n    while count!= n:\n        count = 0\n        # Loop through odd numbers from 3 to the square root of the nth prime number\n        for i in range(3, int(prime ** 0.5) + 1, 2):\n            if prime % i == 0:\n                count += 1\n                break\n        # If the count is still zero, the nth prime number is found\n        if count == 0:\n            break\n        # Increment the prime number\n        prime += 2\n\n    # Return the nth prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count to 0\n    count = 0\n    # Initialize the prime flag to True\n    prime = True\n    # Initialize the current number to 2\n    current = 2\n    # Iterate until count reaches n\n    while count < n:\n        # Check if the current number is prime\n        for i in range(2, int(current**0.5)+1):\n            # If the current number is divisible by i, it is not prime\n            if current % i == 0:\n                prime = False\n                break\n        # If the current number is prime, increment the count and update the current number\n        if prime:\n            count += 1\n            current += 1\n    # If the count is less than n, the nth newman\u2013shanks\u2013williams prime number is not found\n    if count < n:\n        print(\"The nth newman\u2013shanks\u2013williams prime number is not found\")\n    # Otherwise, print the nth newman\u2013shanks\u2013williams prime number\n    else:\n        print(current)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_newman_prime(n):\n        \"\"\"\n        A helper function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        current_num = 2\n        while current_num < n:\n            if is_prime(current_num):\n                return current_num\n            current_num += 1\n    \n    return nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 0\n    p = 2\n\n    # Check if n is greater than 1\n    if n <= 1:\n        return -1\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        if p % 2 == 0:\n            if p == 2:\n                prime = 2\n                count += 1\n            else:\n                for i in range(3, int(p**0.5)+1, 2):\n                    if p % i == 0:\n                        break\n                else:\n                    prime = p\n                    count += 1\n        p += 1\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize the first two newman-shanks-williams primes\n    p1 = 2\n    p2 = 3\n    # loop through the remaining numbers until we have n newman-shanks-williams primes\n    count = 0\n    while count < n:\n        # check if the next number is a newman-shanks-williams prime\n        if is_newman_prime(p1, p2):\n            count += 1\n        # update the next two newman-shanks-williams primes\n        p1 += 2\n        p2 += 4"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the newman-shanks-williams prime numbers\n    primes = []\n\n    # Initialize a counter variable for the number of newman-shanks-williams primes found so far\n    count = 0\n\n    # Check all numbers from 2 to n\n    for num in range(2, n + 1):\n\n        # Check if the number is a newman-shanks-williams prime\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        # If the number is a newman-shanks-williams prime, add it to the list of primes and increment the counter\n        if is_prime:\n            primes.append(num)\n            count += 1\n\n        # If the maximum number of newman-shanks-williams primes has been found, exit the loop\n        if count == n:\n            break\n\n    # If the maximum number of newman-shanks-williams primes has not been found, return None\n    if count < n:\n        return None\n\n    # Return the nth newman-shanks-williams prime number in the list of primes\n    return primes[n - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list to store the prime numbers\n    primes = []\n    # Iterate over all possible values of a\n    for a in range(1, n+1):\n        # Initialize a flag to check if a is a prime number\n        is_prime = True\n        # Iterate over all possible values of b\n        for b in range(2, int(n**0.5)+1):\n            # If a is divisible by b, then it is not a prime number\n            if a % b == 0:\n                is_prime = False\n                break\n        # If a is a prime number, add it to the list of primes\n        if is_prime:\n            primes.append(a)\n    # Return the nth prime number in the list of primes\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the newman-shanks-williams primes found\n    primes = []\n\n    # Loop through all possible primes up to 100,000\n    for i in range(2, 100001):\n        # Check if i is a newman-shanks-williams prime\n        if is_newman_shanks_williams(i):\n            # If it is, add it to the list of primes\n            primes.append(i)\n\n            # If the list of primes has reached the desired length, return the nth prime\n            if len(primes) == n:\n                return primes[-1]\n\n    # If the desired prime is not found, raise an error\n    raise ValueError(f\"The nth newman-shanks-williams prime is not found.\")\n\n\ndef is_newman_shanks_williams(n):\n    '''\n    Check if a number is a newman-shanks-williams prime.\n    '''\n    # Check if n is prime\n    if is_prime(n):\n        # Check if n is a newman-shanks-williams prime\n        if n >= 3:\n            return True\n\n    # Check if n is a newman-shanks-williams composite\n    else:\n        # Calculate the divisor of n\n        divisor = gcd(n, 5)\n\n        # Check if the divisor is 1, 3, or 5\n        if divisor in [1, 3, 5]:\n            return True\n\n    # If n is neither a newman-shanks-williams prime nor composite, return False\n    return False\n\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is divisible by any number between 2 and n-1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    # If n is not divisible by any number between 2 and n-1, it is prime\n    return True\n\n\ndef gcd(a, b):\n    '''\n    Find the greatest common divisor of two numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1: \n        return \"n must be greater than 1\" \n    elif n == 2: \n        return 2 \n    else: \n        i = 3 \n        while True: \n            if is_prime(i): \n                if i**2 > n: \n                    return i \n                elif i**2 < n: \n                    i += 2 \n                else: \n                    return i \n            else: \n                i += 2 \n\ndef is_prime(num): \n    if num < 2: \n        return False \n    for i in range(2, int(num**0.5) + 1): \n        if num % i == 0: \n            return False \n    return True "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize a variable to store the count of primes\n    count = 0\n\n    # Initialize a variable to store the last prime number\n    last_prime = 0\n\n    # Loop through the numbers from 2 to n\n    for num in range(2, n+1):\n        # Check if the number is prime\n        if is_prime(num):\n            # If it is prime, increment the count and update the last prime number\n            count += 1\n            last_prime = num\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return last_prime\n\ndef is_prime(num):\n    \"\"\"\n    Write a function to check if a given number is prime.\n    \"\"\"\n\n    # If the number is less than 2, it is not prime\n    if num < 2:\n        return False\n\n    # Loop through the numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        # If the number is divisible by any of these numbers, it is not prime\n        if num % i == 0:\n            return False\n\n    # If no number in the range of 2 to the square root of the number divides the number, it is prime\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have the same length\")\n        return\n    \n    # Initialize a new tuple to store the result\n    result_tup = ()\n    \n    # Perform element-wise division between the tuples\n    for i in range(len(test_tup1)):\n        # Check if the element in the first tuple is a number\n        if isinstance(test_tup1[i], (int, float)):\n            # Check if the element in the second tuple is a number\n            if isinstance(test_tup2[i], (int, float)):\n                # Perform element-wise division\n                result_tup += (test_tup1[i] / test_tup2[i],)\n            else:\n                print(\"The element in the second tuple must be a number\")\n                return\n        else:\n            print(\"The element in the first tuple must be a number\")\n            return\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples must be equal.\")\n    # loop through the tuples and perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have same length\")\n\n    # Perform element-wise division operation\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] / test_tup2[i])\n        return tuple(result)\n    except ZeroDivisionError:\n        return \"Error: Cannot divide by zero!\""
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Calculate the length of the first part of the list\n    part1_length = L\n\n    # Initialize two empty lists for the two parts\n    part1 = []\n    part2 = []\n\n    # Loop through the elements of the input list\n    for element in list1:\n        # If we have reached the first part of the list, add the element to the first list\n        if len(part1) < part1_length:\n            part1.append(element)\n        # Otherwise, add the element to the second list\n        else:\n            part2.append(element)\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([x for x in list1[:L]], [x for x in list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if L <= 0 or type(L)!= int:\n        raise ValueError(\"L must be a positive integer\")\n    # Check if the length of the list is greater than L\n    if len(list1) <= L:\n        raise ValueError(\"The length of the list must be greater than L\")\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: Length of L should be smaller than or equal to the length of the list.\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length_list1 = len(list1)\n    if length_list1 % 2 == 0:\n        mid = L\n    else:\n        mid = L - 1\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create empty lists to store the two parts of the list\n    part1 = []\n    part2 = []\n    \n    # Loop through the original list and add the elements to the corresponding part of the list\n    for i in range(len(lst)):\n        if i < L:\n            part1.append(lst[i])\n        else:\n            part2.append(lst[i])\n    \n    # Return the two parts of the list as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    # calculate dog's age in dog's years\n    years = h_age / 12\n    # round to 2 decimal places\n    years = round(years, 2)\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age = 7 + h_age * 2\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(height_in_inches):\n    '''\n    Write a function to calculate a dog's age in dog's years based on their height in inches.\n    '''\n    height_in_meters = height_in_inches / 39.37\n    age_in_years = height_in_meters / 12.0\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert height in inches to centimeters\n    h_age_cm = h_age * 2.54\n    \n    # Calculate age in dog years\n    age_dog_years = h_age_cm / 100\n    \n    # Return the age in dog years\n    return age_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's age in years based on the hour of their birth.\n    age_in_years = 7 * h_age\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 120"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age_years = h_age * 7\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * h_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    n_groups = n // step\n    if n % step!= 0:\n        n_groups += 1\n    result = []\n    for i in range(n_groups):\n        start = i * step\n        end = (i + 1) * step - 1 if i < n_groups - 1 else n - 1\n        result.append(S[start:end+1])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Use a slice to get the current sublist\n        sublist = S[i:i+step]\n        # Add the sublist to the result list\n        result.append(sublist)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create an empty list to hold the resulting lists\n    result = []\n    # loop through each index of the input list\n    for i in range(0, len(S), step):\n        # create a new list containing only the nth element of the original list\n        new_list = [S[i]]\n        # loop through the remaining elements of the original list and append them to the new list\n        for j in range(1, len(S[i:])+1, step):\n            new_list.append(S[i+j])\n        # append the new list to the result list\n        result.append(new_list)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize an empty list to store the split lists\n    split_lists = []\n    \n    # initialize a counter variable to keep track of the current element being processed\n    curr_elem = 0\n    \n    # loop through each element in the input list\n    for elem in S:\n        \n        # if the current element is a multiple of the desired step size, add it to the split list\n        if curr_elem % step == 0:\n            split_lists.append([elem])\n        \n        # increment the current element counter\n        curr_elem += 1\n    \n    # return the final split list\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    This function calculates the lateral surface area of a cube with side length l.\n    \"\"\"\n    surface_area = (6 * l**2) + (12 * l) + 8\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = (l**2 * 6) + (l**2 * 6) + (l**2 * 6)\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*l*l)*2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l + 12 * l * l + 8 * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # calculating the lateral surface area of a cube\n    area = 6 * l**2\n\n    # returning the lateral surface area of the cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_num = 1\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):  \n        sum += i**2  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    This function takes in an integer `n` and returns the sum of the squares of the first `n` odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1): \n        print('*' * i) "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the number of stars to 0\n    num_stars = 0\n    \n    # loop through each digit in the input number\n    for i in range(1, n+1):\n        # add 1 to the number of stars for each digit\n        num_stars += i\n    \n    return num_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return'  '\n    else:\n        star_num = ''\n        for i in range(1, n+1):\n            if i <= n//2:\n                star_num += '*'\n            else:\n                star_num +=''\n        return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # loop through the numbers 1 through n and print each number followed by a star\n    for i in range(1, n+1): \n        print(i, end=' ')\n        # print a star after each number\n        if i % 2 == 0: \n            print('*', end=' ')\n        else: \n            print(' ', end=' ')\n    # print a newline character after all the numbers have been printed\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count of stars\n    count = 1\n    # Calculate the number of stars\n    for i in range(1, n+1):\n        # Calculate the number of spaces needed for each star\n        spaces = n - i\n        # Print the stars and spaces\n        print(\"*\" * count + \" \" * spaces)\n        # Increment the count of stars\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return 'n should be a positive integer'\n    elif n == 1:\n        return '* '\n    else:\n        return '*'+ find_star_num(n-1) + '* '"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the star pattern\n    pattern = \"*\"\n    # Calculate the number of stars to print\n    num_stars = n * 2 - 1\n    # Create an empty string to store the output\n    output = \"\"\n    # Loop through each character in the pattern\n    for char in pattern:\n        # If the current character is an asterisk, append it to the output string n times\n        if char == \"*\":\n            output += char * num_stars\n        # If the current character is a space, append a newline character to the output string\n        elif char == \" \":\n            output += \"\\n\"\n    # Return the output string\n    return output"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the number of stars\n    stars = \"\"\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # add the number of stars to the string\n        stars += \"*\" * i\n    # return the string containing the stars\n    return stars"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    ascii_map = {'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122, '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57}\n\n    return ascii_map[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    elif isinstance(k, int):\n        if k < 0 or k > 127:\n            raise ValueError(\"The value must be between 0 and 127.\")\n        return k\n    else:\n        raise TypeError(\"The input must be a string or an integer.\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    print(\"The ascii value of the character\", k, \"is\", ascii_val)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        if len(k) == 1:\n            return ord(k)\n        else:\n            return -1\n    else:\n        return -1"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize sum and even_index variables\n    sum_even = 0\n    even_index = -1\n    \n    # Iterate through the list\n    for i in range(len(arr)):\n        # Check if the current element is even and at an even position\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            # Add the current element to the sum\n            sum_even += arr[i]\n            # Update the even_index variable\n            if even_index == -1:\n                even_index = i\n    \n    # Return the sum and even_index\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n        \n        if even_count == 2:\n            break\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n    return even_sum + even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions.\n    If the length of the list is odd, the last even number is returned.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n                \n    if even_index == 0 and len(arr) % 2 == 1:\n        return even_sum\n    elif even_index == 1 and len(arr) % 2 == 0:\n        return even_sum\n    elif even_index == len(arr) - 1 and len(arr) % 2 == 1:\n        return even_sum\n    else:\n        return even_sum + arr[-1]"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            sum_even += arr[index]\n        index += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        num = i * i * i * i * i\n        if num % 2 == 0:\n            sum += num\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [x for x in range(2, n+1, 2)]\n    power = 5\n    sum_of_powers = 0\n    for num in even_numbers:\n        sum_of_powers += num ** power\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even += i ** 5\n    return sum_even"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_tup1[i] -= test_tup2[test_tup2.index(test_tup1[i])]\n        else:\n            test_tup1[i] -= 1\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    sub_tup = tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n    \n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            binomial = math.comb(n, i)\n            sum_even += binomial\n    return sum_even\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2,n+1,2):\n        coeff_sum += math.comb(n,i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += math.comb(n, i) * 2**(i-1)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        binomial = math.factorial(n) // (math.factorial(i-1) * math.factorial(n-i+1))\n        sum += binomial\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return (even_binomial_Coeff_Sum(n-1) + 4*math.factorial(n-2))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    '''\n    #initialize the sum to 0\n    sum = 0\n    \n    #loop through the even numbers from 0 to n-1\n    for i in range(0, n):\n        #calculate the even index binomial coefficient using math.comb function\n        coeff = math.comb(n, i)\n        \n        #add the even index binomial coefficient to the sum if it is even\n        if i % 2 == 0:\n            sum += coeff\n            \n    #return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        for j in range(2, i // 2 + 1):\n            if i % 2 == 0:\n                sum += binomial(i, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    even_coeff_sum = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_coeff_sum += math.comb(n, i)\n\n    return even_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * r**2 * h)\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r * r  # Formula for the area of a circle\n    volume = area * h / 3  # Formula for the volume of a cylinder\n    \n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    # Calculate the volume of the cylinder\n    volume = (1/3) * 3.14 * r**2 * h\n    # Return the volume\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    # calculate the volume using the formula V = pi * r^2 * h\n    V = (3.14 * r ** 2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # create an empty list to store the filtered items\n    result = []\n\n    # loop through each key-value pair in the dictionary\n    for key, value in dict.items():\n        # check if the value is greater than or equal to n\n        if value >= n:\n            # add the key-value pair to the result list\n            result.append((key, value))\n\n    # return the filtered dictionary\n    return dict(result)"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            return count\n        count += 1"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        elif test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i, element in enumerate(test_tup):\n        if element == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] < test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    while decagonal <= n:\n        if decagonal % 2!= 0:\n            decagonal += 1\n        else:\n            decagonal += 2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # initialize the variables\n    dec_num = 1\n    num = 1\n\n    # loop through the numbers starting with 1\n    while num <= n:\n\n        # check if the number is a decagonal number\n        if num*2 == dec_num:\n            return True\n\n        # increment the variables\n        num += 1\n        dec_num += 2\n\n    # if the number is not found, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * ((3*n**2) - 1) / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Find the number of rows and columns of the decagonal grid\n    rows = n // 2 + 1\n    cols = n // 2 + 1\n\n    # Initialize the decagonal number to 1\n    decagonal = 1\n\n    # Loop through each row and column\n    for row in range(rows):\n        for col in range(cols):\n            # Multiply the row and column by 2 to get the corresponding position in the grid\n            pos = row + col * 2\n\n            # If the position is equal to n, then this is the nth decagonal number\n            if pos == n:\n                return True\n\n            # If the position is less than n, then we need to add the sum of the row and column\n            elif pos < n:\n                decagonal += pos\n\n    # If we have not returned yet, then the nth decagonal number does not exist\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 0\n    row = 1\n    column = 1\n    for i in range(n):\n        decagonal_number += row + column\n        row += 1\n        column += 2\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i+j == 2*n:\n                return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    \n    for i in range(1, n+1):\n        decagonal_num = decagonal_num * (10**i)\n    \n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # define the first decagonal number\n    decagonal = 1\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the current number to the previous number\n        decagonal += i\n        # print the current number\n        print(decagonal)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    else:\n        return (n*4 - 1) * (12 * n - 1) // 6"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the sum of the first n odd numbers\n    sum_odd_numbers = sum(range(1, n+1, 2))\n    # subtract 1 from the sum to get the nth decagonal number\n    nth_decagonal_number = sum_odd_numbers - 1\n    \n    return nth_decagonal_number"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # Initialize a variable to store the index of the element\n    index = -1\n\n    # Loop through the array and compare the element with each element in the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # If the element is found, set the index variable to the current index position\n            index = i\n            break\n\n    # Return a tuple containing a boolean indicating if the element was found and the index position of the element\n    return (True, index) if index!= -1 else (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements of the list are unique, otherwise False.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Loop through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n    # Check if the set is empty or not\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set of the elements of the list\n    unique_set = set(test_list)\n\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty set to store the unique elements\n    unique_set = set()\n    \n    # iterate through the list\n    for element in test_list:\n        # if the element is already in the set, return False\n        if element in unique_set:\n            return False\n        \n        # otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n    \n    # if all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n        nums1 (list): List of numbers.\n        nums2 (list): List of numbers.\n\n    Returns:\n        list: List of differences between the two input lists.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts the corresponding elements of the two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two input lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists should have the same length.')\n    sub_list = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length')\n    # subtract the corresponding elements and store the result in a new list\n    result = [a - b for a, b in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of the two lists are the same\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n    \n    # loop through the two lists and subtract each element\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over each element of both lists\n    for i in range(len(nums1)):\n        # Subtract the element of the first list from the element of the second list\n        result.append(nums1[i] - nums2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    \n    # Initialize a dictionary to store the frequency of each digit in the string\n    freq_dict = {}\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is not a digit, skip it\n        if not char.isdigit():\n            continue\n        \n        # Convert the character to an integer and increment its frequency in the dictionary\n        freq_dict[int(char)] = freq_dict.get(int(char), 0) + 1\n    \n    # Loop through each digit in the string\n    for digit in freq_dict:\n        # Check whether the frequency of the digit is less than or equal to the digit itself\n        if freq_dict[digit] > digit:\n            return False\n    \n    # If no invalid digits are found, the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    freq = []\n    for i in str(n):\n        if i in freq:\n            freq[freq.index(i)] += 1\n        else:\n            freq.append(i)\n    \n    for i in freq:\n        if n // int(i) > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    freq = {} # dictionary to store the frequency of digits in n\n\n    # calculate the frequency of digits in n\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > 1 and count > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n    for i in range(10):\n        if sum([1 for x in digits if x == i]) > 1:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for d in str(n):\n        freq[int(d)] += 1\n    for i in range(10):\n        if freq[i] > n//10:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10 # initialize frequency list with zeros\n    while n > 0: # while n is greater than zero\n        digit = n % 10 # get the last digit\n        freq[digit] += 1 # increment frequency of digit\n        n //= 10 # remove the last digit from n\n    for i in range(10): # loop through each digit\n        if freq[i] > freq[i] * i: # if frequency of digit is greater than i times\n            return False # return False\n    return True # return True if all digits have frequency less than or equal to themselves"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    count_list = []\n    while n:\n        digit = n % 10\n        count_list.append(digit)\n        n = n // 10\n\n    for i in range(len(count_list)):\n        if count_list[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Split the integer into individual digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Calculate the frequency of each digit\n    freq = [digits.count(digit) for digit in range(10)]\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > digits[i]:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check if all items in a list are equal to a given element.\n\n    Parameters:\n        list (list): List of elements to check.\n        element (object): Element to compare to.\n\n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Check if the length of the list is 0\n    if len(list) == 0:\n        return False\n\n    # Loop through the list and compare each item to the given element\n    for item in list:\n        if item!= element:\n            return False\n\n    # If we make it through the loop without finding any unequal items, the list is valid\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(b){2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    if re.search(pattern, text):\n        print(\"The string contains 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.{2,3}b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.{2,3}b')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?=(?:.*b){2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = sum(a)\n    current_index = 0\n\n    # Repeat k times and calculate the sum of each subarray\n    for i in range(k):\n        current_sum += sum(a)\n        current_index += 1\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Remove the last element from the sum (to get the maximum sum) and subtract it from the maximum sum\n    return max_sum - current_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the array to modify\n    arr = list(a)\n    # Repeat the array k times\n    for i in range(k):\n        arr.extend(arr)\n    # Find the maximum sub-array sum\n    max_sum = max(sum(arr[i:j+1]) for i in range(len(arr)-k+1) for j in range(i, len(arr)))\n    # Return the maximum sub-array sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the given array k times\n    repeated_array = a*k\n    # Initialize variables for the maximum subarray sum and its length\n    max_sum = repeated_array[0]\n    max_len = 1\n    \n    # Iterate over the repeated array and calculate the maximum subarray sum and its length\n    for i in range(1, len(repeated_array)):\n        if repeated_array[i] > max_sum:\n            max_sum = repeated_array[i]\n            max_len = i + 1\n    \n    # Calculate the sum of the last k elements of the array\n    last_k_sum = sum(repeated_array[-k:])\n    \n    # Calculate the largest sum of a contiguous array in the modified array\n    largest_sum = max(max_sum, last_k_sum)\n    \n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the array\n    sum_array = sum(a)\n    # Calculate the sum of the modified array\n    sum_modified = sum_array * k\n    \n    # Initialize variables to store the maximum sum and the index of the maximum sum\n    max_sum = float('-inf')\n    max_index = 0\n    \n    # Loop through the array and calculate the sum of each subarray until the sum is equal to the modified sum\n    for i in range(n):\n        current_sum = a[i]\n        for j in range(1, k):\n            current_sum += a[(i+j) % n]\n        if current_sum == sum_modified:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_index = i\n    \n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array a, the length of the array, and the number of times to repeat the array.\n    The function finds the maximum sum of a contiguous subarray formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    for i in range(n):\n        temp_sum += a[i]\n        \n        if i > 0 and i % k == 0:\n            temp_sum -= a[i-k]\n            \n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Create a modified array by repeating the given array k times\n    modified_array = [a[0]] * k\n    for i in range(1, n):\n        modified_array.append(a[i] + modified_array[i - 1])\n\n    # Initialize variables to keep track of the maximum sum of subarrays and the current sum of subarrays\n    max_sum = float('-inf')\n    current_sum = modified_array[0]\n\n    # Iterate over the modified array and find the maximum sum of subarrays\n    for i in range(1, len(modified_array)):\n        current_sum += modified_array[i] - modified_array[i - 1]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # Initialize the maximum subarray sum\n    max_sum = float('-inf')\n    \n    # Initialize the sum of the modified array\n    modified_sum = 0\n    \n    # Repeat the given array k times\n    for i in range(k):\n        # Add the current element to the modified array\n        modified_sum += a[0]\n        \n        # Update the maximum subarray sum if necessary\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n        \n        # Remove the first element from the original array\n        del a[0]\n    \n    # Calculate the difference between the original sum and the sum of the modified array\n    difference = original_sum - modified_sum\n    \n    # If the difference is negative, the modified array cannot be formed by repeating the original array\n    if difference < 0:\n        return 0\n    \n    # Calculate the maximum subarray sum that can be formed by repeating the modified array\n    max_subarray_sum = max_sum\n    \n    # Initialize the start and end indices of the modified array\n    start = 0\n    end = 0\n    \n    # Move the start index to the next element until the difference between the modified sum and the original sum is greater than or equal to 0\n    while difference >= 0:\n        # Calculate the sum of the modified array from the start index to the current element\n        current_sum = modified_sum\n        \n        # Move the end index to the next element\n        end += 1\n        \n        # Calculate the sum of the modified array from the current element to the end index\n        while current_sum <= difference and end < n:\n            current_sum += a[end]\n            end += 1\n        \n        # If the difference between the current sum and the original sum is greater than or equal to 0, update the maximum subarray sum and the start index\n        if current_sum >= difference:\n            max_subarray_sum = max(max_subarray_sum, modified_sum - current_sum)\n            start = end - k + 1\n    \n    # Return the maximum subarray sum\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize variables to store the current subarray sum, maximum subarray sum and the index of the maximum subarray sum\n    current_subarray_sum = 0\n    maximum_subarray_sum = 0\n    max_index = 0\n    \n    # Loop through the modified array\n    for i in range(n):\n        # Add the current element to the current subarray sum\n        current_subarray_sum += modified_array[i]\n        \n        # If the current subarray sum is greater than the maximum subarray sum so far, update the maximum subarray sum and its index\n        if current_subarray_sum > maximum_subarray_sum:\n            maximum_subarray_sum = current_subarray_sum\n            max_index = i\n        \n        # If the current subarray sum is greater than 0, remove the first element from the subarray and repeat the process from the next element\n        if current_subarray_sum > 0:\n            current_subarray_sum -= modified_array[i]\n        \n        # If the index of the current subarray sum becomes negative, the subarray has run out of space and cannot be extended further\n        if i - max_index > 0:\n            break\n    \n    # Return the maximum subarray sum\n    return maximum_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n\n    # Calculate the maximum sum of the first k elements\n    max_first_k_sum = first_k_sum\n\n    # Initialize the maximum sum of the repeated array\n    max_repeated_sum = 0\n\n    # Loop through the remaining elements of the array\n    for i in range(n - k + 1):\n        # Calculate the sum of the next k elements of the array\n        next_k_sum = first_k_sum + sum(a[i+k:i+k+k])\n\n        # Update the maximum sum of the first k elements\n        max_first_k_sum = max(max_first_k_sum, next_k_sum - first_k_sum)\n\n        # Update the maximum sum of the repeated array\n        max_repeated_sum = max(max_repeated_sum, max_first_k_sum + first_k_sum)\n\n        # Update the first k sum for the next iteration\n        first_k_sum = next_k_sum\n\n    return max_repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = [0] * (n*k)\n    result = 0\n    for i in range(k):\n        for j in range(n):\n            modified_array[i*n + j] = a[j]\n\n    for i in range(k):\n        for j in range(1, n):\n            modified_array[i*n + j] = a[j] + modified_array[i*n + j-1]\n\n    for i in range(k):\n        max_sum = max(modified_array[i*n:(i+1)*n])\n        result = max(result, max_sum)\n\n    return result"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_nums = [i for i in range(2, n+1, 2)]\n    sum_of_squares = 0\n    for num in even_nums:\n        sum_of_squares += num**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i**2  \n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(lst):\n    \"\"\"\n    Find the maximum length of a list of lists.\n\n    :param lst: List of lists\n    :type lst: list of list\n    :return: Maximum length of the list of lists\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for sub_list in lst:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxLengthList = []\n    \n    for sublist in list1:\n        if len(sublist) > maxLength:\n            maxLength = len(sublist)\n            maxLengthList = sublist\n            \n    return maxLengthList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for item in sublist:\n            lengths.append(len(str(item)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for item in list1:\n        if len(item) > len(max_lengths):\n            max_lengths = item\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum length lists\n    max_lengths = []\n    \n    # Iterate over all the sublists in the list of lists\n    for sublist in list1:\n        # Find the length of the current sublist and add it to the list of max lengths\n        max_lengths.append(len(sublist))\n    \n    # Find the maximum length and return it as a list\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max([len(x) for x in lst])\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create an empty list to store the number of ways\n    ways = []\n\n    # Check if there is only one color in the fence\n    if k == 1:\n        # There is only one color, so there is only one way to paint the fence\n        ways.append(1)\n    else:\n        # There are more than one color in the fence, so we can paint it either with 1 color or 2 colors\n        for i in range(2, n + 1):\n            # For each number of colors, we can paint it either with 1 color or 2 colors\n            ways.append(ways[-1] + ways[-i])\n\n    # Return the last element of the list, which is the number of ways of painting the fence\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the count of ways for each color\n    count = {}\n    # Initialize a counter for the total ways\n    ways = 0\n    # Loop through all possible colors\n    for color in range(k):\n        # Initialize a counter for the ways of painting the fence with that color\n        color_ways = 0\n        # Initialize a counter for the number of adjacent pairs with that color\n        pairs = 0\n        # Loop through all possible pairs of adjacent posts with that color\n        for i in range(n):\n            for j in range(i+1, n):\n                # If the colors of the two adjacent posts are the same, increment the counter for the number of adjacent pairs with that color\n                if fence[i][0] == fence[j][0]:\n                    pairs += 1\n                    # If there are at most 2 adjacent pairs with the same color, increment the counter for the ways of painting the fence with that color\n                    if pairs <= 2:\n                        color_ways += 1\n        # Update the counter for the total ways with this color\n        ways += (n - color_ways) * color\n        # Update the count dictionary with this color and its ways of painting the fence\n        count[color] = color_ways\n    # Return the total ways of painting the fence with at most 2 adjacent pairs of the same color\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # base cases\n    if k == 1:\n        return n\n    \n    # recursive case\n    memo = [0] * (n+1)\n    memo[0] = 1\n    memo[1] = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if memo[i-1] >= 1 and j % 2 == 0:\n                memo[i] += memo[i-1]\n    \n    return memo[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the count of ways for each color\n    count = [0] * (k + 1)\n    \n    # Base cases\n    if n == 0:\n        count[0] = 1\n    elif n == 1:\n        count[0] = 1\n        count[1] = 1\n    else:\n        # Iterate through all possible combinations of colors\n        for i in range(2, k + 1):\n            # Add the count of ways for the previous color\n            count[i] = count[i - 1]\n            \n            # If the color is different, add the count of ways for the previous color + the count of ways for the same color + the count of ways for the next color\n            if i < n:\n                count[i] += count[i] + count[i + 1]\n    \n    # Return the total count of ways\n    return count[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # create a 2D array to represent the fence\n    fence = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    # initialize the array to 1 for each element except the last row and the last column\n    for i in range(n):\n        fence[i][0] = 1\n        fence[i][k] = 1\n    # calculate the number of ways for the remaining elements\n    for j in range(1, k+1):\n        for i in range(1, n):\n            fence[i][j] = (fence[i-1][j] + fence[i][j-1]) % (10**9 + 7)\n    # return the number of ways\n    return fence[n-1][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0] * n\n    visited = [0] * k\n\n    def backtrack(start):\n        if start == n:\n            count = 1\n            for i in range(k):\n                if visited[i] == 1:\n                    count += 1\n            return count\n\n        fence[start] = 1\n        count = 0\n\n        for i in range(k):\n            if visited[i] == 0 and (start + i) < n:\n                visited[i] = 1\n                count += backtrack(start + i)\n                visited[i] = 0\n\n        return count\n\n    return backtrack(0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Create a boolean matrix of size n x k\n    # Initialize all values to False\n    matrix = [[False for j in range(k+1)] for i in range(n+1)] \n    # Initialize the first row with all values True\n    matrix[0] = [True for j in range(k+1)]\n    # Fill the rest of the matrix\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if matrix[i-1][j] or matrix[i][j-1]:\n                matrix[i][j] = True\n    # Return the number of ways of painting the fence\n    return matrix[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n < 2 or k < 2:\n        return 0\n    \n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Base cases:\n    # If we have only one post and k colors, there is only one way to paint the fence\n    dp[1][1] = 1\n    \n    # If we have at least two posts and at most k colors, there is a way to paint the fence\n    dp[2][1] = 1\n    \n    # Fill in the remaining cells with the number of ways to paint the fence in each case\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            if i > 2 and j == 1:\n                dp[i][j] += dp[i-2][j]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[1][1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if j % 2 == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # Helper function to count the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    def count_ways_helper(colors, left, right): \n        # Base case: if we have reached the end of the list of colors, return 1 since all colors can be painted\n        if left == right: \n            return 1\n        \n        # If we have reached a post with the same color as the next post, return the number of ways of painting the fence with the same color\n        if colors[left] == colors[left+1]: \n            return count_ways_helper(colors, left+1, right)\n        \n        # Otherwise, return the number of ways of painting the fence with different colors\n        return count_ways_helper(colors, left+1, right)\n    \n    # Base case: if n is less than or equal to 0, return 0 since we cannot paint a fence with less than 2 posts\n    if n <= 0: \n        return 0\n    \n    # Base case: if k is less than 2, return 0 since we cannot paint a fence with less than 2 colors\n    if k < 2: \n        return 0\n    \n    # Initialize a list of colors\n    colors = [1] * k\n    \n    # Count the number of ways of painting the fence\n    return count_ways_helper(colors, 0, n-1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Cannot divide by zero\"\n    else:\n        return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # return n//m if n is divisible by m\n    if n % m == 0:\n        return n // m\n    # if not divisible, return n-m\n    else:\n        return n - m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient  "
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns the quotient of those numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m  # This line divides the first number by the second number and assigns the result to quotient variable\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # Floor division to get the quotient\n    remainder = n % m  # Get the remainder\n    \n    if remainder == 0:\n        return quotient\n    else:\n        return quotient + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = (w**2 + h**2)**0.5\n    cos_angle = w/s\n    sin_angle = h/s\n    third_side = 2*w*sin_angle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the area of the triangle\n    area = 0.5 * w * h\n    \n    # Calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(area)\n    \n    # Calculate the angle between the two sides\n    angle = math.degrees(math.acos((w**2 + h**2 - area)/2/w/h))\n    \n    # Calculate the third side of the triangle\n    third_side = (w**2 + h**2 - area)/2\n    \n    # Convert the angle from degrees to radians and multiply it by the hypotenuse\n    third_side = third_side * hypotenuse\n    \n    # Convert the angle from radians to degrees and return it\n    return round(math.degrees(third_side), 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return 2*w\n    else:\n        return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w+h)/2\n    # calculate the semi-leg\n    l = (w+h)/2\n    # calculate the area of the triangle\n    a = math.sqrt(l*l-s*s)\n    # calculate the area of the square\n    b = math.sqrt(l*l)\n    # calculate the angle of the triangle\n    angle = math.acos((b*b+a*a-w*w)/(2*b*a))\n    # calculate the hypotenuse\n    c = (b**2+a*math.sin(angle/2))**0.5\n    # print the result\n    print(c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the perpendicular to the right angle\n    s = math.sqrt(w**2 + h**2)\n\n    # Calculate the third side\n    third_side = math.sqrt((w**2 + s**2) / 2)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the square root of the sum of the squares of the lengths of the sides\n    c = math.sqrt(w**2 + h**2)\n    # Return the third side of the right angled triangle\n    return c"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] #initializing the maximum value with the first element of the list\n    for i in listval[1:]:\n        if i > max_val: #checking if the current element is greater than the maximum value\n            max_val = i #updating the maximum value if necessary\n    return max_val #returning the maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n    # Loop over the rest of the elements in the list\n    for element in listval[1:]:\n        # If the current element is greater than the maximum value, update it\n        if element > max_val:\n            max_val = element\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    if len(listval) == 0:\n        return None\n\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    divisor = 2\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum variable to 0\n    sum_div = 0\n\n    # loop through all numbers from 1 to number // 2\n    for i in range(1, number//2+1):\n        # if the number is divisible by i\n        if number % i == 0:\n            # add i to the sum\n            sum_div += i\n\n    # return the sum of all divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr = sorted(arr)\n\n    # Initialize variables to store the count of inversions\n    inv_count = 0\n\n    # Iterate through the array to find the inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    # Return the count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Helper function to merge two subarrays into a single sorted subarray\n    def merge(left, mid, right):\n        i, j, k = 0, mid + 1, 0\n        inv_count = 0\n        result = []\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                result.append(arr[i])\n                i += 1\n            else:\n                result.append(arr[j])\n                j += 1\n                inv_count += mid - i + 1\n\n        while i <= mid:\n            result.append(arr[i])\n            i += 1\n\n        while j <= right:\n            result.append(arr[j])\n            j += 1\n\n        for i in range(len(left)):\n            arr[k] = result[i]\n            k += 1\n\n        return inv_count\n\n    # Count the number of inversions in the array\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - 1\n\n    # Merge the array in ascending order using merge sort\n    merge_sort(arr, 0, n - 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # Counting inversions using merge sort\n    def merge(left, mid, right):\n        inv_count = 0\n        i, j, k = 0, mid, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                inv_count += len(left) - i\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n        return inv_count\n\n    inv_count = 0\n    for sz in range(1, n):\n        mid = n // 2 - sz // 2\n        inv_count += merge(arr[:mid], arr[mid:mid+sz], arr[mid+sz:])\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # initialize variables\n    n = len(arr)\n    inv_count = 0\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # iterate through the sorted array and count inversions\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            # check if the current element is greater than the next element\n            if arr[i] < arr[left]:\n                # count the inversion\n                inv_count += right - left\n                # move the left pointer to the right\n                left += 1\n            else:\n                # move the right pointer to the left\n                right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # Find the minimum element in remaining unsorted part of array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        # Swap the minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        # Count the number of inversions by comparing the current element with the next elements\n        for j in range(1, n-i):\n            if arr[j] > arr[j+i] and arr[j] < arr[j+i+1]:\n                count += n-i-j\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        # Find the minimum element in the remaining unsorted part of the array.\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n\n        # Swap the current element with the minimum element.\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n        # Count the number of inversions in the partition.\n        inv_count = 0\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                inv_count += (j - i - 1)\n\n        # Add the count of inversions in the partition to the count.\n        count += inv_count\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # sorting the array\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i - 1  # count inversions using formula\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n  \n    # If array contains less than two elements, \n    # there can be no inversions. \n    if n < 2: \n        return 0 \n  \n    # Recursively sort first and second halves of array. \n    left_count = get_Inv_Count(arr[:n//2]) \n    right_count = get_Inv_Count(arr[n//2:]) \n  \n    # Count inversions in first half of second half array. \n    left, right = 0, n//2 \n    inv_count = 0 \n    while left < n//2 and right < n: \n        if arr[left] < arr[right]: \n            left += 1 \n        else: \n            right += 1 \n            inv_count += n//2 - left \n    return left_count + right_count + inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    i = 0\n    inv_count = 0\n    while i < n-1:\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            inv_count += n-i-1\n        i += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    A function to flatten a given nested list structure.\n    '''\n    if not lst:\n        return []\n    elif isinstance(lst[0], list):\n        return flatten_list(lst[0]) + [lst[1]] + flatten_list(lst[2:])\n    else:\n        return [lst[0]] + flatten_list(lst[1:])"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    res = []\n    for item in lst:\n        if isinstance(item, list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    :param lst: a nested list\n    :return: a flattened list\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        for item in list1:\n            if type(item) == list:\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list structure into a single-level list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)  # defaultdict to keep track of maximum aggregate\n\n    for sale, quantity in stdata:\n        max_aggr[sale] += quantity  # update the maximum aggregate of each sale\n\n    max_sale = max(max_aggr, key=max_aggr.get)  # find the sale with the maximum aggregate\n    max_quantity = max_aggr[max_sale]  # get the maximum quantity of the sale\n\n    return max_sale, max_quantity  # return the sale and the maximum quantity"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg_map = defaultdict(int)\n    for item in stdata:\n        if len(item) == 2:\n            max_agg_map[item[1]] = max(max_agg_map[item[1]], item[0])\n        else:\n            max_agg_map[item[2]] = max(max_agg_map[item[2]], item[1])\n    return max(max_agg_map.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(len(stdata[i])):\n            if stdata[i][j] > max_agg[i]:\n                max_agg[i] = stdata[i][j]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate for each customer\n    max_aggs = defaultdict(lambda: 0)\n\n    # Loop through the list of tuples\n    for cust, agg in stdata:\n        # Update the maximum aggregate for the current customer\n        max_aggs[cust] = max(agg, max_aggs[cust])\n\n    # Find the maximum aggregate across all customers\n    max_agg = 0\n    for agg in max_aggs.values():\n        max_agg = max(agg, max_agg)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate through the input list of tuples and update the frequency of each item in the dictionary\n    for item in stdata:\n        freq_dict[item] += 1\n\n    # Calculate the maximum aggregate by iterating through the dictionary and multiplying up the values\n    max_aggregate = 1\n    for freq in freq_dict.values():\n        max_aggregate *= freq\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i in stdata:\n        for j in i:\n            max_dict[j] += i[j]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = float('-inf')\n    max_combination = defaultdict(int)\n    for i, j, k in stdata:\n        if max_sum < i + j + k:\n            max_sum = i + j + k\n            max_combination = defaultdict(int)\n            for x in stdata:\n                if x[0] > i:\n                    max_combination[x] += 1\n                elif x[0] < i:\n                    max_combination[x] -= 1\n                if x[1] > j:\n                    max_combination[x] += 1\n                elif x[1] < j:\n                    max_combination[x] -= 1\n                if x[2] > k:\n                    max_combination[x] += 1\n                elif x[2] < k:\n                    max_combination[x] -= 1\n    return max_sum, max_combination"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for name, age, salary in stdata:\n        max_dict[name] = max(max_dict[name], salary)\n    max_age = max(max_dict.values())\n    return max_age"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int) # initialize a dictionary to store aggregate value\n    \n    for num, price in stdata: # iterate through the list of tuples\n        agg_dict[price] += num # increment the aggregate value for each price\n        \n    max_agg = max(agg_dict.values()) # find the maximum value in the dictionary\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the aggregate and count of each item\n    agg_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, count in stdata:\n        # Add the item to the aggregate count\n        agg_count[item] += count\n\n    # Calculate the maximum aggregate\n    max_agg = max(agg_count, key=agg_count.get)\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i % (2**n-1) == 0:\n            continue\n        else:\n            seq = bin(i)[2:].zfill(2*n)\n            if sum(int(j) for j in seq[:n]) == sum(int(j) for j in seq[-n:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i & j == (i ^ j):\n                count += 1\n    return count\n\n\nn = int(input(\"Enter the value of n: \"))\nresult = count_binary_seq(n)\nprint(f\"There are {result} binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\")"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        a = bin(i)[2:].zfill(n)\n        b = bin(i+1)[2:].zfill(n)\n        if a == b:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Helper function to calculate the sum of n first bits\n    def calc_sum(binary_str, n):\n        return int(binary_str[:n], 2) + int(binary_str[-n:], 2)\n\n    # Calculate the sum of the first n bits of each binary sequence\n    counts = {}\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        counts[binary_str] = counts.get(binary_str, 0) + 1\n\n    # Count the number of sequences of length 2n such that the sum of first n bits is the same as the sum of last n bits\n    count = 0\n    for first_bits, count_first in counts.items():\n        for last_bits, count_last in counts.items():\n            if first_bits[:n] == last_bits[-n:]:\n                count += count_first * count_last\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i+j == 2**n-1:\n                count += 1\n    return count\n\nn = 3\ncount = count_binary_seq(n)\nprint(\"Count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits:\", count)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # extract first n bits\n        first_n_bits = bin(i)[2:].zfill(n)\n        # extract last n bits\n        last_n_bits = bin(i)[-n:].zfill(n)\n        # check if they are equal\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = sum(int(bit) for bit in format(i, f'0{n}b'))\n        last_sum = sum(int(bit) for bit in format(i, f'0{n}b').zfill(2*n))\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(i+1, 2**n):\n            if i < j:\n                temp_sum = 0\n                for k in range(n):\n                    if (i >> k) & 1:\n                        temp_sum += (j >> k) & 1\n                if temp_sum == i & j:\n                    count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    def binary_seq(length):\n        seq = []\n        for i in range(2**length):\n            seq.append(bin(i)[2:].zfill(length))\n        return seq\n\n    def sum_bit(seq):\n        return sum([int(bit) for bit in seq])\n\n    seq = binary_seq(2*n)\n    count = 0\n    for i in range(len(seq)):\n        if sum_bit(seq[:i+1]) == sum_bit(seq[i+1:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i)[-n:].zfill(n)\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n        else:\n            continue\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for key in d:\n            depth += max(dict_depth(value) for value in d[key])\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n    # Recursively traverse through the dictionary\n    for v in d.values():\n        # If the value is a dictionary, increment depth\n        if isinstance(v, dict):\n            depth += 1\n        # If the value is a list, find the maximum depth of all elements\n        elif isinstance(v, list):\n            depth = max(depth, max([dict_depth(x) for x in v]))\n        # If the value is not a dictionary or a list, don't increment depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth variable to 1\n    depth = 1\n    # Loop through each key in the dictionary\n    for key in d:\n        # Check if the value of the key is another dictionary\n        if isinstance(d[key], dict):\n            # If it is, increase the depth by 1\n            depth += 1\n            # Recursively call the function on the nested dictionary\n            dict_depth(d[key])\n    # Return the depth variable\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: if the dictionary is empty, return 0\n    if not d:\n        return 0\n    # Recursive case: if the dictionary contains a value, return 1 plus the depth of its key\n    elif isinstance(d.values()[0], dict):\n        return 1 + dict_depth(d.keys()[0])\n    # Otherwise, return 1 plus the depth of its value\n    else:\n        return 1 + dict_depth(d.values()[0])"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Use a helper function to find the depth of each dictionary in the main dictionary\n    def _dict_depth(d, depth):\n        if isinstance(d, dict):\n            for key, value in d.items():\n                if isinstance(value, dict):\n                    depth += 1\n                    _dict_depth(value, depth)\n        return depth\n    \n    # Call the helper function with an initial depth of 0\n    return _dict_depth(d, 0)"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        elif isinstance(d[key], list):\n            depth = max(depth, len(d[key]))\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the current rotation to 0\n    curr_rot = 0\n    # Initialize the index of the element to search\n    curr_index = index\n\n    # Loop through all rotations and find the element at the given index\n    while curr_rot < rotations:\n        # Calculate the new index after the current rotation\n        new_index = (curr_index + ranges[curr_rot]) % len(arr)\n        # Check if the new index matches the given index\n        if arr[new_index] == index:\n            return arr[new_index]\n        # Update the current index to search for the element\n        curr_index = new_index\n        # Increment the current rotation\n        curr_rot += 1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array of integers, an array of ranges representing the number of rotations to apply for each element, and the index of the element to find.\n    It returns the element at the given index after the given number of rotations.\n    '''\n\n    # Helper function to get the element at a given index after rotating\n    def rotated_index(arr, index, rotations):\n        # Calculate the number of rotations to apply to the element\n        rotations = arr[index] % rotations\n        # Calculate the index of the element after rotating\n        rotated_index = (index + rotations) % len(arr)\n        # Return the rotated index\n        return rotated_index\n\n    # Initialize the current index to the given index\n    current_index = index\n\n    # Loop through the ranges and apply the rotations to the elements\n    for i in range(len(ranges)):\n        # Calculate the index of the element after rotating\n        rotated_index = rotated_index(arr, current_index, ranges[i])\n        # Update the current index to the rotated index\n        current_index = rotated_index\n\n    # Return the element at the final index\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes a list of numbers arr, a list of tuples ranges, a list of integers rotations, and an index. \n    It then calculates the element at the given index after the given number of rotations.\n\n    Parameters:\n    arr: list\n        A list of numbers that need to be rotated.\n    ranges: list of tuples\n        A list of tuples containing the ranges of numbers that need to be rotated. Each tuple contains two numbers, \n        representing the minimum and maximum value of the range.\n    rotations: list of integers\n        A list of integers representing the number of rotations to be applied on the given list of numbers.\n    index: integer\n        The index at which the element needs to be found after the rotations.\n\n    Returns:\n    The element at the given index after the number of rotations.\n    \"\"\"\n\n    # Calculate the total number of rotations required to get the element at index\n    total_rotations = sum(rotations)\n\n    # Initialize the current and final index\n    current_index = index\n    final_index = index\n\n    # Perform the rotations and find the element at the final index\n    for i in range(total_rotations):\n        current_index = (current_index + len(arr)) % len(arr)\n        final_index = (final_index + rotations[current_index]) % len(arr)\n\n    # Find the element at the final index\n    element = arr[final_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations and index as input\n    and returns the element at that index after rotations.\n    '''\n    # If index is greater than or equal to the length of the array,\n    # return None\n    if index >= len(arr):\n        return None\n\n    # If rotation is zero, return the element at index\n    if rotations == 0:\n        return arr[index]\n\n    # Initialize variables for range and current index\n    range_start = 0\n    range_end = 0\n    current_index = 0\n\n    # Iterate over the ranges and rotations and find the element\n    for i in range(len(ranges)):\n        range_start = ranges[i][0]\n        range_end = ranges[i][1]\n        current_index = (index - range_start) % (range_end - range_start) + range_start\n\n        # If the current index is greater than or equal to the length of the array,\n        # return None\n        if current_index >= len(arr):\n            return None\n\n        # If the element is found, return it\n        if i == rotations - 1:\n            return arr[current_index]\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # initialize a list to store the element at the given index\n    result = []\n\n    # iterate through the given range and rotation combinations\n    for i in range(len(ranges)):\n        for j in range(ranges[i]):\n            # append the element at the given index after rotations[i] rotations\n            result.append(arr[(index - (j + 1) * rotations[i]) % len(arr)])\n\n    # return the element at the given index after rotations\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a list of rotations, as well as an index.\n    It finds the element at the given index after applying the given rotations to the array.\n\n    Args:\n    arr: array to be rotated\n    ranges: list of tuples representing ranges to be rotated\n    rotations: list of tuples representing rotations to be applied\n    index: index of the element to be found\n\n    Returns:\n    The element at the given index after applying the given rotations to the array.\n    \"\"\"\n\n    # Initialize a list to store the rotated array\n    rotated_arr = []\n\n    # Apply rotations to the array\n    for r in ranges:\n        if r[0] < rotations[0][0]:\n            rotated_arr.append(arr[index])\n        elif r[1] > rotations[-1][1]:\n            rotated_arr.append(arr[index])\n        else:\n            for i in range(len(rotations)):\n                if rotations[i][0] <= index < rotations[i][1]:\n                    rotated_arr.append(arr[rotations[i][0]])\n                    break\n\n    # Return the element at the given index after rotating the array\n    return rotated_arr[index - rotations[0][0]]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the element at the given index after the given number of rotations\n    # arr: the array to be rotated\n    # ranges: list of tuples (start, end) representing the ranges of elements to be rotated\n    # rotations: number of rotations required to find the element\n    # index: the index of the element to be found\n\n    # Initialize the result variable to None\n    result = None\n\n    # Loop through each range of elements to be rotated\n    for start, end in ranges:\n        # Find the index of the element in the current range\n        mid = (start + end) // 2\n        if mid == index:\n            # If the index matches the midpoint of the range, set the result to the element at the midpoint\n            result = arr[mid]\n        elif mid > index:\n            # If the index is greater than the midpoint of the range, only check the left half of the range\n            if mid > 0:\n                result = find_Element(arr[start:mid], ranges, rotations, index)\n        elif mid < index:\n            # If the index is less than the midpoint of the range, only check the right half of the range\n            result = find_Element(arr[mid+1:], ranges, rotations, index - mid)\n\n    # If the result variable is still None, the element was not found\n    if result is None:\n        print(\"Element not found\")\n\n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, number of rotations and an index as input.\n    It then finds the element at the given index after rotations.\n    '''\n    # initialize variables\n    n = len(arr)\n    res = arr[index]\n\n    # perform rotations\n    for i in range(rotations):\n        # get the range of the current index\n        start = ranges[i]\n        end = ranges[i + 1]\n\n        # shift the range of the current index by the rotations number\n        temp = end - start\n        start = temp - rotations * (temp - 1) // 2 + start\n        end = start + rotations * (temp - 1) // 2\n\n        # shift the array\n        arr = arr[start:end] + arr[:start] + arr[end:]\n\n    return res"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: List of integers representing the input array.\n    :param ranges: List of tuples representing the ranges of rotations for each element in the array.\n    :param rotations: List of integers representing the number of rotations required to reach each element in the array.\n    :param index: Integer representing the index of the element we want to find.\n    :return: Integer representing the element at the given index after number of rotations.\n    \"\"\"\n    current_index = index\n    for i in range(len(ranges)):\n        if current_index in ranges[i]:\n            new_index = rotations[i] - (current_index - ranges[i][0]) % rotations[i]\n            return arr[new_index]\n        current_index = (current_index + 1) % len(arr)\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations and an index\n    as input and returns the element at the given index after rotating the array\n    by the given number of rotations.\n    \n    The function uses the ranges to determine where the elements should be rotated.\n    For each range, it first rotates the array by the given number of rotations and then\n    returns the element at the given index.\n    \n    The algorithm works as follows:\n    1. Create a new list containing all the elements of the original array.\n    2. Iterate over each range in the list.\n    3. For each range, rotate the new list by the given number of rotations.\n    4. Find the element at the given index in the new list.\n    5. Return the element found in step 4.\n    \n    :param arr: The original array to be rotated\n    :param ranges: A list of tuples containing the start and end indices of the range and the number of rotations to be applied to that range\n    :param rotations: The number of rotations to be applied to the array\n    :param index: The index of the element to be found after rotating the array\n    :return: The element at the given index after rotating the array by the given number of rotations\n    \"\"\"\n    # Create a new list containing all the elements of the original array\n    rotated_arr = arr.copy()\n    # Iterate over each range in the list\n    for i in range(len(ranges)):\n        # For each range, rotate the new list by the given number of rotations\n        for j in range(rotations):\n            rotated_arr = rotate(rotated_arr, ranges[i][0], ranges[i][1])\n        # Find the element at the given index in the new list\n        if index < len(rotated_arr):\n            return rotated_arr[index]\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Initialize variables to store the first and second words\n    first_word = ''\n    second_word = ''\n\n    # Iterate through the list of words\n    for word in words:\n        # Check if the word starts with letter 'p'\n        if re.match(r'^p[a-zA-Z]*$', word):\n            # If it does, check if it has already been stored\n            if first_word == '':\n                # If it hasn't, store it\n                first_word = word\n            else:\n                # If it has, store it as the second word\n                second_word = word\n                break\n\n    # If both words have been stored, return them\n    if first_word!= '' and second_word!= '':\n        return first_word, second_word\n\n    # Otherwise, return an error message\n    else:\n        return \"Error: No words starting with letter 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p.*') # regular expression pattern to match words starting with 'p'\n    matches = re.findall(p_pattern, words) # find all words that match the pattern\n    \n    # check if there are at least two matches\n    if len(matches) >= 2:\n        return matches[0], matches[1] # return the first two matches\n    else:\n        return None, None # if there are not enough matches, return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p.*')\n    matches = pattern.findall(words)\n    return matches[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"No two words starting with letter 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')\n    p_words = [word for word in words if re.match(pattern, word)]\n    if len(p_words) > 1:\n        return p_words[0], p_words[1]\n    elif len(p_words) == 1:\n        return p_words[0], None\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'(?<=p).+?(?=\\sp)',''.join(words))\n    return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Using regular expressions to find the words starting with 'p'\n    p_words = re.findall(r'\\bp\\w+', words)\n\n    # Check if there are two words starting with 'p'\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    elif len(matches) == 1:\n        return [matches[0]]\n    else:\n        return [matches[0], matches[1]]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+' # match words starting with letter 'p' followed by one or more word characters\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1] # return the matching word and the word after it in the list"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_subseq = []\n    max_sum_with_k = float('-inf')\n    max_subseq_with_k = []\n\n    for i in range(index, n):\n        if i == k:\n            max_sum_with_k = max(max_sum_with_k, max_sum)\n            max_subseq_with_k = max(max_subseq_with_k, max_subseq)\n            max_sum = max(max_sum, a[i])\n            max_subseq = [a[i]]\n        elif i < k:\n            max_sum_with_k = max(max_sum_with_k, max_sum + a[i])\n            max_subseq_with_k = max(max_subseq_with_k, max_subseq + [a[i]])\n            max_sum = max(max_sum, a[i])\n            max_subseq = [a[i]]\n\n    max_sum_with_k = max(max_sum_with_k, max_sum)\n    max_subseq_with_k = max(max_subseq_with_k, max_subseq)\n    return max_sum_with_k, max_subseq_with_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prefix_sum = [0] * (n+1)\n    max_sum = float('-inf')\n    prev_index = -1\n\n    # Calculate the sum of prefix to ith index\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # Iterate through all indices except kth index\n    for i in range(index, n):\n        # Calculate the sum of prefix to i+kth index\n        curr_sum = prefix_sum[i+k] - prefix_sum[i]\n\n        # Update max_sum if current sum is greater than max_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            prev_index = i\n\n    # Calculate the maximum sum of increasing subsequence from prefix until ith index\n    if prev_index == -1:\n        return max_sum\n\n    # Calculate the maximum sum of increasing subsequence from i+kth index to ith index\n    k_sum = 0\n    max_sum_k = float('-inf')\n    curr_sum = 0\n\n    # Iterate through all indices after kth index\n    for i in range(index+1, prev_index+1):\n        curr_sum += a[i]\n        if curr_sum > max_sum_k:\n            max_sum_k = curr_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return max_sum + max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    dp = [[0 for j in range(k+1)] for i in range(n)]\n    dp[0][0] = a[0]\n\n    for i in range(1, n):\n        for j in range(k+1):\n            if j == 0:\n                dp[i][j] = a[i]\n            elif j == 1:\n                dp[i][j] = max(dp[i-1][j], a[i] + dp[i-1][j-1])\n            else:\n                dp[i][j] = max(dp[i-1][j], a[i] + dp[i-1][j-1], dp[i-1][j-2] + a[i])\n\n    max_sum = dp[index][k]\n    for i in range(1, k+1):\n        max_sum = max(max_sum, dp[index][i])\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n\n    # Initialize maximum sum to the value at the index itself\n    max_sum = a[index]\n\n    # Initialize prefix sum to the value at the index itself\n    prefix_sum = a[index]\n\n    # Initialize maximum sum of a decreasing subsequence that ends at index\n    max_sum_decreasing = 0\n\n    # Initialize prefix sum of a decreasing subsequence that ends at index\n    prefix_sum_decreasing = 0\n\n    # Loop through all previous indices\n    for i in range(index - 1, -1, -1):\n        # Check if the current prefix sum is less than the current value at the index\n        if prefix_sum < a[i]:\n            # Update the prefix sum\n            prefix_sum += a[i]\n\n            # Update the maximum sum if the current prefix sum is greater than the maximum sum so far\n            if prefix_sum > max_sum:\n                max_sum = prefix_sum\n\n            # Update the maximum sum of a decreasing subsequence if the current prefix sum is greater than the maximum sum of a decreasing subsequence so far\n            if prefix_sum > max_sum_decreasing:\n                max_sum_decreasing = prefix_sum\n\n            # Update the prefix sum of a decreasing subsequence if the current prefix sum is greater than the prefix sum of a decreasing subsequence so far\n            if prefix_sum > prefix_sum_decreasing:\n                prefix_sum_decreasing = prefix_sum\n\n            # If the current index is greater than k, we have found a decreasing subsequence that includes a kth element which is after the current index\n            if i < k:\n                return max_sum_decreasing\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k < index:\n        return 0\n\n    if index == 0:\n        if a[0] <= k:\n            return 1 + max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    if index == n:\n        return 0\n\n    if a[index] <= k:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, a[index]))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prev = [-1] * (n+1)\n    max_sum = float('-inf')\n    # Iterate through the array\n    for i in range(1, n+1):\n        # Check if the current element is greater than k\n        if a[i] > k:\n            # If it is, find the maximum sum of increasing subsequence from the prefix of index i to i-1\n            max_sum = max(max_sum, a[i] + prev[i-1])\n        # Update the previous element\n        prev[i] = max_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0, 0, 0\n    \n    # dp[i][j] represents the maximum sum of increasing subsequence from prefix until index i and including the jth element after i, i.e., k > i\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Initialize first row and column of dp array\n    for i in range(1, k+1):\n        dp[0][i] = a[0] * i\n    for i in range(1, n+1):\n        dp[i][0] = a[i-1] * i\n    \n    # Fill rest of the dp array using recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i-1] < a[i-1] * j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1] * j)\n            else:\n                dp[i][j] = dp[i-1][j]\n                \n    # Find maximum sum of increasing subsequence from prefix until i and including the kth element after i, i.e., k > i\n    max_sum = max(dp[n][k], dp[n-1][k-1] + a[n-1] * k)\n    max_sum_i = n\n    max_sum_j = k\n    \n    # Backtrack to find the optimal path\n    for i in range(n, 0, -1):\n        for j in range(k, 0, -1):\n            if a[i-1] < a[i-1] * j:\n                if dp[i-1][j] > dp[i-1][j-1] + a[i-1] * j:\n                    max_sum_i = i\n                    max_sum_j = j\n                    max_sum = dp[i-1][j]\n                    break\n            else:\n                max_sum_i = i\n                max_sum_j = j\n                max_sum = dp[i-1][j]\n                break\n            \n    return max_sum, max_sum_i, max_sum_j"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes an array a, its size n, an index i and a kth element after index i.\n    It returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing_subseq = []\n    for j in range(index, n):\n        if a[j] > a[j-1]:\n            current_sum += a[j]\n        else:\n            current_sum = 0\n        if j == k-1:\n            increasing_subseq.append(a[j])\n            continue\n        if current_sum >= max_sum:\n            max_sum = current_sum\n            increasing_subseq = [a[j]]\n        elif current_sum > max_sum - a[j-max_sum]:\n            increasing_subseq.append(a[j])\n    return max_sum, increasing_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list of integers a, the length of the list n,\n    the index i of the kth element and the length of the increasing subsequence including the kth element k.\n    It returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > n:\n        return 0\n    \n    max_sum = 0\n    curr_sum = a[index]\n    \n    if index > 0 and a[index-1] < a[index]:\n        curr_sum += a[index-1]\n    \n    for j in range(index+1, min(index+k+1, n)):\n        if a[j] > a[index]:\n            curr_sum += a[j]\n        else:\n            break\n        \n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n    a: A list of integers, where a[i] is the value of the ith element in the array.\n    n: An integer, where n is the length of the array a.\n    index: An integer, where index is the index of the ith element.\n    k: An integer, where k is the index of the kth element after index.\n\n    Returns:\n    An integer, where the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element is returned.\n    \"\"\"\n\n    # Initialize a dictionary to store the sum of increasing subsequence for all possible suffixes of the array.\n    suffix_sums = {}\n\n    # Calculate the sum of the increasing subsequence from the first element to the ith element.\n    suffix_sums[0] = a[0]\n\n    # Loop through all the indices from 1 to n-1.\n    for i in range(1, n):\n        # Calculate the sum of the increasing subsequence from the previous suffix to the ith element.\n        current_sum = suffix_sums[i-1] + a[i]\n\n        # If the current sum is greater than the maximum sum seen so far, update the maximum sum.\n        if current_sum > suffix_sums.get(i, float('-inf')):\n            suffix_sums[i] = current_sum\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until ith index and including a given kth element.\n    max_sum = suffix_sums.get(k, float('-inf'))\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until the kth element.\n    max_sum_k = 0\n\n    # Loop through all the indices from 0 to k.\n    for i in range(k):\n        # Calculate the sum of the increasing subsequence from the previous suffix to the kth element.\n        current_sum_k = suffix_sums.get(i, float('-inf'))\n\n        # If the current sum is greater than the maximum sum seen so far, update the maximum sum and its corresponding index.\n        if current_sum_k > max_sum_k:\n            max_sum_k = current_sum_k\n            max_sum = suffix_sums.get(i, float('-inf'))\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and including a given kth element.\n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col_tup = deepcopy(tuplex)\n    for i in range(m):\n        col_tup.append(None)\n    for i in range(n-1):\n        col_tup = col_tup[1:]\n    return tuple(col_tup)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i*n:i*n+n]))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    def row_list(tuplex, m):\n        '''\n        Write a function to get a list of rows from a tuple.\n        '''\n        rows = []\n        for i in range(m):\n            row = [tuplex[j] for j in range(len(tuplex))]\n            rows.append(row)\n        return rows\n\n    def col_list(tuplex, n):\n        '''\n        Write a function to get a list of columns from a tuple.\n        '''\n        cols = []\n        for i in range(n):\n            col = [tuplex[j] for j in range(len(tuplex)) if j%n == i]\n            cols.append(col)\n        return cols\n\n    rows = row_list(tuplex, m)\n    cols = col_list(tuplex, n)\n\n    def get_colon(rows, cols):\n        '''\n        Write a function to get a colon from a list of rows and columns.\n        '''\n        colon = []\n        for i in range(m):\n            for j in range(n):\n                colon.append(rows[i][j])\n        return colon\n\n    colon = get_colon(rows, cols)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ()\n    for i in range(m):\n        for j in range(n):\n            colon += (tuplex[i][j],)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple is of length m.\n    if len(tuplex)!= m:\n        raise ValueError(\"The input tuple should be of length m.\")\n    \n    # Initialize an empty list to store the colon.\n    colon = []\n    \n    # Iterate over the elements of the tuple.\n    for i in range(m):\n        # If the current index is less than n, append the original value.\n        if i < n:\n            colon.append(deepcopy(tuplex[i]))\n        # If the current index is equal to or greater than n, append a copy of the original value.\n        else:\n            colon.append(deepcopy(tuplex[i]))\n    \n    # Return the colon as a tuple.\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= m * n:\n        return \"Invalid input.\"\n    col = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(tuplex[(i*m)+j])\n        col.append(tuple(row))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(len(tuplex)):\n        colon.append(tuplex[i][:m][-n:])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple of tuples and returns a tuple of tuples where each inner tuple contains the specified number of elements from each of the outer tuples in the original tuple.\n\n    Parameters:\n        tuplex (list): A list of tuples.\n        m (int): The number of elements to take from each outer tuple.\n        n (int): The number of elements to include in each inner tuple.\n\n    Returns:\n        list: A list of tuples where each inner tuple contains the specified number of elements from each of the outer tuples in the original tuple.\n\n    Examples:\n        >>> colon_tuplex([(1,2),(3,4),(5,6)], 2, 2)\n        [(1, 2, 3, 4), (5, 6)]\n\n        >>> colon_tuplex([(1,2,3),(4,5,6)], 1, 2)\n        [(1, 2), (3, 4), (5, 6)]\n    '''\n\n    result = []\n    for tup in tuplex:\n        new_tup = []\n        for i in range(m):\n            new_tup.extend(tup)\n        new_tup = new_tup[:n]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i]))\n    for i in range(m):\n        for j in range(n-1):\n            colon[i] += deepcopy(tuplex[i+1])\n        colon[i] += deepcopy(tuplex[i])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            col.append(deepcopy(tuplex[j]))\n        result.append(tuple(col))\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in either list\n    max_num = max(nums1, nums2)\n    \n    # Initialize the largest product to the maximum value\n    largest_product = max_num\n    \n    # Initialize the maximum factor to 1\n    max_factor = 1\n    \n    # Loop through each number from 1 to N\n    for i in range(1, N+1):\n        # Calculate the factor of the product of the largest factor and the current number from each list\n        current_factor = max_factor * nums1[i-1] * nums2[i-1]\n        \n        # Update the largest product and the maximum factor if the current factor is larger\n        if current_factor > largest_product:\n            largest_product = current_factor\n            max_factor = current_factor\n    \n    # Return the largest product\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest1 = 0\n    largest2 = 0\n\n    # Loop through the first N elements of each list\n    for i in range(N):\n        # Calculate the product of the first element of each list\n        product1 = nums1[i] * nums1[i+1] * nums1[i+2] *... * nums1[i+N-1]\n\n        # Calculate the product of the second element of each list\n        product2 = nums2[i] * nums2[i+1] * nums2[i+2] *... * nums2[i+N-1]\n\n        # Update the largest products if the current product is greater\n        if product1 > largest1:\n            largest1 = product1\n        if product2 > largest2:\n            largest2 = product2\n\n    # Return the largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest1 = 0\n    largest2 = 0\n    largest3 = 0\n\n    # Loop through the lists and find the largest products\n    for i in range(N):\n        # Calculate the largest product of nums1[i] and nums2[i]\n        product1 = nums1[i] * nums2[i]\n        # Compare it with the current largest products\n        if product1 > largest1:\n            largest3 = largest2\n            largest2 = largest1\n            largest1 = product1\n        elif product1 > largest2:\n            largest3 = largest2\n            largest2 = product1\n        else:\n            largest3 = product1\n\n    # Return the largest products\n    return largest1, largest2, largest3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the products\n    products = []\n\n    # Loop through the lists\n    for i in range(len(nums1)):\n        # Calculate the largest product for this list\n        current_product = max(nums1[i], nums2[i]) * min(nums1[i], nums2[i])\n\n        # Check if this product is the largest so far\n        if current_product > max(products):\n            # If it is, add it to the list of products\n            products = [current_product] * N\n        else:\n            # If it's not, check if it should be added to the list of products\n            if current_product in products:\n                # If it is, increment the count of its occurrence\n                index = products.index(current_product)\n                products[index] += 1\n            else:\n                # If it's not, add it to the list of products\n                products.append(current_product)\n\n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Compute the largest products from each list\n    largest_product1 = nums1[-1] * nums1[-2]\n    largest_product2 = nums2[-1] * nums2[-2]\n    result[0] = max(largest_product1, largest_product2)\n\n    # Compute the remaining largest products\n    for i in range(1, N):\n        # Combine the largest products from the two lists\n        current_product = max(nums1[-1] * nums2[-1], nums1[-2] * nums2[-2])\n\n        # Update the result list\n        result[i] = current_product\n\n        # Remove the two largest products from the two lists\n        if current_product == largest_product1:\n            nums1.pop()\n            nums1.pop()\n            largest_product1 = max(nums1[-1] * nums1[-2], nums1[-2] * nums1[-3])\n        else:\n            nums2.pop()\n            nums2.pop()\n            largest_product2 = max(nums2[-1] * nums2[-2], nums2[-2] * nums2[-3])\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # create a list to store the products of the largest N numbers from each list\n    result = []\n\n    # loop through the first list\n    for i in range(len(nums1)):\n        # loop through the second list\n        for j in range(len(nums2)):\n            # if we have found N products, break out of the outer loop\n            if len(result) == N:\n                break\n\n            # calculate the product of the i-th number from the first list and the j-th number from the second list\n            product = nums1[i] * nums2[j]\n\n            # if the product is larger than any of the previous products we have found, add it to the result list\n            if not result or product > max(result):\n                result.append(product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the number of largest products that need to be selected\n    max_products = N // 2\n    \n    # Initialize variables to keep track of the largest products found so far\n    largest_products1 = []\n    largest_products2 = []\n    \n    # Initialize variables to keep track of the maximum value of each list\n    max_nums1 = nums1[0]\n    max_nums2 = nums2[0]\n    \n    # Iterate through each number of largest products to be selected\n    for i in range(max_products):\n        # If the number of largest products to be selected is less than the number of elements in one list,\n        # then we need to select one factor from each list to get the remaining number of largest products\n        if i < len(nums1):\n            # Calculate the largest product of the first i elements of nums1 and nums2\n            product = nums1[i] * nums2[i]\n            \n            # If the product is greater than the current largest product of nums1 or nums2, update the largest products\n            if product > max_nums1:\n                largest_products1 = [nums1[i]]\n            elif product > max_nums2:\n                largest_products2 = [nums2[i]]\n            else:\n                largest_products1.append(nums1[i])\n                largest_products2.append(nums2[i])\n            \n            # Update the maximum value of nums1 and nums2\n            max_nums1 = max(nums1[i+1:], max_nums1)\n            max_nums2 = max(nums2[i+1:], max_nums2)\n    \n    # Calculate and return the largest products\n    return sum(largest_products1) * sum(largest_products2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product for each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Find the minimum value for each list\n    min1 = min(nums1)\n    min2 = min(nums2)\n\n    # Find the difference between the maximum and minimum values\n    diff = max1 - min1\n\n    # Initialize the largest products and their indices\n    largest_products = []\n    indices = []\n\n    # Iterate through the numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the product of the i-th number from each list\n        product1 = nums1[i-1] * i\n        product2 = nums2[i-1] * i\n\n        # Check if the product is within the range [min1, max1]\n        if product1 >= min1 and product1 <= max1:\n            # If yes, check if the product is greater than the current largest product\n            if product1 > largest_products[-1]:\n                # If yes, update the largest product and its index\n                largest_products[-1] = product1\n                indices[-1] = i\n        # Check if the product is within the range [min2, max2]\n        if product2 >= min2 and product2 <= max2:\n            # If yes, check if the product is greater than the current largest product\n            if product2 > largest_products[-1]:\n                # If yes, update the largest product and its index\n                largest_products[-1] = product2\n                indices[-1] = i\n\n        # If the product is within the range [min1, max1] or [min2, max2], add it to the list of largest products\n        if largest_products[-1]!= 0:\n            # Add the index to the list of indices\n            indices.append(i)\n\n    # Return the largest products and their indices\n    return largest_products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        if product not in products:\n            products.append(product)\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to keep track of largest products\n    largest1 = nums1[0] * nums2[0]\n    largest2 = nums1[0] * nums2[1]\n    \n    # Loop through the remaining numbers in the lists\n    for i in range(2, N):\n        # Calculate the largest product for each factor\n        factor1 = nums1[i] * largest1\n        factor2 = nums2[i] * largest2\n        \n        # Update the largest products if necessary\n        if factor1 > largest1:\n            largest1 = factor1\n        if factor2 > largest2:\n            largest2 = factor2\n    \n    return largest1, largest2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst1 = list(str1)\n    # Convert the list to a tuple\n    tup1 = tuple(lst1)\n    return tup1"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    \n    # Convert the list of characters to a tuple of characters\n    return tuple(char_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the integer with the leftmost unset bit set to 1.\n    \"\"\"\n    # Initialize the bit count of 0's in the binary representation of n.\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    # Iterate through the binary representation of n from right to left, and for each unset bit, set its position to 1.\n    while count >= 0:\n        if not (n & 1):\n            n = n | (1 << count)\n            break\n        n = n >> 1\n        count -= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit.\n    \"\"\"\n\n    # Initialize the index and the mask\n    index = 0\n    mask = 0\n\n    # Iterate till the rightmost unset bit is found\n    while (mask & (1 << index)) == 0:\n        index += 1\n\n    # Set the leftmost unset bit\n    n |= (1 << index)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Initialize an empty list to store the unset bits\n    unset_bits = []\n    \n    # Traverse through the binary representation of the integer\n    for i in range(32):\n        # If the bit is unset, add it to the list\n        if (n & (1 << i)) == 0:\n            unset_bits.append(i)\n    \n    # If the list is empty, return -1\n    if not unset_bits:\n        return -1\n    \n    # Otherwise, set the leftmost unset bit\n    return n | (1 << unset_bits[0])"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    \n    while n & 1 == 0:\n        n >>= 1\n    \n    return n | (1 << (n.bit_length() - 1))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given number.\n    \"\"\"\n    # Convert the binary representation of n into a list of 0s and 1s.\n    num_bits = bin(n).lstrip('0b').count('1')\n    binary_representation = [int(digit) for digit in bin(n)[2:]]\n\n    # Iterate over the list of bits and set the left most unset bit to 1.\n    for i in range(num_bits, 0, -1):\n        if binary_representation[i-1] == 0:\n            binary_representation[i-1] = 1\n            break\n\n    # Convert the list of 0s and 1s back into a binary number and return it.\n    return int(''.join(str(bit) for bit in binary_representation), 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Loop through each bit in n and set it to 1 if it's 0.\n    for i in range(len(bin(n)[2:])): \n        if bin(n)[2:][i] == '0': \n            n = n | (1 << i)\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Loop through the bits of the integer n\n    for bit in bin(n)[2:]:\n        # If the current bit is 1, we can unset it and move on to the next bit\n        if bit == '1':\n            result = result | (1 << 31)\n            n = n & ~(1 << 31)\n        else:\n            # Otherwise, we can continue to the next bit\n            pass\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n and returns an integer where the leftmost unset bit is set to 1.\n    \"\"\"\n    # convert integer to binary string\n    binary_str = bin(n)[2:]\n    # iterate through the binary string from right to left\n    for i in range(len(binary_str)):\n        # check if the bit is unset\n        if binary_str[i] == '0':\n            # set the bit to 1\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n            # break the loop as the bit is set\n            break\n    # convert binary string back to integer\n    result = int(binary_str, 2)\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variables\n    bit_pos = -1\n    \n    # Loop through each bit in the binary representation of n\n    while n > 0:\n        # Check if the current bit is set\n        if n & 1 == 1:\n            # If the current bit is set, set the bit position\n            bit_pos = bit_pos + 1\n        # Shift the binary representation of n by one bit to the right\n        n = n >> 1\n    \n    # Return the bit position of the left most unset bit\n    return bit_pos"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the input number to binary string\n    binary_str = bin(n)[2:]\n\n    # Iterate through the binary string and set the leftmost unset bit to 1\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n\n    # Convert the binary string back to an integer\n    result = int(binary_str, 2)\n\n    return result"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone with the given radius r and height h.\n    '''\n\n    # calculating the area of the cone\n    area = math.pi * (r ** 2)\n\n    # calculating the volume of the cone\n    volume = area * h\n\n    # returning the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume using the formula V=1/3*\u03c0r^2h\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Find the volume of a cone.\n    '''\n    # Calculate the half-base and half-height\n    h_half = h / 2.0\n    r_half = r / 2.0\n\n    # Calculate the base area using the formula 3/2 * pi * r^2\n    base_area = 3.0 / 2.0 * math.pi * r_half ** 2\n\n    # Calculate the top area using the formula pi * r^2 + pi * h_half^2\n    top_area = math.pi * r_half ** 2 + math.pi * h_half ** 2\n\n    # Calculate the total area\n    total_area = base_area + top_area\n\n    # Calculate the volume\n    volume = math.pi * r_half ** 2 * h_half\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        highest_power = 1\n        while highest_power <= n:\n            highest_power *= 2\n        return highest_power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if i == 1:\n            return i\n        else:\n            i <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): a non-negative integer\n\n    Returns:\n    int: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    # Convert n to binary\n    binary = bin(n)[2:]\n    # Initialize variables to store the highest power of 2 found\n    highest = 0\n    # Iterate through the binary string and compare each bit with the highest power of 2 found so far\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            highest = i + 1\n        # If a 0 is found, return the highest power of 2 found so far\n        if binary[i] == '0':\n            return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        highest_power_of_2 = 1\n        while highest_power_of_2 < n:\n            highest_power_of_2 <<= 1\n        return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 as 1\n    highest = 1\n    \n    # Iterate through the numbers from 2 to n\n    for num in range(2, n+1):\n        # If the current number is a power of 2\n        if num & (num-1) == 0:\n            # If the current power of 2 is greater than the current highest power of 2\n            if num > highest:\n                # Update the highest power of 2\n                highest = num\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 4:\n        return 2\n    else:\n        i = 1\n        while i < n:\n            i = i << 1\n        return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is a power of 2\n    if n & (n-1) == 0: \n        # Return n itself\n        return n\n    # Find the highest power of 2 less than or equal to n\n    else:\n        # Initialize the variable to store the highest power of 2\n        max_pow = 1\n        # Loop until we find the highest power of 2\n        while max_pow < n:\n            # Update the max_pow\n            max_pow *= 2\n        # Return the highest power of 2 less than or equal to n\n        return max_pow - 1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two lucas numbers\n    lucas_prev = 2\n    lucas_curr = 1\n\n    # Iterate n-1 times to find the nth lucas number\n    for i in range(2, n):\n        lucas_next = lucas_prev + lucas_curr\n        lucas_prev = lucas_curr\n        lucas_curr = lucas_next\n\n    # Return the nth lucas number\n    return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the first two lucas numbers\n    lucas_prev = 0\n    lucas_curr = 2\n    \n    # loop through the remaining n-1 lucas numbers\n    for i in range(2, n):\n        # calculate the next lucas number\n        lucas_next = lucas_prev + lucas_curr\n        # update the lucas variables\n        lucas_prev = lucas_curr\n        lucas_curr = lucas_next\n        \n    # return the last lucas number\n    return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n as input and returns the nth Lucas number.\n\n    The Lucas sequence is defined as:\n\n    Lucas(0) = 2\n    Lucas(1) = 1\n    Lucas(n) = Lucas(n-1) + Lucas(n-2)\n\n    where Lucas(0) and Lucas(1) are the special cases.\n\n    We can implement this function recursively by computing the Lucas numbers \n    up to n and then returning the nth number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Loop through the first list\n    for i in range(len(l1)):\n        # Add the key-value pair to the nested dictionary\n        nested_dict[l1[i]] = l2[i]\n    \n    # Loop through the second list\n    for i in range(len(l3)):\n        # Check if the key already exists in the nested dictionary\n        if l3[i] in nested_dict:\n            # If it does, add the value to the existing key\n            nested_dict[l3[i]].append(l2[i])\n        else:\n            # If it doesn't, create a new key with the value\n            nested_dict[l3[i]] = [l2[i]]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Define empty dictionary\n    result = {}\n    \n    # Iterate over lists\n    for i in range(len(l1)):\n        # Check if current list contains dictionaries\n        if isinstance(l1[i], dict):\n            # Iterate over keys of dictionaries\n            for j in l1[i]:\n                # If key is already in result, create a list for it\n                if j in result:\n                    if not isinstance(result[j], list):\n                        result[j] = [result[j]]\n                    result[j].append(l1[i][j])\n                # If key is not in result, create a new key-value pair in result\n                else:\n                    result[j] = l1[i][j]\n        # If current list contains other data types, simply append it to result\n        else:\n            result.append(l1[i])\n            \n    # Convert the nested dictionary into a flattened dictionary\n    flattened_result = {}\n    for key, value in result.items():\n        if isinstance(value, dict):\n            for inner_key, inner_value in value.items():\n                flattened_result['.'.join([key, inner_key])] = inner_value\n        else:\n            flattened_result[key] = value\n            \n    return flattened_result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    d = {}\n    \n    # Iterate through the three lists and add the elements to the dictionary\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]][l3[i]] = l3[i]\n    \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*lists):\n    result = {}\n    for i, list_ in enumerate(lists):\n        for item in list_:\n            if isinstance(item, list):\n                if isinstance(item[0], str):\n                    if len(item) == 2:\n                        key, value = item\n                    elif len(item) == 3:\n                        key, value, sub_dict = item\n                    else:\n                        raise ValueError('List must have 2 or 3 elements.')\n                    if key in result:\n                        if isinstance(result[key], dict):\n                            result[key].update(sub_dict)\n                        else:\n                            result[key] = {sub_dict}\n                    else:\n                        result[key] = {sub_dict}\n            elif isinstance(item, dict):\n                result.update(item)\n            else:\n                if isinstance(item, str):\n                    key = item\n                    value = i\n                else:\n                    raise ValueError('List items must be strings or dictionaries.')\n                if key in result:\n                    if isinstance(result[key], list):\n                        result[key].append(value)\n                    else:\n                        result[key] = [result[key], value]\n                else:\n                    result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2[i])):\n            result[l1[i]][l2[i][j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create empty dictionary\n    nested_dict = {}\n    # Iterate through each list\n    for i in range(len(l1)):\n        # Add key-value pairs to the nested dictionary\n        nested_dict[i] = {l2[i]:l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if i == 0:\n            result = {l1[i]: l2[i]}\n        else:\n            result[l1[i]] = l2[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes any number of lists as arguments and returns a nested dictionary.\n\n    Example:\n    >>> lst1 = ['apple', 'banana', 'cherry']\n    >>> lst2 = [10, 20, 30]\n    >>> lst3 = {'name': 'John', 'age': 30}\n    >>> nested_dict = convert_list_dictionary(lst1, lst2, lst3)\n    >>> print(nested_dict)\n    {'lst1': ['apple', 'banana', 'cherry'], 'lst2': [10, 20, 30], 'lst3': {'name': 'John', 'age': 30}}\n    \"\"\"\n    # Combine all the lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list += lst\n\n    # Create a dictionary for each item in the combined list\n    nested_dict = {}\n    for i in range(len(combined_list)):\n        key = combined_list[i]\n        if isinstance(key, list):\n            key = '_'.join(key)\n        value = lists[i][i]\n        nested_dict[key] = value\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    :param lists: A list of lists.\n    :return: A nested dictionary created by joining all lists.\n    \"\"\"\n    result = {}\n    for lst in lists:\n        for item in lst:\n            key = item.split('=')[0]\n            value = item.split('=')[1]\n            if key in result:\n                result[key].append(value)\n            else:\n                result[key] = [value]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, current_sum):\n        if n == 1:\n            return current_sum\n        else:\n            return max(helper(n//2, current_sum + n), helper(n//3, current_sum + n), helper(n//4, current_sum + n), helper(n//5, current_sum + n))\n\n    return helper(n, 0)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return get_max_sum(n // 2) + n\n    else:\n        return max(get_max_sum(n // 2) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    # Calculate the maximum sum up to n/5\n    max_sum_to_n_fifth = get_max_sum(n/5)\n\n    # Calculate the maximum sum up to n/4\n    max_sum_to_n_fourth = get_max_sum(n/4)\n\n    # Calculate the maximum sum up to n/3\n    max_sum_to_n_third = get_max_sum(n/3)\n\n    # Calculate the maximum sum up to n/2\n    max_sum_to_n_second = get_max_sum(n/2)\n\n    # Calculate the maximum sum up to n\n    max_sum_to_n = max(max_sum_to_n_fifth + max_sum_to_n_fourth + max_sum_to_n_third + max_sum_to_n_second, n)\n\n    return max_sum_to_n\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nprint(get_max_sum(10))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        f1 = get_max_sum(n/2)\n        f2 = get_max_sum(n/3)\n        f3 = get_max_sum(n/4)\n        f4 = get_max_sum(n/5)\n        return max(f1+f2+f3+f4,n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return max(get_max_sum(n//2), get_max_sum(n//2+1)) + n\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//2)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 35\n    elif n == 5:\n        return 65\n    \n    f_n = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    f_n = max(f_n, n)\n    \n    return f_n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    elif n == 2:\n        return 2\n    \n    elif n == 3:\n        return 6\n    \n    elif n == 4:\n        return 24\n    \n    elif n == 5:\n        return 120\n    \n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    def find_max_sum(n):\n        if n <= 1:\n            return n\n        else:\n            return max(find_max_sum(n/2) + find_max_sum(n/3) + find_max_sum(n/4) + find_max_sum(n/5), n)\n\n    max_sum = find_max_sum(n)\n    print(\"The maximum sum possible is:\", max_sum)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize a variable to keep track of the length of the longest list\n    max_length = 0\n\n    # Iterate over the input list and update the max_length variable\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n\n    # Return the list with the maximum length\n    return [item for item in input_list if len(item) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Given a list, returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    result = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n\n    return max_list\n\ninput_list = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11]]\nprint(max_length_list(input_list))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    # iterate over the input list\n    for item in input_list:\n        # check if the current item has a longer length\n        if len(str(item)) > max_length:\n            # update the max_length and max_list\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            # add the current item to the max_list if its length is equal to the max_length\n            max_list.append(item)\n            \n    # return the max_list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]\n\ninput_list = [[\"apple\", \"banana\", \"cherry\"], [\"orange\", \"pear\", \"mango\"], [\"kiwi\", \"grape\", \"blueberry\"]]\nresult = max_length_list(input_list)\nprint(result)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        # if yes, then return True\n        return True\n    else:\n        # if no, then return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first character that has a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # loop through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # find the first character in the dictionary with a frequency of 1\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again to find the first non-repeating character\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character in the dictionary that has a count of 1\n    first_char = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_char = char\n            break\n\n    return first_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the string and return the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        # check if the character is already present in the dictionary\n        if char in freq:\n            # if it is, increment its frequency by 1\n            freq[char] += 1\n        else:\n            # if it is not, add it to the dictionary with a frequency of 1\n            freq[char] = 1\n    \n    # find the first character with a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    count_dict = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in count_dict:\n            count_dict[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            count_dict[char] = 1\n    \n    # Iterate through each character in the dictionary\n    for char in count_dict:\n        # If the count of the character is 1, return the character\n        if count_dict[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with frequency 1\n            freq[char] = 1\n    \n    # Loop through each character in the string again, and return the first one that has frequency 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Remove all non-alphabetic characters from the string\n    cleaned_string = ''.join(filter(str.isalpha, string))\n    # Use regular expressions to check if the cleaned string matches the regex pattern\n    if re.match(regex, cleaned_string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Calculate the middle index\n    middle_index = len(numbers) // 2\n\n    # If the middle index is even, take the average of the two middle numbers\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    # If the middle index is odd, take the middle number\n    else:\n        median = numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    This function takes three numbers as inputs and returns their median value.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a,b,c])\n\n    # Determine the length of the sorted list\n    length = len(sorted_list)\n\n    # Find the median\n    if length % 2 == 0:\n        median = (sorted_list[length//2-1] + sorted_list[length//2])/2\n    else:\n        median = sorted_list[length//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    middle_number = len(sorted_numbers) // 2\n    return sorted_numbers[middle_number]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    # calculate the median\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Determine the size of the array\n    n = len(sorted_numbers)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of those three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index of the three sorted numbers\n    middle_index = len(sorted_numbers) // 2\n\n    # Find the median of the three numbers\n    median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Determine the median based on the length of the list\n    if len(nums) % 2 == 0:\n        # If the list has an even number of elements, return the average of the two middle elements\n        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        # If the list has an odd number of elements, return the middle element\n        median = nums[len(nums)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        mid = len(numbers) // 2\n        return (numbers[mid-1] + numbers[mid])/2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2-1]+nums[n//2])/2\n    else:\n        return nums[n//2]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        for digit in str(num):\n            sum += int(digit)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total = sum(digits)\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_digits = sum(digits)\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize sum to zero\n    sum_of_digits = 0\n    \n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        \n        # iterate over each character in the string\n        for char in num_str:\n            # convert the character to an integer\n            digit = int(char)\n            \n            # add the digit to the running total\n            sum_of_digits += digit\n    \n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(map(int, str(num)))\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the length of both tuples\n    length = len(test_tup1)\n    \n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = tuple(0 for i in range(length))\n    \n    # Perform the bitwise xor operation across the tuples\n    for i in range(length):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples have different lengths.'\n    \n    # perform the bitwise xor operation across the tuples\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    \n    # return the result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return None\n    elif len(test_tup1) == 0:\n        print(\"Both tuples are empty.\")\n        return None\n    elif len(test_tup1) == 1:\n        return test_tup1[0] ^ test_tup2[0]\n    else:\n        return (bitwise_xor(test_tup1[:-1], test_tup2[:-1]) ^ test_tup1[-1] ^ test_tup2[-1])"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Using a loop to iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        for sub_item in item:\n            unique_tuples.add((sub_item, item.count(sub_item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if isinstance(item, tuple):\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in test_list:\n        if tuple(i) not in freq_list:\n            freq_list.append(tuple(i))\n    return len(freq_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # Iterate through the list and add each unique tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # Return the length of the set, which is the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Get the maximum length of the two tuples\n    max_length = max(len(test_tup1), len(test_tup2))\n\n    # Initialize the result tuple with zeros\n    result_tup = [0] * max_length\n\n    # Loop through the tuples and add the corresponding elements\n    for i in range(max_length):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store the sub-result\n        sub_result = []\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements of the two tuples and append the result to the sub-result list\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        # Append the sub-result list to the result list\n        result.append(sub_result)\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty tuple to store the result\n    result = ()\n    # loop through both tuples and add elements at the same index\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    # return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two nested tuples must have the same length.\")\n    \n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        # If the element is a tuple, recursively call the function\n        if isinstance(test_tup1[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        # If the element is an integer, add it to the result list\n        elif isinstance(test_tup1[i], int):\n            result.append(test_tup1[i] + test_tup2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize an empty result list to store the sum of the two tuples\n    result = []\n    \n    # Iterate over both tuples simultaneously\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of both tuples and store the result in the result list\n        result.append(test_tup1[i] + test_tup2[i])\n        \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a variable to store the sum of each tuple\n    sum_tup = tuple()\n    \n    # Check the lengths of both tuples\n    if len(test_tup1) == len(test_tup2):\n        # If both tuples have the same length, iterate over each element of each tuple\n        for i in range(len(test_tup1)):\n            # Add the i-th element of each tuple and store the result in a tuple\n            sum_tup = sum_tup + (test_tup1[i] + test_tup2[i],)\n        \n        # Return the sum tuple\n        return sum_tup\n    else:\n        # If the length of one tuple is less than the length of the other, add the missing elements with 0\n        for i in range(len(test_tup1)):\n            sum_tup = sum_tup + (test_tup1[i] + 0,)\n        \n        # Append the remaining elements of the second tuple to the sum_tup\n        sum_tup = sum_tup + tuple(test_tup2)\n        \n        # Return the sum tuple\n        return sum_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a  \n    else:   \n        return b   "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists in the tuple\")\n    else:\n        print(\"Element does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"Element found\")\n    else:\n        print(\"Element not found\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuple1 in tuplex"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two parameters: tuplex and tuple1.\n    Tuplex is a tuple and tuple1 is another tuple.\n    The function checks whether an element exists within tuple1.\n    If it exists, then the function returns True.\n    Otherwise, it returns False.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x & 1 # bitwise AND operator to get only the last bit of the number\n    if parity == 1:\n        return \"The number is odd.\"\n    else:\n        return \"The number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1 if x % 2 == 0 else 0\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Calculate the parity of the number using the modulo operator\n    parity = x % 2\n    \n    # Return True if the parity is odd and False otherwise\n    if parity == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Initialize parity flag to False\n    parity_flag = False\n\n    # Check if the number is positive or negative\n    if x > 0:\n        parity_flag = True\n    elif x < 0:\n        parity_flag = False\n\n    # If the number is odd, return True; else, return False\n    if parity_flag:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" \n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # To find the parity of a number, we need to divide it by 2 and check whether it is an integer or not.\n    if x % 2 == 0: \n        # If the remainder is 0, then the parity of the number is even.\n        return False\n    else: \n        # If the remainder is not 0, then the parity of the number is odd.\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Calculate the parity of the number\n    if x%2 == 0:\n        parity = \"Even\"\n    else:\n        parity = \"Odd\"\n\n    # Print the parity of the number\n    print(\"The parity of\", x, \"is\", parity)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Reverse the string\n    num_str = num_str[::-1]\n    \n    # Create a new string with the rearranged digits\n    new_str = ''\n    for i in range(len(num_str)):\n        if int(num_str[i]) < 9:\n            new_str += str(int(num_str[i]) + 1)\n        else:\n            new_str += '0'\n    \n    # Convert the new string to an integer\n    new_num = int(new_str)\n    \n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a string\n    s = str(n)\n    # initialize the variables for the new number\n    new_s = ''\n    # initialize the index of the first digit that needs to be swapped\n    index = -1\n    # loop through the digits of the string\n    for i in range(len(s)):\n        # if the digit is 9, then the index of the first digit that needs to be swapped is i\n        if int(s[i]) == 9:\n            index = i\n            break\n    # if the index of the first digit that needs to be swapped is -1, then the number is already the next biggest number\n    if index == -1:\n        return 'The number is already the next biggest number.'\n    # loop through the digits of the string from index to the end\n    for j in range(index, len(s)-1, -1):\n        # if the digit at position j is 9, then we need to swap it with the next smaller digit\n        if int(s[j]) == 9:\n            # calculate the position of the next smallest digit\n            next_smaller_pos = j\n            # if there is no next smaller digit, then return 'The number is already the next biggest number.'\n            if j+1 == len(s):\n                return 'The number is already the next biggest number.'\n            # loop through the digits from j+1 to the end of the string\n            for k in range(j+1, len(s)):\n                # if the digit at position k is smaller than the next smallest digit, then we found it\n                if int(s[k]) < int(s[next_smaller_pos]):\n                    next_smaller_pos = k\n            # swap the digits at positions j and next_smaller_pos\n            s[j], s[next_smaller_pos] = s[next_smaller_pos], s[j]\n    # convert the string back to an integer and return the result\n    return int(s)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize an empty list to store the digits of the number\n    num_list = []\n    # Iterate through each character in the string\n    for char in num_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Convert the character to an integer and append it to the num_list\n            num_list.append(int(char))\n    \n    # Sort the num_list in descending order\n    num_list.sort(reverse=True)\n    \n    # Join the sorted digits in a string and convert it back to an integer\n    new_num = int(''.join(str(digit) for digit in num_list))\n    # Return the next bigger number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize a list to store the digits of the given number\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    # Find the index of the smallest digit\n    smallest_index = digits.index(min(digits))\n    # Reverse the digits of the given number starting from the smallest index\n    for i in range(smallest_index, len(digits)):\n        digits[i], digits[smallest_index] = digits[smallest_index], digits[i]\n    # Combine the digits to form the next bigger number\n    next_bigger = 0\n    for digit in digits:\n        next_bigger = next_bigger * 10 + digit\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    digits = sorted(digits, reverse=True)\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # initialize the result\n    result = 0\n\n    # loop through each digit in the digits list\n    for digit in digits:\n\n        # if the current digit is greater than 9, then increment the result by 1 and continue\n        if digit > 9:\n            result += 1\n            continue\n\n        # if the current digit is greater than or equal to 5, then increment the result by 5 and continue\n        if digit >= 5:\n            result += 5\n            continue\n\n        # if the current digit is greater than or equal to 2, then increment the result by 2 and continue\n        if digit >= 2:\n            result += 2\n            continue\n\n        # otherwise, the current digit is less than 2, so just add it to the result\n        result += digit\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    def is_greater(num1, num2):\n        '''\n        Helper function to check if num1 is greater than num2.\n        '''\n        return num1 > num2\n\n    def is_same(num1, num2):\n        '''\n        Helper function to check if num1 and num2 have the same digits.\n        '''\n        return num1 == num2\n\n    def is_smaller(num1, num2):\n        '''\n        Helper function to check if num1 is smaller than num2.\n        '''\n        return num1 < num2\n\n    def convert_to_list(num):\n        '''\n        Helper function to convert a number to a list of digits.\n        '''\n        return [int(d) for d in str(num)]\n\n    def is_valid_permutation(perm):\n        '''\n        Helper function to check if a given permutation is valid.\n        '''\n        for i in range(len(perm)):\n            if perm[i] == i:\n                continue\n            if is_greater(perm[i], perm[perm[i]]):\n                return False\n            if perm[i] > perm[perm[i]]:\n                return False\n        return True\n\n    def find_bigger_permutation(curr_perm, curr_num, next_num):\n        '''\n        Helper function to find the next permutation that is bigger than the current permutation.\n        '''\n        for i in range(len(curr_perm)):\n            if is_greater(next_num, curr_perm[i]):\n                next_perm = curr_perm[:i] + curr_perm[i+1:]\n                break\n        else:\n            return None\n        return next_perm\n\n    def find_next_bigger(curr_num):\n        '''\n        Main function to find the next bigger number by rearranging the digits.\n        '''\n        curr_perm = list(range(len(curr_num)))\n        curr_num = convert_to_list(curr_num)\n        next_num = [0] * len(curr_num)\n        next_num[0] = 1\n        i = 1\n        while True:\n            next_perm = find_bigger_permutation(curr_perm, curr_num, next_num)\n            if next_perm is None:\n                return None\n            if is_valid_permutation(next_perm):\n                return convert_to_list(int(''.join(map(str, next_perm))))\n            curr_num = next_num\n            curr_perm = next_perm\n\n    return find_next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_val = 10**9\n    n = str(n)\n    n = ''.join([str(int(i) * max_val) for i in n[::-1]])\n    n = int(n)\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    s = str(n)\n    # Initialize an empty list to store the digits of the original number\n    digits = []\n    # Iterate over the digits of the string\n    for digit in s:\n        # Convert each digit to an integer and append it to the list of digits\n        digits.append(int(digit))\n    # Find the maximum digit in the list of digits\n    max_digit = max(digits)\n    # Initialize the next bigger number with a list of zeros\n    next_bigger = [0] * len(s)\n    # Iterate over the digits of the string in reverse order\n    for digit in digits[::-1]:\n        # If the current digit is less than the maximum digit, add it to the next bigger number\n        if digit < max_digit:\n            next_bigger[digit] += 1\n        # If the current digit is equal to the maximum digit, add a zero to the next bigger number\n        else:\n            next_bigger[digit] += 1\n            next_bigger[max_digit] -= 1\n    # Convert the list of zeros to a string and return it as an integer\n    return int(''.join(str(digit) for digit in next_bigger))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    heap1 = []\n    heap2 = []\n    result = []\n    i, j = 0, 0\n    while len(result) < k:\n        if len(heap1) < len(heap2) or (len(heap1) == len(heap2) and nums1[i] <= nums2[j]):\n            if len(heap1) == k - len(result):\n                break\n            heapq.heappush(heap1, (-nums1[i], -i))\n            i += 1\n        elif len(heap1) == len(heap2) and nums1[i] > nums2[j]:\n            if len(heap2) == k - len(result):\n                break\n            heapq.heappush(heap2, (-nums2[j], -j))\n            j += 1\n        else:\n            if len(heap2) == k - len(result):\n                break\n            heapq.heappush(heap2, (-nums2[j], -j))\n            j += 1\n        pair = (nums1[i], nums2[j])\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Sort the given arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap for the first array\n    min_heap = []\n\n    # Initialize a min heap for the second array\n    min_heap2 = []\n\n    # Initialize a list to store the pairs\n    pairs = []\n\n    # Iterate over the first array and add each element to the min heap\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n\n        # If the size of the min heap is greater than k, remove the minimum element from the heap\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n        # Iterate over the second array and add each element to the min heap\n        for num in nums2:\n            # If both the element in the heap of the first array and the element in the heap of the second array are greater than the current element, add the pair to the list of pairs\n            if num > heapq.heappop(min_heap) and num > heapq.heappop(min_heap2):\n                pairs.append((heapq.heappop(min_heap), num))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n    \n    # iterate through the lists of numbers\n    for num1 in nums1:\n        for num2 in nums2:\n            # add a tuple (num1, num2) to the heap\n            heapq.heappush(min_heap, (num1, num2))\n            \n            # if the size of the heap is greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n                \n    # create a list of tuples (num1, num2) for the k smallest pairs\n    k_smallest_pairs = []\n    for i in range(k):\n        (num1, num2) = heapq.heappop(min_heap)\n        k_smallest_pairs.append((num1, num2))\n        \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use heapq to store pairs of elements\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # heapq.heappush(pairs, (min(nums1[i], nums2[j]), (i, j)))\n            # Use tuple to store (num1, num2, index1, index2)\n            heapq.heappush(pairs, (-nums1[i], -nums2[j], i, j))\n            if len(pairs) > k:\n                # heapq.heappop(pairs)\n                heapq.heappop(pairs)\n    # Return the pairs of elements\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples containing elements of the first array and their corresponding indices in the second array\n    pairs = [(nums1[i], i) for i in range(len(nums1))]\n\n    # Sort the list of tuples in ascending order of the first element of each tuple\n    pairs.sort(key=lambda x: x[0])\n\n    # Initialize an empty heap of size k and a dictionary to store the pairs\n    heap = []\n    pairs_dict = {}\n\n    # Iterate through the sorted list of tuples\n    for i in range(k):\n        # Extract the smallest pair from the list and add it to the heap\n        pair = pairs.pop(0)\n        heapq.heappush(heap, pair)\n\n        # If the size of the heap is greater than k, extract the smallest pair from the heap and add it to the dictionary\n        if len(heap) > k:\n            pair_heap = heapq.heappop(heap)\n            pair_heap = (pair_heap[0], pair_heap[1])\n            pairs_dict[pair_heap] = True\n\n    # Convert the dictionary keys to a list of tuples and return the list\n    return list(pairs_dict.keys())"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    \n    # iterate through the arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # check if the current pair is the smallest k-1 pairs\n            if len(min_heap) < k-1:\n                heapq.heappush(min_heap, (min(num1, num2), (num1, num2)))\n            \n            # if the heap size is k, remove the smallest pair and add the new pair\n            elif len(min_heap) == k-1:\n                if min_heap[0][0] > min(num1, num2):\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (min(num1, num2), (num1, num2)))\n            \n            # remove the smallest pair if the new pair is smaller\n            else:\n                if min_heap[0][1][0] > num1 or min_heap[0][1][1] > num2:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (min(num1, num2), (num1, num2)))\n    \n    # create a list to store the k smallest pairs\n    k_pairs = []\n    \n    # iterate through the heap and add the smallest pairs to the list\n    while min_heap:\n        k_pairs.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    \n    return k_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Initialize a min-heap of size k to store the pairs of elements\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-nums1[i], nums2[i]))\n\n    # Iterate over the second array and remove the smallest pair from the heap\n    for j in range(k, len(nums2)):\n        # Pop the smallest pair from the heap, which is now the new smallest pair\n        curr_min_pair = heapq.heappop(heap)\n\n        # If the current pair is not equal to the smallest pair, add the new pair to the heap\n        if nums1[j-k]!= curr_min_pair[1]:\n            heapq.heappush(heap, (-curr_min_pair[0], nums2[j]))\n\n    # Pop the k smallest pairs from the heap and return them as a list of tuples\n    return [-pair[1] for pair in heapq.nsmallest(k, heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes three arguments - nums1, nums2, k. It returns the k smallest pairs consisting of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap to store the pairs of numbers.\n    heap = []\n\n    # Iterate through the first array and the second array.\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n\n            # Calculate the sum of the current pair.\n            current_sum = nums1[i] + nums2[j]\n\n            # If the current sum is smaller than or equal to the current smallest sum in the heap, add the pair to the heap.\n            if not heap or heap[0][1] > current_sum:\n                heapq.heappush(heap, [nums1[i], nums2[j], current_sum])\n\n            # If the length of the heap is greater than or equal to k, pop the smallest pair from the heap and append it to the result list.\n            if len(heap) >= k:\n                current_min = heapq.heappop(heap)\n                result.append([current_min[0], current_min[1]])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a set to store unique elements from the first array\n    unique_nums1 = set(nums1)\n\n    # create a list to store the minimum value of the first element for each element from the second array\n    min_vals = [float('inf')] * len(nums2)\n\n    # initialize a heap to store the smallest pairs of elements\n    heap = []\n\n    # iterate through the unique elements from the first array\n    for num1 in unique_nums1:\n        # check if the sum of the first element and the minimum value of the second element from the heap is less than k\n        if sum(min_vals) < k:\n            # add the first element to the heap\n            heapq.heappush(heap, (num1, float('inf')))\n        else:\n            # if the sum is greater than k, remove the smallest pair from the heap\n            heapq.heappop(heap)\n\n        # update the minimum value of the second element for each element from the second array\n        for i in range(len(nums2)):\n            # if the element from the second array is smaller than the current minimum value, update the minimum value\n            if nums2[i] < min_vals[i]:\n                min_vals[i] = nums2[i]\n\n    # return the number of pairs in the heap\n    return len(heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the given arrays to a dictionary where the key is the array element and the value is the index\n    nums1_dict = {}\n    nums2_dict = {}\n    for i, num in enumerate(nums1):\n        nums1_dict[num] = i\n    \n    for j, num in enumerate(nums2):\n        nums2_dict[num] = j\n    \n    # Create a min heap of size k and fill it with the smallest pairs found so far\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i+j > k-1:\n                break\n            pair = (nums1[i], nums2[j])\n            if pair in heap:\n                heapq.heappop(heap)\n            heapq.heappush(heap, pair)\n    \n    # Extract the k smallest pairs from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(k)]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    def find_min_product(tuple1, tuple2):\n        return tuple1[0] * tuple2[1] - tuple1[1] * tuple2[0]\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            tuple1 = list1[i]\n            tuple2 = list1[j]\n            product = find_min_product(tuple1, tuple2)\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of the pairs of tuples.\n    '''\n    # Initialize the minimum product and two variables to store the minimum and maximum values\n    min_product = float('inf')\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # Iterate over the list of tuples\n    for i in list1:\n        # Find the minimum and maximum values in each tuple\n        min_val = min(min_val, i[0])\n        max_val = max(max_val, i[1])\n        \n        # Calculate the product of the minimum and maximum values\n        product = min_val * max_val\n        \n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to be the first element in the list\n    min_product = list1[0]\n    # Initialize a variable to store the product of the first two elements\n    product_12 = list1[0] * list1[1]\n\n    # Loop through the rest of the list and calculate the product of the next pair of elements\n    for i in range(2, len(list1)):\n        product_i = list1[i] * list1[i+1]\n        # Check if the new product is smaller than the current minimum product\n        if product_i < min_product:\n            # Update the minimum product to the new product\n            min_product = product_i\n        # Check if the new product is the same as the current minimum product\n        elif product_i == min_product:\n            # Calculate the new product of the two elements\n            new_product = list1[i-1] * list1[i]\n            # Check if the new product is smaller than the current minimum product\n            if new_product < min_product:\n                # Update the minimum product to the new product\n                min_product = new_product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Get the current tuple\n        current_tuple = list1[i]\n\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Get the next tuple\n            next_tuple = list1[j]\n\n            # Calculate the product of the tuples\n            product = current_tuple[0] * next_tuple[1]\n\n            # Update the minimum product if the new product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the minimum product of the pairs of tuples.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product1 = 1\n    product2 = 1\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Calculate the product of the first tuple element and the second tuple element\n        product1 = tup[0] * tup[1]\n        # Calculate the product of the second tuple element and the third tuple element\n        product2 = tup[1] * tup[2]\n        # Update the minimum product\n        if product1 < min_product:\n            min_product = product1\n        if product2 < min_product:\n            min_product = product2\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any two tuples\n    in the list.\n\n    For example:\n    >>> lst = [(1, 2), (3, 4), (5, 6)]\n    >>> min_product_tuple(lst)\n    36\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Iterate over the list of tuples\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # Calculate the product of the two tuples\n            product = lst[i][0] * lst[j][1]\n            # If the product is less than the current minimum, update the minimum\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to be positive infinity\n    min_product = float('inf')\n    \n    # iterate over the list of tuples\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples and check if it's less than the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value present in it.\n    '''\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # loop through the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update it\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value variable with the first element of the list\n    min_val = listval[0]\n    # Loop through the remaining elements of the list\n    for val in listval[1:]:\n        # Compare the current value with the minimum value so far\n        if val < min_val:\n            # If the current value is smaller, update the minimum value\n            min_val = val\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Loop through the rest of the list and compare each element to the current minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to the first element in the list\n    min_val = listval[0]\n\n    # Iterate over the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # If an element is smaller than the current minimum value, update it\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"The list is empty.\")\n\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert snake case to camel case\n    camel_case = re.sub(r'(?<!^)(?=[A-Z])', r' ', word).title()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into a list of words\n    words = word.split('_')\n    \n    # capitalize the first letter of each word and join them together\n    camel_case = ''.join([word.capitalize() for word in words])\n    \n    # return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if i!= 0 else x for i, x in enumerate(word.split('_')))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Replace all underscores with spaces\n    words = word.replace('_','')\n\n    # Split the words by spaces\n    words = words.split()\n\n    # Capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n\n    # Join the words by an empty space\n    camel_case_word =''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all words to lowercase\n    word = word.lower()\n    # split the words using the '_' as separator\n    words = word.split('_')\n    # join the words using the first letter in uppercase and the rest in lowercase\n    result = ''.join([words[0].capitalize(), words[1:]])\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lower case\n    word = word.lower()\n\n    # Split the word into individual characters\n    chars = list(word)\n\n    # Initialize the camel case string\n    camel_case = \"\"\n\n    # Convert each character to camel case\n    for i in range(len(chars)):\n        if i == 0 or (i > 0 and chars[i] not in ['-', '_']):\n            camel_case += chars[i].capitalize()\n        else:\n            camel_case += chars[i]\n\n    # Convert the camel case string to upper case\n    return camel_case.upper()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    Args:\n        word (str): A snake case string.\n\n    Returns:\n        str: A camel case string.\n    \"\"\"\n    pattern = r'_(.?)(?=_)'\n    words = re.findall(pattern, word)\n    camel_case_word = ''.join(words[0].upper() + word[len(words[0])+1:].lower())\n    return camel_case_word\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.findall(r'\\w+', word)\n\n    # Convert each word to camel case\n    camel_case = []\n    for i in range(len(words)):\n        if i == 0:\n            camel_case.append(words[i].capitalize())\n        else:\n            camel_case.append(words[i].title())\n\n    # Convert the list of words to a string and return the result\n    return ''.join(camel_case)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    Args:\n    word (str): The input string in snake case.\n\n    Returns:\n    str: The converted camel case string.\n    \"\"\"\n    word = re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    upper_case = False\n    for i, char in enumerate(word):\n        if char.isupper() and i!= 0:\n            camel_case += \"_\"\n        if char.isupper() and i == 0:\n            upper_case = True\n        camel_case += char.lower() if upper_case else char\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:  # check if number is even\n            new_list.append(num)  # append even numbers to new list\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input.\n    It returns the nth element of the list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if isinstance(list1, list) and isinstance(n, int):\n        return list1[n-1]\n    else:\n        raise ValueError(\"Input must be a list and an integer.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"The given index is greater than the length of the list.\")\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # convert list of tuples to list of lists\n    list2 = [list(i) for i in list1]\n    # extract the nth element from each sublist\n    nth_element = [i[n-1] for i in list2]\n    # convert list of elements back to tuple\n    result = tuple(nth_element)\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the given list is empty\n    if len(list1) == 0:\n        return None\n    # Check if the given index is valid\n    elif n < 0 or n >= len(list1):\n        return None\n    else:\n        # Extract the nth element from the given list of tuples\n        return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if len(list1) < n:\n            raise ValueError(\"List length is less than the given nth element\")\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns a boolean value indicating whether any value\n    in the first sequence exists in the second sequence or not.\n\n    Parameters:\n        list1 (list): A sequence of values.\n        list2 (list): A sequence of values.\n\n    Returns:\n        bool: True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list.\n    '''\n    # iterate through the first list and check if it exists in the second list\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # loop through list1 to check if any value exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # if no value exists in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):\n    for i in list1:\n        if i in list2:\n            print(i, \"is overlapping\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set to store the values in the first list\n    set1 = set(list1)\n    # Loop through the second list\n    for item in list2:\n        # Check if the item exists in the set\n        if item in set1:\n            return True\n    # If no overlap found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 exists in list2\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Step 1: Find the maximum element in the array\n    max_val = max(arr)\n\n    # Step 2: Initialize two variables\n    max_pair = [0,0]\n    max_pair[0] = max_pair[1] = -1\n\n    # Step 3: Iterate through the array\n    for i in range(len(arr)):\n\n        # Step 3.1: Calculate the product of the current element and the maximum element\n        product = arr[i] * max_val\n\n        # Step 3.2: Check if the current product is greater than the current maximum pair product\n        if product > max_pair[0] * max_pair[1]:\n\n            # Step 3.3: Update the maximum pair product and the corresponding elements\n            max_pair[0] = max_pair[1]\n            max_pair[1] = product\n\n        elif product > max_pair[0]:\n\n            # Step 3.4: Update the maximum pair product and the corresponding elements\n            max_pair[0] = product\n\n    # Step 4: Return the maximum pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = arr[i]\n        \n        if temp > max1:\n            max2 = max1\n            max1 = temp\n        elif temp > max2:\n            max2 = temp\n        \n        if temp < min1:\n            min2 = min1\n            min1 = temp\n        elif temp < min2:\n            min2 = temp\n            \n    max_product = max(max1 * max2, min1 * min2)\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        else:\n            pass\n\n        temp_product = max1 * max2\n        if temp_product > max_product:\n            max_product = temp_product\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1: \n        return arr\n    max1 = max2 = float('-inf')\n    for num in arr: \n        if num > max1: \n            max2 = max1 \n            max1 = num \n        elif num > max2: \n            max2 = num \n    return [max1, max2] "
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n\n    Parameters:\n    arr (list of int): Array of integers.\n\n    Returns:\n    tuple: A tuple containing the indices of the two numbers that have the highest product.\n    \"\"\"\n    max_product = float('-inf')\n    max_product_indices = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_indices = (i, j)\n\n    return max_product_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        current_product = arr[i] * max(arr[i], abs(arr[i] - max_pair[0]) * max(arr[i], abs(arr[i] - max_pair[1])))\n        if current_product > max_product:\n            max_product = current_product\n            max_pair = (arr[i], max(arr[i], abs(arr[i] - max_pair[0]) * max(arr[i], abs(arr[i] - max_pair[1]))))\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the indices of the two largest \n    numbers in the array and their corresponding product.\n    '''\n    if len(arr) <= 1: # base case\n        return None\n    \n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    prod1 = arr[0]\n    prod2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n        prod1 = max(prod1, arr[i])\n        prod2 = min(prod2, arr[i])\n    \n    return (max1, max2, prod1 * prod2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_product = -float('inf')\n    max_pair = []\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize max_product_pair with the first two elements of the array\n    max_product_pair = (arr[0], arr[1])\n    \n    # Iterate through the rest of the array\n    for i in range(2, len(arr)):\n        \n        # Calculate the product of the previous two elements and the current element\n        product_of_last_two = arr[i-1] * arr[i-2]\n        \n        # Calculate the product of the current element and the element to its right\n        product_of_current_element_and_next_element = arr[i] * arr[i+1]\n        \n        # Update the max_product_pair if the product of the current element and the next element is greater\n        if product_of_current_element_and_next_element > max_product_pair[0] * max_product_pair[1]:\n            max_product_pair = (product_of_current_element_and_next_element, product_of_last_two)\n    \n    # Return the maximum product pair\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns a pair with the highest product.\n    \"\"\"\n\n    # Initialize the max product and its index\n    max_product = float('-inf')\n    max_index = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Find the product of the rest of the array\n        product = 1\n        for j in range(i+1, len(arr)):\n            product *= arr[j]\n\n        # Update the max product and its index if the current product is greater than the max product\n        if product > max_product:\n            max_product = product\n            max_index = i\n\n    # Return the pair with the highest product\n    return arr[max_index], max_product"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for tup in Input:\n        if tup[0] not in common_first:\n            common_first.append(tup[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of lists, where each sub-list contains tuples that have the same first element.\n\n    Example:\n    >>> Input = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\n    >>> group_tuples(Input)\n    [[(1, 2, 3), (2, 3, 4), (3, 4, 5)], [(4, 5, 6), (5, 6, 7)]]\n    \"\"\"\n    def common_first_element(t):\n        return t[0]\n\n    grouped_tuples = []\n    for tuple_list in Input:\n        tuples = [t for t in tuple_list if common_first_element(t) in [common_first_element(t2) for t2 in grouped_tuples]]\n        grouped_tuples.append(tuples)\n\n    return grouped_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for tup in Input:\n        if tup[0] in common:\n            common.remove(tup[0])\n        else:\n            common.append(tup[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    \n    # Iterate through the list of tuples\n    for item in Input:\n        # Get the first element of the tuple\n        first_element = item[0]\n        \n        # Check if this element is already in the common_elements list\n        if first_element in common_elements:\n            # If it is, add the tuple to the list of tuples with the same first element\n            for i, element in enumerate(common_elements):\n                if element == first_element:\n                    if len(item) > len(common_elements[i]):\n                        common_elements[i] = item\n                    \n        else:\n            # If it's not, add it to the common_elements list\n            common_elements.append(first_element)\n    \n    # Return the list of tuples with common first elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            pass\n        else:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # initialize an empty dictionary to store the result\n    result = {}\n    # loop through the input list of tuples\n    for tuple1, tuple2 in Input:\n        # extract the first element from both tuples\n        first1 = tuple1[0]\n        first2 = tuple2[0]\n        # check if the first elements are the same\n        if first1 == first2:\n            # if they are, add the tuples to the dictionary with the first element as the key\n            if first1 in result:\n                result[first1].append(tuple1)\n            else:\n                result[first1] = [tuple1]\n        else:\n            # if they are not, add the first element from each tuple to the result dictionary\n            if first1 in result:\n                result[first1].append(tuple1)\n            else:\n                result[first1] = [tuple1]\n            if first2 in result:\n                result[first2].append(tuple2)\n            else:\n                result[first2] = [tuple2]\n    # return the dictionary of results\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    count = 0\n    for i, tup in enumerate(Input):\n        if len(tup) > 0:\n            if common_element is None:\n                common_element = tup[0]\n            elif tup[0] == common_element:\n                count += 1\n            else:\n                common_element = None\n                count = 0\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for tuple in Input:\n        if tuple[0] is not None:\n            if common_first_element is None:\n                common_first_element = tuple[0]\n            elif tuple[0] == common_first_element:\n                pass\n            else:\n                return common_first_element\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set()\n    \n    for tup in Input:\n        if tup[0] in result:\n            result.remove(tup[0])\n        else:\n            result.add(tup[0])\n            \n    return sorted(result)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    group = []\n    for tup in Input:\n        group.append(tup[0])\n    return group\n\nInput = [(1, 2), (3, 4), (5, 6), (7, 8)]\nOutput = group_tuples(Input)\nprint(Output)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = ''\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        length = len(str(i))\n        if length > max_length:\n            max_length = length\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n            max_element = lst[i]\n\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num, 2)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        rounded_num = round(i)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round every number in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Calculate the sum of the rounded numbers\n    total = sum(list1)\n\n    # Print the result\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # cube the number and add it to the sum\n        sum += i**3\n\n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes a positive integer n as input and returns the sum of cubes of first n even natural numbers.\n    '''\n    sum_cubes = 0 \n    for i in range(2, n+1, 2): # iterate from 2 to n with a step of 2 (i.e., odd numbers only)\n        sum_cubes += i**3 # add the cube of the number to the sum\n    return sum_cubes # return the sum of cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize variables\n    total = 0\n    cube_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the cube of the number\n        cube = i ** 3\n\n        # Add the cube to the total sum\n        total += cube\n\n        # Add the cube to the cube sum\n        cube_sum += cube\n\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=\"|\"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            result += \"|\"\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"-\"\n    result = \"\"\n    for element in test_tup:\n        result += delimiter + str(element) + delimiter\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_tuple = ''\n    for item in test_tup:\n        concatenated_tuple += str(item) + delimiter\n    return concatenated_tuple[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n\n    average = sum_of_cubes/count\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i*i*i  \n    avg = sum/n  \n    return avg  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cube_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n        count += 1\n    return cube_sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes)/len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n    \"\"\"\n    \n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n\n    return sum(cubes)/len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n    average_of_cubes = sum_cubes/count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n    average = sum_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initializing sum and count variables\n    sum = 0\n    count = 0\n\n    # Iterating through the first n natural numbers\n    for i in range(1, n+1):\n        # Finding the cube of the current natural number\n        cube = i*i*i\n\n        # Updating the sum and count variables\n        sum += cube\n        count += 1\n\n    # Finding the average of the cubes\n    average = sum/count\n\n    # Printing the result\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = []\n    for string in test_tuple:\n        new_tuple.append(string[-1])\n    return new_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i])-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = 0\n    result_tuple = []\n    for i in test_tuple:\n        result_tuple.append(i[rear_index])\n    return result_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_list = []\n    for item in test_tuple:\n        extracted_list.append(item[-1])\n    return extracted_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [tuple_element[-1] for tuple_element in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = [num for num in nums if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove any non-digit characters from the date\n    dt = re.sub(r'[^\\d]', '', dt)\n    # Split the date into year, month, and day\n    year, month, day = [int(x) for x in dt.split('-')]\n    # Convert the day, month, and year to a string and format it as dd-mm-yyyy\n    new_date = f'{day}-{month:02d}-{year}'\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n\n    # Match the pattern and extract the year, month and day components of the date\n    match = re.match(pattern, dt)\n\n    # If the match is not None, extract the year, month and day components and convert them to dd-mm-yyyy format\n    if match is not None:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        date_str = f\"{day}-{month}-{year}\"\n        return date_str\n\n    # If the match is None, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    pattern = re.compile(date_format)\n    match = pattern.search(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_date = day + '-' + month + '-' + year\n        return formatted_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Match the pattern for the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Search for the pattern in the input string\n    match = re.search(pattern, dt)\n\n    # If a match was found, split the string into the date and time components\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Format the date in dd-mm-yyyy format and return it\n        return f'{day}-{month}-{year}'\n\n    # If no match was found, return the input string unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # search for the pattern in the given date string\n    match = re.search(pattern, dt)\n\n    # if pattern found, replace the year with the current year\n    if match:\n        year = dt[:match.start()]\n        month = dt[match.start():match.start()+2]\n        day = dt[match.start()+2:]\n        new_date = day + \"-\" + month + \"-\" + year\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(?<![\\d])(-|/)(?![\\d])'\n    return re.sub(pattern, '-', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the pattern in the input date\n    match = re.match(pattern, dt)\n\n    # extract the matched groups\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # convert the date in the required format\n    new_date = f\"{day}-{month}-{year}\"\n\n    # return the new date in the required format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # define the pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use the pattern to match the date in the input string\n    match = re.match(pattern, dt)\n\n    if match:\n        # extract the day, month, and year from the match object\n        day = match.group(3)\n        month = match.group(2)\n        year = match.group(1)\n\n        # convert the day, month, and year to dd-mm-yyyy format\n        new_date = '{}-{}-{}'.format(day, month, year)\n\n        return new_date\n    else:\n        # if the input string does not match the pattern, return the input string\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    year_month_day = re.findall(pattern, dt)\n    year, month, day = year_month_day[0].split('-')\n    new_date = day + '-' + month + '-' + year\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Define the increment sequence for each iteration\n    inc = n // 2\n\n    while inc > 0:\n        # Iterate over each sublist of the array\n        for i in range(inc, n):\n            # Insert the current element in its correct position in the sorted sublist\n            j = i\n            while j >= inc and my_list[j] > my_list[j - inc]:\n                my_list[j], my_list[j - inc] = my_list[j - inc], my_list[j]\n                j -= inc\n        inc //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the length of the array\n    n = len(my_list)\n\n    # Initialize gap\n    gap = n // 2\n\n    # Iterate through gaps\n    while gap > 0:\n\n        # Move gap elements to the right\n        for i in range(gap, n):\n            # Swap adjacent elements if they are not in order\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n\n        # Decrease gap\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Using the Shell Sort algorithm\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Find the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Insertion sort with decreasing gap\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    This function implements the Shell Sort algorithm.\n    \n    Parameters:\n    my_list (list): The list to be sorted.\n    \n    Returns:\n    my_list (list): The sorted list.\n    '''\n    \n    # Find the length of the list\n    n = len(my_list)\n    \n    # Calculate the increment gap\n    gap = n // 2\n    \n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Determine the gap size\n    gap = len(my_list) // 2\n\n    # Keep iterating until the gap is 1\n    while gap > 0:\n\n        # Move the gap to the next position in the array\n        for i in range(gap, len(my_list)):\n\n            # Swap adjacent elements if they are in the wrong order\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Decrease the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The length of the tuples must be equal.\"\n    \n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (test_tup1[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same number of elements.')\n    \n    # initialize an empty list to store the elementwise and tuples\n    and_tup_list = []\n    \n    # iterate through the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # extract the elements of the input tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        \n        # elementwise and the elements and store the result in a tuple\n        and_tup = (tup1_elem & tup2_elem,)\n        \n        # append the and_tup to the and_tup_list\n        and_tup_list.append(and_tup)\n        \n    # return the and_tup_list\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their elementwise and tuple.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the element-wise and tuples of the two tuples.\n    '''\n    and_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            and_tup += (test_tup1[i] & test_tup2[i],)\n    else:\n        raise ValueError('The two tuples must have the same length.')\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples should have the same length.\")\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola by using the quadratic formula.\n\n    Parameters:\n    a (float): the coefficient of the first degree term of the parabola\n    b (float): the coefficient of the second degree term of the parabola\n    c (float): the coefficient of the constant term of the parabola\n\n    Returns:\n    float: the directrix of the parabola\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return \"No real roots\"\n    elif delta == 0:\n        return (-b) / (2 * a)\n    else:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "Therefore, the directrix of the parabola is at (c, 2) or (2, 2)."
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the values of the two real roots of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0: # The equation has real and imaginary parts\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n    else: # The equation has only one real part\n        root1 = (-b + discriminant)/(2*a)\n        root2 = None\n    # Calculate the directrix of the parabola using the formulae\n    if root2 is None: # The equation has only one real part\n        directrix = (root1 - c)/(a**2 + 1)\n    else: # The equation has two real parts\n        directrix = (root1 + root2)/(a**2 + 1)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The directrix is undefined.\"\n    else:\n        x = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        return f\"The directrix of the parabola is {x}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    else:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if disc > 0:\n        # Find the two real solutions\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n\n        # Sort the real solutions in ascending order\n        if x1 > x2:\n            x1, x2 = x2, x1\n\n        return x1, x2\n\n    # Check if the discriminant is negative\n    elif disc < 0:\n        return None\n\n    # Discriminant is zero\n    else:\n        x = -b/(2*a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        print(\"There are no real roots.\")\n    elif disc == 0:\n        root = -b/(2*a)\n        print(\"The directrix is:\", root)\n    else:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        print(\"The first root is:\", root1, \"and the second root is:\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"No real root\")\n    elif delta == 0:\n        print(\"One real root\")\n        x1 = -b/(2*a)\n        print(\"x1 =\", x1)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"Two real roots\")\n        print(\"x1 =\", x1)\n        print(\"x2 =\", x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # First, we create a set of elements from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Then, we check if the intersection of these sets is non-empty\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element, False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is at least one element in the intersection of the two sets\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if there is at least one common element\n    for element in set1.intersection(set2):\n        return True\n    # If no common element was found, return false\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n\n    # iterate through each element in list1\n    for item1 in list1:\n        # iterate through each element in list2\n        for item2 in list2:\n            # if we find a match, set common to true and break out of both loops\n            if item1 == item2:\n                common = True\n                break\n        if common:\n            break\n\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in the first list and a set of elements in the second list\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # check if there is at least one element in both sets\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # find the intersection of the sets\n    common_set = set1.intersection(set2)\n\n    # check if the intersection is non-empty\n    if len(common_set) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium given its base lengths and height.\n    The function takes in base1, base2, and height as input.\n    The function uses the trapezium formula to calculate the length of the trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median = 0.5 * (area + base1 + base2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area = 0.5 * base1 * base2 + 0.5 * base1 * half_height + 0.5 * base2 * half_height\n    return 0.5 * base1 * height if area > base1 * half_height * 2 else 0.5 * base2 * height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the top half of the trapezium\n    top_half_length = 0.5 * area * (height / base1)\n\n    # Calculate the length of the bottom half of the trapezium\n    bottom_half_length = 0.5 * area * (height / base2)\n\n    # Find the median length using the trapezium formula\n    median_length = 0.5 * (top_half_length + bottom_half_length)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in the base and height of two trapeziums,\n    and returns the median length of the trapezium.\n\n    If the two trapeziums have the same length, then the function returns the length of one of them.\n\n    The median of two trapeziums is the length of one of the trapeziums, divided by 2.\n\n    The function first calculates the lengths of the trapeziums using the given base and height.\n    Then, it checks if the lengths are equal. If they are, it returns the length of one of them.\n    Otherwise, it calculates the median of the two lengths and returns the result.\n\n    For example:\n\n    median_trapezium(3, 4, 5) # should return 3.5\n    median_trapezium(3, 3, 5) # should return 3.0\n    '''\n\n    length1 = base1 + base2\n    length2 = height\n\n    if length1 == length2:\n        return max(base1, base2)\n    else:\n        median = (length1 + length2) / 2\n        return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function will find the median length of a trapezium.\n    \n    Parameters:\n    base1 - The length of the first base of the trapezium.\n    base2 - The length of the second base of the trapezium.\n    height - The height of the trapezium.\n    \n    Returns:\n    The median length of the trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    base1_area = 0.5 * base1 * height\n    base2_area = 0.5 * base2 * height\n    \n    if area == base1_area + base2_area:\n        return base1 + base2\n    elif area < base1_area + base2_area:\n        return 0.5 * (base1 + base2)\n    else:\n        return 0.5 * (base1 + base2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculates the median length of a trapezium using the trapezoidal rule.\n    \"\"\"\n    # Calculate the areas of the trapezoids\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    # Calculate the half-height of the trapezoid\n    half_height = height / 2\n    # Calculate the area of the trapezoid formed by the two smaller trapezoids\n    area_trapezoid = area1 + area2\n    # Calculate the height of the trapezoid formed by the two smaller trapezoids\n    height_trapezoid = 2 * half_height\n    # Calculate the area of the trapezoid formed by the two taller trapezoids\n    area_trapezoid2 = area1 * 3 + area2 * 2\n    # Calculate the height of the trapezoid formed by the two taller trapezoids\n    height_trapezoid2 = 0.5 * half_height\n    # Calculate the area of the trapezoid formed by the two smaller and two taller trapezoids\n    area_trapezoid3 = (area1 + area2) * 3\n    # Calculate the height of the trapezoid formed by the two smaller and two taller trapezoids\n    height_trapezoid3 = 2 * half_height\n    # Find the lengths of the three trapezoids\n    length1 = area1 / area_trapezoid2\n    length2 = area2 / area_trapezoid2\n    length3 = area_trapezoid3 / area_trapezoid\n    # Calculate the length of the trapezoid formed by the three smaller trapezoids\n    length_trapezoid = length1 + length2 + length3\n    # Calculate the length of the trapezoid formed by the three taller trapezoids\n    length_trapezoid2 = 2 * length_trapezoid\n    # Calculate the length of the trapezoid formed by the three smaller and three taller trapezoids\n    length_trapezoid3 = 3 * length_trapezoid\n    # Find the two medians of the three trapezoids\n    median1 = length_trapezoid / 3\n    median2 = length_trapezoid2 / 2\n    median3 = length_trapezoid3 / 3\n    # Find the median of the three medians\n    median_median = (median1 + median2 + median3) / 3\n    # Return the median of the trapezoid\n    return median_median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Find the length of the trapezium\n    length = (base1 + base2) * 2\n\n    # Find the areas of the trapezium\n    area1 = base1 * height / 2\n    area2 = base2 * height / 2\n\n    # Find the perimeter of the trapezium\n    perimeter = base1 + base2\n\n    # Calculate the area of the semi-perimeter\n    semi_perimeter = (perimeter - length) / 2\n\n    # Find the areas of the semi-perimeter\n    area_semi_perimeter1 = semi_perimeter * height / 2\n    area_semi_perimeter2 = semi_perimeter * height / 2\n\n    # Find the areas of the total area\n    area_total = area1 + area2 + area_semi_perimeter1 + area_semi_perimeter2\n\n    # Calculate the median length\n    median_length = (area_total / 2) / perimeter\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    area_sum = area1 + area2\n\n    # calculate the area of the trapezium\n    area = 0.5 * (area_sum - base1 * height + base2 * height)\n\n    # calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2 + 2 * height)\n\n    # calculate the length of the trapezium\n    length = math.sqrt(area / math.tan(math.pi / 6))\n\n    # find the median length of the trapezium\n    median = 0.5 * (length + perimeter)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #Calculate the height of the triangle\n    triangle_height = 0.5*height\n    \n    #Calculate the length of the right half of the trapezium\n    right_half_length = 0.5*(base1+base2)\n    \n    #Calculate the length of the left half of the trapezium\n    left_half_length = 0.5*(base1+base2+height)\n    \n    #Calculate the lengths of the two halves of the triangle\n    half1_length = 0.5*(base1+right_half_length)\n    half2_length = 0.5*(right_half_length+left_half_length)\n    \n    #Sort the lengths of the two halves of the triangle\n    half1_length = sorted(half1_length)[1]\n    half2_length = sorted(half2_length)[1]\n    \n    #Calculate the length of the trapezium\n    trapezium_length = half1_length + half2_length\n    \n    #Calculate the area of the trapezium using Heron's formula\n    area = 0.5*base1*height\n    area -= 0.5*base2*height\n    area += 0.5*base1*base2*height/3\n    \n    #Calculate the perimeter of the trapezium\n    perimeter = 2*base1 + 2*base2 + height\n    \n    #Calculate the median length of the trapezium\n    median_length = 0.5*(trapezium_length + area/perimeter)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if base1 + base2 <= height:\n        return (base1 + base2) / 2\n    elif base1 < height - base2:\n        return (base1 + height - base2) / 2\n    else:\n        return (height - base1) / 2"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for i in arr:\n        if i > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            print(f\"The number {number} is greater than {element}.\")\n            return True\n        else:\n            continue\n    print(f\"The number {number} is not greater than any element in the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        print(\"The entered number is greater than the maximum element in the array.\")\n    else:\n        print(\"The entered number is not greater than the maximum element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if not arr:\n        return \"Array is empty.\"\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    if greater:\n        return \"The number is greater than all the elements of the array.\"\n    else:\n        return \"The number is not greater than any of the elements of the array.\""
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b+)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    match = pattern.search(text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n//10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number n as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number into a string\n    numStr = str(n)\n\n    # get the last character of the string\n    lastChar = numStr[-1]\n\n    # convert the last character into an integer and return it\n    return int(lastChar)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Convert the number to a string and return the last character as the last digit\n    return str(n)[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Returns a list of negative numbers in the input list.\n    \"\"\"\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an argument and returns a list containing the negative numbers in the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    # create a new empty list to store the negative numbers\n    neg_lst = []\n    \n    # iterate over each number in the original list\n    for num in lst:\n        # check if the number is negative\n        if num < 0:\n            # if it is, add it to the new list of negative numbers\n            neg_lst.append(num)\n    \n    # return the new list of negative numbers\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list containing only the negative numbers in the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_set = set('13579')\n    new_str = ''.join(char for char in str1 if char not in odd_set)\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = ''\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2 == 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = ''.join([char for char in str1 if char.isalnum()])\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_characters = ''\n    for char in str1:\n        if ord(char) % 2 == 0: # checks if the ASCII value of the character is even or not\n            odd_characters += char # adding even characters to the odd_characters string\n    return odd_characters"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit() and int(char) % 2 == 1:\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n        elif char % 2!= 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return \"\".join([char for char in string if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isalnum():\n            result += char\n        elif char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) or (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    Args:\n        test_list (list): A list of tuples or lists.\n\n    Returns:\n        int: The number of bidirectional tuple pairs in the list.\n    \"\"\"\n    count = 0\n    for tup in test_list:\n        if isinstance(tup, list):\n            count += count_bidirectional(tup)\n        elif isinstance(tup, tuple):\n            count += sum(1 for pair in tup for _ in pair)\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for pair in test_list:\n        if pair in test_list[::-1]:\n            bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1] or (test_list[j][0], test_list[i][0]) in test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num < 0:\n            raise ValueError('Input must be non-negative')\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate over each number in the list\n    for num in L:\n        # If the current number is not 0, divide the result by the current number and add 1 to the result\n        if num!= 0:\n            result += 1\n        # Multiply the result by the current number and add the result to the next number in the list\n        result *= num\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not all(isinstance(x, int) for x in L):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    result = 0\n    for x in L:\n        if x < 0:\n            raise ValueError(\"All elements in the list must be non-negative\")\n        result += x\n    \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return 0\n    result = L[0]\n    for num in L[1:]:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        if num > 1:\n            single_num *= num\n    return single_num"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Split the sentence into words\n    words = text.split()\n    \n    # Define a pattern to match adverbs\n    pattern = r'\\b(?:\\w+)?(always|always better|always better than|always best|always better than|better|best|best of all time|every time|most|most powerful|most important|most beautiful|most famous|most beautiful|most loved|most important|most precious|most valuable|most important|most necessary|most valuable|most suitable|most essential|most important|most important|most important|most valuable|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important|most important"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+?\\b\\s*(?:of|to|in|from|about|against|beside|behind|below|above|beneath|besides|between|beyond|ahead|behind)\\s*\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    adverb_list = []\n    for match in matches:\n        words = match.split()\n        if len(words) == 3:\n            adverb_list.append(match)\n    return adverb_list"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define regex pattern for adverbs\n    pattern = r'\\b([a-z]+)([.,;!?])\\b'\n    \n    # Use re.findall() function to find all matches\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches are found\n    if not matches:\n        print(\"No adverbs found in the sentence\")\n        return\n    \n    # Define variables for storing adverbs and their positions\n    adverbs = []\n    positions = []\n    \n    # Loop through each match\n    for match in matches:\n        adverb = match[0]\n        position = text.find(match[0])\n        \n        # Add adverbs and their positions to the lists\n        adverbs.append(adverb)\n        positions.append(position)\n    \n    # Sort the adverbs by their positions\n    adverbs.sort(key=lambda x: positions.index(text.find(x)))\n    \n    # Print the adverbs and their positions\n    print(\"Adverbs found in the sentence:\")\n    for i in range(len(adverbs)):\n        print(f\"{i+1}. {adverbs[i]} at position {positions[i]}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a pattern to match adverbs in text\n    pattern = r'\\b\\w+ing\\b'\n    # Use regex to search for adverbs in text\n    adverbs = re.findall(pattern, text)\n    # If there are adverbs, print their positions and print the adverb itself\n    if adverbs:\n        print('Adverbs:')\n        for index, adv in enumerate(adverbs):\n            print(f'Position: {index + 1}, Adverb: {adv}')\n    # If there are no adverbs, print a message\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|quite|greatly|amazingly|amazingly|amazing|terrifically|terrific|exceptionally|exceptional|extremely|extreme|very|extremely|extraordinarily|extraordinary|most|mostly|largely|large|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little|little"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use a regular expression to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b[A-Z][a-z]+\\b', text.lower())\n    \n    # Initialize a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n    \n    # Iterate through the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        # Check if the adverb is already in the dictionary\n        if adverb in adverb_positions:\n            # If yes, add the position to the list of positions for the adverb\n            adverb_positions[adverb].append(i+1)\n        else:\n            # If not, add the adverb and its position to the dictionary\n            adverb_positions[adverb] = [i+1]\n    \n    # Find the first adverb and its position\n    first_adverb = sorted(list(adverb_positions.keys()), key=lambda x: adverb_positions[x])[0]\n    first_position = adverb_positions[first_adverb][0]\n    \n    # Print the results\n    print('Adverbs:', ', '.join(first_adverb))\n    print('Positions:', ', '.join(str(p) for p in first_position))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverbs = ['awesome', 'amazing', 'enjoyable', 'amazingly', 'excellent', 'exceptional', 'fantastic', 'fantastical', 'god-like', 'grandiose', 'great', 'gorgeous', 'greatly', 'hallowed', 'hallowedly', 'hilarious', 'hilariously', 'incredible', 'incredibly', 'jolly', 'jollygood', 'jollygoodly', 'jovial', 'jovially', 'lovely', 'lovely-eyed', 'lovely-eyedly','magnificent','magnificently','marvelous','marvellous','masterpiece','masterpieces','miraculous','miraculously','mournful','mournfully', 'optimistic', 'optimistically', 'overjoyed', 'overjoyedly', 'powerful', 'powerfully', 'radiant', 'radiantly','rejoice','rejoice!','rejoicing','rejoicing!','revered','reveredly','sacred','sacredly','sanguine','sanguinely','splendid','splendidly','super','superb','superior','superiority','superlative','supernatural','superstitious','superstitiously', 'terrific', 'terrifically', 'wonderful', 'wondrous', 'world-class', 'world-renowned', 'wondrously', 'wow', 'wow!', 'wow-wow', 'wow-wow!', 'wow-wowing', 'wow-wowingly']\n\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n\n    # iterate over each word and check if it is an adverb\n    for i, word in enumerate(words):\n        if word in adverbs:\n            # if yes, return the adverb and its position in the sentence\n            return word, i\n\n    # if no adverb is found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define the regular expression pattern for finding adverbs\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n\n    # find all the adverbs in the text using the pattern\n    adverbs = re.findall(pattern, text)\n\n    # loop through the adverbs and print their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        print(\"Adverb {}: {} (position {})\".format(i+1, adverb, text.index(adverb)))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b\\W*', text)\n    # Find their positions in the sentence\n    positions = [match.start() for match in re.finditer(r'\\b\\w+\\b\\W*', text)]\n    \n    # Find the index of the first adverb and its position\n    index = None\n    for i, pos in enumerate(positions):\n        if pos > 0:\n            index = i\n            break\n    \n    # Return the first adverb and its position\n    return adverbs[0] if index is None else (adverbs[0], index)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r\"\\b(?:in|on|at|to|for|with|by|from|over|under|among|beside|behind|above|below|across|along|around|behind|behind)\\b\", text)\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube by multiplying the length by the length of the diagonal of the cube\n    surface_area = l * l * 6\n    \n    # Return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l  # 6 times the length squared\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l + 12*l + 8"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l + 12*l + 8"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # calculate the surface area of the cube\n    surface_area = 6 * l**2\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    # Initialize an empty array to store the positive counts\n    counts = array('i')\n    \n    # Iterate over the input array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            counts.append(1)\n        else:\n            counts.append(0)\n    \n    # Calculate the ration of positive numbers as the sum of the positive counts divided by the length of the array\n    pos_count = 0\n    for count in counts:\n        pos_count += count\n    \n    ratio = pos_count / len(nums)\n    \n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    if pos_count == 0:\n        return 0\n    else:\n        return neg_count / pos_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i', [num for num in nums if num > 0])\n    total_positive = len(positive_array)\n    positive_ratio = total_positive / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of integers\n    nums_array = array('i', nums)\n\n    # Find the number of positive numbers in the array\n    positive_count = 0\n    for num in nums_array:\n        if num > 0:\n            positive_count += 1\n\n    # Find the ration of positive numbers\n    ration = positive_count / len(nums_array)\n\n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n\n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i', [0] * len(nums))\n    for num in nums:\n        if num > 0:\n            positive[positive.index(max(positive)) + 1] += 1\n    return positive[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n    \n    if positive_count == 0:\n        return 0\n    \n    positive_ratio = positive_count / (positive_count + negative_count + zero_count)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array of integers to a list of integers\n    nums_list = list(nums)\n\n    # Initialize two variables to count the positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate over the list of integers\n    for num in nums_list:\n        # Check if the number is positive or negative\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n\n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n            \n    positive_ratio = positive_count / (positive_count + negative_count)\n    negative_ratio = negative_count / (positive_count + negative_count)\n    \n    print(f\"Positive count: {positive_count}\")\n    print(f\"Negative count: {negative_count}\")\n    print(f\"Positive ratio: {positive_ratio}\")\n    print(f\"Negative ratio: {negative_ratio}\")"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize the largest negative number to be the smallest possible integer value\n    largest_neg_num = float('-inf')\n    # loop through the list and check if the current number is negative and greater than the current largest negative number\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    # return the largest negative number\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf') #initialize largest variable to negative infinity\n    for num in list1: #iterate through the list of numbers\n        if num < 0 and num > largest: #check if current number is negative and greater than largest\n            largest = num #update largest variable if current number is larger\n    return largest #return the largest negative number in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_num = -999999999\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    neg_lst = [x for x in lst if x < 0]\n    return max(neg_lst)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    trimmed_list = []\n    for item in test_list:\n        if len(item) > K:\n            trimmed_list.append(tuple(item[:K]))\n        else:\n            trimmed_list.append(item)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            if j-i == K:\n                test_list.pop(i)\n                return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        trimmed_list.append(i[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        temp_list = []\n        for j in range(len(test_list[i])):\n            temp_list.append(test_list[i][j])\n        temp_list = temp_list[:K]\n        trimmed_list.append(tuple(temp_list))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < K:\n                test_list[i] = test_list[i][:j]\n            elif j + K >= len(test_list[i]):\n                test_list[i] = test_list[i][j:]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n\n    # Loop through the two tuples and multiply the corresponding elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    result = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples have different lengths.\")\n        return\n\n    # create a new tuple to hold the multiplication results\n    result_tup = tuple()\n\n    # iterate through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # multiply the elements at the corresponding indices\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # return the new tuple of results\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i] * test_tup2[i])\n    return multiplication_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # check if the length of two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples are not equal.\")\n        return None\n    \n    # initialize a new tuple to store the result\n    result_tup = []\n    \n    # perform index wise multiplication of each element of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    count_dict = dict(count) \n    count_list = list(count_dict.keys())\n    count_tup = tuple(count_dict.values())\n    \n    for i in range(len(count_list)):\n        tup = tup + (count_list[i], count_tup[i])\n        \n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst) # Count the occurrences of each element in the list\n    result_dict = {} # Create an empty dictionary to store the counts\n    for i in tup:\n        if i in count_dict: # Check if the element is in the dictionary\n            result_dict[i] = count_dict[i] # Add the count to the dictionary\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as inputs and returns a dictionary of elements of the list as keys and their frequency as values.\n    '''\n    freq = Counter(tup) \n    count_dict = {}\n    for item, frequency in freq.items(): \n        count_dict[item] = frequency\n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing \n    the count of each element in the list in the tuple.\n    '''\n    count_dict = {} \n    for element in lst: \n        count_dict[element] = tup.count(element) \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count the occurrence of each element in the tuple\n    count = Counter(tup)\n    # count the occurrence of each element in the list\n    for element in lst:\n        count[element] += 1\n    # return the count of each element in the tuple\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for num in lst: \n        count_dict[num] = tup.count(num)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    for i in lst:\n        if i in c:\n            c[i] += 1\n        else:\n            c[i] = 1\n    return c"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as input and counts the occurrence of all elements of the list in the tuple.\n    '''\n    # Using Counter() method to count the occurrence of each element in the list\n    count_dict = Counter(lst)\n    # Using Counter() method to count the occurrence of each element in the tuple\n    count_tup = Counter(tup)\n    # Combining the two counts using Counter() method\n    combined_count = Counter(count_dict + count_tup)\n    # Converting the combined_count dictionary to a list and returning it as the result\n    return list(combined_count.elements())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append(count_dict[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary containing the counts of each element in the list in the tuple.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicate elements\n    tup_set = set(tup)\n    \n    # Create a dictionary to store the counts of each element in the list\n    count_dict = {}\n    \n    # Iterate through each element in the list and count its occurrence in the tuple\n    for elem in lst:\n        count_dict[elem] = tup_set.count(elem)\n        \n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store cubes\n    cubes = []\n\n    # Loop through each element in the input list\n    for num in nums:\n        # Calculate the cube of the current element and append it to the cubes list\n        cubes.append(num ** 3)\n\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(3*i-1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    total_sum = 0\n    \n    for i in range(len(perrin_numbers)):\n        total_sum += perrin_numbers[i]\n    \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i*i) * (2*i+1)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_list = []\n    for i in range(1, n+1):\n        perrin_list.append(i**2 - 2*i + 1)\n    return sum(perrin_list)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum to zero\n    total = 0\n    # loop through n numbers\n    for i in range(n): \n        # loop through perrin numbers 1 to 2*i\n        for j in range(i+1, 2*i+1): \n            # if perrin number is prime, add to sum\n            if is_prime(j): \n                total += j\n    return total \n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # define the perrin numbers\n    perrin_numbers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n\n    # initialize the sum\n    total_sum = 0\n\n    # loop through the perrin numbers\n    for num in perrin_numbers:\n        # calculate the sum of the first n terms\n        total_sum += num\n\n    # return the sum\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    if n > 1000:\n        return \"Please enter an integer less than or equal to 1000.\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n    # Iterate through the list of strings\n    for s in str_list:\n        # Check if the length of the current string is equal to the specified size\n        if len(s) == size:\n            # Add the current string to the extracted strings list\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a new list containing the extracted strings.\n    '''\n    extracted_list = []\n    for str in str_list:\n        if len(str) >= size:\n            extracted_list.append(str[:size])\n        else:\n            extracted_list.append(str)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list of str): List of strings.\n        size (int): Size of the string to be extracted.\n\n    Returns:\n        list of str: List of extracted strings.\n\n    Raises:\n        ValueError: If size is less than 1.\n    \"\"\"\n    if size < 1:\n        raise ValueError(\"Size must be greater than or equal to 1.\")\n\n    return [str_list[i] for i in range(len(str_list)) if len(str_list[i]) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and an integer `size` as input, and returns a list of strings of\n    length `size` extracted from the input list.\n    \"\"\"\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store extracted strings\n    extracted_strings = []\n    # Loop through the given list of strings\n    for s in l:\n        # Extract the first n characters of the string and store it in the extracted_strings list\n        extracted_strings.append(s[:l])\n    # Return the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through each string in the list\n    for s in l:\n        # If the length of the string is greater than or equal to the specified size, add it to the list\n        if len(s) >= l:\n            extracted_strings.append(s)\n\n    # Return the list of extracted strings\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes in a list of strings and a desired size for each string,\n    and returns a new list containing all the strings in the original list that have a length equal to the desired size.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size of strings from a list of string values.\n\n    Parameters:\n    str_list (list): List of string values.\n    size (int): The size of strings to extract.\n\n    Returns:\n    list: A list of the extracted strings.\n    \"\"\"\n\n    extracted_str = []\n\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_str.append(str_list[i])\n\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a specified size as input and returns a list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text1 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text1 = re.sub('\\s+','', text1)\n    # Return the modified string\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+') # r'\\s+' represents any whitespace character\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    # Return the modified string\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s\\t\\n]+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces using regular expressions.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    # calculate loss amount\n    loss = actual_cost - sale_amount\n    \n    # check if loss is positive or negative\n    if loss > 0:\n        # return loss amount as positive number\n        return loss\n    else:\n        # return 0 as loss amount is negative\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 0.1 # loss percent as 10%\n    if sale_amount < (actual_cost * loss_percent):\n        return actual_cost * loss_percent - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [x for x in range(2, n+1, 2)] # finding all even factors of n\n    return sum(even_factors) # calculating the sum of even factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    sum_even_factors = 0\n    for i in range(2, n+1):\n        if n%i == 0 and i % 2 == 0:\n            count += 1\n            sum_even_factors += i\n    return sum_even_factors\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of even factors of\", n, \"is\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Find the sum of even factors of a number.\n\n    Args:\n    n (int): a positive integer\n\n    Returns:\n    int: the sum of even factors of n\n\n    Examples:\n    >>> sumofFactors(24)\n    28\n    >>> sumofFactors(100)\n    100\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors += i\n            else:\n                even_factors -= i\n    return even_factors + n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum variable to 0\n    sum_even_factors = 0\n    \n    # Iterate through numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Add i to sum if it is even\n            sum_even_factors += i\n    \n    # Return sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenSum = 0\n    for i in range(2, n+1):\n        if n%i == 0 and i%2 == 0:\n            evenSum += i\n    return evenSum\n\nn = int(input(\"Enter a number: \"))\nresult = sumofFactors(n)\nprint(\"The sum of even factors of\", n, \"is:\", result)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i == i:\n                sum += n // i\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\w*z\\w*'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+\\s*z\\s*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bwordz\\b'\n    match_obj = re.search(pattern, text)\n    if match_obj:\n        print(\"Word found!\")\n    else:\n        print(\"Word not found.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define regular expression pattern to match word containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # Use re.search() function to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    # Return list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b\\w*z\\w*\\b'\n    return re.search(regex, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"I saw a dog with a bone in it.\"\nmatches = text_match_wordz(text)\nprint(matches) # Output: ['dog']"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z[a-z]+)\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        if int(monthnum2) % 2 == 0:\n            return False\n        else:\n            return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        if int(monthnum2) % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    \"\"\"\n    if monthnum % 2 == 0:\n        if monthnum in [4, 6, 9, 11]:\n            return True\n    else:\n        if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return \"The given month number contains 31 days.\"\n    else:\n        return \"The given month number does not contain 31 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if 1 <= monthnum <= 12:\n        if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif monthnum in [4, 6, 9, 11]:\n            return False\n        else:\n            return (monthnum % 2) == 0\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # iterate over the list of strings\n    for i in range(len(stringlist)):\n        # reverse the string using slicing\n        reversed_string = stringlist[i][::-1]\n        # replace the original string with the reversed one\n        stringlist[i] = reversed_string\n    \n    # return the updated list of strings\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # create an empty list to store reversed strings\n    reversed_string_list = []\n    # loop through each string in the input list\n    for string in stringlist:\n        # reverse the string\n        reversed_string = string[::-1]\n        # add the reversed string to the output list\n        reversed_string_list.append(reversed_string)\n    # return the reversed string list\n    return reversed_string_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns the sublist with minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[i:j+1]\n            if len(sub_lst) < min_len:\n                min_len = len(sub_lst)\n                min_lst = sub_lst\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                sublist = lst[i:j+1] + lst[j:k+1] + lst[k:]\n                if len(sublist) < min_length:\n                    min_length = len(sublist)\n                    min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(min_sublist):\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('([A-Z])', r'\\1', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # split the string into substrings using the pattern\n    substrings = pattern.split(str1)\n    # join the substrings without uppercase substrings\n    result = ''.join(substrings)\n    # return the result string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub('[A-Z]', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = r'([A-Z])'\n\n    # Use the re.sub() method to replace the uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regex pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    upper_substrings = pattern.findall(string)\n    # Loop through each uppercase substring and replace it with an empty string\n    for substring in upper_substrings:\n        string = string.replace(substring, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define the pattern for uppercase substrings\n    pattern = r'[A-Z].*?[A-Z]'\n    # use the re.sub() function to remove the uppercase substrings from the string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]{1}\\w*\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list) and len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            result.append(lst[i][0])\n        else:\n            result.append(lst[i])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist in the input list.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for elem in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 0:\n            continue\n        else:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if sublist:\n            res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # Use list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # Initialize counter variable to 0\n    count = 0\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is uppercase, increment the counter\n        if char.isupper():\n            count += 1\n    # Return the counter value\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_length = len(list1)\n    for i in range(1, list_length + 1):\n        for j in range(i, list_length + 1):\n            print(list1[j - i] + ', ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            print(list1[j:j+i])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1_len = len(list1)\n    result = []\n    for i in range(1, list1_len + 1):\n        for j in range(i):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return []\n\n    # Initialize the result list\n    result = []\n\n    # Generate the combinations recursively\n    def generate_combinations(current_combination, remaining_elements):\n        # Base case: there are no more elements left\n        if len(remaining_elements) == 0:\n            result.append(current_combination)\n            return\n\n        # Generate the next element and add it to the current combination\n        next_element = remaining_elements.pop(0)\n        generate_combinations(current_combination + [next_element], remaining_elements)\n\n        # Recursively generate the remaining combinations\n        generate_combinations(current_combination, remaining_elements)\n\n    # Generate the first combination\n    generate_combinations([], list1)\n\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    # Define the empty list to store the combinations\n    combinations = []\n    \n    # Define the length of the list\n    length = len(list1)\n    \n    # Define the current combination and the index of the current element\n    current_combination = []\n    current_index = 0\n    \n    # Loop through all elements of the list\n    for element in list1:\n        # If the current element is not in the current combination, add it\n        if element not in current_combination:\n            # Add the current element to the current combination\n            current_combination.append(element)\n            # If the length of the current combination equals the length of the list, it's a valid combination\n            if len(current_combination) == length:\n                # Append the current combination to the list of combinations\n                combinations.append(current_combination[:])\n                # Reset the current combination and the index of the current element\n                current_combination = []\n                current_index = 0\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize a list to store the combinations\n    combinations = []\n    # create a function to generate all possible combinations of a given length\n    def generate_combinations(length, start=0):\n        # base case: if length is 0, we have found a combination\n        if length == 0:\n            combinations.append(list1[start:])\n            return\n        # recursive case: generate combinations of length-1 and add the current element to the combination\n        for i in range(start, len(list1)):\n            generate_combinations(length-1, i+1)\n    # generate all possible combinations of length 1\n    generate_combinations(1)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    neg_current_product = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product, neg_current_product = neg_current_product, current_product\n        current_product *= arr[i]\n        neg_current_product *= arr[i]\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    if len(arr) < 2:\n        return 0\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n\n    The maximum product subarray is the contiguous subarray within the array that has the largest product.\n    The subarray is defined as the subset of the original array which has the largest product.\n\n    For example, if the given array is [2, -3, 4, -2, 1, 5], then the maximum product subarray is [4, -2, 1, 5],\n    because it is obtained by multiplying all the elements in the subarray (4 * (-2) * 1 * 5 = 24).\n\n    The time complexity of this function is O(n), where n is the length of the input array.\n    The space complexity is also O(1), since we are not using any additional data structures.\n    '''\n\n    if not arr:\n        return []\n\n    max_product = arr[0]\n    curr_product = 1\n    max_product_so_far = curr_product\n\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product_so_far = max(max_product_so_far, curr_product)\n\n    return max_product_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        \n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    result = []\n\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n            result = [num]\n        elif current_product == max_product:\n            result.append(num)\n\n    return max_product, result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to keep track of maximum subarray and its index\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    max_ending_here_neg = 1\n\n    # Iterate through the array and update variables as needed\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        max_ending_here_neg *= arr[i]\n\n        if max_ending_here < 0:\n            max_ending_here = 1\n            max_ending_here_neg = 1\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        if max_ending_here_neg > max_so_far:\n            max_so_far = max_ending_here_neg\n\n    # Return the maximum subarray product\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for num in arr:\n        if num < 0:\n            curr_product = 1\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create a list of values from the dictionary\n    values = [value for key, value in dict.items()]\n    # check if all values are same\n    if all(value == values[0] for value in values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values are same in a dictionary.\n    '''\n\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    return all(value == dict[n] for value in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through the dictionary and check if all values are same\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    # All values are same in the dictionary\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == n:\n        value = dict.values()[0]\n        for key in dict:\n            if dict[key]!= value:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all values are same in the dictionary\n    same_value = True\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            same_value = False\n            break\n    return same_value"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values == values[:n]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0]*n\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = 1\n            max_ending_here = arr[0]\n        elif arr[i] > arr[i-1]:\n            dp[i] = max_ending_here * (arr[i] - arr[i-1])\n            max_ending_here = dp[i]\n        else:\n            dp[i] = max_ending_here\n            max_ending_here = dp[i]\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize matrix of maximum values\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize maximum product\n    max_product = float('-inf')\n\n    # Fill the first row of the matrix\n    for i in range(n):\n        dp[0][i] = arr[i]\n        max_product = max(max_product, arr[i])\n\n    # Fill the remaining rows of the matrix\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = arr[i] * dp[i - 1][j]\n                max_product = max(max_product, dp[i][j])\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    max_product_left = [0] * n\n    max_product_right = [0] * n\n    \n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    for i in range(1, n):\n        max_product_left[i] = max(max_product_left[i - 1] * arr[i - 1], max_product_left[i - 1] * prefix_sum[i - 1])\n        max_product_right[i] = max(max_product_right[i - 1] * arr[i], max_product_right[i - 1] * prefix_sum[i])\n    \n    for i in range(n - 1, -1, -1):\n        max_product = max(max_product, max_product_left[i] * max_product_right[i])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product = max(max_product, arr[i])\n        else:\n            max_product = max(max_product, arr[i], arr[i] * max_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables to store the maximum product and the current product\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Loop through the array\n    for num in arr:\n        # If the current number is greater than the previous maximum product, update the maximum product and reset the current product\n        if num > max_product:\n            max_product = num\n            curr_product = 1\n        # Otherwise, multiply the current product by the current number and update the current product\n        else:\n            curr_product *= num\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    :param arr: list of integers\n    :return: integer\n    \"\"\"\n    # Initialize variables\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        # Update max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        # Update min_ending_here\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_so_far = min(min_so_far, max_ending_here)\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            \n    return max_ending_here * min_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) < 3:\n        return 0\n\n    subseq = []\n    max_prod = float('-inf')\n\n    for i in range(len(arr)):\n        if i == 0:\n            subseq.append(arr[i])\n            continue\n\n        for j in range(i):\n            if arr[i] > arr[j]:\n                subseq.append(arr[i] * arr[j])\n                max_prod = max(max_prod, max(subseq))\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    prev_num = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # If the current number is greater than the previous number, update the current product\n        if arr[i] > prev_num:\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n            prev_num = arr[i]\n            \n    # Add the last product to the maximum product\n    max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        first_element = test_tup[0]\n        second_element = test_tup[1]\n        new_tuple = (first_element + second_element,)\n        return add_pairwise(new_tuple + test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    # Initialize a new tuple to store the pairwise additions\n    result = []\n    # Loop through each element in the tuple\n    for i in range(length):\n        # Calculate the sum of the neighboring elements\n        sum = test_tup[i] + test_tup[i+1]\n        # Append the sum to the result tuple\n        result.append(sum)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Use zip() to get the pairwise elements of the tuple\n    pair_list = list(zip(test_tup, test_tup[1:]))\n    \n    # Use map() to apply the addition operator to each pair of elements\n    result_list = list(map(lambda x: x[0] + x[1], pair_list))\n    \n    # Use reduce() to find the sum of the results\n    total = reduce(lambda x, y: x + y, result_list)\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    n = len(test_tup)\n    result = []\n\n    for i in range(n-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n <= 1:\n        return test_tup\n    \n    sum_list = [0]*n\n    for i in range(1, n):\n        sum_list[i] = test_tup[i] + sum_list[i-1]\n    \n    return sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # calculate the length of the tuple\n    tup_len = len(test_tup)\n    # initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    # iterate through the tuple\n    for i in range(1, tup_len - 1):\n        # add the current element and the next element to get the pairwise sum\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    \n    # Iterate over the tuple and calculate the pairwise sum of each pair of elements\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    \n    # Return the final list of pairwise sums\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    n = len(test_tup)\n    for i in range(n-1):\n        pairwise_sum += test_tup[i+1] - test_tup[i]\n    return pairwise_sum\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input, and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # Initialize the result as 1\n    result = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Multiply the result with the current number\n        result = (result * num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes two parameters, `arr` and `n`. `arr` is a list of integers and `n` is an integer.\n    This function returns the product of the multiplication of all elements of `arr` modulo `n`.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in two arguments: arr which is the array to be multiplied and n which is the modulo value.\n    It returns the remainder of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number and returns the product of the array multiplication modulo n.\n    '''\n\n    # initialize the product to 1\n    product = 1\n    \n    # iterate through the array and multiply each element with the product\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    \n    # return the product\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    if l[0] == l[1]:\n        return True\n    \n    for i in range(1, len(l)):\n        if l[i] == l[i-1] + 1:\n            continue\n        else:\n            return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    # Create a set to store the unique consecutive numbers in the list\n    unique_consecutive = set()\n\n    # Loop through the list\n    for i in range(len(l)):\n        # Check if the number is already in the set\n        if i not in unique_consecutive:\n            # If not, add it to the set\n            unique_consecutive.add(l[i])\n        else:\n            # If it is, it means there is a consecutive number starting from the previous number\n            return True\n\n    # If the loop completes without finding any consecutive numbers, it means there are no consecutive numbers in the list\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1:\n        if l[i] == l[i+1]:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    for i in range(len(l)):\n        if l[i]!= l[i-1] + 1:\n            return False\n    \n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Use set() to convert the tuple list to a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    # loop through test_list1\n    for item in test_list1:\n        # loop through test_list2\n        for other_item in test_list2:\n            # compare the items, if they are the same, add it to the intersection list\n            if item == other_item:\n                intersection.append(item)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuples = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                common_tuples.append(tuple1)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_tuples = []\n    for item in test_list1:\n        if item in test_list2 and item not in common_tuples:\n            common_tuples.append(item)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both the lists to sets to remove duplicates and maintain order\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back to a list and sort it based on the original order of the elements\n    intersection_list = sorted(list(intersection))\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Use a dictionary to store the frequency of each element in test_list2\n    freq_dict = {}\n    for element in test_list2:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n\n    # Find the intersection of elements in test_list1 and test_list2\n    intersection = []\n    for element in test_list1:\n        if element in freq_dict and freq_dict[element] > 0:\n            intersection.append(element)\n            freq_dict[element] -= 1\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the elements in the first list\n    first_set = set(test_list1)\n    # Create a set of the elements in the second list\n    second_set = set(test_list2)\n    # Find the intersection of the two sets using the intersection() method\n    intersection = first_set.intersection(second_set)\n    # Convert the set to a list\n    result = list(intersection)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Convert the given lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection to a list\n    result = list(intersection)\n    \n    # Sort the list in ascending order\n    result.sort()\n    \n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string, a character to be replaced, and a new character to replace it with.\n    It replaces all occurrences of the specified character with the new character and returns the modified string.\n    \"\"\"\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    \n    # Loop through each character in the original string\n    for char in str1:\n        # If the current character is not the specified character\n        if char!= ch:\n            # Append the current character to the modified string\n            modified_str += char\n        else:\n            # Otherwise, append the new character to the modified string\n            modified_str += newch\n    \n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    \n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # If the current character is the target character, replace it with the new character\n        if char_list[i] == ch:\n            char_list[i] = newch\n            \n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the characters replaced\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes three parameters:\n    - str1: The string that needs to be modified.\n    - ch: The character that needs to be replaced.\n    - newch: The character that needs to replace the character 'ch' in str1.\n    '''\n    # convert the string to a list of characters\n    str_list = list(str1)\n    # loop through the list of characters\n    for i in range(len(str_list)):\n        # if the character at the current index matches the character to be replaced\n        if str_list[i] == ch:\n            # replace the character at the current index with the new character\n            str_list[i] = newch\n    # convert the list of characters back to a string\n    new_str = ''.join(str_list)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = {k: v for k, v in sorted_dict}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # use Counter to count the frequency of values in the dictionary\n    count_dict = Counter(dict1)\n    # sort the dictionary by values in descending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by values in descending order\n    sorted_counter = counter.most_common(None)\n    # Create a new dictionary with the sorted values as keys and values as the original values\n    sorted_dict = {value: key for key, value in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Using Counter from collections module to count frequency of values\n    counter = Counter(dict1.values())\n    # Sorting the dictionary by values in ascending order\n    sorted_dict = dict(sorted(counter.items()))\n    # Returning the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # Return the sum of the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables for storing the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    # Loop through the array to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in a list of integers as input and returns the sum of the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest value in the array\n    max_val = max(nums)\n    # Find the smallest value in the array\n    min_val = min(nums)\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    This function finds the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # return the sum of the first and last elements\n    return nums[0] + nums[-1]"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    pattern = r'\\b[a-z]+\\b'\n    matches = re.findall(pattern, str1)\n\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'(?i)[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+') # regular expression pattern for lowercase substrings\n    result = pattern.sub('', str1) # substitute empty string with all lowercase substrings\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # split the string into words\n    words = pattern.split(str1)\n    # join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings using regular expressions\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?i)[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Find the length of the number\n    length = len(str(n))\n    # Return the first digit\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return first_Digit(n//10)\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to string\n    num = str(n)\n    # get the first digit of the string\n    first_digit = num[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to string to access the characters\n    num_str = str(n)\n    # Extract the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to integer and return it\n    return int(first_char)\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Splitting the input number into a string and extracting the first character\n    first_char = str(n)[0]\n\n    # Converting the first character to an integer and returning it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # First, we check if the input is an integer or not.\n    if type(n)!= int:\n        print(\"Input must be an integer!\")\n        return\n    \n    # We then check if the number is greater than 0 and less than 10.\n    if n < 0 or n > 9:\n        print(\"Input must be a number between 0 and 9!\")\n        return\n    \n    # Finally, we return the first digit of the input number.\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return n % 10\n    else:\n        return None"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list with only the odd numbers in the given list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of first n natural numbers\n    sum_nums = sum(range(1, n+1))\n    # Calculate the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_cubes - sum_nums\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(n+1))\n    sum_natural = sum(range(n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Finding sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(n+1):\n        sum_of_cubes += i*i*i\n    \n    # Finding sum of first n natural numbers\n    sum_of_numbers = 0\n    for i in range(n+1):\n        sum_of_numbers += i\n    \n    # Finding the difference between sum of cubes and sum of numbers\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    # calculate the sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the sum of the first n natural numbers\n    sum_numbers = n * (n + 1) // 2\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Define the first n natural numbers\n    cubes = [i**3 for i in range(1, n+1)]\n    # Compute the sum of cubes\n    cube_sum = sum(cubes)\n    # Compute the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    # Return the difference between the two sums\n    return cube_sum - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_sum(n):\n        '''\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    def natural_sum(n):\n        '''\n        Write a python function to calculate the sum of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    return abs(cube_sum(n) - natural_sum(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = 0\n    natural_sum = 0\n    for i in range(1, n+1):\n        cubes_sum += i**3\n        natural_sum += i\n    return cubes_sum - natural_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    xor_sum = sum(A)\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list A of integers and an integer N as input.\n    It returns the number of pairs whose xor value is odd.\n    \"\"\"\n    xor_sum = 0\n    count = 0\n    \n    for i in range(N):\n        xor_sum += A[i]\n        xor_sum = xor_sum % N\n        \n    for i in range(N):\n        xor_sum -= A[i]\n        xor_sum = xor_sum % N\n        \n        if xor_sum == 1:\n            count += 1\n            \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N):\n        xor_value = 0\n        for j in range(N):\n            xor_value ^= A[i][j]\n        if xor_value % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all the elements in the array\n    for i in range(N):\n        # For each element, check if its xor value is odd\n        if A[i] ^ i % 2!= 0:\n            # If it is, increment the count\n            count += 1\n    \n    # Return the count of odd pairs found\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n\n    # calculate the sum of the xor values of all the elements in the array\n    for i in range(N):\n        xor_sum += A[i]\n\n    # loop through the array and for each element, check if the xor value of its adjacent element is odd\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff % 2!= 0:\n                count += 1\n\n    # return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Initialize a new string to store the toggled characters\n    toggled_string = ''\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is a lowercase letter, convert it to uppercase\n        if char.islower():\n            toggled_string += char.upper()\n        # If the character is an uppercase letter, convert it to lowercase\n        elif char.isupper():\n            toggled_string += char.lower()\n        # If the character is neither a lowercase or uppercase letter, leave it unchanged\n        else:\n            toggled_string += char\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char)-32 if char.islower() else ord(char)+32) for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char.lower()) if char.isalpha() else ord(char.upper())) for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert string to lowercase\n    string = string.lower()\n    \n    # loop through each character in the string\n    for i in range(len(string)):\n        # if character is uppercase, convert to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n            \n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert each integer to a string and split it into a list of digits\n    s1 = str(n1)\n    s2 = str(n2)\n    digits1 = [int(digit) for digit in s1]\n    digits2 = [int(digit) for digit in s2]\n\n    # Find the per-digit difference between the two integers\n    diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # Compute the sum of the per-digit differences\n    total_diff = sum(diff)\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert both integers to a list of integers\n    int1 = list(str(n1))\n    int2 = list(str(n2))\n    \n    # initialize a counter variable to keep track of the number of differences\n    num_diff = 0\n    \n    # loop through each digit in the two integers\n    for i in range(len(int1)):\n        # if the digit in int1 is not equal to the digit in int2, add the difference to the counter\n        if int1[i]!= int2[i]:\n            num_diff += int(int1[i]) - int(int2[i])\n    \n    # return the total number of differences\n    return num_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # calculate the sum of per-digit differences\n    total_diff = sum([abs(int(n1) % 10 - int(n2) % 10) for i in range(10)])\n    \n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    num1_list = [int(i) for i in str(n1)]\n    num2_list = [int(i) for i in str(n2)]\n\n    # find the difference between the two lists of digits\n    digit_diff_list = [abs(i1-i2) for i1, i2 in zip(num1_list, num2_list)]\n\n    # calculate the sum of the per-digit differences\n    digit_diff_sum = sum(digit_diff_list)\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    while n1 > 0 or n2 > 0:\n        # calculate difference between last two digits\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        # add digit difference to distance\n        distance += digit_diff\n        # remove last two digits from both numbers\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_diff = 0\n    for i in range(10):\n        diff = abs(n1 - n2) % 10\n        sum_of_diff += diff\n        n1 //= 10\n        n2 //= 10\n\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    # loop through each digit in n1 and n2 and find their per-digit difference\n    for i in range(len(str(n1))):\n        sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n\n    if len(n1_digits)!= len(n2_digits):\n        return \"Error: Integers have different lengths.\"\n\n    diff_sum = 0\n    for i in range(len(n1_digits)):\n        diff_sum += abs(int(n1_digits[i]) - int(n2_digits[i]))\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    \n    # loop through each digit in both lists\n    distance = 0\n    for i in range(len(n1_list)):\n        distance += abs(n1_list[i] - n2_list[i])\n        \n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # calculate the absolute difference between the two lists of digits\n    abs_diff = sum(abs(d1-d2) for d1, d2 in zip(digits1, digits2))\n    \n    # return the sum of the absolute differences\n    return abs_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_sum = max(max_sub_array_sum(a, size-1), a[size-1])\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        # Check if current_sum is greater than max_sum and update start_index and end_index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n            end_index = i\n\n        # If current_sum is negative, reset it to 0 and start a new subarray\n        if current_sum < 0:\n            current_sum = 0\n            start_index = i\n\n    # Return the sum of the largest contiguous subarray\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n        elif current_sum < 0:\n            current_sum = 0\n    \n    for i in range(size-1, -1, -1):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end_index = i\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_sum, start_index, end_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Traverse through the array\n    for i in range(size):\n        # Add the current element to the current_sum\n        current_sum += a[i]\n\n        # If the current_sum becomes negative, reset the start pointer\n        if current_sum < 0:\n            start = i + 1\n            current_sum = 0\n\n        # Update the maximum sum if the current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of unique elements in both tuples\n    unique_set = set(test_tup1 + test_tup2)\n    \n    # convert the set back to a list and sort it\n    union_list = sorted(list(unique_set))\n    \n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Use set() to remove duplicates from both tuples\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n    \n    # Use union() to get the union of the unique tuples\n    union_set = unique_tup1.union(unique_tup2)\n    \n    # Convert the union set to a list and sort it\n    sorted_list = sorted(list(union_set))\n    \n    # Print the sorted list of elements\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of two lists\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union_list = sorted(list(union_set))\n    return sorted_union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # create a set of all the elements from both tuples\n    all_elements = set(test_tup1 + test_tup2)\n    # convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(all_elements))\n    # print the sorted list of elements\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples into a single tuple\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the union tuple in ascending order\n    sorted_union_tup = sorted(union_tup)\n\n    # Print the sorted union tuple\n    print(sorted_union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of the two given tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Sort the union set and convert it to a list\n    union_list = sorted(list(union_set))\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate both tuples\n    merged_tup = test_tup1 + test_tup2\n    \n    # convert to set to remove duplicates\n    unique_set = set(merged_tup)\n    \n    # convert set back to list and sort it\n    sorted_list = sorted(list(unique_set))\n    \n    return sorted_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    for i in range(len(lst)):\n        temp = []\n        for j in range(i,len(lst)):\n            temp.append(lst[j])\n        length.append(len(temp))\n    return max(length)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Initialize variables to store the length of the longest sublist and its starting index\n    max_length = 0\n    max_index = -1\n    \n    # Iterate through each sublist in the list\n    for i in range(len(lst)):\n        \n        # Initialize variables to store the length of the current sublist and its starting index\n        current_length = 0\n        current_index = i\n        \n        # Iterate through the remaining sublists starting from the current sublist\n        while i < len(lst) - 1 and lst[i] == lst[i+1]:\n            current_length += 1\n            i += 1\n        \n        # Compare the length of the current sublist to the length of the longest sublist found so far\n        if current_length > max_length:\n            max_length = current_length\n            max_index = current_index\n    \n    # Return the length of the longest sublist found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    sublist = []\n    \n    for i in lst:\n        if len(sublist) == 0:\n            sublist.append(i)\n            max_length = max(max_length, len(sublist))\n        elif i == sublist[-1]:\n            sublist.append(i)\n        else:\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n            sublist = [i]\n    \n    if len(sublist) > max_length:\n        max_length = len(sublist)\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n\n    :param lst: list\n    :return: int\n    \"\"\"\n    longest_sublist = []\n    for i in range(len(lst)):\n        if not longest_sublist:\n            longest_sublist.append(lst[i])\n        else:\n            j = 0\n            while j < len(longest_sublist) and lst[i] > longest_sublist[j]:\n                j += 1\n            longest_sublist.insert(j, lst[i])\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0  # variable to keep track of the maximum length of sublists found so far\n    current_length = 0  # variable to keep track of the length of the current sublist being considered\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:  # if the current element is not equal to the previous one\n            if current_length > max_length:  # if the length of the current sublist is greater than the maximum length found so far\n                max_length = current_length  # update the maximum length\n            current_length = 1  # reset the length of the current sublist\n        else:\n            current_length += 1  # increment the length of the current sublist\n\n    if current_length > max_length:  # if the length of the current sublist is greater than the maximum length found so far\n        max_length = current_length  # update the maximum length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize maximum length to zero\n    max_length = 0\n\n    # loop through each sublist in the list\n    for sublist in lst:\n        # calculate the length of the sublist\n        sublist_length = len(sublist)\n        # update the maximum length if the current sublist is longer\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i:j+1]!= lst[i:j+1][::-1]:\n                length = j - i + 1\n                if length > max_length:\n                    max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            longest_length = max(longest_length, len(lst[i:j+1]))  \n    return longest_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > current_length:\n            max_length = current_length\n            current_length = len(lst[i])\n        else:\n            current_length = max(current_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    # Regular expression pattern to match a quotation mark and a value\n    pattern = r'\"(.*?)\"'\n\n    # Find all matches in the string using the regular expression pattern\n    matches = re.findall(pattern, text)\n\n    # Return a list of all values found\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define a regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n    # extract the values between the quotes and return them as a list\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regex to find all quotation marks\n    matches = re.findall('\"(.*?)\"', text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(\\w+)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(?:(?!\\1).)*?(?=\\1)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\"|[^\"\\n]*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    \n    Parameters:\n    text (str): a string containing text with quotation marks\n\n    Returns:\n    list: a list of all the extracted values between quotation marks in the input string\n    '''\n\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to extract all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Define a function to remove leading and trailing whitespace from a string\n    def trim_string(s):\n        return s.strip()\n\n    # Use a list comprehension to remove all empty strings from the matches list\n    matches = [trim_string(match) for match in matches if match]\n\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"') # define pattern to match quotation marks and capture contents\n    matches = pattern.findall(text) # find all matches in the text using the pattern\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    \n    # Calculate the number of pairs\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += freq[arr[i]] * freq[arr[j]]\n    \n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += arr[i]*arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] * arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    \"\"\"\n\n    count = 0\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n\n    Args:\n        word: the string to be split\n\n    Returns:\n        A list of characters in the string\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if the input is a non-negative integer\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Convert the integer to a string and iterate over its characters\n    digit_sum = 0\n    for digit in str(n):\n        digit_sum += int(digit)\n\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    \n    # convert the integer to a string and iterate over each digit\n    for digit in str(n):\n        # convert each digit to an integer and add it to the sum variable\n        total += int(digit)\n    \n    # return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    s = str(n)\n    # initialize the sum variable\n    sum = 0\n    # iterate through the string and add the digits to the sum\n    for i in s:\n        sum += int(i)\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit of the integer\n    while n > 0:\n        # Get the rightmost digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum_of_digits += digit\n        \n        # Remove the rightmost digit from the integer\n        n //= 10\n    \n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum to zero\n    total = 0\n    # Loop over the digits in reverse order and add them to the total\n    for digit in digits[::-1]:\n        total += digit\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    str_num = str(n)\n    # Initialize the sum to zero\n    total = 0\n    # Loop through each character in the string\n    for digit in str_num:\n        # Convert each character to an integer and add to the sum\n        total += int(digit)\n    # Return the total sum\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # check if list is sorted\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted or not\n    if list1[0] < list1[-1]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if list is empty\n    if len(list1) <= 1:\n        return True\n    # check if each element is less than or equal to the next one\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if list is empty\n    if len(list1) == 0:\n        return True\n    \n    # check if the list is sorted in ascending order\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # if the loop finishes without returning False, the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if not list1:\n        return True\n    # check if the first element is smaller than the last element\n    elif list1[0] > list1[-1]:\n        return False\n    # check if the list is sorted recursively\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(lists):\n    \"\"\"\n    Given a list of lists, return a new list with only the unique elements from each sublist.\n    \"\"\"\n    unique_lists = []\n    for sublist in lists:\n        unique_sublist = list(set(sublist))\n        unique_lists.append(unique_sublist)\n    return unique_lists"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the input list to set to remove duplicates\n    unique_nums = set(nums)\n    # Convert the set back to list to return the unique numbers\n    unique_list = list(unique_nums)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n\n    for num in nums:\n        unique_nums.add(num)\n\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a dictionary to store the unique numbers\n    unique_nums = {}\n\n    # Loop through each list in the input\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Check if the number is already in the dictionary\n            if num in unique_nums:\n                # If the number is already in the dictionary, remove it from the list\n                num_list.remove(num)\n            else:\n                # If the number is not in the dictionary, add it to the dictionary\n                unique_nums[num] = True\n\n    # Return the modified input lists\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n\n    # Loop through each list in the input list\n    for num_list in nums:\n\n        # Loop through each number in the list and add it to the dictionary\n        for num in num_list:\n            unique_nums[num] = True\n\n    # Convert the dictionary to a list and return it\n    return list(unique_nums.keys())"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    unique_nums = list(set(nums))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    # create an empty dictionary to store unique numbers\n    unique_dict = {}\n    # create an empty list to store unique numbers\n    unique_list = []\n    # loop through each number in the list\n    for num in nums:\n        # check if the number is already in the dictionary\n        if num not in unique_dict:\n            # if not, add it to the dictionary and the list\n            unique_dict[num] = True\n            unique_list.append(num)\n    # return the unique list\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(lst):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_lst = list(set(lst))  # convert list to set to get unique values\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of unique numbers in a given list.\n    \"\"\"\n    # Remove duplicates from the list\n    list_data = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for num in list_data:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    return reduce(lambda x, y: x*y, unique_numbers, 1)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    \n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to store unique numbers in the list\n    unique_set = set(list_data)\n    # calculate the product of the unique numbers using a for loop\n    product = 1\n    for num in unique_set:\n        product *= num\n    # return the product of the unique numbers\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    # convert list to set to remove duplicates\n    unique_nums = set(list_data)\n\n    # calculate product of unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # create a set of unique numbers in the list\n    product = 1  # initialize the product to 1\n    \n    # calculate the product of the unique numbers\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set of unique numbers from the list\n    unique_set = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * (3.14 * r**2) + (2 * 3.14 * r * h) + (2 * 3.14 * r**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2)+2*3.14159*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (3.14159 * r**2 + 2 * 3.14159 * r * h + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2) + 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r ** 2 + h ** 2)\n    volume = (1/3) * math.pi * r ** 2 * h\n    print(\"The surface area of the cylinder is:\", area)\n    print(\"The volume of the cylinder is:\", volume)\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*r*r + 2*3.14*r*h + 3.14*r*h*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r ** 2 + 2 * math.pi * r * h + math.pi * h ** 2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (3.14 * r ** 2) + 2 * (3.14 * r * h) + 2 * (3.14 * h ** 2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * r * 3.14"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, else False.\n\n    Parameters:\n    A: list\n    B: list\n\n    Returns:\n    bool: True if A is a sublist of B, else False.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif i > 0:\n            i = max(0, i - 1)\n            j += 1\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        A.reverse()\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function checks whether a list is a sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    for i in range(len(B)):\n        if B[i] in A and all(x in A for x in B[:i]):\n            return True\n\n    # If B is not a sublist of A, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    '''\n    # Check if the second list is empty or not\n    if len(B) == 0:\n        return True\n\n    # Initialize the variables to store the indices of the first list in the second list\n    index = 0\n    sub_index = 0\n\n    # Iterate over the first list until the index reaches the length of the second list\n    while index < len(A):\n        # If the element at the current index in the first list matches the element at the current index in the second list\n        if A[index] == B[sub_index]:\n            # Increment the sub_index by 1\n            sub_index += 1\n            # Check if the sub_index reaches the length of the second list\n            if sub_index == len(B):\n                return True\n        else:\n            # Reset the sub_index to 0\n            sub_index = 0\n        # Increment the index by 1\n        index += 1\n\n    # If the loop completes without finding a match, then the first list is not a sublist of the second list\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) >= len(B): \n        if sorted(A) == sorted(B): \n            return True\n        else: \n            return False\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n\n    # Check if both lists are empty \n    if len(A) == 0 and len(B) == 0: \n        return True \n\n    # Initialize two pointers to start \n    i = 0 \n    j = 0 \n\n    # Traverse both lists \n    while i < len(A) and j < len(B): \n\n        # If the elements match \n        if A[i] == B[j]: \n\n            # If we find a match, increment both pointers \n            i += 1 \n            j += 1 \n\n        # If A[i] is greater than B[j], skip A[i] \n        else: \n            i += 1 \n\n    # If j reaches the end of B, then A is a sublist of B \n    if j == len(B): \n        return True \n\n    # If we reach here, A is not a sublist of B \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            if i == 0:\n                return False\n            else:\n                i -= 1\n                j = i + 1\n    \n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if A in B[i:]: \n            return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    # check if B is a sublist of A\n    if B in A: \n        return True\n    # if B is not a sublist of A, check if B is a sublist of A[1:]\n    elif B in A[1:]:\n        return True\n    else: \n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of its factorial.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize variable to store the factorial of n\n    factorial = 1\n    #iterate over each digit in the input number n\n    for digit in str(n):\n        #multiply the factorial by 10 to the power of the number of digits in n\n        factorial *= 10**len(str(n))\n        #add the factorial to the running total\n        factorial += factorial\n    #return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n //= 10\n\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the factorial of n\n    factorial = 1\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # Loop through the digits of n, starting from the rightmost digit\n    for digit in str(n)[::-1]:\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Multiply the factorial by the digit raised to the power of its position\n        factorial *= digit ** int(len(str(n)) - int(digit))\n        # Add the last digit of the factorial to the variable last_digit\n        last_digit += factorial % 10\n        # Divide the factorial by 10 to remove the last digit\n        factorial //= 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to string and get its last digit\n    num_str = str(n)\n    last_digit = num_str[-1]\n\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, int(last_digit)+1):\n        factorial *= i\n    \n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n\n    # loop through each digit in the factorial of n\n    while n > 0:\n        # get the last digit of n\n        last_digit = n % 10\n\n        # add the last digit to the factorial\n        factorial *= last_digit\n\n        # divide n by 10 to remove the last digit\n        n //= 10\n\n    # return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert n to a string to handle non-integer inputs\n    n = str(n)\n    # Initialize the result to be 0\n    result = 0\n    # Loop through the digits of n and multiply each by the corresponding factorial\n    for digit in n:\n        factorial = 1\n        for i in range(1, int(digit)+1):\n            factorial *= i\n        result *= factorial\n    # Return the last digit of the result as an integer\n    return int(str(result)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    num = 1\n    for i in range(1, n+1):\n        num = num * i\n    last_digit = num % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return str(factorial)[-1]"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    \n    while i < len(list1) and k < len(list3):\n        if list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    while j < len(list2) and k < len(list3):\n        if list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate all the lists into a single list\n    interleaved_list = list1 + list2 + list3\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes 3 lists as input and returns a single flat list by interleaving the first 2 lists and the last list.\n\n    Example:\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1, 4, 2, 5, 3, 6, 7, 8, 9]\n\n    '''\n\n    # Concatenate the first 2 lists and the last list\n    flat_list = list1 + list2 + list3\n\n    # Reverse the order of the flat list\n    flat_list.reverse()\n\n    # Return the flat list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    \n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    \n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    \n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    \n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate the lists\n    flat_list = list1 + list2 + list3\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create a new empty list to hold the interleaved elements\n    interleaved_list = []\n    # loop through the 3 input lists and add their elements to the interleaved list in the correct order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all the lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All the lists must have the same length.\")\n    # Create a new empty list to hold the interleaved elements\n    interleaved_list = []\n    # Iterate through the lists and add each element to the new list in the desired order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_list = []\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of unique elements from both tuples\n    unique_set = set(test_tup1 + test_tup2)\n    \n    # Find the intersection of both sets\n    intersection_set = test_tup1.intersection(test_tup2)\n    \n    # Create a set of dissimilar elements by subtracting the intersection set from the unique set\n    dissimilar_set = unique_set - intersection_set\n    \n    # Return a list of the dissimilar elements\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through the first tuple\n    for i in range(len1):\n        # Check if the element exists in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it doesn't, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    # Loop through the second tuple\n    for i in range(len2):\n        # Check if the element exists in the first tuple\n        if test_tup2[i] not in test_tup1:\n            # If it doesn't, add it to the dissimilar list\n            dissimilar_list.append(test_tup2[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Find the common elements in both tuples\n    common_elements = set(test_tup1) & set(test_tup2)\n\n    # Find the elements that are in test_tup1 but not in test_tup2\n    diff_elements1 = test_tup1 - test_tup2\n\n    # Find the elements that are in test_tup2 but not in test_tup1\n    diff_elements2 = test_tup2 - test_tup1\n\n    # Combine the dissimilar elements into a list\n    dissimilar_elements = list(set(diff_elements1) & set(diff_elements2))\n\n    # Combine the common elements and dissimilar elements into a single list\n    all_elements = list(common_elements) + dissimilar_elements\n\n    # Remove duplicates from the list\n    return list(set(all_elements))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it is not present, add it to the dissimilar list\n            dissimilar.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_set = set(test_tup1) ^ set(test_tup2)\n    dissimilar_elements = list(diff_set)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to store even elements\n    even_list = []\n    \n    # Loop through the tuple elements\n    for element in test_tuple:\n        # If the element is an even number, append it to the even_list\n        if even_fnc(element):\n            even_list.append(element)\n    \n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if all elements in the tuple are even\n    if all(even_fnc(x) for x in test_tuple[0]): \n        # Extract even elements from the nested tuple\n        even_elements = [x for x in test_tuple if even_fnc(x)]\n        # Return the even elements\n        return even_elements\n    else: \n        # If not all elements are even, return the original tuple\n        return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            new_tuple.append(even_fnc(item))\n    return new_tuple\n\ndef even_sum(num):\n    '''\n    A function to calculate the sum of all even numbers in a list.\n    '''\n    return sum([x for x in range(2, num+1, 2)])\n\ndef even_squares(num):\n    '''\n    A function to calculate the square of all even numbers in a list.\n    '''\n    return sum([x**2 for x in range(2, num+1, 2)])"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n        - test_tuple (tuple): A nested mixed tuple.\n        - even_fnc (function): A function that takes a single argument and returns True or False. \n            This function should check if the argument is even or not.\n\n    Returns:\n        - (tuple): A new tuple with even elements only.\n    '''\n\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif isinstance(i, list):\n            new_tuple.append([even_fnc(j) for j in i])\n        else:\n            new_tuple.append(even_fnc(i))\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [x for x in test_tuple if even_fnc(x)]\n\ndef is_even(x): \n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for tup in test_tuple:\n        for element in tup:\n            if even_fnc(element):\n                even_list.append(element)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Create a new list to store the even elements\n    even_list = []\n    \n    # Loop through each element of the tuple\n    for element in test_tuple:\n        # If the element is even, append it to the even_list\n        if even_fnc(element):\n            even_list.append(element)\n    \n    # Return the even_list as a tuple\n    return tuple(even_list)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b*s)+(b*s)+(b*s))/(4*s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculating the surface area of the pyramid using Heron's formula\n    area = 0.5 * b * s * s\n    #printing the surface area of the pyramid\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * b * b + 2 * b * b * s + 6 * b * b * b + s * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = b * b\n    \n    # Calculate the area of the triangle 1\n    area_triangle1 = b * s / 2\n    \n    # Calculate the area of the triangle 2\n    area_triangle2 = (b * b - b * s * s) / 4\n    \n    # Calculate the total area of the pyramid\n    surface_area = area_base + area_triangle1 + area_triangle2\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # finding the semi-perimeter of the square pyramid\n    sp = b + 2*s\n\n    # finding the surface area of the square pyramid\n    area = 0.5*b*s\n    print(\"Surface Area of Square Pyramid:\", area)\n\n    # finding the surface area of the parallelogram formed by the base and height\n    area_p = 0.5*b*b + 0.5*s*s\n    print(\"Surface Area of Parallelogram:\", area_p)\n\n    # finding the surface area of the square formed by the semi-perimeter of the square pyramid and the height\n    area_sq = 0.5*(sp*s)\n    print(\"Surface Area of Square:\", area_sq)\n\n    # finding the surface area of the square formed by the semi-perimeter of the square pyramid and the base\n    area_sq1 = 0.5*(sp*b)\n    print(\"Surface Area of Square:\", area_sq1)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (b**2) * s\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for calculating surface area of a square pyramid\n    surfaceArea = ((b * b) + (b * s) + (s * s)) / 2\n    \n    # Returning the surface area\n    return surfaceArea"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the pyramid\n    return 2*(b**2 + s**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = b * s\n    \n    # Calculate the area of the top part of the pyramid\n    area_top = 2 * (b * s)**2\n    \n    # Calculate the surface area of the pyramid\n    surface_area = area_base + area_top\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    # Calculate the surface area of the pyramid\n    surface_area = 6 * b * s\n    print(\"Surface area of the square pyramid is:\", surface_area)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return n * catalan_number(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(1, n+1):\n            catalan += (factorial(2*i-1) // factorial(i) // factorial(n-i))\n        return catalan\n\n\ndef factorial(n):\n    '''\n    Returns the factorial of n.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (1/2) * catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number using the formula for catalan numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return int(n * (2 * n - 1) * catalan_number(n - 1) / (n + 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using dynamic programming.\n\n    Args:\n        n (int): The index of the Catalan number to compute.\n\n    Returns:\n        int: The nth Catalan number.\n\n    Example:\n        >>> catalan_number(0)\n        1\n        >>> catalan_number(5)\n        23\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n\n    catalan = [1] * (n + 1)\n    catalan[0] = 0\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize a list to store the catalan numbers\n    catalan_list = []\n\n    # Calculate the first n catalan numbers\n    for i in range(1, num+1):\n        # Calculate the first i catalan numbers\n        catalan = 1\n        for j in range(i):\n            catalan *= (i-j) // (j+1)\n        catalan_list.append(catalan)\n\n    # Return the nth catalan number\n    return catalan_list[num-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n\n    Args:\n    n (int): The nth catalan number to be returned.\n\n    Returns:\n    int: The nth catalan number.\n    \"\"\"\n    # Initialize the n-th catalan number\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Compute the (n-1)-th catalan number\n        c1 = catalan_number(n - 1)\n\n        # Compute the (n-2)-th catalan number\n        c2 = catalan_number(n - 2)\n\n        # Return the sum of the (n-1)-th and (n-2)-th catalan numbers\n        return c1 + c2\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Use recursion to compute the n-th catalan number\n        return catalan_number(n-1) * 2 + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # define a function to compute catalan number\n    def catalan(n):\n        # initialize catalan number\n        c = [[1]*(n+1) for _ in range(n+1)]\n        # compute catalan number using recurrence relation\n        for i in range(1, n+1):\n            for j in range(i+1):\n                c[i][j] = c[i-1][j] + c[i-1][j-1]\n        # return the nth catalan number\n        return c[n][n]\n    # return the nth catalan number\n    return catalan(num)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        numerator = 1\n        denominator = 1\n        for i in range(1, n+1):\n            numerator = numerator * (i + 1)\n            denominator = denominator * i\n        return numerator // denominator"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z][aeiouAEIOU]+ly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    adverbs = []\n    for match in matches:\n        adverbs.append((match.start(), match.end()))\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to find adverbs ending with ly\n    pattern = r'\\b([a-z]+)ly\\b'\n\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate through the matches and print the adverb and its positions\n    for i, match in enumerate(matches):\n        print(f'{i+1}. {match[0]}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b[sS]h\\b[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(f\"Adverb ending with 'ly': {matches[0]}\")\n        print(f\"Adverb positions: {matches}\")\n    else:\n        print(\"No adverb found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples, where each tuple contains\n    the adverb ending with \"ly\" and its starting and ending positions in the input string.\n    '''\n\n    # Compile a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # Use the regular expression search() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples to store the adverb ending with \"ly\" and its starting and ending positions\n    result = []\n\n    # Loop through the matches and append a tuple to the result list for each match\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, start, end))\n\n    # Return the list of adverb ending with \"ly\" and their starting and ending positions in the input string\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print their positions and adverbs\n    for i, match in enumerate(matches, start=1):\n        print(f'{i}. {match[0]} at position {match.start()}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define the regular expression pattern to find adverbs ending with ly\n    pattern = r\"\\b[a-z]+ly\\b\"\n    # Use re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and print their positions and the matched text\n    for i, match in enumerate(matches):\n        print(f\"Position: {i+1}\\nMatch: {match}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern for matching adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    # use the re.findall() method to find all the occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # iterate over the matches and extract the positions of the adverbs\n    adverbs = [(m.start(), m.end()) for m in matches]\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w*ly\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    for match in matches:\n        index = text.index(match)\n        print(f\"{match} found at index {index}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'(?<=\\b)\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        print(text[start:end])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n\n    # Use the regular expression pattern to find all occurrences of adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Loop through the list of adverbs and store their positions in the \"positions\" list\n    for i, adverb in enumerate(adverbs):\n        positions.append(text.index(adverb))\n\n    # Return the list of adverb positions and their lengths\n    return positions, [len(a) for a in adverbs]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of items into a dictionary, where each key is an item and its value is its price\n    item_prices = {item: price for item, price in items}\n\n    # Create a max heap to store the n most expensive items\n    max_heap = []\n\n    # Iterate over the items and add them to the heap, based on their price\n    for item, price in item_prices.items():\n        heapq.heappush(max_heap, (-price, item))\n\n        # If the heap size exceeds n, remove the item with the lowest price from the heap\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Extract and return the n most expensive items from the heap\n    return [item for _, item in heapq.nlargest(n, max_heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and returns the n most expensive items.\n\n    Args:\n        items (list): A list of items to find the n most expensive items for.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the n most expensive items.\n    \"\"\"\n    heap = [(-price, item) for item, price in items]\n    heapq.heapify(heap)\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a max heap to store the n most expensive items\n    max_heap = []\n    # iterate through the items\n    for item in items:\n        # if the heap is not full, add the item to the heap\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        # if the heap is full and the item is cheaper, remove the cheapest item from the heap\n        elif item < heapq.heappop(max_heap):\n            heapq.heappush(max_heap, item)\n    # return the n most expensive items\n    return max_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to keep track of the n most expensive items\n    min_heap = []\n\n    # Iterate through the items in the dataset\n    for item in items:\n        # If the heap is full, remove the smallest element from the heap\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n\n        # Add the current item to the heap\n        heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items, and a number n, find the n most expensive items.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item from the heap\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): List of items to sort and filter.\n    n (int): Number of items to keep.\n\n    Returns:\n    list: List of n most expensive items.\n    '''\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Keep only the top n items\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \n    Args:\n    - items: a list of items to choose from\n    - n: the number of items to find\n    \n    Returns:\n    - a list of the n most expensive items\n    \"\"\"\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        # Add the item to the heap if it's cheaper than the smallest item\n        if not heap or item < heap[0]:\n            heapq.heappush(heap, item)\n        # If the heap is full, remove the smallest item from it\n        elif len(heap) < n:\n            heapq.heappushpop(heap, item)\n    # Return the n most expensive items from the heap\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Loop through the items and push them onto the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n    \n    # Pop the smallest item from the min heap and keep popping until we have\n    # found n items\n    n_expensive_items = []\n    while n_expensive_items < n:\n        n_expensive_items.append(heapq.heappop(min_heap))\n    \n    # Return the n most expensive items in descending order\n    return n_expensive_items[::-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    elif n == 0:\n        return []\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return [l]\n    else:\n        mid = len(l) // 2\n        left = split_Arr(l[:mid], n-1)\n        right = split_Arr(l[mid:], n)\n        return left + [l[mid]] + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    if n == mid:\n        return l[n:] + l[:n]\n    elif n < mid:\n        return split_Arr(l[:mid], n)\n    else:\n        return split_Arr(l[mid:], n-mid)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"List is too short\"\n    elif n == 0:\n        return [l[0]] + l[1:]\n    else:\n        return [l[n]] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Take the first n-1 elements as the first part of the list and the last element as the last part of the list\n    first_part = l[:n-1]\n    last_part = l[n-1]\n    \n    # Concatenate the first part with the last element\n    new_list = first_part + [last_part]\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return l\n    else:\n        mid = len(l)//2\n        left = l[:mid]\n        right = l[mid:]\n        if n % 2 == 0:\n            # If the index is even, add the first part to the right part\n            first = l[mid-1]\n            left.append(first)\n        else:\n            # If the index is odd, add the first part to the left part\n            first = l[mid]\n            right.insert(0, first)\n        return left + split_Arr(right, n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        raise ValueError(\"n should be less than or equal to the length of the list\")\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"Index out of range.\")\n        return []\n    else:\n        new_list = l[n:]\n        l[:n] = []\n        return l + [new_list]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the maximum value in the list\n    max_value = max(nums)\n    \n    # Find the minimum value in the list\n    min_value = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_value - min_value\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and finds the difference between the largest and smallest values in the list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the smallest and largest value\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Iterate over the list to find the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n\n    # Return the difference between the largest and smallest values\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between the first and last element of the sorted list\n    diff = abs(nums[0] - nums[-1])\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the largest and smallest value in the list\n    largest = nums[-1]\n    smallest = nums[0]\n    # Return the difference between the largest and smallest value\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n\n    # Calculate the difference between the two values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as an input and returns the difference between the largest and smallest numbers in the list.\n\n    If the input list is empty, the function will raise a ValueError.\n    '''\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the difference between the max and min values\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num == num ** 2:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a variable to store the count of perfect squares\n    count = 0\n    # iterate from a to b, checking for perfect squares\n    for num in range(a, b+1):\n        # check if the square of the number is a perfect square\n        if num == int(num**0.5)**2:\n            # increment the count if the square is a perfect square\n            count += 1\n    # return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == int(square) ** 2:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Iterate through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to the current number\n        if i*i == i:\n            # If it is, return the current number\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 1:\n            result.append(i)\n        elif i % 2 == 0:\n            result.append(i**2)\n        else:\n            j = 3\n            while j <= i/2:\n                if i % j == 0:\n                    result.append(i)\n                    break\n                j += 2\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two positive integers, a and b, and returns a list of perfect squares between a and b.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    \n    # iterate through all integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i == int(i**0.5**2):\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n    \n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        if int(i*i) == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if i*i == a**2 or i*i == b**2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            if i**2 + j**2 == a**2 or i**2 + j**2 == b**2:\n                squares.append((i, j))\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to magnitude and angle in radians\n    mag = cmath.sqrt(x**2 + y**2)\n    angle = cmath.phase(mag)\n    \n    # Calculate rectangular coordinates from magnitude and angle in radians\n    x_rect = mag*cmath.cos(angle)\n    y_rect = mag*cmath.sin(angle)\n    \n    # Return the rectangular coordinates as a tuple\n    return (x_rect.real, y_rect.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        x (float): The radius of the circle.\n        y (float): The angle of the circle, measured in radians.\n\n    Returns:\n        A tuple containing the x and y components of the rectangular coordinates.\n    \"\"\"\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    # convert angle from radian to degree\n    theta_deg = cmath.phase(theta) * 180 / cmath.pi\n    \n    return r, theta_deg"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n\n    Args:\n        r (float): The radius of the circle in polar coordinates.\n        theta (float): The angle of the point in polar coordinates.\n\n    Returns:\n        tuple: The (x, y) coordinates of the point in rectangular coordinates.\n    \"\"\"\n    # Convert the polar coordinates to rectangular coordinates.\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    \n    Parameters:\n    r (float): radial coordinate\n    theta (float): angle measured in radians from the x-axis\n    \n    Returns:\n    x (float): rectangular x-coordinate\n    y (float): rectangular y-coordinate\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in two arguments, r and theta, and returns the rectangular coordinates of a point with radius r and angle theta.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the polar coordinates (r, theta) of a point and returns the rectangular coordinates (x, y).\n    \"\"\"\n\n    # Convert r to complex number\n    z = cmath.rect(r)\n\n    # Apply the complex multiplication\n    x = z * cmath.exp(1j * theta)\n    y = z * cmath.exp(-1j * theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    # Convert theta to radians\n    theta = theta * cmath.pi / 180.0\n    \n    # Calculate x and y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the results as a tuple\n    return (x.real, x.imag, y.real, y.imag)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if the length of the list is less than 2, do nothing\n    if len(newList) < 2:\n        return newList\n    \n    # get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # create a new list with the swapped elements\n    newList = [last, first]\n    \n    # return the new list with swapped elements\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n <= 1:\n        return newList\n    else:\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    \n    # check if the length is even\n    if length % 2 == 0:\n        # if it's even, swap the first and second elements\n        newList[0], newList[1] = newList[1], newList[0]\n        # return the updated list\n        return newList\n    else:\n        # if it's odd, swap the first and third elements\n        newList[0], newList[2] = newList[2], newList[0]\n        # return the updated list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n\n    # check if the input list is empty\n    if len(newList) == 0:\n        return \"The list is empty.\"\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n == 0 or n == 1:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[n-1]\n        return [last] + [first] + newList[:n-2]"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        result = 1\n        for i in range(1, k+1):\n            result = result * (n-i+1) / i\n        return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize sum and product to 0\n    sum_product = 0\n    product = 1\n    \n    # Loop through the range of k (0 to n)\n    for i in range(k,n+1):\n        # Calculate the binomial coefficient\n        bin_coeff = (n-i+1)*product//(i+1)\n        \n        # Add the binomial coefficient to the sum_product\n        sum_product += bin_coeff\n        \n        # Update the product for the next iteration\n        product *= (n-i+1)\n        \n    # Return the sum_product\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0 or k > n:\n        return -1\n    \n    # Calculate the binomial coefficient of (n,k)\n    coeff = 1\n    for i in range(k, n+1):\n        coeff = coeff * i // (i-k)\n    \n    # Calculate the product of consecutive binomial coefficients\n    product = 1\n    for i in range(k+1, n+1):\n        product = product * (i-k)\n    return coeff + product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum\n    sum = 0\n\n    # loop through the first k terms\n    for i in range(k):\n        # calculate the binomial coefficient\n        bin_coeff = (n+1-i)*(n-i) // (i+1)\n        # add the product to the sum\n        sum += bin_coeff\n\n    # return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the binomial coefficient using Pascal's triangle\n    coeff = 1\n    for i in range(1, k+1):\n        coeff *= (n - i + 1) // i\n    for i in range(1, k+1):\n        coeff //= i\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters: \n    n (int): number of terms in the binomial series\n    k (int): degree of the binomial series\n\n    Returns: \n    sum (int): sum of the product of consecutive binomial co-efficients\n\n    '''\n\n    # Check if n is less than k\n    if n < k: \n        return None \n\n    # Initialize sum to 1\n    sum = 1 \n\n    # Iterate over consecutive integers from 0 to n-k\n    for i in range(n-k): \n        # Calculate the binomial coefficient of n and k\n        coeff = (n - i)/(i + 1)\n\n        # Multiply the sum by the binomial coefficient\n        sum *= coeff\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the binomial coefficient using formula:\n    # binomial(n,k) = n! / (k! * (n-k)!)\n    n_fact = 1\n    for i in range(1,n+1):\n        n_fact *= i\n\n    k_fact = 1\n    for i in range(1,k+1):\n        k_fact *= i\n\n    k_fact *= n - k\n\n    return n_fact // k_fact"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(1,n+1): \n        result += i * binomial_Coeff(n-1,k-1)\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern for ip address\n    pattern = r'(\\d{1,3}\\.){3}\\d{1,3}'\n    # Find all occurrences of ip address in the given string\n    matches = re.findall(pattern, ip)\n    # Convert each ip address to integer and remove leading zeroes\n    for match in matches:\n        ip_int = int(match.replace('0.', ''))\n        if ip_int == 0:\n            continue\n        else:\n            return str(ip_int)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'(\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)'\n    result = re.sub(pattern, r'\\1', ip)\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match any sequence of 1-3 digits separated by dots\n    pattern = r'(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})'\n    # Match the pattern in the input string\n    match = re.match(pattern, ip)\n    # Extract the groups of matched digits\n    groups = match.groups()\n    # Loop through the groups and remove any leading zeroes\n    for i in range(len(groups)):\n        groups[i] = groups[i].lstrip('0')\n    # Join the groups back into a string and return it\n    return '.'.join(groups)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d)(?=.{3})', r'\\1.', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    if re.match(pattern, ip):\n        # Remove leading zeroes\n        ip = re.sub(r'^0+', '', ip)\n        return ip\n    else:\n        return \"Invalid IP Address\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    if pattern.match(ip):\n        ip = ip.strip('0').lstrip('.')\n        return ip\n    else:\n        return 'Invalid IP Address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for i in list1:\n        if i % 2 == 0:\n            if even_num is None:\n                even_num = i\n            else:\n                even_num = i - even_num\n                \n        if i % 2!= 0:\n            if odd_num is None:\n                odd_num = i\n            else:\n                odd_num = i - odd_num\n    \n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    even_found = False\n    odd_found = False\n    for num in list1:\n        if num % 2 == 0:\n            if not even_found:\n                even_num = num\n                even_found = True\n        else:\n            if not odd_found:\n                odd_num = num\n                odd_found = True\n        if even_found and odd_found:\n            break\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    even_index = next((i for i, x in enumerate(list1) if x % 2 == 0), None)\n    if even_index is None:\n        return None\n    \n    # Find the first odd number in the list\n    odd_index = next((i for i, x in enumerate(list1) if x % 2 == 1), None)\n    if odd_index is None:\n        return None\n    \n    # Calculate the difference between the first even and first odd numbers\n    diff = list1[even_index] - list1[odd_index]\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = [num for num in list1 if num % 2 == 0][0]\n    first_odd = [num for num in list1 if num % 2!= 0][0]\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    return abs(even_first - odd_first)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n    \n    if first_even is None or first_odd is None:\n        return \"List doesn't contain any even or odd number\"\n    \n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List must have at least two elements.\"\n    elif len(list1) % 2 == 1:\n        return \"List must have an even number of elements.\"\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0 and odd % 2 == 0:\n            return \"Both numbers are even.\"\n        elif even % 2 == 1 and odd % 2 == 1:\n            return even - odd\n        elif even % 2 == 0 and odd % 2 == 1:\n            return even - odd\n        elif even % 2 == 1 and odd % 2 == 0:\n            return odd - even\n        else:\n            return \"Both numbers are odd.\""
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    if n!= len(str2):\n        return \"Input strings must be of equal length\"\n    min_swaps = 0\n    for i in range(n):\n        if str1[i] == '0' and str2[i] == '1' or str1[i] == '1' and str2[i] == '0':\n            min_swaps += 1\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to integers\n    n1 = int(str1, 2)\n    n2 = int(str2, 2)\n    # calculate the number of bits in the binary strings\n    n = len(str1)\n    # create a list to store the number of swaps required for each bit position\n    swaps = [0] * n\n    # loop through each bit position\n    for i in range(n):\n        # calculate the bitwise XOR of the two numbers at this position\n        xor_bits = n1 ^ n2\n        # calculate the number of bits to the left of this position\n        bit_count = xor_bits.bit_length()\n        # add the number of swaps required to each bit position to the list\n        swaps[i] = bit_count\n    # calculate the minimum number of swaps required\n    min_swaps = min(swaps)\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    count = 0\n    i = j = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            count += 1\n            if str1[i] > str2[j]:\n                str1 = str1[:i] + str2[j] + str1[i+1:]\n                str2 = str2[:j] + str1[i] + str2[j+1:]\n            else:\n                str1 = str1[:j] + str2[j] + str1[j+1:]\n                str2 = str2[:i] + str1[j] + str2[i+1:]\n            i = 0\n            j = 0\n        else:\n            i += 1\n            j += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Find the number of bits that are different in the two numbers\n    diff_bits = bin(num1 ^ num2)[2:].count('1')\n    \n    # Count the number of 1 bits in the binary representation of num1\n    ones_count1 = sum(1 for digit in str1 if digit == '1')\n    \n    # Count the number of 1 bits in the binary representation of num2\n    ones_count2 = sum(1 for digit in str2 if digit == '1')\n    \n    # Calculate the minimum number of swaps needed to convert the two numbers\n    min_swaps = diff_bits + (ones_count1 - ones_count2)\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Let's write the implementation of the function for this problem.<|im_sep|>"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) # number of digits in str1 and str2\n    \n    # create a boolean array to store the swaps needed to convert str1 to str2\n    swaps = [[False]*n for _ in range(2)]\n    \n    # convert str1 to int and str2 to int\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # iterate through each bit position in num1 and num2\n    for i in range(n):\n        # check if the bit position of num1 is greater than the bit position of num2\n        if num1 > num2 :\n            # check if the corresponding bit in str1 is true\n            if str1[i] == '1':\n                # check if the corresponding bit in str2 is false\n                if str2[i] == '0':\n                    # swap the corresponding bit in str1 and str2\n                    swaps[0][i] = swaps[1][i] = True\n                    num1, num2 = num2, num1 # swap the bits\n        # check if the bit position of num2 is greater than the bit position of num1\n        elif num2 > num1 :\n            # check if the corresponding bit in str2 is true\n            if str2[i] == '1':\n                # check if the corresponding bit in str1 is false\n                if str1[i] == '0':\n                    # swap the corresponding bit in str2 and str1\n                    swaps[1][i] = swaps[0][i] = True\n                    num1, num2 = num2, num1 # swap the bits\n    \n    # count the number of swaps required to convert str1 to str2\n    count = 0\n    for i in range(n):\n        if swaps[0][i] == swaps[1][i]:\n            count += swaps[0][i]\n        else:\n            break\n    \n    # return the minimum number of swaps required to convert str1 to str2\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a list to store the count of each digit in str1 and str2\n    count1 = [0] * 10\n    count2 = [0] * 10\n\n    # Loop through each character in the strings\n    for i in range(len(str1)):\n        # Add the digit at the current index to the count of its corresponding digit in str2\n        count2[int(str2[i])] += 1\n\n    # Loop through each character in str1 and remove the corresponding digit from count2\n    swaps = 0\n    for i in range(len(str1)):\n        # If the count of the digit at the current index in str1 is greater than or equal to the count of the digit at the current index in str2, remove the digit at the current index in str1 and increment swaps\n        if count1[int(str1[i])] >= count2[int(str1[i])]:\n            count1[int(str1[i])] -= 1\n            swaps += 1\n\n    # Return the number of swaps required to convert str1 to str2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one to the other.\n\n    :param str1: first binary number as a string\n    :type str1: str\n    :param str2: second binary number as a string\n    :type str2: str\n    :return: the minimum number of swaps required to convert one binary number to the other\n    :rtype: int\n    \"\"\"\n    # Initialize the swaps count to 0\n    swaps = 0\n    # Initialize the lengths of the two binary numbers\n    len1 = len(str1)\n    len2 = len(str2)\n    # Initialize the two binary numbers as lists\n    bin1 = [int(i) for i in str1]\n    bin2 = [int(i) for i in str2]\n    # Compare the length of the two binary numbers\n    if len1 > len2:\n        # Swap the first and last bits of the first binary number with the last bit of the second binary number\n        swaps += abs(bin1[0] - bin2[-1])\n        # Swap the last and second last bits of the first binary number with the second last bit of the second binary number\n        swaps += abs(bin1[-2] - bin2[-2])\n        # Swap the second and second-to-last bits of the first binary number with the second-to-last bit of the second binary number\n        swaps += abs(bin1[-3] - bin2[-3])\n        # Swap the second-to-last and last bits of the first binary number with the last bit of the second binary number\n        swaps += abs(bin1[-4] - bin2[-1])\n        # Shift the second binary number to the left by one bit and add the shifted binary number to the first binary number\n        bin1 = [bin1[-1]] + bin1[:-1]\n        # Swap the second and second-to-last bits of the first binary number with the second-to-last bit of the second binary number\n        swaps += abs(bin1[-1] - bin2[-3])\n        # Shift the second binary number to the left by two bits and add the shifted binary number to the first binary number\n        bin1 = [bin1[-2]] + bin1[:-2]\n        # Swap the third and third-to-last bits of the first binary number with the third-to-last bit of the second binary number\n        swaps += abs(bin1[-2] - bin2[-3])\n        # Shift the second binary number to the left by three bits and add the shifted binary number to the first binary number\n        bin1 = [bin1[-3]] + bin1[:-3]\n        # Swap the fourth and fourth-to-last bits of the first binary number with the fourth-to-last bit of the second binary number\n        swaps += abs(bin1[-3] - bin2[-3])\n        # Shift the second binary number to the left by four bits and add the shifted binary number to the first binary number\n        bin1 = [bin1[-4]] + bin1[:-4]\n        # Swap the fifth and fifth-to-last bits of the first binary number with the fifth-to-last bit of the second binary number\n        swaps += abs(bin1[-4] - bin2[-3])\n        # Shift the second binary number to the left by five bits and add the shifted binary number to the first binary number\n        bin1 = [bin1[-5]] + bin1[:-5]\n        # Swap the sixth and sixth-to-last bits of the first binary number with the sixth-to-last bit of the second binary number\n        swaps += abs(bin1[-5] - bin2[-3])\n    else:\n        # Swap the first and second bits of the first binary number with the second bit of the second binary number\n        swaps += abs(bin1[0] - bin2[1])\n        # Swap the third and fourth bits of the first binary number with the fourth bit of the second binary number\n        swaps += abs(bin1[2] - bin2[3])\n        # Swap the fifth and sixth bits of the first binary number with the sixth bit of the second binary number\n        swaps += abs(bin1[4] - bin2[5])\n        # Shift the second binary number to the left by one bit and add the shifted binary number to the first binary number\n        bin1 = [bin1[0]] + bin1[1:]\n        # Swap the third and fourth bits of the first binary number with the fourth bit of the second binary number\n       "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to lists of bits\n    bits1 = [int(x) for x in str1]\n    bits2 = [int(x) for x in str2]\n    n = len(bits1)\n\n    # initialize the minimum number of swaps to the maximum value\n    swaps = n\n\n    # check if the binary numbers have the same length\n    if n!= len(bits2):\n        return swaps\n\n    # check if the binary numbers have the same prefix of ones\n    prefix = True\n    for i in range(n):\n        if bits1[i]!= bits2[i]:\n            prefix = False\n            break\n    if prefix:\n        swaps -= n - 1\n\n    # swap the bits of the binary numbers\n    for i in range(n):\n        if bits1[i] > bits2[i]:\n            bits1[i], bits2[i] = bits2[i], bits1[i]\n            swaps -= 1\n\n    # check if the binary numbers have the same prefix of ones\n    prefix = True\n    for i in range(n):\n        if bits1[i]!= bits2[i]:\n            prefix = False\n            break\n    if prefix:\n        swaps -= n - 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input strings and returns the minimum number of swaps required to convert one\n    binary number to another.\n\n    Args:\n    str1 (str): binary number represented as a string\n    str2 (str): binary number represented as a string\n\n    Returns:\n    int: minimum number of swaps required to convert one binary number to another\n    \"\"\"\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the swaps count variable\n    swaps = 0\n\n    # Iterate through the binary number of the greater length\n    while num1!= num2:\n        # If the binary numbers have different lengths, there is no need to swap any bits\n        if len(str1)!= len(str2):\n            break\n\n        # Calculate the carry\n        carry = 0\n        for i in range(len(str1)):\n            # Calculate the XOR of the corresponding bits of the two binary numbers\n            bit1 = int(str1[i])\n            bit2 = int(str2[i])\n            xor_bit = bit1 ^ bit2\n\n            # Calculate the carry\n            if (bit1 & bit2)!= 0:\n                carry = 1\n            else:\n                carry = 0\n\n            # Calculate the XOR of the corresponding bits after the swap\n            bit1_xor_xor = bit1 ^ xor_bit\n            bit2_xor_xor = bit2 ^ xor_bit\n\n            # Update the binary numbers\n            str1[i] = str(bit1_xor_xor)\n            str2[i] = str(bit2_xor_xor)\n\n        # If there was a carry, increment the swaps count\n        if carry == 1:\n            swaps += 1\n\n        # Calculate the binary number with the carry\n        carry = 0\n        for i in range(len(str1)-1, -1, -1):\n            # Calculate the XOR of the corresponding bits of the two binary numbers\n            bit1 = int(str1[i])\n            bit2 = int(str2[i])\n            xor_bit = bit1 ^ bit2\n\n            # Calculate the carry\n            if (bit1 & bit2)!= 0:\n                carry = 1\n            else:\n                carry = 0\n\n            # Calculate the XOR of the corresponding bits after the swap\n            bit1_xor_xor = bit1 ^ xor_bit\n            bit2_xor_xor = bit2 ^ xor_bit\n\n            # Update the binary numbers\n            str1[i] = str(bit1_xor_xor)\n            str2[i] = str(bit2_xor_xor)\n\n        # If there was a carry, increment the swaps count\n        if carry == 1:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # calculate the size of each tuple\n    tuple_size = 0\n    for i in tuple_list:\n        tuple_size += sys.getsizeof(i)\n    \n    # return the total size of all tuples\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = 0\n    for i in range(len(tuple_list)):\n        size_of_tuple += sys.getsizeof(tuple_list[i])\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Check if the input is a tuple\n    if type(tuple_list)!= tuple:\n        print(\"Input must be a tuple\")\n        sys.exit(1)\n    \n    # Calculate the size of the tuple in bytes\n    tuple_size_in_bytes = sys.getsizeof(tuple_list)\n    \n    # Return the size in bytes\n    return tuple_size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size_of_tuple += sys.getsizeof(tuple_list[i])\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple to a bytes object\n    bytes_obj = sys.getsizeof(tuple_list)\n    return bytes_obj"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n\n    # Find the kth element from the merged array\n    kth_element = merged_arr[k - 1]\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return arr1[i] if i == len(arr1) else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two arrays\n    merged = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged)\n    # Find the kth element\n    return sorted_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Combine the two arrays\n    combined_arr = arr1 + arr2\n\n    # Sort the combined array\n    combined_arr.sort()\n\n    # Return the kth smallest element\n    return combined_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    # find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # find the maximum value in the two arrays\n    max_value = max(arr1[-1], arr2[-1])\n\n    # initialize the index of the element we are searching for\n    i = n1 - 1\n    j = n2 - 1\n\n    # iterate through the arrays until we find the kth element\n    while i >= 0 and j >= 0:\n        # add the current maximum value from the two arrays\n        current_value = arr1[i] + arr2[j]\n\n        # if the current value is equal to k, we have found the kth element\n        if current_value == k:\n            return current_value\n\n        # if the current value is less than k, move j to the left\n        elif current_value < k:\n            j -= 1\n        else:\n            i -= 1\n\n    # if we reach here, it means we have not found the kth element\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Check if the length of both arrays is less than or equal to k\n    if len(arr1) > k or len(arr2) > k:\n        raise ValueError(\"k is greater than the length of the largest array\")\n\n    # Merge both arrays and return the kth element\n    return merge_arrays(arr1, arr2, k)\n\ndef merge_arrays(arr1, arr2, k):\n    '''\n    Merge two sorted arrays and return the kth element.\n    '''\n\n    # Initialize two pointers to the first element of both arrays\n    i, j = 0, 0\n\n    # Initialize an empty list to store the merged array\n    merged_arr = []\n\n    # Loop until k elements are merged into the merged_arr\n    while i < len(arr1) and j < len(arr2) and len(merged_arr) < k:\n\n        # If the current element of arr1 is smaller, add it to merged_arr and increment i pointer\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n\n        # If the current element of arr2 is smaller, add it to merged_arr and increment j pointer\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Return the kth element of the merged array\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i-1] if i < len(arr1) else arr2[j-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_powers = 0\n    \n    for i in range(num_len):\n        power = num_len - 1 - i\n        digit = int(num_str[i])\n        sum_of_powers += digit ** power\n    \n    return sum_of_powers == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the sum\n        digit = int(digit)\n        sum += digit ** len(number_str)\n\n    # If the sum is equal to the original number, the number is armstrong\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Calculate the sum of the cubes of the digits in the number\n    sum_of_cubes = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit ** 3\n        number //= 10\n    \n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    temp = n\n    armstrong_sum = 0\n    while temp > 0:\n        digit = temp % 10\n        armstrong_sum += digit ** 3\n        temp //= 10\n    return n == armstrong_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through each digit in the number\n    for digit in number_str:\n        # Convert each digit to an integer and add it to the counter\n        count += int(digit)**len(number_str)\n\n    # Compare the result with the original number\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    str_number = str(number)\n    # Initialize the sum of the cubes of the digits\n    sum_cubes = 0\n    # Iterate over the digits of the number and calculate the cube of each digit\n    for digit in str_number:\n        cube = int(digit) ** 3\n        sum_cubes += cube\n    # Compare the sum of cubes with the original number\n    if sum_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    elif number == 10:\n        return True\n    else:\n        num_str = str(number)\n        arm_num = sum([int(num) ** len(num_str) for num in num_str])\n        if arm_num == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of the squares of each digit\n    sum_of_squares = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Square the integer and add it to the sum of squares\n        sum_of_squares += digit_int ** 2\n    # Check if the sum of squares equals the original number\n    if sum_of_squares == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    total = 0\n    for digit in number_str:\n        total += int(digit) ** len(number_str)\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    num = number\n    result = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        result += digit ** 3\n        temp //= 10\n    return num == result\n\nnumber = int(input(\"Enter a number: \"))\n\nif is_armstrong(number):\n    print(number, \"is an Armstrong number\")\nelse:\n    print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # Find the average\n    average = sum/count\n\n    # Return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function calculates the sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total += i\n        count += 1\n\n    average = total/count\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initializing variables\n    sum_of_numbers = 0\n    count = 0\n    # loop to iterate through numbers\n    for i in range(1, number+1):\n        # adding the current number to the sum\n        sum_of_numbers += i\n        # incrementing the count\n        count += 1\n    # calculating the average\n    average = sum_of_numbers / count\n    # printing the results\n    print(\"The sum of first\", number, \"natural numbers is:\", sum_of_numbers)\n    print(\"The average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Take input from user\n    n = int(input(\"Enter the number of natural numbers: \"))\n\n    # Initialize sum and count to 0\n    sum_num = 0\n    count = 0\n\n    # Loop through n natural numbers and add them to sum and count\n    for i in range(1, n+1):\n        sum_num += i\n        count += 1\n\n    # Calculate average\n    average = sum_num / count\n\n    # Print sum and average\n    print(\"Sum of first\", n, \"natural numbers:\", sum_num)\n    print(\"Average of first\", n, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print(\"The given number is even\")\n    else:\n        print(\"The given number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the character counts\n    char_count = {}\n    # loop through the string\n    for char in str1:\n        # if the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count\n        else:\n            char_count[char] += 1\n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(s):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # Find the first character with a frequency greater than 1\n    for c in freq:\n        if freq[c] > 1:\n            return c\n    \n    # If no character has a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string, if any.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character in the string\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # convert the string to a list\n    str_list = list(str1)\n\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # loop through the list of characters\n    for char in str_list:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count by 1\n            char_count[char] += 1\n        else:\n            # if it's not, add it with a count of 1\n            char_count[char] = 1\n\n    # find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            # return the character and its count\n            return char, char_count[char]\n\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it and set its count to 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count\n        else:\n            char_count[char] += 1\n    \n    # loop through each character in the string again to find the first repeated character\n    for char in str1:\n        # if the character is in the dictionary and its count is greater than 1, return it as the first repeated character\n        if char in char_count and char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in char_freq:\n        if char_freq[char] == str1.count(char):\n            return char\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(str1)\n    \n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Loop through each character in the list\n    for char in chars:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n            \n    # Loop through the list of characters again to find the first repeated character\n    for char in chars:\n        # If the character has a frequency greater than 1, it is a repeated character\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the dictionary and find the first character with a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # If no character with count greater than 1 is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n\n    # Find the character with the first occurrence of a frequency of 2 (i.e., a repeated character)\n    for char in freq_dict:\n        if freq_dict[char] == 2:\n            return char\n\n    # If no character was found with a frequency of 2, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_list.append(i)\n        i += 1\n    return lucid_list\n\ndef is_lucid(n):\n    '''\n    A function to check if a number is a lucid number.\n    '''\n    if n < 3:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter a number: \"))\nprint(\"All lucid numbers smaller than or equal to\", n, \"are:\", get_ludic(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # If the number is a lucid number, add it to the list\n        if is_lucid(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given integer is a lucid number.\n    \"\"\"\n    # Initialize a counter variable\n    counter = 0\n\n    # Iterate from 1 to the square root of the number\n    for i in range(1, int(n**0.5)+1):\n        # If the number is divisible by i, increment the counter\n        if n % i == 0:\n            counter += 1\n\n    # Return True if the counter is greater than 1, which means the number is a lucid number\n    return counter > 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(1, n+1):\n        lucid_set.add(i * (i+1))\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(int(digit) <= i for digit in str(i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Initialize a counter variable\n    count = 1\n\n    # Loop until we have found all the lucid numbers\n    while count <= n:\n        # Check if the current number is a lucid number\n        is_lucid = True\n        for i in range(2, int(count**0.5)+1):\n            if count % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(count)\n        count += 1\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if lucid_numbers:\n            if i - lucid_numbers[-1] > 1:\n                lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    num = 0\n    while num <= n:\n        if num!= 0 and num % 3 == 0:\n            ludic_nums.append(num)\n        num += 1\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i > 1 and all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n\n    for i in range(1, n + 1):\n        if i == 1:\n            lucid_numbers.append(i)\n        else:\n            is_lucid = True\n            j = 2\n            while is_lucid:\n                if i % j == 0:\n                    is_lucid = False\n                else:\n                    j += 1\n\n            if is_lucid:\n                lucid_numbers.append(i)\n\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n+1):\n        lucid_num = i*i*i + 1\n        if lucid_num <= n:\n            ludic_numbers.append(lucid_num)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Remove spaces from the string\n    s = s.replace(' ', '')\n\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word and join them back together\n    reversed_words =''.join(reversed(word) for word in words)\n\n    # Return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # Split the string into words\n    reversed_words = [] # Initialize an empty list to store the reversed words\n\n    for word in words: # Loop through each word in the list\n        reversed_word = word[::-1] # Reverse the word\n        reversed_words.append(reversed_word) # Append the reversed word to the list\n\n    return \" \".join(reversed_words) # Join the list of reversed words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list of words using slicing\n    reversed_words = words[::-1]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\n\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    A function to check if a given number is a prime or not.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # If the number is less than 2, it is not prime\n    if num < 2:\n        return False\n\n    # If the number is equal to 2, it is prime\n    if num == 2:\n        return True\n\n    # If the number is divisible by 2, it is not prime\n    if num % 2 == 0:\n        return False\n\n    # Check if the number is divisible by any number from 3 to the square root of the number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    # If the number is divisible by all numbers from 3 to the square root of the number, it is prime\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\n\nprint(radian_degree(90))"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # search the text for the pattern\n    matches = re.finditer(pattern, text)\n    \n    # initialize an empty list to store the matches\n    literals = []\n    \n    # loop through each match\n    for match in matches:\n        # append the match to the list of literals\n        literals.append(match.group())\n    \n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        match = matches[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append(literal)\n        literal_start = match.start()\n        literal_end = match.end()\n    return literals, literal_start, literal_end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0: \n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        bell_num = 0\n        for i in range(n):\n            bell_num += (2*i + 1)**2\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first two bell numbers\n    bell_1 = 1\n    bell_2 = 1\n    \n    # Iterate through the rest of the bell numbers\n    for i in range(2, n+1):\n        # Calculate the next bell number\n        bell_i = bell_1 + bell_2\n        # Update the values of bell_1 and bell_2\n        bell_1 = bell_2\n        bell_2 = bell_i\n        \n    return bell_2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number using Sieve of Eratosthenes algorithm.\n    '''\n    if n <= 0:\n        return None\n    \n    # Find the number of digits in n\n    digits = len(str(n))\n    \n    # Create a list of primes up to n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    # Use Sieve of Eratosthenes algorithm to find primes up to n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    \n    # Calculate the nth bell number\n    bell = n\n    for i in range(digits - 1, -1, -1):\n        bell += (primes[bell] * (n // (10 ** i)))\n    \n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1 \n    elif n == 1: \n        return 1 \n    else: \n        return (n-1)*bell_Number(n-1) + n*bell_Number(n-2) \n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return (2 * bell_Number(n-1)) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Invalid Input\"\n    else:\n        bell = 1\n        for i in range(1,n+1):\n            bell = bell * i\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 1 + bell_Number(n/2)\n    else:\n        return bell_Number(n-1) + bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list without the k'th element\n    new_list = list1[:k-1] + list1[k:]\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if k is less than or equal to 0\n    if L <= 0:\n        return list1\n    \n    # Iterate through the list and remove the k'th element\n    for i in range(len(list1)-1, -1, -1):\n        if i == L-1:\n            list1.pop(i)\n            return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n            break\n        elif i < k:\n            list1.pop(i)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    n = len(list1)\n    for i in range(n):\n        if i!= k-1:\n            list1[i], list1[k-1] = list1[k-1], list1[i]\n        k = k - 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(list1[L-1])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the kth element from a list.\n\n    :param list1: A list to remove the kth element from.\n    :param k: The index of the kth element to remove.\n    :return: A new list with the same elements as list1, but with the kth element removed.\n    \"\"\"\n    list2 = []\n    for i in range(len(list1)):\n        if i!= k:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the kth element from a list.\n\n    Args:\n        list1 (list): The list to remove the kth element from.\n        k (int): The index of the element to remove.\n\n    Returns:\n        list: A new list with all the elements except the kth element.\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i == L-1:\n            continue\n        list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1 # k is the index of the element to be removed\n    \n    # create a new list with the same elements as the original list\n    new_list = list1[:]\n    \n    # remove the k'th element from the new list\n    del new_list[k]\n    \n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L - 1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_col = max(max_col, max(test_list[i]))\n        elif test_list[i][N-1] > max_col:\n            max_col = test_list[i][N-1]\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Check if N is a valid input\n    if N > num_rows:\n        print(\"Error: N is greater than the number of rows in the matrix.\")\n        return\n    \n    # Find the max value in then'th column\n    max_value = max([row[N-1] for row in test_list])\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()\n        test_list[i] = test_list[i][-N:]\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i]))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i!= N:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to be the first element of the first row\n    max_val = test_list[0][0]\n    # Loop through each row in the list and find the maximum value of then'th column\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Initialize max to the first element in the first row of the matrix\n    max_val = test_list[0][0]\n    \n    # Loop through each row in the matrix, starting at the second row (row 1)\n    for i in range(1, len(test_list)):\n        # Check if the element in the current row is greater than the current max value\n        if test_list[i][N-1] > max_val:\n            # Update the max value to the current element in the current row\n            max_val = test_list[i][N-1]\n            \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0 or len(test_list[0]) == 0:\n        return None\n    max_num = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_num = max(max_num, max(test_list[i]))\n        else:\n            max_num = max(max_num, float('-inf'))\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    max_col = 0\n    for i in range(n):\n        if i == N-1:\n            max_col = max(max_col, max(test_list[i][j] for j in range(m)))\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the length of the list\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    \n    # check if the N is valid\n    if N > num_cols:\n        raise ValueError(\"N is greater than the number of columns in the matrix.\")\n    \n    # initialize the max value to be negative infinity\n    max_value = float('-inf')\n    \n    # iterate over each row of the matrix\n    for row in test_list:\n        # find then'th column\n        nth_col = row[N-1]\n        \n        # compare the nth column with the max value found so far\n        if nth_col > max_value:\n            max_value = nth_col\n    \n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append((sublist[0], sublist[1]))\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_lst = []\n\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize variables to keep track of the cumulative sum and the count of values present in the list\n    cumulative_sum = 0\n    count = 0\n\n    # Loop through the list of tuples\n    for item in test_list:\n\n        # If the value is not None, add it to the cumulative sum and increment the count\n        if item is not None:\n            cumulative_sum += item\n            count += 1\n\n    # Return the cumulative sum divided by the count\n    return cumulative_sum / count"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for tup in test_list:\n        for num in tup:\n            cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum as 0\n    cum_sum = 0\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Extract the values from the tuple\n        val1, val2, val3 = tup\n        \n        # Calculate the cumulative sum of the values\n        cum_sum += val1 + val2 + val3\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple and add it to the cumulative sum\n        for val in tup:\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # iterate through the values in each tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        num_sum = 0\n        for j in range(len(nums[i])):\n            num_sum += nums[i][j]\n        average_list.append(num_sum/len(nums[i]))\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple) / len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    # loop through each tuple in the input list\n    for tup in nums:\n        # loop through each value in the tuple\n        total = 0\n        count = 0\n        for val in tup:\n            total += val\n            count += 1\n        # calculate the average and append it to the list\n        average = total / count\n        averages.append(average)\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for sub_tuple in nums:\n        for num in sub_tuple:\n            total += num\n            count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store the averages\n    averages = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize a variable to store the sum of the values in the tuple\n        total = 0\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the total\n            total += val\n        # divide the total by the number of values in the tuple to get the average\n        avg = total / len(tup)\n        # append the average to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length\"\n    \n    # perform element wise modulo\n    modulo_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be the same.\")\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples are not of the same length.\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    i = 0\n    while i < steps:\n        if i == 0:\n            if d > 0:\n                d -= 1\n                i += 1\n            else:\n                jumps += 1\n                i += 1\n        elif i == 1:\n            if d > 0:\n                d -= 1\n                i += 1\n            else:\n                jumps += 1\n                i += 1\n        elif i == 2:\n            if d > 0:\n                d -= 1\n                i += 1\n            else:\n                jumps += 1\n                i += 1\n        elif i == 3:\n            if d > 0:\n                d -= 1\n                i += 1\n            else:\n                jumps += 1\n                i += 1\n        elif i == 4:\n            if d > 0:\n                d -= 1\n                i += 1\n            else:\n                jumps += 1\n                i += 1\n        elif i == 5:\n            if d > 0:\n                d -= 1\n                i += 1\n            else:\n                jumps += 1\n                i += 1\n        else:\n            break\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    def min_jumps_helper(steps, d, steps_taken):\n        if d == 0:\n            return 0\n        if steps_taken == steps:\n            return 1\n        if d < 0:\n            return float('inf')\n        if d == 1:\n            return 1 + min_jumps_helper(steps, d, steps_taken + 1)\n        return min_jumps_helper(steps, d, steps_taken + 1)\n\n    return min_jumps_helper(steps, d, 0)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 0\n    elif d == 0:\n        return 1\n    elif d > 0 and steps > 1:\n        return min_Jumps(steps-1, d-1) + min_Jumps(steps-1, d)\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n\n    steps = steps - 1\n    jumps = 0\n\n    while steps >= 0:\n        if d == 0:\n            return jumps\n        else:\n            if d > 0:\n                d -= 1\n            else:\n                d = 0\n            jumps += 1\n            steps -= 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Calculate the maximum number of jumps required to reach the (0, 0) point\n    max_jumps = (steps // d) + (steps % d!= 0)\n    \n    # Check for the minimum number of jumps required to reach the (d, 0) point using dynamic programming\n    dp = [0] * (steps + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, steps + 1):\n        dp[i] = float('inf')\n        for j in range(1, i // d + 1):\n            dp[i] = min(dp[i], dp[j] + dp[i - j * d])\n        dp[i] += 1\n        \n    # Check if the minimum number of jumps is less than or equal to the maximum number of jumps\n    return min(max_jumps, dp[steps])"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Define the starting point (0, 0)\n    start = (0, 0)\n\n    # Define the ending point (d, 0)\n    end = (d, 0)\n\n    # Initialize the distance travelled so far and the steps taken so far\n    dist_traveled = 0\n    steps_taken = 0\n\n    # Initialize a variable to keep track of the steps required to reach the end point\n    steps_required = []\n\n    # Initialize a variable to keep track of the steps required to reach the start point\n    steps_required.append(0)\n\n    # Initialize a variable to keep track of the number of jumps\n    jumps_taken = 0\n\n    # Initialize a variable to keep track of the number of steps required to reach the end point\n    steps_taken = 0\n\n    # Initialize a variable to keep track of the number of steps required to reach the start point\n    steps_required = [0]\n\n    # Iterate over the steps to find the minimum number of jumps\n    while steps_taken < steps:\n        # Iterate over the points to find the minimum steps required to reach the end point from the start point\n        for i in range(len(points_to_visit)):\n            # Calculate the steps to reach the next point\n            steps_to_next = abs(points_to_visit[i][0] - start[0]) + abs(points_to_visit[i][1] - start[1])\n\n            # If the next point is not yet visited\n            if steps_to_next not in steps_taken:\n                # If the next point is closer to the end point\n                if abs(points_to_visit[i][0] - end[0]) + abs(points_to_visit[i][1] - end[1]) < abs(points_to_visit[closest_point_index][0] - end[0]) + abs(points_to_visit[closest_point_index][1] - end[1]):\n                    # Update the closest point index and the distance to the end point\n                    closest_point_index = i\n                    dist_to_end = abs(points_to_visit[i][0] - end[0]) + abs(points_to_visit[i][1] - end[1])\n\n                # If the next point is closer to the start point\n                elif abs(points_to_visit[i][0] - start[0]) + abs(points_to_visit[i][1] - start[1]) < abs(points_to_visit[closest_point_index][0] - start[0]) + abs(points_to_visit[closest_point_index][1] - start[1]):\n                    # Update the closest point index and the distance to the start point\n                    closest_point_index = i\n                    dist_to_start = abs(points_to_visit[i][0] - start[0]) + abs(points_to_visit[i][1] - start[1])\n\n        # If the closest point is not the end point\n        if closest_point_index!= len(points_to_visit) - 1:\n            # If the next point is closer to the end point\n            if dist_to_end < dist_to_start:\n                # Move to the next point and update the steps taken and the number of jumps\n                start = points_to_visit[closest_point_index + 1]\n                steps_taken += steps_to_next\n                jumps_taken += 1\n                steps_required.append(steps_taken)\n\n                # If the end point is reached\n                if start == end:\n                    # Add the number of jumps and steps to the required steps and update the steps taken\n                    steps_required.append(steps_taken + jumps_taken)\n                    return steps_required[1:]\n\n            # If the next point is closer to the start point\n            elif dist_to_start < dist_to_end:\n                # Move to the next point and update the steps taken and the number of jumps\n                start = points_to_visit[closest_point_index + 1]\n                steps_taken += steps_to_next\n                jumps_taken += 1\n                steps_required"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    max_steps = steps - d\n    while i <= max_steps:\n        i += 1\n        j += 1\n        if j >= d:\n            count += 1\n            j -= 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return -1\n\n    jumps = 0\n    for i in range(1, steps):\n        if i >= d:\n            jumps += 1\n        else:\n            break\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Parameters:\n    steps: int\n        Number of steps required to reach the given point (d, 0) from origin.\n    d: int\n        Given distance to reach the point (d, 0) from origin.\n\n    Returns:\n    int\n        Number of jumps required to reach the point (d, 0) from origin.\n    '''\n\n    # Calculating the required jumps\n    jumps = steps // d + 1\n\n    # Returning the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    jumps = 0\n    curr_x, curr_y = 0, 0\n    \n    # check if there are any possible jumps at all\n    if d <= curr_y:\n        return jumps\n    \n    # loop through all possible positions\n    for i in range(1, steps+1):\n        curr_x += d\n        curr_y += 1\n        \n        # check if the point is at (d, 0)\n        if curr_x == 0 and curr_y == d:\n            jumps += 1\n            curr_x += d\n            curr_y += 1\n        \n        # check if there are any possible jumps now\n        if d <= curr_y:\n            return jumps\n    \n    # if no possible jumps were found, return -1\n    return -1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the first list and perform element-wise division\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Args:\n        nums1 (list): List of numbers.\n        nums2 (list): List of numbers.\n\n    Returns:\n        list: List of numbers.\n\n    Example:\n        div_list([2, 4, 6], [1, 2, 3])\n        Output: [2.0, 2.0, 2.0]\n    \"\"\"\n\n    # check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # initialize an empty list to store the results\n    result = []\n\n    # loop through each element in the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: List elements cannot be zero\")\n            return\n        result.append(nums1[i] // nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    test_str = ''.join(num_list)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    num_str = \"\"\n\n    # loop through the string and append each character to a list\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            num_str += char\n\n    # reverse the list and join it back into a string\n    reversed_list = num_list[::-1]\n    result = \"\".join(reversed_list)\n\n    # return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables for string and number count\n    string_list = list(test_str)\n    num_count = 0\n    \n    # iterate through each character in the string\n    for char in string_list:\n        # if the character is a number\n        if char.isdigit():\n            # increment the number count\n            num_count += 1\n        # if the character is not a number\n        else:\n            # move all non-numbers to the beginning of the list\n            while num_count > 0:\n                string_list.insert(0, string_list.pop())\n                num_count -= 1\n    \n    # return the modified string\n    return ''.join(string_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # create a list of all the digits in the string\n    digits = [int(char) for char in test_str if char.isdigit()]\n\n    # reverse the list so that we can move digits to the end of the string\n    digits.reverse()\n\n    # join the digits back together into a string\n    digits_str = ''.join([str(digit) for digit in digits])\n\n    # remove the digits from the original string\n    test_str = ''.join([char for char in test_str if not char.isdigit()])\n\n    # return the modified string\n    return test_str + digits_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to keep track of numbers and non-numbers\n    numbers = ''\n    non_numbers = ''\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the numbers string\n        if char.isdigit():\n            numbers += char\n        # if the character is not a number, add it to the non-numbers string\n        else:\n            non_numbers += char\n\n    # add the numbers string to the end of the non-numbers string\n    result = non_numbers + numbers\n\n    # return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    number_found = False\n    num_start = -1\n    num_end = -1\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the character is a number\n        if test_str[i].isdigit():\n            # Check if the current number is the first one\n            if not number_found:\n                num_start = i\n                number_found = True\n            # If the current number is not the first one\n            else:\n                # Check if the number has already been moved\n                if i > num_end:\n                    # If not, move the number to the end\n                    test_str = test_str[:num_start] + test_str[num_start:i] + test_str[i:]\n                    num_end = i\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    num_str = ''.join(nums)\n    test_str = ''.join([char for char in test_str if char.isdigit()])\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    # initialize an empty string to hold the non-numeric characters\n    non_nums = \"\"\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the non_nums string\n        if char.isdigit():\n            non_nums += char\n        # otherwise, append it to the original string\n        else:\n            test_str += char\n    # return the modified string with all the numbers moved to the end\n    return test_str + non_nums"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the numbers\n    nums = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is a number\n        if word.isdigit():\n            # Add the number to the nums list\n            nums.append(word)\n    \n    # Join the words with the numbers in the nums list at the end\n    result =''.join(words + nums)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    largest_size = 1\n    current_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            current_size = 1\n            largest_size = max(largest_size, current_size)\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in ascending order\n    a.sort()\n    \n    # initialize variables to store the maximum size and the set of numbers in the largest subset\n    max_size = 1\n    current_subset = [a[0]]\n    \n    # iterate over the sorted list, checking for divisibility\n    for i in range(1, len(a)):\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n            max_size = max(max_size, len(current_subset))\n        else:\n            current_subset = [a[i]]\n    \n    # return the maximum size of the largest subset found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    n = len(a) # get the length of the list\n    count = 0 # initialize count to 0\n    current_sum = 0 # initialize current_sum to 0\n    max_sum = 0 # initialize max_sum to 0\n    \n    # loop through the list from start to end\n    for i in range(n):\n        # calculate the sum of the current number and add it to current_sum\n        current_sum += a[i]\n        # find the count of the current number in the list\n        count = current_sum // a[i]\n        # calculate the maximum sum that can be obtained with the current number and count\n        max_sum = max(max_sum, (count * a[i]))\n        \n    return max_sum"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    current = 0\n    current_size = 1\n    max_size = 1\n    max_start = 0\n\n    # loop through the sorted list\n    for i in range(1, len(a)):\n        if a[i] % a[current] == 0:\n            current += 1\n        else:\n            current = 0\n\n        # update the current size\n        current_size += 1\n\n        # update the maximum size and start index if necessary\n        if current_size > max_size:\n            max_size = current_size\n            max_start = i - current_size + 1\n\n    # return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for the maximum subset size and the current subset size\n    max_subset_size = 0\n    current_subset_size = 0\n\n    # Initialize variables for the start index and the end index of the current subset\n    start_index = 0\n    end_index = 0\n\n    # Loop through the list\n    for i in range(1, len(a)):\n\n        # If the difference between the current element and the previous element is divisible by 2,\n        # add 1 to the current subset size and update the maximum subset size if necessary\n        if a[i] - a[i - 1] % 2 == 0:\n            current_subset_size += 1\n            if current_subset_size > max_subset_size:\n                max_subset_size = current_subset_size\n\n        # If the difference between the current element and the previous element is not divisible by 2,\n        # add 0 to the current subset size and update the start index and end index if necessary\n        else:\n            current_subset_size = 0\n            start_index = i\n            end_index = i\n\n        # If the current subset size is greater than the maximum subset size, update the maximum subset size\n        if current_subset_size > max_subset_size:\n            max_subset_size = current_subset_size\n\n        # If the current subset size is greater than 1 and the difference between the current element\n        # and the start element is divisible by 2, update the start index and end index\n        if current_subset_size > 1 and a[start_index] - a[start_index - 1] % 2 == 0:\n            start_index = i\n            end_index = i\n\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the count of numbers in each subset\n    counts = {}\n    # initialize the maximum count to zero\n    max_count = 0\n    # iterate through the list of numbers\n    for num in a:\n        # if the number is already in the dictionary, increment the count\n        if num in counts:\n            counts[num] += 1\n        # if the number is not in the dictionary, add it with a count of one\n        else:\n            counts[num] = 1\n        # update the maximum count if the count is greater than the current maximum count\n        if counts[num] > max_count:\n            max_count = counts[num]\n    # return the maximum count\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # create a list to store the factors of each number in the input list\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort(reverse=True)\n    # create a list to store the size of the largest subset\n    subset_sizes = []\n    # loop through each number in the input list\n    for i in range(n):\n        # initialize a variable to keep track of the current subset size\n        current_size = 0\n        # loop through each factor of the current number\n        for j in range(len(factors)):\n            # check if the current number is divisible by the current factor\n            if a[i] % factors[j] == 0:\n                # if it is, increment the current subset size\n                current_size += 1\n                # if the current subset size is greater than the previous largest subset size, update it\n                if current_size > subset_sizes[j]:\n                    subset_sizes[j] = current_sizes\n        # update the largest subset size to be the maximum of the current subset size and the largest subset size\n        subset_sizes[j] = max(subset_sizes[j], current_size)\n    # find the maximum of the largest subset sizes\n    max_size = 0\n    for size in subset_sizes:\n        max_size = max(max_size, size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    subset = []\n    divisible_subset = []\n    \n    # Sort the list\n    a.sort()\n    \n    # Iterate through the list\n    for num in a:\n        # If the number is not divisible by the current number, add it to the current subset and increment the current size\n        if num % subset[-1]!= 0:\n            subset.append(num)\n            current_size += 1\n        \n        # If the number is divisible by the current number, add it to the divisible subset and check if it's larger than the current size\n        elif num % subset[-1] == 0:\n            divisible_subset.append(num)\n            current_size = max(current_size, len(divisible_subset))\n        \n        # Check if the current size is larger than the max size\n        if current_size > max_size:\n            max_size = current_size\n    \n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError('Both input lists must have same size.')\n    \n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    \n    # Find the mid-point of the sorted lists\n    mid = n // 2\n    \n    # Find the median of the sorted lists\n    if n % 2 == 0:\n        # If the length of the lists is even, return the average of the two middle elements\n        return (sorted_arr1[mid-1] + sorted_arr1[mid]) / 2\n    else:\n        # If the length of the lists is odd, return the middle element\n        return sorted_arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # If one of the arrays is longer than the other, reverse it so that we can find the median of the two arrays\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    # Find the index of the median\n    mid1 = n // 2\n    mid2 = (n + 1) // 2 - 1\n\n    # If n is odd, the median is the middle element of arr1\n    if n % 2 == 1:\n        return arr1[mid1]\n\n    # If n is even, the median is the average of the middle two elements of arr1\n    else:\n        return (arr1[mid1] + arr1[mid2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists into one\n    merged_arr = merge_sorted_lists(arr1, arr2)\n\n    # Find the middle element\n    mid = n // 2\n\n    # If the length of the merged list is odd, then the middle element is the median\n    if n % 2 == 1:\n        return merged_arr[mid]\n\n    # If the length of the merged list is even, then the median is the average of the middle two elements\n    else:\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2\n\n\ndef merge_sorted_lists(arr1, arr2):\n    '''\n    Merge two sorted lists into one.\n    '''\n\n    # Initialize two pointers for each list\n    i = 0\n    j = 0\n\n    # Create a new list to store the merged sorted list\n    merged_arr = []\n\n    # Loop until one of the lists is empty\n    while i < len(arr1) and j < len(arr2):\n\n        # If the first element of arr1 is smaller, add it to the merged list and move the pointer for arr1\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n\n        # If the first element of arr2 is smaller, add it to the merged list and move the pointer for arr2\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Add the remaining elements of the non-empty list to the merged list\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n\n    # Return the merged sorted list\n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2.0\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # concatenate the two lists\n    arr = arr1 + arr2\n\n    # sort the concatenated list\n    arr.sort()\n\n    # get the median index\n    mid = n // 2\n\n    # if the length of the list is odd, return the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    # if the length of the list is even, return the average of the middle two elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # check if the lists are the same size\n    if len(arr1)!= len(arr2):\n        return None\n    \n    # merge the two lists into one\n    merged_list = arr1 + arr2\n    \n    # sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # find the middle element of the sorted list\n    middle_index = len(sorted_list) // 2\n    \n    # return the middle element\n    return sorted_list[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one\n    merged_list = arr1 + arr2\n\n    # Calculate the total size of the merged list\n    total_size = len(merged_list)\n\n    # Find the middle index of the merged list\n    middle_index = total_size // 2\n\n    # Find the median\n    if total_size % 2 == 0:\n        # If the size of the merged list is even, then find the average of the two middle elements\n        median = (merged_list[middle_index - 1] + merged_list[middle_index]) / 2.0\n    else:\n        # If the size of the merged list is odd, then find the middle element\n        median = merged_list[middle_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef quickselect(arr, k, low, high):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, k, low, pivot_index - 1)\n    else:\n        return quickselect(arr, k, pivot_index + 1, high)\n\ndef get_median(arr1, arr2, n):\n    if n % 2 == 0:\n        # if the lists have an even number of elements,\n        # return the average of the two middle elements\n        return (quickselect(arr1, n // 2, 0, n - 1) + quickselect(arr2, n // 2, 0, n - 1)) / 2\n    else:\n        # if the lists have an odd number of elements,\n        # return the middle element\n        return quickselect(arr1, n // 2, 0, n - 1)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged = arr1 + arr2\n    # Sort the merged list\n    merged.sort()\n    # Find the median index\n    mid = n // 2\n    if n % 2 == 0:\n        # Find the average of the two middle elements\n        median = (merged[mid-1] + merged[mid]) / 2\n    else:\n        # Return the middle element\n        median = merged[mid]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): List of numbers\n    n (int): The exponent to raise each number to\n\n    Returns:\n    list: List of n-th powers\n    \"\"\"\n    powers = []\n    for num in nums:\n        powers.append(num ** n)\n    return powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return the uppercase string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is not empty\n    if len(newList) == 0:\n        return newList\n    \n    # Get the last and second last element of the list\n    last = newList[-1]\n    second_last = newList[-2]\n    \n    # Interchange the last and second last element\n    newList[-1] = second_last\n    newList[-2] = last\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"List should have at least 2 elements\"\n    else:\n        last_element = newList[-1]\n        newList[-1] = newList[0]\n        newList[0] = last_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements to swap.\")\n        return newList\n    \n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # if the length of the list is less than 2, return the list as is\n    if length < 2:\n        return newList\n    # otherwise, swap the first and last element\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is less than 2\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return None\n    # check if the length of the list is more than 2\n    elif len(newList) > 2:\n        # set the first and last element\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The list has been interchanged.\")\n        return newList\n    else:\n        print(\"The list should have at least two elements.\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        # store the first element in a variable\n        first = newList[0]\n        # store the last element in a variable\n        last = newList[-1]\n        # replace the last element with the first element\n        newList[-1] = first\n        # replace the first element with the last element\n        newList[0] = last\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_last = newList[-1], newList[0]\n    newList[0] = first_last[1]\n    newList[-1] = first_last[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # recursive call to swap the last and second last elements\n    return swap_List(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list has at least two elements\n    if length < 2:\n        return newList\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Formula to find the area of the largest triangle that can be inscribed in a semicircle with given radius\n    area = (3*r**2)/2\n    \n    # Print the area of the triangle\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with given radius\", r, \"is\", area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # First we calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * r\n    \n    # Next, we calculate the semi-diameter of the circle\n    semi_diameter = 2 * r\n    \n    # We calculate the area of a regular triangle using Heron's formula\n    area = 0.5 * r ** 2 * (semi_perimeter ** 2 - semi_diameter ** 2) / (semi_diameter ** 2)\n    \n    # Finally, we calculate the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * math.pi * r\n    b = math.sqrt(3) * a / 2\n    c = math.sqrt(3) * a / 2\n    area = max(a, b, c)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    pi = 3.14159\n    for i in range(3):\n        area += (i+1) * pi * r * r\n    return area / 2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    s = (3*r**2)**0.5\n    area = (s*(s-r))/(2*r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for area of a triangle with given base and height\n    # Area = 1/2 * base * height\n    # Since the base is radius, and the height is twice radius, we get the formula:\n    # Area = 1/2 * (radius * radius)\n    # We can substitute the value of radius in this formula to get the area of the largest triangle that can be inscribed in a semicircle with radius r.\n\n    # Step 1: Find the perimeter of the largest triangle that can be inscribed in a semicircle with radius r\n    # Perimeter = 2 * pi * r\n    # Since we want to find the area of the largest triangle, we want the radius of the semicircle.\n    # So, we can use the formula:\n    # r = sqrt(area / (pi * (2 * height)))\n    # where height is twice the radius.\n    # We can substitute the value of area in this formula to get the radius r.\n\n    # Step 2: Find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    # Since the base is radius, and the height is twice radius, we get the formula:\n    # Area = 1/2 * (radius * radius)\n    # We can substitute the value of radius in this formula to get the area of the largest triangle that can be inscribed in a semicircle with radius r.\n\n    # Step 3: Find the area of the smallest triangle that can be inscribed in the semicircle with radius r\n    # Area = 1/2 * (radius * radius)\n    # We can substitute the value of radius in this formula to get the area of the smallest triangle that can be inscribed in the semicircle with radius r.\n\n    # Step 4: Find the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    # Since the base is radius, and the height is twice radius, we get the formula:\n    # Area = 1/2 * (radius * radius)\n    # We can substitute the value of radius in this formula to get the area of the smallest triangle that can be inscribed in a semicircle with radius r.\n\n    # Step 5: Find the perimeter of the smallest triangle that can be inscribed in a semicircle with radius r\n    # Perimeter = 2 * pi * r\n    # We can use the formula:\n    # r = sqrt(area / (pi * (2 * height)))\n    # where height is twice the radius.\n    # We can substitute the value of area in this formula to get the radius r.\n\n    # Step 6: Use the formula to find the area of the largest triangle that can be inscribed in a semicircle with radius r.\n\n    # Final formula: Area = 1/2 * (r * r)\n\n    # Calculate the perimeter of the largest triangle that can be inscribed in a semicircle with radius r\n    perimeter = 2 * 3.1415926535897932384626433832795 * r\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_triangle_area = 0.5 * r * r\n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle with radius r\n    smallest_triangle_area = 0.5 * r * r\n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    smallest_triangle_area = 0.5 * r * r\n    # Calculate the perimeter of the smallest triangle that can be inscribed in a semicircle with radius r\n    perimeter_of_smallest_triangle = 2 * 3.1415926535897932384626433832795 * r\n\n    # Find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_triangle_area = 0.5 * r * r\n\n    # Return the area of the largest triangle that can be inscribed in a semicircle with radius r\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the hypotenuse of the largest triangle\n    hypotenuse = r * (1 + (2/r)) ** 0.5\n    \n    # Use Heron's formula to calculate the area of the largest triangle\n    area = 3 * (hypotenuse ** 2) / (2 * r)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r * 3.14159\n    # Calculate the area of each triangle side\n    side1 = semi_perimeter / 3\n    side2 = semi_perimeter / 2\n    side3 = semi_perimeter / 3\n    # Calculate the area of each triangle\n    area += side1 * (semi_perimeter**2) / (2 * 3.14159)\n    area += side2 * (semi_perimeter**2) / (2 * 3.14159)\n    area += side3 * (semi_perimeter**2) / (2 * 3.14159)\n    # Find the maximum area\n    return max(area, 0)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # calculate the area of a triangle given its base and height\n    def triangle_area_formula(b, h):\n        s = (b + h) / 2\n        area = math.sqrt(s * (s - b) * (s - h))\n        return area\n\n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with a given radius\n    def smallest_triangle_area(r):\n        area = math.pi * r * r\n        return area\n\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def largest_triangle_area(r):\n        return max(triangle_area_formula(r, r), triangle_area_formula(r, -r), triangle_area_formula(-r, r))\n\n    # return the largest triangle area\n    return largest_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    # Calculate the semi-perimeter of the semicircle\n    a = 2 * pi * r\n    \n    # Calculate the area of a triangle with sides of length r and a half of the semi-perimeter\n    area = (r**2 * 0.5) / (2 * a)\n    \n    # Return the area of the largest triangle that can be inscribed in a semicircle with the given radius\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if array is empty\n    if not array:\n        return \"Array is empty\"\n    # Check if array is sorted in ascending order\n    elif array[0] > array[-1]:\n        return \"Array is not sorted in ascending order\"\n    # Check if start is not specified\n    elif not start:\n        start = 0\n    # Check if end is not specified\n    elif not end:\n        end = len(array) - 1\n    # Find the first missing number using binary search\n    else:\n        while start <= end:\n            mid = (start + end) // 2\n            if array[mid] == mid:\n                end = mid - 1\n            elif array[mid] < mid:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function will find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if not array:\n        return None\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return \"Invalid input\"\n\n    if len(array) == 1:\n        return 1\n\n    if array[0]!= 1:\n        return 1\n\n    for i in range(start, end):\n        if array[i] - array[i+1]!= 1:\n            return array[i] - 1\n\n    return array[-1] + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n    \n    If the input list is empty, it returns None.\n    \n    Args:\n    - array: sorted list of natural numbers\n    - start: index of the first element of the list to search (default: 0)\n    - end: index of the last element of the list to search (default: None, which searches the entire list)\n    \n    Returns:\n    - The smallest missing number or None if the input list is empty.\n    \"\"\"\n    \n    # If the list is empty, return None\n    if not array:\n        return None\n    \n    # If the start index is not specified, set it to 0\n    if start is None:\n        start = 0\n    \n    # If the end index is not specified, set it to the length of the list\n    if end is None:\n        end = len(array)\n    \n    # Iterate through the list of elements\n    for i in range(start, end):\n        \n        # If the current element is not the next expected element, return the current element as the missing number\n        if array[i]!= i + start:\n            return array[i]\n    \n    # If we reach this point, there was no missing number, so return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n\n    :param array: list of integers\n    :param start: start index of the array (default is 0)\n    :param end: end index of the array (default is None, which means until the end of the array)\n    :return: first missing number in the array\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): a list of natural numbers sorted in non-decreasing order.\n    start (int, optional): the starting index of the array (default: 0).\n    end (int, optional): the ending index of the array (default: the last index).\n\n    Returns:\n    int: the smallest missing number in the array.\n    \"\"\"\n    # Check that the array is sorted and contains only natural numbers\n    if not all(isinstance(x, int) for x in array):\n        raise ValueError(\"The array should contain only natural numbers.\")\n    if not all(x >= 0 for x in array):\n        raise ValueError(\"The array should contain only non-negative integers.\")\n    if not all(x < y for x,y in zip(array,array[1:])):\n        raise ValueError(\"The array should be sorted in non-decreasing order.\")\n\n    # Find the starting and ending indices of the array\n    if end is None:\n        end = len(array)\n    if end < start:\n        raise ValueError(\"The ending index should be greater than or equal to the starting index.\")\n\n    # Find the smallest missing number\n    missing = start\n    while missing in array:\n        missing += 1\n\n    return missing"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for i in list: \n        if i % 2 == 0: \n            even_numbers.append(i) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    return [x for x in list if x % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_numbers = []\n\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_coords = []\n    for i, coord in enumerate(sub):\n        if i == 0:\n            if coord[0] == ele[0]:\n                if coord[1] - 1 >= 0:\n                    adj_coords.append((coord[0], coord[1]-1))\n            if coord[0] == ele[0]:\n                if coord[1] + 1 < len(sub[0]):\n                    adj_coords.append((coord[0], coord[1]+1))\n        elif i == 1:\n            if coord[1] == ele[1]:\n                if coord[0] - 1 >= 0:\n                    adj_coords.append((coord[0]-1, coord[1]))\n            if coord[1] == ele[1]:\n                if coord[0] + 1 < len(sub):\n                    adj_coords.append((coord[0]+1, coord[1]))\n        else:\n            if coord[0] == ele[0]:\n                if coord[1] + 1 < len(sub[0]):\n                    adj_coords.append((coord[0], coord[1]+1))\n            if coord[0] == ele[0]:\n                if coord[1] - 1 >= 0:\n                    adj_coords.append((coord[0], coord[1]-1))\n            if coord[1] == ele[1]:\n                if coord[0] + 1 < len(sub):\n                    adj_coords.append((coord[0]+1, coord[1]))\n            if coord[1] == ele[1]:\n                if coord[0] - 1 >= 0:\n                    adj_coords.append((coord[0]-1, coord[1]))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract x and y components of the element\n    x, y = ele\n    \n    # Extract adjacent coordinates and append them to the sublist\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0):\n                sub.append((x+i, y+j))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    # iterate over all possible adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            x1, y1 = x + i, y + j\n            # check if the adjacent coordinate is valid and not equal to the current element\n            if 0 <= x1 < len(sub) and 0 <= y1 < len(sub[0]):\n                if sub[x1][y1]!= ele:\n                    adj_coords.append((x1, y1))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    # check the adjacent cells\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # ignore diagonal cells\n            if i == j == 0:\n                continue\n            # add the adjacent cell to the list\n            new_x = x + i\n            new_y = y + j\n            if 0 <= new_x < 5 and 0 <= new_y < 5:\n                adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1, y-1))\n    if x > 0 and y < 9:\n        sub.append((x-1, y+1))\n    if x < 9 and y > 0:\n        sub.append((x+1, y-1))\n    if x < 9 and y < 9:\n        sub.append((x+1, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Initialize variables\n    x, y = ele\n    adj = []\n\n    # Iterate over adjacent positions\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue # skip self-adjacencies\n            if i == 0 or j == 0:\n                adj.append((x+i, y+j))\n            else:\n                adj.append((x+i, y))\n                adj.append((x, y+j))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    if isinstance(ele, tuple):\n        x, y = ele\n        sub = [(x+dx, y+dy) for dx, dy in sub]\n    elif isinstance(ele, list):\n        for i, sublist in enumerate(ele):\n            sub = adjac(sublist, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    x, y = ele\n    \n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j)!= ele and (i, j) not in sub:\n                sub.append((i, j))\n                adjacent.append((i, j))\n    \n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(sub)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(sub[0])-1:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n\ndef replace_underscores(text):\n    '''\n    Write a function to replace underscores with whitespaces and vice versa in a given string.\n    '''\n    return text.replace(\"_\", \" \")\n\ndef main():\n    text = \"Hello, world!\"\n    print(replace_spaces(text)) # Output: Hello_world!\n    print(replace_underscores(text)) # Output: Hello world!\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert string to lowercase\n    text = text.lower()\n    # initialize new string\n    new_text = \"\"\n    # iterate over each character of the original string\n    for char in text:\n        # check if the character is a whitespace\n        if char.isspace():\n            # replace whitespace with underscore\n            new_text += \"_\"\n        else:\n            # add the character to the new string as is\n            new_text += char\n    # return the new string\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for char in text:\n        if char.isspace():\n            text = text.replace(char, '_')\n        elif char == '_':\n            text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the given text is a string\n    if not isinstance(text, str):\n        raise TypeError(\"The input must be a string.\")\n    \n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n        return move_zero(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and returns the list with all zeroes moved to the end.\n    \"\"\"\n    num_list = list(num_list)\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero elements\n    non_zero_list = []\n    \n    # iterate through the list and add non-zero elements to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # append all zeroes to the end of the new list\n    non_zero_list += [0]*len(num_list)\n    \n    # return the new list containing non-zero elements and all zeroes\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    non_zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all zeroes to the end of the list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n\n    if zero_index is not None:\n        for i in range(zero_index, len(num_list)):\n            num_list[i] = num_list[i+1]\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input. \n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 2:\n        print(\"Length of list must be greater than or equal to 2.\")\n        return None\n    \n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n            \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR operator to find the XOR of two numbers\n    def xor(a, b):\n        return a ^ b\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate through all pairs of numbers in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # XOR the two numbers and add the result to the sum\n            sum = xor(arr[i], arr[j]) + sum\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # xor of all elements in the list\n    xor = 0\n\n    # iterate over the list\n    for i in range(n):\n        # xor of the current element and the element at the next index\n        xor ^= arr[i] ^ arr[i+1]\n\n    # return the xor of all elements\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[(i+1)%n]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n    # Remove and return the root element of the heap\n    return hq.heappop(iterable) * -1"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the given iterable\n    heap = hq.nsmallest(len(iterable), iterable)\n\n    # sort the heap by adding the smallest element to the beginning of the list\n    for i in range(len(iterable)):\n        if iterable[i]!= heap[0]:\n            iterable[i], iterable[0] = iterable[0], iterable[i]\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a max-heap from the given iterable\n    hq.heapify(iterable)\n    # Iterate over the heap and extract elements in non-decreasing order\n    for _ in range(len(iterable)-1, -1, -1):\n        # Extract the root element from the heap\n        root = hq.heappop(iterable)\n        # Insert the root element at the end of the iterable\n        iterable.append(root)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Build max heap from the input list\n    hq.heapify(iterable)\n\n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    while hq.heap_size(iterable):\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build max heap\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    \n    # Sort the heap\n    for i in range(n-1, 0, -1):\n        # Swap the root with the last element\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        # Reduce the heap size by 1\n        hq.heapify(iterable, 0, i)\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the given list to a max heap\n    max_heap = [max(iterable)]\n    for i in iterable[1:]:\n        hq.heappushpop(max_heap, max(i, hq.heappop(max_heap)))\n\n    # Convert the max heap back to a list\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n    \n    # Pop the maximum elements from the heap until the heap is empty\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    \n    # Reverse the order of the elements in the result list\n    result.reverse()\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using heap sort algorithm.\n\n    :param iterable: The list to be sorted.\n    :return: The sorted list.\n    \"\"\"\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return True\n    else:\n        return \"The given amount has no profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount <= actual_cost: \n        return True \n    else: \n        return False "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    \n    if profit >= 0 and loss >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return \"No profit and no loss\"\n    elif actual_cost == sale_amount:\n        return \"Profit and no loss\"\n    else:\n        return \"No profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        profit = actual_cost - sale_amount\n        return (profit >= 0)\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False, \"No profit and no loss\"\n    elif profit == 0:\n        return True, \"Profit and no loss\"\n    else:\n        return False, \"No profit and loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit is zero and the loss is zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"No profit and no loss found!\")\n    else:\n        print(\"Profit found!\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        return \"The sale amount is equal to the actual cost\"\n    elif profit > 0 and loss == 0:\n        return \"The sale amount is greater than the actual cost and no loss\"\n    elif profit == 0 and loss > 0:\n        return \"The sale amount is equal to the actual cost and no profit\"\n    elif profit > 0 and loss > 0:\n        return \"The sale amount is greater than the actual cost and greater than the loss\"\n    else:\n        return \"The sale amount is less than the actual cost and greater than the loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        print(\"No profit and no loss!\")\n    else:\n        print(\"Profit or loss!\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 35.74 + 0.6215*t - 35.75*math.log(v)+ 459.67*math.exp(-t/237.3)\n    return math.ceil(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert to fahrenheit and round to nearest integer\n    t = round(t * 1.8 + 32)\n    # calculate wind chill index\n    chill = round((13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v)) * 1.8)\n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.125))\n\n    # Round the wind chill index to the next integer\n    wc_int = math.ceil(wc)\n\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index using the formula provided\n    wc_index = round((35.74 + 0.6215*t - 35.75*math.log(v*0.001) + 0.4275*t*math.log(v*0.001))/(13.12 + 0.6215*t + 11.37*math.log(v*0.001) - 16.8*t*math.log(v*0.001) + 0.2245*t*t*math.log(v*0.001)))\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v <= 0 or t <= 0:\n        return \"Invalid input\"\n    else:\n        # Calculate the wind chill temperature\n        wc = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 2) + 0.4275 * math.pow(v, 0.16) - 35.75 * math.pow(v, 0.16) * math.pow(t, 2)\n        # Calculate the wind chill index\n        wci = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(v, 0.16) - 5.887 * math.pow(v, 0.16) * math.pow(t, 2)\n        # Calculate the rounded wind chill index\n        wci_rounded = math.ceil(wci)\n        return wci_rounded\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Convert temperature to Kelvin\n    temp_kelvin = t + 273.15\n\n    # Calculate the relative humidity\n    rel_humidity = 100 * (0.62197 * math.exp((17.625 * (temp_kelvin - 298.15)) / (temp_kelvin - 243.15)))\n\n    # Calculate the wind chill index\n    if v < 0.1:\n        wci = 0\n    elif 0.1 <= v < 0.6:\n        wci = (13.12 + 0.6215 * v + 11.37 * rel_humidity - 0.3965 * math.pow(v, 2) + 0.5882 * math.pow(rel_humidity, 2) - 0.0105 * math.pow(temp_kelvin - 273.15, 2)) / (237.3 + 0.6215 * v + 11.37 * rel_humidity - 0.3965 * math.pow(v, 2) + 0.5882 * math.pow(rel_humidity, 2))\n    else:\n        wci = (42.37 + 10.81 * v + 35.75 * rel_humidity - 0.4275 * math.pow(v, 2) - 0.2896 * math.pow(rel_humidity, 2) + 0.0068 * math.pow(temp_kelvin - 273.15, 2)) / (212.6 + 10.81 * v + 35.75 * rel_humidity - 0.4275 * math.pow(v, 2) - 0.2896 * math.pow(rel_humidity, 2))\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0:\n        return None\n    \n    R = 287.05  # gas constant, J/(kg*K)\n    C = 100.4  # reference temperature for air, K\n    R_v = R * (C + t)  # gas constant times reference temperature for air, J/(kg*K)\n    \n    if R_v == 0:\n        return None\n    \n    return round(max(0, (v * 1.60934 / R_v) - 11.37))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # calculate the dew point temperature\n    dew_point = math.round(13.12 + 0.6215 * (t - 273.15))\n\n    # calculate the heat capacity at constant pressure\n    cp = 1004.69 / (math.log(1 + (0.0065 * dew_point)) - 11.37)\n\n    # calculate the heat capacity at constant volume\n    cv = 1004.69 / (math.log(1 + (0.0065 * t)) - 11.37)\n\n    # calculate the specific volume at constant pressure\n    sv = v * cp\n\n    # calculate the specific volume at constant temperature\n    ts = (v / cp) ** (1 / cv)\n\n    # calculate the wind speed temperature ratio\n    wt = sv / ts\n\n    # calculate the wind chill index\n    wci = math.round(35.74 + 0.6215 * (t - 273.15) + 0.4275 * (t - dew_point) - 11.37 * math.log(wt))\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the wind chill temperature using the formula given in the problem statement\n    w_chill = 35.74 + 0.6215*v - 35.75*math.log(t/298.15) + 0.4275*t\n    w_chill = round(w_chill)\n\n    # Check if the wind chill temperature exceeds the original temperature\n    if w_chill > t:\n        w_chill = t\n\n    return w_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (13.12 + 0.6215*t + (v**0.16)*((t-273.15)**(-0.133)))\n    return int(math.ceil(c))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a function to remove names that start with a lowercase letter\n    def remove_names(names):\n        return [name for name in names if name[0].isupper()]\n    \n    # Call the remove_names function to filter the sample names\n    filtered_names = remove_names(sample_names)\n    \n    # Define a function to calculate the sum of the lengths of names in the filtered list\n    def sum_lengths(names):\n        return sum([len(name) for name in names])\n    \n    # Call the sum_lengths function to calculate the sum of the lengths of the filtered names\n    total_length = sum_lengths(filtered_names)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum([len(name) for name in filtered_names])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable to 0\n    total_length = 0\n    \n    # Iterate over each name in the list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if not name[0].isupper():\n            # Add the length of the remaining name to the total length\n            total_length += len(name)\n    \n    # Return the total length of the names after removing the lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Filter out names that start with a lowercase letter\n    sample_names = list(filter(lambda x: x[0].isupper(), sample_names))\n\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in sample_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # initialize the sum of lengths to zero\n    sum_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n\n            # if it does, skip the name and move on to the next one\n            continue\n\n        # if the name does not start with a lowercase letter, add its length to the sum\n        sum_length += len(name)\n\n    # return the sum of lengths\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name[0].islower()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n\n            # If it does, skip the name and move on to the next name in the list\n            continue\n\n        # If the name does not start with a lowercase letter, add its length to the total length variable\n        total_length += len(name)\n\n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    return re.sub(pattern, r\"\\1\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^\\)]+\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    match = pattern.search(items)\n    if match:\n        result = match.group(1)\n    else:\n        result = items\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^\\)]+\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)') # matches any parenthesis enclosed in parentheses\n    result = pattern.sub('', items) # substitute empty string with all the parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub('\\(', '', items)\n    items = re.sub('\\)', '', items)\n    # Split the string based on space and return the first item\n    return items.split()[0]"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * (n - 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # calculate the sum of the nonagonal numbers\n    total = 1\n    for i in range(1, n+1):\n        total += (4*i**2 - 6*i + 1)\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the variable to store the nonagonal number \n    nonagonal = 1\n\n    # Loop through the first n-1 numbers and calculate the nonagonal numbers \n    for i in range(1, n): \n        # Add the sum of the squares of the previous two nonagonal numbers \n        nonagonal += (2*i - 1) ** 2\n\n    # Return the nonagonal number \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        j += 2\n        i += 1\n    return j - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    nonagonal = 0\n    while is_nonagonal(i)!= True:\n        i += 1\n    if i > n:\n        return False\n    while i <= n:\n        if is_nonagonal(i):\n            nonagonal += i\n        i += 1\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = 0\n    for i in range(1, n+1):\n        nonagonal_num += i**2\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n should be a positive integer.\")\n    if n == 0:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    for i in range(n): \n        nonagonal += 2 * i + 1 \n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use a regular expression to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Iterate over each word in the list and check if there is a 'z' at the start and end of the word\n    for word in words:\n        # If there is, return True\n        if word.startswith('z') and word.endswith('z'):\n            return True\n    \n    # If no words contain 'z' at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\W|$)'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![\\w\\s])(z)([a-zA-Z\\s]+)(?![\\w\\s])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?:[^a-zA-Z]|^)z(?:[^a-zA-Z]|$)'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern for matching 'z' at the start and end of the word\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # Check if the pattern was found and return the result\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!(?:^|\\.)\\b(?:z)\\b(?:$|\\.))\\w+\\b'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n or k < 1:\n        return 'Invalid input.'\n    else:\n        left, right = 0, k-1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize variables\n    start = 0\n    end = len(input) - 1\n    \n    # loop through array from start to k-1\n    for i in range(start, k-1):\n        # swap the values at start and i\n        input[start], input[i] = input[i], input[start]\n        # move start index one step forward\n        start += 1\n    \n    # loop through array from k to end\n    for i in range(k, end):\n        # swap the values at i and end\n        input[i], input[end] = input[end], input[i]\n        # move end index one step backward\n        end -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses an array up to the k-th element.\n    \"\"\"\n    # Split the array into two parts: the first k elements (excluding k)\n    # and the last element (k+1, k+2,..., n-1).\n    left_part = input[:k]\n    right_part = input[k:]\n    \n    # Reverse the first part.\n    left_part = left_part[::-1]\n    \n    # Reverse the second part.\n    right_part = right_part[::-1]\n    \n    # Combine the two parts to get the reversed part.\n    reversed_part = left_part + right_part\n    \n    # Reverse the reversed part.\n    reversed_part = reversed_part[::-1]\n    \n    # Combine the reversed part with the original array.\n    output = reversed_part + input\n    \n    # Return the reversed part.\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    for i in range(n):\n        if i < k:\n            continue\n        j = i\n        while j < k:\n            input[i], input[j] = input[j], input[i]\n            j += 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    i = 0\n    j = k - 1\n    \n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments - an array and a number k. It reverses the array upto the kth index of the array.\n    '''\n\n    # Using a for loop to iterate through the array from 0 to k-1\n    for i in range(k):\n        # Using a temporary variable to store the current element\n        temp = input[i]\n        # Using a for loop to iterate through the array from k to len(input)-1\n        for j in range(i, len(input)-1):\n            # Swapping the current element with the element at the next index\n            input[j], input[j+1] = input[j+1], input[j]\n            # Updating the current element to be swapped with\n            temp = input[j]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from index 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    # Reverse the rest of the array\n    input[:] = input[::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes in an array and a position k and returns a reversed array up to position k.\n    '''\n    # initialize variables\n    start = 0\n    end = len(input) - 1\n    mid = (start + end) // 2\n    \n    # swap elements until start and end are equal to k\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    # reverse the array from start to mid\n    for i in range(start, mid):\n        input[i], input[mid] = input[mid], input[i]\n        mid -= 1\n    \n    # reverse the array from mid+1 to end\n    for i in range(mid+1, end):\n        input[i], input[end] = input[end], input[i]\n        end -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    else:\n        start = 0\n        end = k-1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n or k < 0:\n        return input\n    else:\n        mid = n//2\n        left = [0]*mid\n        right = [0]*mid\n        for i in range(mid):\n            left[i] = input[i]\n            right[i] = input[n-1-i]\n        for i in range(mid, n):\n            left[i-mid] = input[i]\n            right[i-mid] = input[n-1-i]\n        for i in range(mid):\n            input[i] = left[i]\n        for i in range(mid, n):\n            input[i] = right[i-mid]\n        return input[:k] + input[k:n] + input[k:mid] + input[mid:n]"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple.\n\n    :param test_tup: A tuple of values.\n    :param test_dict: A dictionary to add to the tuple.\n    :return: A tuple with the original tuple values and the added dictionary values.\n    \"\"\"\n    return (test_tup + tuple(test_dict.values()),)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary that contains the values of the original tuple and the values of the input dictionary\n    new_dict = {**test_dict, **test_tup}\n    # convert the new dictionary into a tuple\n    new_tup = tuple(new_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create an empty tuple to store the final output\n    final_tup = ()\n\n    # loop through the items in the test tuple\n    for item in test_tup:\n        # if the item is a dictionary, add it to the final tuple\n        if isinstance(item, dict):\n            final_tup += (item,)\n\n    # loop through the items in the test dictionary\n    for key, value in test_dict.items():\n        # if the key exists in the test tuple and the value is a dictionary, add it to the final tuple\n        if key in test_tup and isinstance(value, dict):\n            final_tup += ((key, value),)\n\n    # return the final tuple\n    return final_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Get the length of the tuple\n    tup_length = len(test_tup)\n    # Create a new empty tuple\n    new_tup = ()\n    # Loop through each key in the dictionary and add it to the new tuple\n    for key in test_dict:\n        # Check if the key already exists in the new tuple\n        if key in new_tup:\n            # If it does, replace the key value in the dictionary with the new value\n            test_dict[key] = new_tup.index(key)\n        # Add the key and value to the new tuple\n        new_tup += (key, test_dict[key])\n    # If the new tuple is shorter than the original tuple, add extra None values to it\n    if tup_length > len(new_tup):\n        new_tup += (None,) * (tup_length - len(new_tup))\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Initialize variables\n    max_avg = 0\n    max_path = None\n\n    # Iterate over all paths\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == N-1 and j == N-1:\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n                    max_path = [(i,j)]\n                elif cost[i][j] == max_avg:\n                    max_path.append((i,j))\n                continue\n            if cost[i][j] > cost[i+1][j]:\n                if cost[i][j] > cost[i][j+1]:\n                    if (i,j,i+1,j) not in visited:\n                        visited.add((i,j,i+1,j))\n                        total_cost += cost[i][j]\n                        visited.remove((i,j,i+1,j))\n                        total_cells += 1\n                else:\n                    if (i,j,i,j+1) not in visited:\n                        visited.add((i,j,i,j+1))\n                        total_cost += cost[i][j]\n                        visited.remove((i,j,i,j+1))\n                        total_cells += 1\n            else:\n                if cost[i][j] > cost[i+1][j+1]:\n                    if (i,j,i+1,j+1) not in visited:\n                        visited.add((i,j,i+1,j+1))\n                        total_cost += cost[i][j]\n                        visited.remove((i,j,i+1,j+1))\n                        total_cells += 1\n                else:\n                    if (i,j,i,j+1) not in visited:\n                        visited.add((i,j,i,j+1))\n                        total_cost += cost[i][j]\n                        visited.remove((i,j,i,j+1))\n                        total_cells += 1\n\n    # Return the maximum average and the path\n    if max_path is not None:\n        return max_avg, max_path\n    else:\n        return None"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    max_avg = 0\n    paths = []\n\n    for i in range(N):\n        for j in range(N):\n            # Check if current cell is the starting point\n            if i == 0 and j == 0:\n                continue\n            # Generate paths from this cell\n            path = [i, j]\n            left = 0 if j > 0 else 0\n            right = 0 if j < N-1 else 0\n            up = 0 if i > 0 else 0\n            down = 0 if i < N-1 else 0\n            for di in range(left, right+1):\n                for dj in range(up, down+1):\n                    # Check if we're already at the destination cell\n                    if i+di == N-1 and j+dj == N-1:\n                        # Add this path to the list of paths\n                        paths.append(path.copy())\n                        # Update the maximum average if necessary\n                        if di+dj > 0:\n                            new_avg = cost[i+di][j+dj] / (di+dj)\n                            if new_avg > max_avg:\n                                max_avg = new_avg\n                    # If we're not at the destination cell, move to the next cell in the same direction\n                    else:\n                        path.append((i+di, j+dj))\n\n    # Find the maximum average path\n    max_avg_path = max(paths, key=lambda x: sum(cost[i][j] for i,j in x) / len(x))\n\n    return max_avg, max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    # Initialize the first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    # Fill the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average\n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            max_avg = max(max_avg, dp[i+1][j] + dp[i][j+1] - dp[i][j] - dp[i+1][j+1])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            avg = dp[i][j] / (i+j+1)\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[0]*N for _ in range(N)]\n    path = [[0]*N for _ in range(N)]\n    max_cost = 0\n    max_path = []\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                visited[i][j] = 1\n                path[i][j] = [[0, 0], [0, 0]]\n            elif i == 0:\n                visited[i][j] = visited[i-1][j] + 1\n                path[i][j] = path[i-1][j].copy()\n                path[i][j].append([1, 0])\n            elif j == 0:\n                visited[i][j] = visited[i][j-1] + 1\n                path[i][j] = path[i][j-1].copy()\n                path[i][j].append([0, 1])\n            else:\n                visited[i][j] = visited[i-1][j] + visited[i][j-1] + 1\n                path[i][j] = path[i-1][j].copy()\n                path[i][j].append([1, 0])\n                path[i][j].extend(path[i][j-1])\n                path[i][j].append([0, 1])\n            \n            if visited[i][j] > max_cost:\n                max_cost = visited[i][j]\n                max_path = path[i][j].copy()\n                max_path.reverse()\n                \n    total_cost = 0\n    for cell in max_path:\n        total_cost += cost[cell[0]][cell[1]]\n        \n    return total_cost / max_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize variables\n    max_avg = 0\n    row = 0\n    col = 0\n    total_cost = 0\n    total_cells = 0\n    \n    # Initialize the current cell\n    current_cell = (row, col)\n    \n    # Traverse the matrix in a DFS (Depth First Search) manner\n    def dfs(r, c):\n        nonlocal max_avg, total_cost, total_cells\n        if r == len(cost) - 1 and c == len(cost[0]) - 1:\n            # Check if the current cell is the end of the path\n            if total_cells > 0:\n                avg = total_cost / total_cells\n                max_avg = max(max_avg, avg)\n            return\n        \n        # Check if the current cell can be reached in one of the directions\n        if c < len(cost[0]) - 1:\n            # Move right\n            dfs(r, c + 1)\n            total_cost += cost[r][c] + cost[r][c + 1]\n            total_cells += 2\n        \n        if r < len(cost) - 1:\n            # Move down\n            dfs(r + 1, c)\n            total_cost += cost[r][c] + cost[r + 1][c]\n            total_cells += 2\n    \n    dfs(0, 0)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    N = len(cost)\n    max_avg = float('-inf')\n    path_sum = 0\n    path_cost = 0\n    path_cells = []\n\n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if current cell is part of the path\n            if (i == 0 and j == 0) or (i == 0 and j == N-1) or (i == N-1 and j == 0) or (i == N-1 and j == N-1):\n                continue\n\n            # Move to right or down\n            if i < N-1:\n                cost[i][j] += cost[i+1][j]\n                path_cells.append((i,j))\n            elif j < N-1:\n                cost[i][j] += cost[i][j+1]\n                path_cells.append((i,j))\n            else:\n                cost[i][j] += cost[i-1][j-1]\n                path_cells.append((i,j))\n\n            # Compute path cost and update max average\n            path_sum += cost[i][j]\n            path_cost += cost[i][j]*(i+j+1)\n            if path_cost > max_avg:\n                max_avg = path_cost\n\n    # Compute final max average\n    return max_avg/len(path_cells)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum value in the given matrix\n    max_value = max(sum(map(max, row)) for row in cost)\n\n    # Initialize the result to zero\n    result = 0\n\n    # Iterate over each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n\n            # Find the cost of the current cell\n            current_cost = cost[i][j]\n\n            # Check if the current cell is the bottom right cell\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n\n                # Calculate the average cost of the path\n                current_average = current_cost\n                path_length = 1\n\n            else:\n\n                # Calculate the average cost of the path to the bottom right cell\n                bottom_right_cost = cost[i + 1][j + 1] if j < len(cost[0]) - 1 and i < len(cost) - 1 else max_value\n                bottom_right_average = (current_cost + bottom_right_cost) / 2\n\n                # Calculate the average cost of the path to the left cell\n                if j > 0:\n                    left_cost = cost[i][j - 1]\n                    left_average = (current_cost + left_cost) / 2\n                else:\n                    left_cost = 0\n                    left_average = current_cost\n\n                # Calculate the average cost of the path to the right cell\n                if j < len(cost[0]) - 1:\n                    right_cost = cost[i][j + 1]\n                    right_average = (current_cost + right_cost) / 2\n                else:\n                    right_cost = 0\n                    right_average = current_cost\n\n                # Choose the path with the highest average cost\n                if bottom_right_average > left_average and bottom_right_average > right_average:\n                    current_average = bottom_right_average\n                    path_length = 1 + abs(i - len(cost) + 1 - j) + abs(i - len(cost) + 1 - j - 1)\n                elif left_average > right_average:\n                    current_average = left_average\n                    path_length = 1 + abs(i - j)\n                else:\n                    current_average = right_average\n                    path_length = 1 + abs(i - j - 1)\n\n            # Update the result with the maximum average of all paths\n            result = max(result, current_average)\n\n    # Return the maximum average of all paths\n    return result"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Get the dimensions of the matrix\n    N = len(cost)\n    if N!= len(cost[0]):\n        raise ValueError('Invalid input matrix: square matrix required')\n    \n    # Initialize variables for tracking maximum average and maximum path\n    max_avg = 0\n    max_path = None\n    \n    # Initialize variables for tracking visited cells and current cell\n    visited = set()\n    curr_x = 0\n    curr_y = 0\n    \n    # Initialize variables for tracking the cost of moving right and down\n    right_cost = cost[0][-1]\n    down_cost = cost[-1][0]\n    \n    # Initialize variables for tracking the total cost and number of cells visited\n    total_cost = 0\n    num_cells = 0\n    \n    # Loop through all possible paths from the top-left cell to the bottom-right cell\n    for i in range(N):\n        for j in range(N):\n            \n            # If the current cell has already been visited, skip it\n            if (i, j) in visited:\n                continue\n            \n            # Otherwise, mark it as visited\n            visited.add((i, j))\n            \n            # Calculate the total cost of the path\n            total_cost += cost[i][j]\n            num_cells += 1\n            \n            # Check if the current cell is the bottom-right cell\n            if i == N-1 and j == N-1:\n                \n                # If it is, update the maximum average and maximum path\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n                    max_path = (curr_x, curr_y)\n            \n            # Check if the current cell is on the left edge of the matrix\n            elif j == 0:\n                \n                # If it is, add the cost of moving down to the total cost\n                total_cost += down_cost\n                num_cells += 1\n            \n            # Check if the current cell is on the top edge of the matrix\n            elif i == 0:\n                \n                # If it is, add the cost of moving right to the total cost\n                total_cost += right_cost\n                num_cells += 1\n            \n            # Check if the current cell is on the right edge of the matrix\n            elif j == N-1:\n                \n                # If it is, add the cost of moving down to the total cost\n                total_cost += down_cost\n                num_cells += 1\n            \n            # Check if the current cell is on the bottom edge of the matrix\n            elif i == N-1:\n                \n                # If it is, add the cost of moving right to the total cost\n                total_cost += right_cost\n                num_cells += 1\n            \n            # Move to the right cell\n            curr_x += 1\n            \n            # If we've reached the bottom-right cell, move to the next row\n            if i == N-1 and j == N-1:\n                curr_y += 1\n            \n            # If we've reached the last row, move to the next column\n            elif j == N-1:\n                curr_x = 0\n                curr_y += 1\n            \n            # Move to the down cell\n            curr_y += 1\n    \n    # If the maximum path was found, calculate the average and return it\n    if max_path is not None:\n        return total_cost / num_cells, max_path\n    else:\n        return 0, None"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables\n    n = len(cost)\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n\n    # find maximum average\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # if cell is not visited yet\n            if dp[i][j] == float('-inf'):\n                # calculate new average\n                new_avg = sum(cost[i][j:j+3]) + sum(cost[j:j+3][i]) - dp[i-1][j-1]\n                # update dp array\n                dp[i][j] = new_avg\n                # update max average\n                if new_avg > max_avg:\n                    max_avg = new_avg\n\n    # find maximum path\n    max_path = []\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            # if cell is not visited yet\n            if dp[i][j] == float('-inf'):\n                # calculate new average\n                new_avg = sum(cost[i][j:j+3]) + sum(cost[j:j+3][i]) - dp[i-1][j-1]\n                # update dp array\n                dp[i][j] = new_avg\n                # add cell to max path\n                max_path.append((i, j))\n\n    # find average of max path\n    max_avg = sum(cost[i][j] for i, j in max_path) / len(max_path)\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: value for name, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    # loop through the dictionary\n    for name, (height, weight) in students.items():\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered list\n            filtered_students.append(name)\n    # return the filtered list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student_name, student_data in students.items():\n        height, weight = student_data\n        if height > h and weight > w:\n            filtered_students[student_name] = student_data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students[student_name] = students[student_name]\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize an empty list to store the indices of same values\n    same_indices = []\n\n    # Iterate over the lists\n    for i in range(len(nums1)):\n        # Check if the element at i of nums1 is equal to the element at i of nums2 using the 'eq' operator\n        if eq(nums1[i], nums2[i]):\n            # If the element is equal, add its index to the same_indices list\n            same_indices.append(i)\n\n    # Return the same_indices list\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_count += 1\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    num = base\n    \n    while power > 0:\n        digit = num % 10\n        sum += digit\n        num //= 10\n        power -= 1\n        \n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_copy = base\n    \n    while power > 0:\n        digit = base_copy % 10\n        total += digit\n        power -= 1\n        base_copy //= 10\n        \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** power\n        temp //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    for i in range(power):\n        sum += sum_digits(base)\n    return sum\n\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function that takes a number as an argument and returns the sum of its digits.\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num // 10)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum_digits = 0\n    # Iterate over each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    # Calculate the result by multiplying the base by the sum to the power\n    result = base * sum_digits ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    base_copy = base\n    for _ in range(power):\n        sum_digits += sum(int(digit) for digit in str(base_copy))\n        base_copy = sum_digits\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Function to convert integer to its corresponding string of digits\n    def int_to_digits(num):\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        return digits\n\n    # Function to calculate sum of digits raised to the power of the specified power\n    def digit_sum(digits, power):\n        return sum(digits[i] ** power for i in range(len(digits)))\n\n    # Convert base to digits\n    digits_base = int_to_digits(base)\n\n    # Calculate sum of digits raised to the specified power\n    result = digit_sum(digits_base, power)\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string so we can manipulate it\n    base_str = str(base)\n\n    # Initialize a variable to hold the sum\n    total = 0\n\n    # Iterate through each digit in the base string\n    for digit in base_str:\n\n        # Convert the digit to an integer and add it to the total\n        total += int(digit) ** power\n\n    # Return the total\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Extract values between quotation marks using regular expressions\n    pattern = r'(?P<quotation>[\"\\'])(?P<value>.*?)\\\\1'\n    matches = re.findall(pattern, text1)\n\n    # Return a list of extracted values\n    return [match['value'] for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks \" \".\n    '''\n    # Define a regular expression pattern to find all the values between quotation marks\n    pattern = r'(\".*?\")'\n\n    # Find all the occurrences of the pattern in the input string\n    matches = re.findall(pattern, text1)\n\n    # Return the list of values between quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" of the string.\n    '''\n    \n    # Using regular expressions to extract values between quotation marks \" \"\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    \n    # Returning the extracted values as a list\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # remove all the special characters and digits from the string\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    # find all the quotation marks and their corresponding values in the string\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    # join the values of all the quotation marks into a single string\n    values =''.join(matches)\n    # return the extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() function to extract all the matches of the pattern from the text\n    matches = re.findall(pattern, text)\n    \n    # Join the extracted matches into a single string\n    extracted_text = \" \".join(matches)\n    \n    return extracted_text"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) * N\n    for i in range(1, N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Check that the input is a tuple of numbers\n    if not isinstance(test_tup, tuple) or any(not isinstance(x, (int, float)) for x in test_tup):\n        return None\n\n    # Calculate the product of the first N elements of the input tuple\n    product = test_tup[0]\n    for i in range(1, len(test_tup)):\n        product *= test_tup[i]\n\n    # Return the result as a tuple of length N\n    return tuple([product] * len(test_tup))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        product = test_tup[i] * test_tup[i+1]\n        result += (product,)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    result_tup.append(test_tup[-1] * test_tup[0])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each number in the input tuple\n    for num in test_tup:\n        # Multiply the current number with the next number in the tuple\n        result.append(num * test_tup[test_tup.index(num)+1])\n        \n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input, [a_1,...,a_n], [b_1,...,b_n] and returns a new list, [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of the corresponding elements of the lists.\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n        else:\n            continue\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [num for num, group in groupby(sorted(nums)) if not group.next()]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n\n    # Create a generator that yields consecutive duplicates of the given list\n    consecutive_groups = groupby(nums)\n\n    # Iterate over the consecutive groups and remove them from the original list\n    for group in consecutive_groups:\n        if len(list(group)) > 1:\n            nums.remove(list(group)[0])\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    seen = set()\n    result = []\n    for i, num in enumerate(nums):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n        elif i!= 0 and nums[i-1] == num:\n            continue\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: not any(y == x for y in groupby(nums)), nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for _, group in groupby(sorted(nums)) if not group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(nums)\n    for key, group in grouped_nums:\n        if key == group:\n            return group\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the numbers by their value and then by their indices\n    grouped_nums = groupby(enumerate(nums), key=lambda x: (x[1], x[0]))\n\n    # Remove consecutive duplicates of each group\n    new_nums = []\n    for group in grouped_nums:\n        if not group[0][1] - group[0][0] == 1:\n            new_nums.append(group[0][1])\n\n    return new_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to get unique elements\n    nums_set = set(nums)\n    # Convert the set back to a list to get consecutive duplicates\n    nums_consecutive = sorted(list(set(nums)))\n    # Combine the two lists to get the final result\n    return nums_consecutive"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a dictionary with the keys as the number values\n    num_dict = {num: key for num, key in groupby(sorted(nums))}\n\n    # Create a list to store the consecutive duplicates\n    consecutive_nums = []\n\n    # Iterate over the dictionary items\n    for num, key in num_dict.items():\n        if key == num + 1:\n            consecutive_nums.append(num)\n\n    # Return the list of consecutive duplicates\n    return consecutive_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the base area\n    area = math.pi * (r ** 2)\n    # calculate the height of the cone\n    cone_height = 2 * h\n    # calculate the volume of the cone\n    cone_vol = math.pi * r ** 2 * cone_height\n    # calculate the lateral surface area of the cone\n    lateral_surface_area = area - cone_vol\n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * r * h\n    print(\"The lateral surface area of a cone with radius\", r, \"and height\", h, \"is\", area)\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateralsurface_cone(radius, height)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Find the lateral surface area of a cone given the radius r and the height h.\n\n    Parameters:\n    r (float): the radius of the cone\n    h (float): the height of the cone\n\n    Returns:\n    float: the lateral surface area of the cone\n    \"\"\"\n    # Find the surface area of the base of the cone\n    base_area = math.pi * r**2\n\n    # Find the lateral surface area by subtracting the surface area of the base from the total surface area\n    lateral_area = base_area - math.pi * r**2\n\n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*r*r*(h/3)\n    print(\"The lateral surface area of the cone is:\",surface_area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Formula for the lateral surface area of a cone:\n    # s = (1/3) * pi * r^2 * h\n    # pi is a mathematical constant approximately equal to 3.14159...\n    s = (1/3) * math.pi * r**2 * h\n    \n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    return (2*math.pi*r*h)**0.5"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = [',', '.','']\n    for char in special_chars:\n        text = re.sub(char, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'([,.])'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|,|\\.', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to match special characters\n    special_pattern = r'[.,]'\n\n    # replace all matches of special characters with a colon\n    result = re.sub(special_pattern, ':', text)\n\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|,|\\.'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+', ':', re.sub(r',', ':', re.sub(r'\\.', ':', text)))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_specialchar(text):\n    return re.sub(r'[^\\w\\s]|[^\\w\\s]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,;\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s\\d]', '', text) # remove non-word characters\n    text = text.replace(' ', ':') # replace spaces with colons\n    text = text.replace(',', ':') # replace commas with colons\n    text = text.replace('.', ':') # replace dots with colons\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number x in a sorted array A.\n\n    Parameters:\n    A: List of integers\n    x: Integer to find\n\n    Returns:\n    int: Index of the first occurrence of x in A. Returns -1 if x is not found in A.\n    \"\"\"\n    # Search for x in A from the left to right\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Iterate through the sorted array\n    for i in range(len(A)):\n        # Check if the current element is equal to the given number\n        if A[i] == x:\n            # If it is, update the first occurrence index\n            first_occurrence_index = i\n            # Break out of the loop\n            break\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in A\n    index = bisect_left(A, x)\n\n    # If x is not in A, the result is -1\n    if index == len(A) or A[index]!= x:\n        return -1\n\n    # Otherwise, return the index\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            return mid\n\n        elif A[mid] < x:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # If the element is found, return its index\n            for i in range(mid, left - 1, -1):\n                if A[i] == x:\n                    return i\n            return mid\n        elif A[mid] < x:\n            # If the element is to the left of mid, search in the upper half\n            left = mid + 1\n        else:\n            # If the element is to the right of mid, search in the lower half\n            right = mid - 1\n\n    return -1  # The element is not found"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            result = mid\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the index of the first occurrence to -1\n    index = -1\n\n    # Find the index of the first occurrence of x in A using binary search\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence of x\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize two lists to store the products of subarrays\n    products = [1] * n\n    products[0] = 1\n    # Initialize a list to store the sum of products of subarrays\n    subarray_sum = [0] * n\n\n    # Compute the products of all subarrays and update the products list\n    for i in range(1, n):\n        products[i] = products[i-1] * arr[i-1]\n    # Compute the sum of products of all subarrays\n    for i in range(n):\n        subarray_sum[i] = subarray_sum[i-1] + products[i]\n\n    # Find the sum of products of all subarrays and return it\n    return subarray_sum[n-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_product = [1] * n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_prod = prefix_product[j] / prefix_product[i]\n            result += subarray_prod * (j-i+1)\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    \n    for i in range(n):\n        product *= arr[i]\n    \n    sum_arr = [product]\n    \n    for i in range(n):\n        for j in range(i, n):\n            sum_arr.append(product*arr[j])\n            \n    return sum(sum_arr)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1] * dp[i - 2]\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of products of all possible sublists of the list.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return arr[0]*arr[1]\n    # base case: if n is greater than 2\n    dp = [0]*(n+1)\n    # initialize the first two elements of the array\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + arr[i-1]\n        if i > 2:\n            # calculate the sum of products of all sublists of length i\n            dp[i] += dp[i-2]*arr[i-2]*(arr[i-2]**(i-2))\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum and product of subarrays\n    sum_arr = [0] * n\n    prod_arr = [1] * n\n\n    # Calculate sum of subarrays and products of subarrays\n    for i in range(1, n):\n        sum_arr[i] = sum_arr[i - 1] + arr[i]\n        prod_arr[i] = prod_arr[i - 1] * arr[i]\n\n    # Find products of subarrays that are in descending order\n    prod_desc_arr = prod_arr[::-1]\n\n    # Calculate sum of products of subarrays that are in descending order\n    sum_desc_prod = sum(prod_desc_arr)\n\n    # Find sum of products of subarrays that are in descending order\n    for i in range(n):\n        sum_desc_prod -= prod_arr[i]\n        if sum_desc_prod == 0:\n            break\n    else:\n        return 0\n\n    # Calculate sum of products of subarrays that are in descending order\n    # that are smaller than or equal to the sum of subarrays\n    for i in range(n - 1, 0, -1):\n        sum_desc_prod += prod_arr[i]\n        if sum_desc_prod == sum_desc_arr[i]:\n            break\n    else:\n        return 0\n\n    # Calculate sum of products of subarrays that are in descending order\n    # that are smaller than or equal to the sum of subarrays\n    for i in range(n - 1, 0, -1):\n        sum_desc_prod -= prod_arr[i]\n        if sum_desc_prod == sum_desc_arr[i]:\n            break\n    else:\n        return 0\n\n    # Return the sum of products of subarrays that are in descending order\n    return sum_desc_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find the maximum subarray sum\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i])\n\n    # Initialize the result array\n    result = [0]*(len(arr)+1)\n    result[0] = 0\n\n    # Calculate the product of subarrays\n    for i in range(1, len(arr)+1):\n        for j in range(i):\n            if j+1 > i//2:\n                break\n            result[i] += arr[j] * arr[i-j-1]\n\n    # Initialize the prefix sum array\n    prefix_sum = [0]*len(arr)\n    prefix_sum[0] = 0\n\n    # Calculate the prefix sum of the subarrays\n    for i in range(1, len(arr)):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\n    # Calculate the sum of products of subarrays\n    for i in range(1, len(arr)+1):\n        for j in range(i):\n            if j+1 > i//2:\n                break\n            result[i] += prefix_sum[i-1] * result[i-j-1]\n\n    # Calculate the sum of products of all sublists\n    for i in range(1, len(arr)+1):\n        result[i] += result[i-1]\n\n    return result[len(arr)]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        dp[i] *= arr[i]\n    max_prod = max(dp)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_prod = dp[j]\n            if sub_prod > max_prod:\n                break\n            if sub_prod % max_prod == 0:\n                prod_diff = sub_prod // max_prod\n                if prod_diff % 2 == 0:\n                    ans += (prod_diff - 1) * max_prod\n                else:\n                    ans += prod_diff * max_prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result and count of sublists\n    result = 0\n    count = 0\n    # Initialize a list to store all possible sublists\n    sublists = []\n    # Loop through each sublist of length 1 to n\n    for i in range(1, n+1):\n        # Find all possible sublists of length i\n        sublist = arr[i-1:n]\n        # Append the sublist to the list of sublists\n        sublists.append(sublist)\n        # Find the sum of products of the sublist\n        sublist_prod = 1\n        for num in sublist:\n            sublist_prod *= num\n        # Update the result by adding the sublist product to it\n        result += sublist_prod\n        # Increment the count of sublists\n        count += 1\n    # Return the sum of products of all sublists\n    return result, count"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    dp = [0]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j] and arr[j] > 0:\n                dp[i] += arr[i] * dp[j]\n\n    return sum(dp)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize the first and last bits to 0\n    first_bit = 0\n    last_bit = 0\n\n    # Convert the binary number to a list of digits\n    binary_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Iterate over the list of digits and toggle the bits except for the first and last bit\n    for i in range(1, len(binary_list)-1):\n        binary_list[i] = 1 - binary_list[i]\n\n    # Convert the list of digits back to a binary string and return it\n    binary_string = ''.join([str(digit) for digit in binary_list])\n    return int(binary_string, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # create a copy of the original number\n    num = n\n    \n    # find the index of the first and last bits\n    first_bit_index = 0\n    while num & 1 == 0:\n        first_bit_index += 1\n        num >>= 1\n        \n    last_bit_index = len(bin(num)) - 2\n    \n    # toggle the middle bits\n    for i in range(first_bit_index, last_bit_index):\n        num ^= 1 << i\n    \n    # return the modified number\n    return num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result variable\n    result = 0\n\n    # Extract the first two bits\n    first_two_bits = n & 0b11\n    # Toggle the first two bits\n    first_two_bits = first_two_bits ^ 0b10\n\n    # Extract the last two bits\n    last_two_bits = (n >> 2) & 0b11\n    # Toggle the last two bits\n    last_two_bits = last_two_bits ^ 0b10\n\n    # Combine the two bits\n    result = result | first_two_bits\n    result = result | last_two_bits\n    # Combine the two bits with the original number\n    result = result | n\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    num_bits = bin(n).count('1')\n    \n    # get the first and last bit positions\n    first_bit_pos = num_bits - 1\n    last_bit_pos = 0\n    \n    # toggle bits except the first and last bit\n    for i in range(1, num_bits-1):\n        if i % 2 == 0: # even bit position\n            n &= ~(1 << i)\n        else: # odd bit position\n            n |= 1 << i\n            \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # getting the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # toggling the first and last bits of the number\n    n = n ^ first_bit ^ last_bit\n\n    # setting the middle bits of the number\n    middle_bits = (n >> 1) & 0x55555555\n    middle_bits = middle_bits ^ 0xAAAAAAAA\n\n    # setting the middle bits of the number\n    n = n & ~(middle_bits << 1)\n\n    # setting the middle bits of the number\n    n = n ^ middle_bits\n\n    # returning the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    #get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**32-1)\n\n    #clear the first and last bits\n    n &= ~(first_bit | last_bit)\n\n    #toggle the middle bit\n    n ^= (1 << 31)\n\n    #set the first and last bits to their original values\n    n |= (first_bit << 32) | (last_bit >> 32)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    # First bit is 1 if the last bit is 0, otherwise 0\n    bit1 = n & 1\n\n    # Last bit is 1 if the first bit is 0, otherwise 0\n    bit2 = (n >> 15) & 1\n\n    # Toggle both bits\n    n ^= (bit1 ^ bit2) << 15\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # convert the number to a binary string\n    binary_str = bin(n)[2:]\n    # get the length of the binary string\n    length = len(binary_str)\n    # get the first and last bits\n    first_bit = binary_str[0]\n    last_bit = binary_str[-1]\n    # get the middle bits\n    middle_bits = binary_str[1:-1]\n    # create a new string with the middle bits toggled\n    new_binary_str = first_bit + middle_bits + last_bit\n    # convert the new binary string back to an integer and return it\n    return int(new_binary_str, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function will toggle the middle bits of a number except the first and the last bit.\n    \"\"\"\n    # extract the last two bits from the binary representation of n\n    last_two_bits = bin(n)[-2:]\n    # extract the first and last bits from the binary representation of n\n    first_bit = bin(n)[-1]\n    last_bit = bin(n)[-3]\n    # create a new binary number by toggling the middle bits\n    new_binary = ''.join(['0' if bit == '0' else '1' for bit in (first_bit, last_two_bits, last_bit)])\n    # convert the new binary number back to an integer\n    new_number = int(new_binary, 2)\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables to store the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Toggle first and last bits\n    n ^= first_bit ^ last_bit\n\n    # Set middle bits to 1\n    n ^= ((1 << (31 - i)) - 1) << (first_bit * 2 + last_bit)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index-1]:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x - 1)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left_index = bisect.bisect_left(a, x)\n    if left_index!= len(a) and a[left_index] == x:\n        return left_index\n    else:\n        return left_index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return -1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left == len(a) or a[left]!= x:\n        left += 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return -1\n    elif index == 0 or a[index-1]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(pattern, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # base case\n    if n == 1:\n        return 1\n\n    # recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter a value for n: \"))\nprint(\"The geometric sum of\", n-1, \"is\", geometric_sum(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    def is_triangular(num, n):\n        tri = int(str(num)[0:n])\n        return tri == tri ** 2\n\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def find_smallest_triangular(n):\n        smallest_triangular = 0\n        for i in range(1, n + 1):\n            tri = i * (i + 1) // 2\n            if is_triangular(tri, n):\n                smallest_triangular = tri\n                break\n        return smallest_triangular\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(n):\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    tri_n = find_smallest_triangular(n)\n    print(f\"The index of the smallest triangular number with {n} digits is {tri_n - 1}.\")\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n): \n    # calculate the number of digits in n \n    count = len(str(n)) \n\n    # iterate through all the possible values of the first n digits \n    for i in range(10**(count-1), 10**(count)+1): \n        triangular_number = i*(i+1) // 2 \n        # if the triangular number has n digits, return its index \n        if len(str(triangular_number)) == n: \n            return i "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    \n    # Use memoization to store the results of previous calculations\n    memo = [0] * (n+1)\n    \n    # Initialize the first two smallest triangular numbers\n    t1 = 1\n    t2 = 1\n    for i in range(3, n+1):\n        # Calculate the next triangular number using the formula t(n) = t(n-1) + t(n-2)\n        t = t1 + t2\n        # Store the result in the memoization table\n        memo[i] = t\n        \n        # Check if the new triangular number is the smallest one with n digits\n        if math.log10(t) == n-1:\n            return i\n        \n        # Update the values for t1 and t2 for the next iteration\n        t1 = t2\n        t2 = t\n    \n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    triangular_numbers = []\n    for i in range(n + 1):\n        triangular_numbers.append(math.comb(n, i))\n    smallest_triangular = min(triangular_numbers)\n    index = triangular_numbers.index(smallest_triangular)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables\n    result = 0\n    triangular_number = 0\n\n    # Start from 1\n    i = 1\n\n    # Calculate the first triangular number with n digits\n    while len(str(triangular_number)) < n:\n        triangular_number = i * (i + 1) // 2\n        i += 1\n\n    # Check if the first triangular number is less than n digits\n    if len(str(triangular_number)) == n:\n        return 0\n\n    # Initialize variables\n    current_number = triangular_number\n\n    # Find the smallest triangular number with n digits\n    while len(str(current_number)) < n:\n        next_number = current_number * (current_number + 1) // 2\n        result += 1\n        current_number = next_number\n\n    # Return the index of the smallest triangular number\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "The given problem statement is not clear. Please provide more details of what is the function that needs to be implemented in Python. Also, what is the input for the function?"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # find the maximum value of n\n    max_val = 10**(n-1)\n    \n    # loop through all values of n and find the smallest triangular number with that many digits\n    for i in range(1, max_val+1):\n        triangular = (i*(i+1))//2\n        if triangular.is_integer():\n            triangular_str = str(triangular)\n            if len(triangular_str) == n:\n                return i\n    \n    # if the loop completes without finding a triangular number with n digits, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(5, 1000000, 5):\n        triangular = i**2\n        triangular = int(triangular)\n        triangular_digits = len(str(triangular))\n        if triangular_digits == n:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    triangular_num = 0\n    index = 0\n\n    while True: \n        triangular_num = triangular_num + 1\n        triangular_num = triangular_num * (10 ** n)\n\n        if triangular_num % 2 == 0: \n            triangular_num = triangular_num + 1\n\n        triangular_num = triangular_num / 10 ** n\n\n        index = index + 1\n        if triangular_num <= 10 ** n: \n            break\n\n    return index\n\nn = int(input(\"Enter number of digits: \"))\n\nprint(\"Index of smallest triangular number with\", n, \"digits:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = [0] * (n+1) \n    triangular[0] = 0\n    triangular[1] = 1\n    for i in range(2, n+1): \n        triangular[i] = triangular[i-1] + triangular[i-2] \n    return triangular[n] \n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the list and add each pair to the dictionary as a key-value pair\n    for i in range(0, len(test_list), 2):\n        result_dict[test_list[i]] = test_list[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Convert the tuple to a dictionary using adjacent elements\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n\n    # Iterate over the tuple using enumerate()\n    for i, item in enumerate(test_tup):\n        # If this is the first element in the tuple, set the key to None\n        if i == 0:\n            key = None\n        # Otherwise, set the key to the current element minus 1\n        else:\n            key = item - 1\n\n        # Add the key-value pair to the dictionary\n        dict_obj[key] = item\n\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dictionary = {}\n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Extract the adjacent elements\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # Add the key-value pair to the dictionary\n        dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # initialize an empty dictionary\n    dict_result = {}\n    \n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # if the index is even, add the first element of the tuple to the dictionary\n        if i % 2 == 0:\n            dict_result[test_tup[i]] = test_tup[i+1]\n            \n    return dict_result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        result[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_data = {}\n    i = 0\n    while i < len(test_tup)-1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_data[key] = value\n        i+=2\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            my_dict[key] = value\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an input and returns True if all the characters are same, else it returns False.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # take the first character of the string as the reference character\n    ref_char = s[0]\n    # iterate over the remaining characters in the string\n    for char in s[1:]:\n        # if the character is not the same as the reference character, return False\n        if char!= ref_char:\n            return False\n    # if we reach here, all characters are the same as the reference character, so return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif len(s) > 1:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) if s[0] == s[1] else False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    s_list = list(s)\n    # Check if all the elements in the list are same\n    if s_list[0] == s_list[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # create a set of all the characters in the string\n    set_of_chars = set(s)\n    \n    # check if the length of the set is 1, which means all characters are same\n    if len(set_of_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string `s` as input and returns True if all the characters in `s` are the same,\n    and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron using Heron's formula.\n    \n    Parameters:\n    side: The length of one of the sides of the tetrahedron.\n    \n    Returns:\n    area: The area of the tetrahedron.\n    '''\n    \n    s = (side**2 + side**2 + side**2 + side**2) / 4\n    area = math.sqrt(s)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3)*side**3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (3 * side ** 2) / 12\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s-3*side) * (s-2*side) * (s-side)) ** 0.5\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = side * (1 + math.sqrt(2)) / 2\n    \n    # Calculate the area of the tetrahedron\n    area = (1 / 6) * semi_perimeter * semi_perimeter * semi_perimeter\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (3 * side) ** 0.5\n\n    # Calculate the area\n    area = (1 / 6) * side ** 2 * (semi_perimeter ** 3)\n\n    # Return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side as input and returns the area of a tetrahedron.\n    '''\n\n    area = (1/6) * side ** 3\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.25\n    return 6 * s ** 3"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # append m items to the end of the list\n    list += [0] * m\n    # move the items from the beginning to the end of the list by m\n    for i in range(n - m, n):\n        list[i - m] = list[i]\n    # reverse the list from index 0 to index m - 1\n    list[:m] = list[:m][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    if m == 0:\n        return list\n    elif m > len(list):\n        return list[m:] + list[:m]\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If number of items to be rotated is greater than the length of the list\n    if m > n:\n        # rotate n-m items to the right direction\n        for i in range(n-m):\n            temp = list[0]\n            for j in range(m-1):\n                list[j] = list[j+1]\n            list[m-1] = temp\n        # rotate m items to the left direction\n        for i in range(m):\n            list.append(list.pop(0))\n    # If number of items to be rotated is less than or equal to the length of the list\n    else:\n        # rotate m items to the left direction\n        for i in range(m):\n            list.append(list.pop(0))\n        # rotate n-m items to the right direction\n        for i in range(n-m):\n            temp = list[0]\n            for j in range(m-1):\n                list[j] = list[j+1]\n            list[m-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Check if list is empty or m is equal to 0\n    if n == 0 or m == 0:\n        return list\n    \n    # Check if m is greater than n\n    if m > n:\n        m = m % n\n        \n    # Reverse the list from start to m-1\n    list = list[n-m:] + list[:n-m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Base case\n    if m == 0 or m == n:\n        return list\n    # If m > n, then rotate by (m % n)\n    if m > n:\n        m = m % n\n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    # Reverse the remaining elements of the list\n    list[m:] = list[m:][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    # If the number of items to rotate is greater than the length of the list, rotate to the left instead\n    if m > n:\n        m = m % n\n    # Reverse the list from start to end\n    list = list[::-1]\n    # Reverse the list from 0 to m-1\n    list = list[:m] + list[m:]\n    # Reverse the list from m to n-1\n    list = list[::-1]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n  # handle case where m > n\n\n    # reverse first n-m items\n    list[:n-m] = list[:n-m][::-1]\n\n    # reverse remaining items\n    list[n-m:] = list[n-m:][::-1]\n\n    # reverse the entire list\n    list = list[::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m as input and returns the rotated list.\n    The list is rotated by m items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n\n    # If m is greater than the length of the list, reverse the list and return it\n    if m > n:\n        list = list[::-1]\n        return list\n\n    # If m is zero or less than zero, return the original list\n    elif m <= 0:\n        return list\n\n    # If m is greater than the length of the list, reverse the list and return it\n    else:\n        # Reverse the first half of the list\n        list = list[n - m:][::-1]\n\n        # Reverse the second half of the list\n        list = list[:n - m][::-1] + list[n - m:]\n\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Find the last element of the list\n    last_element = list[n-1]\n    # Shift all the elements of the list to the left by m\n    list = list[:n-m] + list[n-m:]\n    # Append the last element to the end of the list\n    list.append(last_element)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates the list by n positions to the right.\n    \"\"\"\n    if n == 0:\n        return lst\n    elif n % len(lst) == 0:\n        return lst[n:] + lst[:n]\n    else:\n        return lst[n:] + lst[:len(lst) - n]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: x in range(startnum, endnum+1) and all(int(i) % int(digit) == 0 for digit in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Example:\n\n    >>> divisible_by_digits(1234, 987654)\n    [1230, 1234, 1236, 1238, 1240, 1246, 1250, 1254, 1256, 1258, 1260, 1266, 1270, 1274, 1276, 1278, 1280, 1286, 1290, 1294, 1296, 1298, 1300, 1306, 1310, 1314, 1316, 1318, 1320, 1326, 1330, 1334, 1336, 1338, 1340, 1346, 1350, 1354, 1356, 1358, 1360, 1366, 1370, 1374, 1376, 1378, 1380, 1386, 1390, 1394, 1396, 1398, 1400, 1406, 1410, 1414, 1416, 1418, 1420, 1426, 1430, 1434, 1436, 1438, 1440, 1446, 1450, 1454, 1456, 1458, 1460, 1466, 1470, 1474, 1476, 1478, 1480, 1486, 1490, 1494, 1496, 1498, 1500, 1506, 1510, 1514, 1516, 1518, 1520, 1526, 1530, 1534, 1536, 1538, 1540, 1546, 1550, 1554, 1556, 1558, 1560, 1566, 1570, 1574, 1576, 1578, 1580, 1586, 1590, 1594, 1596, 1598, 1600, 1606, 1610, 1614, 1616, 1618, 1620, 1626, 1630, 1634, 1636, 1638, 1640, 1646, 1650, 1654, 1656, 1658, 1660, 1666, 1670, 1674, 1676, 1678, 1680, 1686, 1690, 1694, 1696, 1698, 1700, 1706, 1710, 1714, 1716, 1718, 1720, 1726, 1730, 1734, 1736, 1738, 1740, 1746, 1750, 1754, 1756"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # create a lambda function to check if a number is divisible by each digit\n    divisible_by_digit = lambda x: all(d in str(x) for d in str(x))\n\n    # loop through all numbers within the given range\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit\n        if divisible_by_digit(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        digits = set(str(num))\n        for digit in digits:\n            if int(digit) == 0:\n                continue\n            if num % int(digit)!= 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digit(num):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        for digit in str(num):\n            if int(digit) % 9!= 0:\n                return False\n        return True\n    \n    result = filter(is_divisible_by_digits, range(startnum, endnum+1))\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Using a lambda function to check if a number is divisible by every digit it contains\n    check_divisible = lambda x: all(int(d) % int(str(x)[i]) == 0 for i, d in enumerate(str(x)))\n    return filter(check_divisible, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda x: all(int(digit) in str(x) for digit in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        return all(num % int(digit) == 0 for digit in str(num))\n\n    return filter(is_divisible, range(startnum, endnum+1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: angle should be less than or equal to 360 degrees\")\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * (r**2) * (a/360)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is within the valid range of 0 to 360 degrees\n    if a < 0 or a > 360:\n        return None\n    \n    # Calculate the length of the sector from the radius and angle\n    length = r * math.sin(math.radians(a/2))\n    \n    # Calculate the area of the sector\n    area = math.pi * r ** 2\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * (r ** 2) * (a / 360)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within the valid range\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, k = len(X), len(Y), len(Z)\n    L = [[[0] * (k + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for l in range(1, k + 1):\n                if X[i - 1] == Y[j - 1] and Z[l - 1] == Y[j - 1]:\n                    L[i][j][l] = L[i - 1][j - 1][l - 1] + 1\n                elif X[i - 1] == Z[l - 1]:\n                    L[i][j][l] = L[i - 1][j][l]\n                elif Y[j - 1] == Z[l - 1]:\n                    L[i][j][l] = L[i][j - 1][l]\n                else:\n                    L[i][j][l] = max(L[i - 1][j][l], L[i][j - 1][l], L[i - 1][j - 1][l - 1])\n\n    lcs_length = L[n][m][k]\n    lcs = []\n    i, j, l = n, m, k\n    while lcs_length > 0:\n        if X[i - 1] == Y[j - 1] and Z[l - 1] == Y[j - 1]:\n            lcs.append(Y[j - 1])\n            i -= 1\n            j -= 1\n            l -= 1\n        elif X[i - 1] == Z[l - 1]:\n            i -= 1\n        elif Y[j - 1] == Z[l - 1]:\n            j -= 1\n        else:\n            l -= 1\n        lcs_length = L[n][m][k]\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Function to find the length of the longest common subsequence of three strings\n    def lcs_length(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        # Table to store lengths of LCS of X[0..m-1], Y[0..n-1], Z[0..o-1]\n        L = [[0] * (o+1) for i in range(m+1)]\n        # Following steps build L[i][j] in bottom up fashion. Note that L[i][0] and L[0][j] are already initialized to 0\n        for i in range(m+1):\n            for j in range(o+1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[i-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1])\n        return L[m][o]\n\n    # Finding the length of the longest common subsequence of X, Y and Z\n    len_X_Y_Z = lcs_length(X, Y, Z)\n    # Creating a 2D matrix to store the longest common subsequence\n    LCS = [[0] * (len_X_Y_Z+1) for i in range(len(X)+1)]\n    # Following steps fill the 2D matrix in bottom up fashion. Note that LCS[i][j] will store the length of LCS of X[0..i-1], Y[0..j-1], Z[0..k-1]\n    i = m = n = 0\n    while i < m + 1 and n < o + 1:\n        if X[i-1] == Y[n-1] == Z[i-1]:\n            LCS[i][n] = LCS[i-1][n-1] + 1\n            i += 1\n            n += 1\n        elif LCS[i-1][n] > LCS[i][n-1]:\n            i += 1\n        else:\n            n += 1\n    # Convert the matrix to a list of strings\n    lcs_list = []\n    i = len_X_Y_Z\n    while i > 0:\n        lcs_list.append(X[i-1])\n        i -= LCS[i-1][len_X_Y_Z]\n    lcs_list.reverse()\n    # Return the list of strings\n    return lcs_list"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    # creating a list of tuples for all possible lengths of LCS \n    # where the first element of each tuple is the length of LCS \n    # and the second element of each tuple is the LCS itself. \n    LCS_dict = {} \n    for i in range(len(X)+1): \n        for j in range(len(Y)+1): \n            for k in range(len(Z)+1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS_dict[(i,j,k)] = \"\" \n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    LCS_dict[(i,j,k)] = LCS_dict[(i-1,j-1,k-1)] + X[i-1] \n                elif X[i-1] == Y[j-1]: \n                    LCS_dict[(i,j,k)] = LCS_dict[(i-1,j,k)] \n                elif Y[j-1] == Z[k-1]: \n                    LCS_dict[(i,j,k)] = LCS_dict[(i,j-1,k-1)] \n                elif X[i-1] == Z[k-1]: \n                    LCS_dict[(i,j,k)] = LCS_dict[(i,j,k-1)] \n                else: \n                    LCS_dict[(i,j,k)] = LCS_dict[(i-1,j,k)] \n                    \n    # finding the maximum length of LCS and extracting the LCS itself \n    max_length = max(LCS_dict, key=LCS_dict.get) \n    LCS = LCS_dict[max_length] \n    return LCS "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize a table to store lengths of longest common subsequences of prefixes of X, Y and Z \n    lcs_table = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the table using dynamic programming \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                lcs_table[i][j] = lcs_table[i-1][j-1] + 1\n            else: \n                lcs_table[i][j] = max(lcs_table[i-1][j], lcs_table[i][j-1])\n\n    # Return the length of the longest common subsequence \n    return lcs_table[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    lcs_length = dp[m][p]\n    lcs_seq = []\n    i, j = m, p\n    while (i > 0) and (j > 0):\n        if X[i-1] == Z[j-1]:\n            lcs_seq.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs_seq[::-1], lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Step 1\n    dp = [[[0]*(o+1) for j in range(m+1)] for i in range(n+1)]\n\n    # Step 2\n    for i in range(1, n+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j][0] = dp[i-1][j-1][0] + 1\n            else:\n                dp[i][j][0] = max(dp[i-1][j][0], dp[i][j-1][0])\n\n    # Step 3\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Z[j-1]:\n                dp[i][j][1] = dp[i-1][j-1][1] + 1\n            else:\n                dp[i][j][1] = max(dp[i-1][j][1], dp[i][j-1][1])\n\n    # Step 4\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if Y[i-1] == Z[j-1]:\n                dp[i][j][2] = dp[i-1][j-1][2] + 1\n            else:\n                dp[i][j][2] = max(dp[i-1][j][2], dp[i][j-1][2])\n\n    # Step 5\n    result = 0\n    i, j, k = n, m, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[i-1] == Z[k-1]:\n            result = max(result, dp[i-1][j-1][2] + dp[i-1][j-1][1] + dp[i-1][j-1][0])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        elif Y[i-1] == Z[k-1]:\n            i -= 1\n            k -= 1\n        else:\n            j -= 1\n\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n\n    This function takes three string sequences X, Y, and Z as input and returns the length of the longest common subsequence. The algorithm used to find the longest common subsequence is dynamic programming. Here, we create a table of size (n+1) x (m+1) and fill it row by row. The value of the table will be the length of the longest common subsequence if we take the first i characters of X and the first j characters of Y, and the first k characters of Z. We then take the maximum of this value and the value at the top-left cell of the previous row and store it in the cell (i,j).\n\n    In the last step, we return the length of the longest common subsequence in the (n,m,k) cell.\n    '''\n\n    # Step 1: Find the length of each string in the sequence\n    n, m, k = len(X), len(Y), len(Z)\n\n    # Step 2: Initialize a table to store the lengths of the longest common subsequences\n    table = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Step 3: Fill the table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, k + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    table[i][j] = table[i - 1][j - 1] + 1\n                else:\n                    table[i][j] = max(table[i - 1][j], table[i][j - 1], table[i - 1][j - 1])\n\n    # Step 4: Return the length of the longest common subsequence in the (n,m,k) cell\n    return table[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    L = [[0] * (n + 1) for i in range(m + 1)] \n\n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if X[i - 1] == Y[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    i = m \n    j = n \n    result = []\n\n    while i!= 0 and j!= 0: \n        if X[i - 1] == Y[j - 1]: \n            result.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return ''.join(result[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Step 1: Find the length of the longest string\n    n = max(len(X), len(Y), len(Z))\n    \n    # Step 2: Create a 2D table to store the lengths of LCS \n    L = [[0 for j in range(n+1)] for i in range(n+1)]\n    \n    # Step 3: Fill the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            elif X[i-1] == Z[j-1]:\n                L[i][j] = L[i][j-1]\n            elif Y[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j]\n    # Step 4: Find the LCS string\n    i = n\n    j = n\n    lcs_str = \"\"\n    while i > 0 and j > 0:\n        if L[i][j] == L[i-1][j-1] + 1:\n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n        elif L[i][j] == L[i-1][j]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs_str[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def lcs(X, Y, Z, m, n, p):\n        if m == 0 or n == 0:\n            return []\n        \n        if X[m-1] == Y[n-1] and X[m-1] == Z[p-1]:\n            return [X[m-1]] + lcs(X, Y, Z, m-1, n-1, p-1)\n        else:\n            return lcs(X, Y, Z, m-1, n, p)\n        \n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n    \n    if X_len > Y_len and X_len > Z_len:\n        X, Y, Z = Y, X, Z\n        X_len = Y_len = Z_len\n        \n    if Y_len > X_len and Y_len > Z_len:\n        Y, Z = X, Y\n        \n    if Z_len > X_len and Z_len > Y_len:\n        Z = X\n        \n    m = X_len\n    n = Y_len\n    p = Z_len\n    \n    return lcs(X, Y, Z, m, n, p)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1.lower()) # find all capital words\n    new_str =''.join(words) # join the words with spaces\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Convert the string to lowercase and split it into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n\n    # Capitalize the first letter of each word and join them back into a string\n    capitalized_words =''.join([word.capitalize() for word in words])\n\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Capitalize each word\n    capitalized_words = [word.capitalize() for word in words]\n\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-word characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Initialize an empty list to store the modified words\n    modified_words = []\n    \n    # Iterate through the words and modify them\n    for word in words:\n        if word.istitle():\n            # Convert the first character to lowercase and append it to the modified word\n            modified_words.append(word[0].lower() + word[1:])\n        else:\n            # Add the original word to the modified words list\n            modified_words.append(word)\n    \n    # Join the modified words into a single string and return it\n    return''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Using regular expressions to match words that start with capital letters\n    words = re.findall(r'\\b[A-Z]\\w*\\b', str1)\n\n    # Joining the words with spaces and capitalizing the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n\n    # Joining the capitalized words with spaces\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    result = []\n    for i in range(len(words)):\n        if i == 0 or (i > 0 and words[i-1][0]!= words[i][0]):\n            result.append(words[i])\n            result.append(\" \")\n    result = \"\".join(result)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Loop through each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it starts with a capital letter, add a space after it\n            words[i] = words[i][0] +'' + words[i][1:]\n\n    # Join the words back together with spaces\n    output =''.join(words)\n\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Function to replace all the capital letters with spaces\n    def replace_capital_words(match):\n        return'' + match.group(0) +''\n\n    # Define a regular expression pattern to find capital words\n    pattern = r'[A-Z][a-z]+'\n\n    # Replace all the capital words with spaces\n    modified_str = re.sub(pattern, replace_capital_words, str1)\n\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern to match capital letters followed by a space\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Find all the matches in the given string using the pattern\n    matches = re.findall(pattern, str1)\n    # Loop through all the matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,''+match)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str.sort(key=lambda x: [int(d) for d in x])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function sorts a given list of strings of numbers numerically using the `str.isdigit()` method in Python.\n    \"\"\"\n    nums_str.sort(key=lambda x: (int(x) if x.isdigit() else float('inf'), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [int(num) for num in nums_str if num.isdigit()]\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all strings in the list to integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the integers using the sort() method\n    nums_int.sort()\n\n    # Convert the sorted integers back to strings and return the result\n    return [str(num) for num in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert strings to lists of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the lists of integers using the built-in sort function\n    nums_int.sort()\n    # Convert the sorted lists of integers back to strings and return the result\n    return [str(num) for num in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for s in nums_str:\n        try:\n            nums.append(float(s))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to numbers\n    nums = [int(num_str) for num_str in nums_str]\n    \n    # Sort the numbers in the list\n    nums.sort()\n    \n    # Convert the sorted numbers back to strings\n    sorted_nums_str = ['' + str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to integers and store them in a list\n    nums_list = [int(x) for x in nums_str]\n\n    # Sort the list in ascending order\n    nums_list.sort()\n\n    # Convert the sorted list back to strings and store them in a new list\n    sorted_nums_str = [str(x) for x in nums_list]\n\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The modified list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # create a new list to hold the sum of the two lists\n    new_list = []\n    # iterate through the lists\n    for i in range(len(test_list)):\n        # add the values of the two lists and append the result to the new list\n        new_list.append(test_list[i] + test_tup[i])\n    # return the new list of summed values\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # If the left child of i is greater than the parent, then arr[i] is not a min heap\n    if arr[i] > arr[2*i+1]:\n        return False\n    \n    # If the right child of i is greater than the parent and greater than the left child, then arr[i] is not a min heap\n    if arr[i] > arr[2*i+2] and arr[2*i+2] > arr[2*i+1]:\n        return False\n    \n    # Recursively call the function for the left and right child of i\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) / 2:\n        return True\n    \n    if arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]:\n        return False\n    \n    if arr[2*i+1] < arr[i] and arr[2*i+2] < arr[i]:\n        return check_min_heap_helper(arr, 2*i+1)\n    elif arr[2*i+1] > arr[i] and arr[2*i+2] > arr[i]:\n        return check_min_heap_helper(arr, 2*i+2)\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2!= 0:\n        return False\n    \n    return check_min_heap_helper(arr, 0)\n\n\nif __name__ == '__main__':\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    print(check_min_heap(arr))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if the left child is smaller than the parent\n    if arr[i] > arr[2 * i + 1]:\n        return False\n\n    # If the parent is smaller than both children, return False\n    if arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n        return False\n\n    # Recursively check if left and right children are also min heaps\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n\n\narr = [12, 11, 13, 5, 6, 7]\nif check_min_heap(arr):\n    print(\"The array is a min heap\")\nelse:\n    print(\"The array is not a min heap\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a binary heap or not.\n    '''\n    if i < 1:\n        return True\n    \n    left_child = 2 * i\n    right_child = 2 * i + 1\n    \n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a binary heap or not.\n    '''\n    if len(arr) == 1:\n        return True\n    \n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: if the index is out of range, return True\n    if i < 0:\n        return True\n    \n    # Check if the left child of the current node is smaller than or equal to the current node\n    if arr[i] > arr[2*i+1]:\n        return False\n    \n    # Recursively check the left and right children of the current node\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) / 2:\n        return True\n    elif arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        if check_min_heap_helper(arr, i):\n            return True\n\n    return False\n\n\ndef check_min_heap_helper(arr, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < len(arr) and arr[l] < arr[i]:\n        return False\n\n    if r < len(arr) and arr[r] < arr[i]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    elif i < len(arr)-1 and arr[i] < arr[i+1]:\n        return False\n\n    if i < len(arr) // 2:\n        return check_min_heap_helper(arr, 2*i+1)\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n\n    # If the array has odd length, it cannot be a min heap\n    if n % 2!= 0:\n        return False\n\n    # Starting from the middle of the array\n    for i in range(n//2 - 1, -1, -1):\n        # If the element is greater than its parent, return False\n        if arr[i] > arr[2*i+1]:\n            return False\n\n    # Starting from the second last element to the first element\n    for i in range(n//2, n):\n        # If the element is less than its children, return False\n        if arr[i] < min(arr[2*i+1], arr[2*i+2]):\n            return False\n\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number using the formula:\n    0 + 1 + 1 + 3 + 5 + 11 +... + (2^(n-1) - 1) * (2^(n-2) - 1) *... * 2 + 1\n    \"\"\"\n    jacob_num = 0\n    for i in range(1, n+1):\n        jacob_num += 2**i - 1\n    return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_lst = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal_lst.append(jacobsthal_lst[i-1] + jacobsthal_lst[i-2])\n        return jacobsthal_lst[-1]\n\nn = int(input(\"Enter the value of n: \"))\nresult = jacobsthal_num(n)\nprint(\"The\", n, \"th jacobsthal number is:\", result)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**(n-1) * (2*n-1)) // (n*(n+1))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (2 * jacobsthal_num(n-1) - jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = n - 1\n        jacob_num = 0\n        lucas_num = 1\n        while j >= 0:\n            jacob_num = (jacob_num + lucas_num) % 1000000007\n            lucas_num = (lucas_num * 2) % 1000000007\n            j -= 1\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize variables\n    j = 0\n    a = 1\n    b = 1\n    jacob = 0\n\n    # Compute the nth jacobsthal number\n    for i in range(2, n+1):\n        jacob = a + b\n        a = b\n        b = jacob\n\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[n]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples as input and a positive integer K as an argument.\n    The function returns a list of tuples containing the minimum K records from the input list.\n    \"\"\"\n    # Sort the list of tuples based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Iterate through the sorted list and add the first K records to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    # Return the min_records list\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Sort the list in ascending order based on the last element of each tuple\n    test_list.sort(key=lambda x: x[2])\n    \n    # Initialize two variables to store the minimum and maximum values\n    min_val = test_list[0][2]\n    max_val = test_list[-1][2]\n    \n    # Loop through the list and update the minimum and maximum values\n    for i in range(K-1):\n        if test_list[i][2] < min_val:\n            min_val = test_list[i][2]\n        if test_list[i][2] > max_val:\n            max_val = test_list[i][2]\n    \n    return min_val, max_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list in descending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize a set to keep track of the records that have been added to the set\n    added_set = set()\n\n    # Initialize a variable to keep track of the minimum k records found so far\n    min_k_records = []\n\n    # Loop through the sorted list and add records to the set until we have added K records\n    for record in test_list:\n        if len(added_set) < K:\n            added_set.add(record)\n        else:\n            # Check if the record is already in the set and is not a duplicate of the current minimum k records\n            if record[0] not in [rec[0] for rec in min_k_records] and record not in min_k_records:\n                min_k_records.append(record)\n\n            # If the set is full, remove the record with the lowest key value from the set\n            if len(added_set) == K:\n                min_key = min(added_set, key=lambda x: x[0])[0]\n                added_set.remove((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set.index((min_key, added_set[added_set"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input, and returns the minimum K records from the list.\n    \"\"\"\n    # Create a set to store unique tuples\n    unique_tuples = set(test_list)\n\n    # Create an empty list to store minimum k records\n    min_k_list = []\n\n    # Iterate over unique tuples\n    for i in unique_tuples:\n        # Check if the length of the tuple is equal to K\n        if len(i) == K:\n            # If it is, append the tuple to the min_k_list\n            min_k_list.append(i)\n\n    # Sort the min_k_list in ascending order\n    min_k_list.sort()\n\n    # Return the first K elements of the min_k_list\n    return min_k_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    This function takes two arguments - test_list and K.\n    test_list - a list of tuples, where each tuple contains two elements - a name and a score.\n    K - an integer, representing the number of records we want to retrieve from the list.\n    '''\n    # Create a dictionary to store the records by their name\n    record_dict = {}\n\n    # Iterate through the list of tuples\n    for record in test_list:\n        # Add the name and score to the dictionary\n        name, score = record\n        record_dict[name] = score\n\n    # Sort the dictionary by value (score)\n    sorted_dict = dict(sorted(record_dict.items(), key=lambda item: item[1]))\n\n    # Get the keys of the sorted dictionary\n    keys = sorted_dict.keys()\n\n    # Filter the keys to retrieve only the first K records\n    filtered_keys = keys[:K]\n\n    # Create a new list of tuples to contain the records with the desired k\n    result_list = []\n\n    # Iterate through the filtered keys and retrieve the records from the original list\n    for key in filtered_keys:\n        record = test_list[test_list.index((key, sorted_dict[key]))]\n        result_list.append(record)\n\n    return result_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_length = float('inf')\n    for tup in test_list:\n        length = len(tup)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # sort the list of tuples by the second element (which is the value)\n    test_list.sort(key=lambda x: x[1])\n\n    # loop through the sorted list of tuples and keep track of the minimum value and the count of occurrences\n    min_value = test_list[0][1]\n    min_count = 1\n\n    # loop through the sorted list of tuples and update the minimum value and count of occurrences\n    for i in range(1, len(test_list)):\n        if test_list[i][1] == min_value:\n            min_count += 1\n        elif test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_count = 1\n\n    # check if the number of occurrences of the minimum value is less than K\n    if min_count < K:\n        return None\n    else:\n        # loop through the sorted list of tuples and find the kth minimum value\n        for i in range(len(test_list)-1, -1, -1):\n            if test_list[i][1] == min_value:\n                if i < K:\n                    return None\n                else:\n                    return test_list[i][0]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    # Initialize a dictionary to store count of each value\n    count_dict = {}\n    for item in test_list:\n        if item[1] in count_dict:\n            count_dict[item[1]] += 1\n        else:\n            count_dict[item[1]] = 1\n\n    # Find the minimum count of each value in the dictionary\n    min_count = {}\n    for key, value in count_dict.items():\n        if key not in min_count or value < min_count[key]:\n            min_count[key] = value\n\n    # Find the minimum count of K values in the dictionary\n    min_value = float('inf')\n    for key, value in min_count.items():\n        if value <= K:\n            min_value = min(min_value, value)\n\n    # Find the minimum count of K values in the list\n    min_list = []\n    for item in test_list:\n        if item[1] in min_count and min_count[item[1]] <= K:\n            min_list.append(item)\n\n    # Return the minimum count of K values in the list\n    return min_list[:min_value]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list: list of tuples\n    K: int\n    \n    Returns:\n    tuple: tuple containing minimum k records from test_list\n    '''\n    \n    # Sort the list of tuples by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize minimum k records to None\n    min_records = None\n    \n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        if min_records is None or min_records[0][1] > test_list[i][1]:\n            min_records = (test_list[i],)\n    \n    # If there are less than K records in the list, return None\n    if len(min_records) < K:\n        return None\n    \n    # Otherwise, return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum list to store the first K elements of the sorted list\n    min_list = []\n\n    # Initialize minimum value to store the minimum K elements\n    min_value = None\n\n    # Traverse the sorted list and keep adding the first K elements to the minimum list\n    for i in range(K):\n        min_list.append(test_list[i][0])\n\n        # If the minimum value is not set yet or the current element is less than the minimum value,\n        # update the minimum value to be the current element\n        if min_value is None or test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # loop through each index in the lists\n    for i in range(len(l1)):\n        # check if the element at the current index is present in all three lists\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            # if it is, add it to the list of common elements\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    # iterate over the indices of the first list\n    for i in range(len(l1)):\n        # check if the element at this index is also in the other two lists\n        if l1[i] in l2 and l1[i] in l3:\n            # if it is, append it to the list of common elements\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function finds common elements from three lists. The function returns a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_indices:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create a dictionary to store the indices of elements in l1\n    index_dict = {}\n    for i in range(len(l1)):\n        index_dict[i] = l1[i]\n    # loop through the lists and add common elements to the result list\n    result = []\n    for l in [l2, l3]:\n        for elem in l:\n            if elem in index_dict and index_dict[elem] not in result:\n                result.append(elem)\n    return result"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Find the second smallest number\n    second_smallest_number = sorted_numbers[1]\n    # Return the second smallest number\n    return second_smallest_number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list is empty\n    if len(numbers) < 2:\n        return None\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the numbers in ascending order\n    numbers.sort()\n    # Return the second element in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: numbers.count(x))\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: abs(x))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'^a.b+'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<![ab])b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'ab+'\n    \n    match = re.search(pattern, text)\n    \n    if match:\n        return \"Found an occurrence of 'ab+'\"\n    else:\n        return \"No occurrences of 'ab+'\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_pair_count = {}\n\n    # loop through the given string list\n    for i in range(len(test_list)):\n        # loop through the remaining elements in the list\n        for j in range(i+1, len(test_list)):\n            # check if the reversed strings are equal\n            if test_list[i][::-1] == test_list[j]:\n                # check if the count of the pair is already in the dictionary\n                if test_list[i][::-1] in reverse_pair_count:\n                    # increment the count of the pair\n                    reverse_pair_count[test_list[i][::-1]] += 1\n                else:\n                    # add the pair to the dictionary with a count of 1\n                    reverse_pair_count[test_list[i][::-1]] = 1\n\n    # return the count of reverse pairs\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    pairs_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n\n    # Sort the list of strings in lexicographically increasing order\n    test_list.sort()\n\n    # Traverse the sorted list and compare adjacent pairs\n    for i in range(n-1):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            # If the reverse of the current string is smaller than the next string, we have found a pair\n            if test_list[left][::-1] < test_list[right][::-1]:\n                count += right - left\n                right -= 1\n            # If the reverse of the current string is greater than the next string, we need to move the right pointer\n            else:\n                left += 1\n\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(list(map(tuple, list1)))\n    # count the number of occurrences of each tuple in the original list\n    counts = {}\n    for tuple in unique_set:\n        count = list1.count(tuple)\n        counts[tuple] = count\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list to a tuple and count their occurencies in the original list\n    counts = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(list1)) # Remove duplicates\n    \n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            count_dict[sublist_tuple] = count_dict.get(sublist_tuple, 0) + 1\n            \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for item in list1:\n        for sublist in item:\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to get unique sublists\n    sublists = set([tuple(sublist) for sublist in list1])\n    # Create an empty dictionary\n    count_dict = {}\n    # Iterate through the unique sublists and count their occurrences in the original list\n    for sublist in sublists:\n        count = 0\n        for lst in list1:\n            if sublist in lst:\n                count += 1\n        count_dict[sublist] = count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert list1 to a set to remove duplicates\n    list1_set = set(list1)\n\n    # Initialize a dictionary to store the counts\n    counts = {}\n\n    # Iterate through the unique lists in list1_set\n    for sublist in list1_set:\n        # Convert the sublist to a tuple and increment its count in counts dictionary\n        counts[tuple(sublist)] += 1\n\n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_counts = {}\n\n    # loop through each item in the original list\n    for item in list1:\n        # convert the item to a tuple and check if it's already in the dictionary\n        if (tuple(item),) in sublist_counts:\n            # increment the count of the sublist in the dictionary\n            sublist_counts[(tuple(item),)] += 1\n        else:\n            # add the sublist to the dictionary with a count of 1\n            sublist_counts[(tuple(item),)] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple to check for uniqueness\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_counts:\n            # Increment the count of the tuple by 1\n            sublist_counts[sublist_tuple] += 1\n        else:\n            # Otherwise, add the tuple to the dictionary with a count of 1\n            sublist_counts[sublist_tuple] = 1\n\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j and list1[i] in list1[j:]:\n                unique_list.append((list1[i], len(list1[j:j+list1[i].__len__()])))\n    result = {}\n    for item in unique_list:\n        if item[0] in result:\n            result[item[0]] += item[1]\n        else:\n            result[item[0]] = item[1]\n    return result"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        if len(num.split('.')[-1]) > 2:\n            return False\n    else:\n        if len(num) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the string is a valid decimal number\n    if '.' not in num:\n        return False\n    # Split the string into integer and fractional parts\n    int_part, frac_part = num.split('.')\n    # Check if the integer part is a valid decimal number with a precision of 2\n    if not int(int_part) % 10 == 0 or not int(int_part) % 100 == 0:\n        return False\n    # Check if the fractional part is a valid decimal number with a precision of 2\n    if frac_part.lstrip('0')!= frac_part:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    # Remove any non-numeric characters from the number\n    num = ''.join(e for e in num if e.isdigit())\n\n    # Check if the number has a precision of 2\n    if len(num)!= 2:\n        return False\n\n    # Check if the number is greater than or equal to 0.01\n    if float(num) < 0.01:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Remove any non-numeric characters and check if the resulting string is empty\n    num = ''.join(c for c in num if c.isdigit())\n    if not num:\n        return False\n    \n    # Convert the string to a float and check if it has a precision of 2\n    try:\n        float_num = float(num)\n        if abs(float_num - num) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number is a decimal number\n    if '.' in num and num.count('.') <= 1:\n        # Convert the string to a float and check its precision\n        decimal_part = float(num.split('.')[1])\n        if len(str(decimal_part)) <= 2:\n            # If the precision is less than or equal to 2, return True\n            return True\n        else:\n            # If the precision is greater than 2, return False\n            return False\n    else:\n        # If the number is not a decimal number, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    int_part = num_parts[0]\n    dec_part = num_parts[1]\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    for char in int_part + dec_part:\n        if char < '0' or char > '9':\n            return False\n    if len(num_parts) == 2:\n        if '.' not in dec_part:\n            return False\n        if len(dec_part) > 2:\n            return False\n        for char in dec_part:\n            if char < '0' or char > '9':\n                return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string contains only digits and a decimal point\n    if not any(char.isdigit() for char in num) or '.' not in num:\n        return False\n\n    # Check if the number of digits before the decimal point is 1 less than the number of digits after the decimal point\n    digits_before_decimal = num.split('.')[0]\n    digits_after_decimal = num.split('.')[1]\n\n    if len(digits_before_decimal) < len(digits_after_decimal):\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    \n    decimal_part = num.split('.')[1]\n    if len(decimal_part) > 2:\n        return False\n    \n    for char in decimal_part:\n        if not char.isdigit():\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # remove any non-numeric characters from the input\n    num = ''.join(filter(str.isdigit, num))\n    \n    # check if the input is a decimal number with a precision of 2\n    if len(num) > 2 and '.' in num:\n        # check if the first non-zero digit is before the decimal point\n        if num[0]!= '0' or num[1] == '.':\n            return False\n        \n        # check if the last non-zero digit is after the decimal point\n        if num[-1]!= '0' or num[-2] == '.':\n            return False\n        \n        # check if the number of non-zero digits in the integer part is less than the number of non-zero digits in the fractional part\n        if len(num) - num[num.index('.')+1:] < len(num) - num[num.index('.')-1:]:\n            return False\n        \n        return True\n    \n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list is empty or not\n    if len(arr) == 0:\n        return False\n\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Check if all the elements are unique or not\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n\n    # If all elements are unique, then the list contains only one distinct element\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        print(\"The list contains only one unique element\")\n    else:\n        print(\"The list contains more than one unique element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    distinct = set()\n    for num in arr:\n        if num in distinct:\n            return False\n        else:\n            distinct.add(num)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            print(monthnum3, \"has 29 days.\")\n        else:\n            print(monthnum3, \"has 30 days.\")\n    else:\n        if monthnum3 == 2:\n            print(monthnum3, \"has 28 days.\")\n        else:\n            print(monthnum3, \"has 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4!= 0 and year % 100 == 0):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    if monthnum3 in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif 1 <= monthnum3 <= 6 or 9 <= monthnum3 <= 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 10 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array `arr` and its length `n` as inputs.\n    It finds the minimum difference between any two elements in the array.\n    '''\n    # Initialize two variables to store the minimum difference and the current difference\n    min_diff = float('inf')\n    current_diff = float('inf')\n    \n    # Loop through the array and update the current difference\n    for i in range(n):\n        current_diff = abs(arr[i] - arr[(i+1)%n])\n        # Update the minimum difference if the current difference is smaller than the minimum difference\n        if current_diff < min_diff:\n            min_diff = current_diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and last elements\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Traverse through the array starting from the second element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1,n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the starting index of the second element\n    min_diff = float('inf')\n    min_index = 0\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Calculate the difference between the current and the previous element\n        diff = abs(arr[i] - arr[i-1])\n\n        # If the difference is less than the current minimum difference, update the minimum difference and the starting index\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    # Return the minimum difference and the starting index of the second element\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Step 1: Sort the given array using bubble sort\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # Step 2: Find the minimum difference between any two elements in the sorted array\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    min_diff = float('inf')  # initialize minimum difference to positive infinity\n\n    for i in range(n-1):  # loop through all possible pairs of elements\n        diff = arr[i+1] - arr[i]  # calculate the difference between the current pair of elements\n        if diff < min_diff:  # if the calculated difference is smaller than the current minimum difference\n            min_diff = diff  # update the minimum difference\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize variables to keep track of minimum difference\n    min_diff = arr[1] - arr[0]\n    min_index = 0\n\n    # iterate through the array from the second element to the last element\n    for i in range(1, n-1):\n        # calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n\n        # update the minimum difference and its index if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array 'arr' of size 'n' and returns the minimum difference between any two elements in the array.\n\n    This function uses a sorting algorithm called Merge Sort.\n\n    Time Complexity: O(nlogn)\n    Space Complexity: O(logn)\n    \"\"\"\n    arr.sort()\n\n    # Merge Sort has a time complexity of O(nlogn)\n    # Therefore, we can calculate the minimum difference by\n    # comparing the difference between the last element of\n    # the sorted array and the first element of the array\n    diff = arr[-1] - arr[0]\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # Sorting the array in ascending order\n    min_diff = arr[1] - arr[0] # Calculating the minimum difference between any two elements in the sorted array\n    for i in range(1, n-1):\n        if i == n-2: # Checking the last element in the array\n            min_diff = min(min_diff, arr[n-1] - arr[n-2])\n        else:\n            min_diff = min(min_diff, arr[i+1] - arr[i]) # Calculating the minimum difference between any two elements in the unsorted array\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. \n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Function to find nth polite number. \n    Geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # finding the nth polite number \n    for i in range(1, n+1):\n        if math.sqrt(i) % 1 == 0:\n            print(i)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function finds the nth polite number.\n    '''\n    polite_numbers = []\n\n    for i in range(1, int(math.log10(n))+1):\n        polite_numbers.append(10**i)\n\n    polite_numbers.append(n)\n\n    for i in range(1, len(polite_numbers)-1):\n        polite_numbers[i] += polite_numbers[i-1]\n\n    return polite_numbers[-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    return int(math.ceil(n + 1/math.log(5)))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Initialize variables\n    num = 1\n    count = 1\n\n    # Loop through numbers and check if they are polite\n    while count < n:\n        # If the number is not a perfect square\n        if int(math.sqrt(num))**2!= num:\n            # Check if the number is a palindrome\n            if str(num) == str(num)[::-1]:\n                # If it is a palindrome, return the number\n                return num\n            # If the number is not a palindrome, increment the count\n            else:\n                count += 1\n        # If the number is a perfect square\n        else:\n            # Increment the count\n            count += 1\n\n        # Increment the number\n        num += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 1: \n        return False\n    \n    def is_prime(num): \n        if num <= 1: \n            return False\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                return False\n        return True\n    \n    def is_divisible_by_ten(num): \n        if num < 10: \n            return False\n        return num % 10 == 0\n    \n    def is_divisible_by_five(num): \n        if num < 50: \n            return False\n        return num % 50 == 0\n    \n    def is_divisible_by_three(num): \n        if num < 100: \n            return False\n        return num % 100 == 0\n    \n    count = 0\n    num = 0\n    while count < n: \n        num += 1\n        if is_prime(num) and is_divisible_by_ten(num) and is_divisible_by_five(num) and is_divisible_by_three(num): \n            count += 1\n    \n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Given a positive integer n, return the nth polite number.\n    A polite number is one less than a composite number, i.e., a number that is\n    divisible by any odd number less than its square root.\n\n    For example, the first polite number is 5, since 5 is not divisible by any odd\n    number less than its square root (1), so it is a polite number. The second polite\n    number is 7, since 7 is divisible by 3, which is an odd number less than its\n    square root (2).\n    \"\"\"\n\n    # Square root of n\n    sqrt_n = math.sqrt(n)\n\n    # Check if n is odd\n    if n % 2 == 0:\n        # n is even\n        return None\n\n    # Check odd numbers less than sqrt(n)\n    for i in range(1, int(sqrt_n) + 1):\n        if n % i == 0:\n            # n is divisible by i\n            return None\n\n    # n is not divisible by any odd number less than sqrt(n)\n    return n + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(n):\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    def get_nth_polite_number(n):\n        count = 0\n        polite_number = 1\n        primes = 0\n        while count < n:\n            count += count_primes(polite_number)\n            polite_number += 1\n            primes = count_primes(polite_number)\n        return polite_number - 1\n\n    return get_nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    primes = []\n    sieve = [True] * (int(n**0.5)+1)\n    for i in range(2, int(math.sqrt(n))+1):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    \n    for i in range(n, 1, -1):\n        if sieve[i]:\n            primes.append(i)\n    \n    return primes[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    def next_prime(num):\n        \"\"\"Find the next prime number.\"\"\"\n        if num < 2:\n            return 2\n        for i in range(num, 2 * num - 1, -1):\n            if all(i % j!= 0 for j in range(2, int(math.sqrt(i)) + 1)):\n                return i\n        return num + 2\n\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_polite(num):\n        \"\"\"Find the next polite number.\"\"\"\n        while True:\n            if is_prime(num):\n                return num\n            num = next_prime(num)\n\n    return next_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Initialize a variable to store the polite number\n    polite_num = 1\n    \n    # Loop through each integer between 1 and n\n    for i in range(1, n + 1):\n        \n        # Check if the number is a polite number\n        if math.gcd(i, n) == 1:\n            \n            # Update the polite number\n            polite_num = i\n            \n        # If the number is not a polite number, break the loop\n        else:\n            break\n            \n    # Return the polite number\n    return polite_num"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    n = len(l1)\n    for i in range(n - 1):\n        pairs.append((l1[i], l1[i + 1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Loop through the list and add pairs of consecutive items to the pairs list\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n        \n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and the sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, target_sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # creating an empty list to store the difference\n    diff_list = []\n    # iterating over the first list\n    for item in li1:\n        # checking if the item is present in the second list\n        if item in li2:\n            # if it is, then it is not in the difference list\n            diff_list.append(item)\n        else:\n            # if it is not, then it is in the difference list\n            diff_list.append(item)\n    # returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [item for item in li1 if item not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains all the elements that are in\n    one list but not in the other.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff_list = []\n    # Loop through each element in the first list\n    for element in li1:\n        # Check if the element is also in the second list\n        if element in li2:\n            # If it is, skip to the next iteration of the loop\n            continue\n        # If the element is not in the second list, add it to the difference list\n        diff_list.append(element)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements present in li1 but not in li2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    count = 1\n    while count <= n:\n        sum_of_fourth_powers += count ** 4\n        count += 1\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        sum_of_fourth_powers += i * i * i * i\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    odd_num = 1\n    sum_of_pow = 0\n\n    while odd_num <= n:\n        sum_of_pow += odd_num**4\n        odd_num += 2\n\n    return sum_of_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if (char == ')' and stack[-1] == '(') or \\\n               (char == '}' and stack[-1] == '{') or \\\n               (char == ']' and stack[-1] == '['):\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', ']', '{'] and top_char == '(' or char in [')', ']', '}'] and top_char == '[' or char in [')', ']', '}'] and top_char == '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char in ['(', '{', '[']:\n                if char == stack.pop():\n                    continue\n                else:\n                    return False\n            else:\n                if char == stack.pop():\n                    continue\n                else:\n                    return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function takes a string test_str and an integer K as input and returns a new string with all the words with length K removed from the original string.\n    '''\n    # Convert the string to a list of words\n    words_list = test_str.split()\n    \n    # Create an empty list to store the words without length K\n    new_words_list = []\n    \n    # Loop through each word in the list\n    for word in words_list:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # If it is, add it to the new list\n            new_words_list.append(word)\n    \n    # Join the new list of words with spaces and return it as the output\n    return''.join(new_words_list)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Remove all words with length equal to K\n    test_str =''.join([word for word in test_str.split() if len(word)!= K])\n    # Remove any leading or trailing spaces\n    test_str = test_str.strip()\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    filtered_words = [] # initialize an empty list to store filtered words\n    for word in words:\n        if len(word)!= K: # check if the length of the word is not equal to K\n            filtered_words.append(word) # add the word to the list if it is not of length K\n    return''.join(filtered_words) # join the filtered words back into a string with spaces between them"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    result = re.findall(pattern, text)\n    if result:\n        for match in result:\n            print(f\"Match found: {match} at position {text.find(match)}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        return pattern,text.index(pattern)\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0][0], result[0][1], result[0][2]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches) == 0:\n        return None\n    else:\n        for i in range(len(matches)):\n            print(\"Match\",i+1,\":\",matches[i])\n        return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"Substring '{}' found at index {}\".format(match.group(), match.start()))\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Use re.findall to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there is no match, return None\n    if not matches:\n        return None\n\n    # Iterate through the matches and return the occurrence and position\n    for match in matches:\n        yield match[0], match.start(), match.end()"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            index = text.find(match)\n            print(\"Match found: \", match)\n            print(\"Index: \", index)\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # using regular expressions to find the occurrence of pattern within text\n    match = re.search(pattern, text)\n    \n    # if no match is found, return None\n    if not match:\n        return None\n    \n    # get the position of the match and the substring itself\n    pos = match.start()\n    substring = match.group()\n    \n    # return the tuple containing the position and substring\n    return (pos, substring)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of integers as input and checks whether every odd index contains odd numbers.\n    Returns True if every odd index contains odd numbers and False otherwise.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                count += 1\n    if count == 0:\n        print(\"Every odd index contains odd numbers.\")\n    else:\n        print(\"There are\", count, \"odd indexes that contain odd numbers.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if any(nums[i] % 2!= 0 for j in range(len(nums))):\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(nums[i] % 2!= 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and (nums[i] + i) % 2 == 1:\n            print(f\"The number {nums[i]} at index {i} is an odd number with an even number at the next index.\")\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            for k in range(j+1, len(test_str)+1):\n                if test_str[i] in vowels and test_str[j] in vowels and test_str[k] in vowels:\n                    count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            # Check if first or last character is a vowel\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            # Check if characters have a vowel as their neighbors\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a dictionary to store the count of each element in the list\n    count_dict = {}\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n\n    # finding the sum of non-repeated elements in the list\n    non_repeated_sum = 0\n    for elem in arr:\n        if count_dict[elem] == 1:\n            non_repeated_sum += elem\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # iterate over the frequency dictionary and add up the sum of the keys whose value is 1\n    total = 0\n    for num in freq:\n        if freq[num] == 1:\n            total += num\n\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of non-repeated elements in the list.\n    \"\"\"\n    seen = set()\n    sum_ = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            sum_ += num\n    return sum_"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Traverse through the list\n    for num in arr:\n        # If the element is not in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # Return the sum of the unique elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over the keys of the dictionary and add up the non-repeated elements\n    for key in count_dict:\n        if count_dict[key] == 1:\n            sum += key\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the dictionary and add the non-repeated elements to the sum\n    for key, value in count_dict.items():\n        if value == 1:\n            sum += int(key)\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty set to store unique elements in the list\n    unique_set = set()\n    \n    # loop through the list and add each unique element to the set\n    for num in arr:\n        unique_set.add(num)\n    \n    # convert the set back to a list and calculate the sum of its elements\n    unique_list = list(unique_set)\n    sum_of_unique = sum(unique_list)\n    \n    # return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(sorted(list1)) if key == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a list of sublists where all the consecutive duplicates of a given element are combined into a single sublist.\n\n    For example:\n\n    >>> pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    [[1, 2, 2, 3, 3, 3, 4, 4, 4]]\n\n    >>> pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 6, 6, 7])\n    [[1, 2, 3, 4, 5, 6, 7]]\n    '''\n\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append([next(group)])\n            for elem in group:\n                result[-1].append(elem)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # using groupby function to group consecutive duplicates\n    grouped_list = groupby(list1)\n    result_list = []\n    for key, group in grouped_list:\n        result_list.extend(list(group))\n    return result_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define a function to check if two elements are consecutive duplicates\n    def is_consecutive_duplicates(x, y):\n        return x == y - 1 and x + 1 == y\n    \n    # Group the list elements based on consecutive duplicates\n    grouped_list = groupby(list1, key=is_consecutive_duplicates)\n    \n    # Iterate through the grouped list and pack the consecutive duplicates into sublists\n    sublists = []\n    for key, group in grouped_list:\n        if key: # If the group is not empty\n            sublists.append([key])\n        sublists.append(list(group))\n        \n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a generator object from the given list\n    gen = groupby(enumerate(list1))\n    \n    # convert the generator object into a list of lists\n    result = [list(g) for k, g in gen]\n    \n    # return the result list\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = {}\n\n    # Group consecutive duplicates of the list\n    for key, group in groupby(list1):\n        grouped_list[key] = list(group)\n\n    # Sort the grouped list by the keys\n    sorted_list = sorted(grouped_list.items())\n\n    # Unpack the sorted list and return the result\n    return [sublist for _, sublist in sorted_list]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function packs consecutive duplicates of a list elements into sublists.\n\n    Args:\n    lst (list): List of elements to be packed.\n\n    Returns:\n    list: A list of sublists containing consecutive duplicates of the original list elements.\n\n    Example:\n    >>> pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])\n    [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n    \"\"\"\n    return [list(g) for k, g in groupby(lst)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend([tuple(x) for x in i])\n    list3 = []\n    for i in list2:\n        if i not in list3:\n            list3.append(i)\n    count = {}\n    for i in list3:\n        count[i] = list1.count(i)\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a list of lists.\n    \"\"\"\n    unique_sublists = {}\n    for sublist in lst:\n        if sublist not in unique_sublists:\n            unique_sublists[sublist] = 1\n        else:\n            unique_sublists[sublist] += 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create a dictionary to store the count of lists\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count_dict:\n            # Increment the count of the tuple in the dictionary\n            count_dict[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of lists\n    counts = {}\n    \n    # Loop through each element of the list\n    for element in list1:\n        # If the element is a list, convert it to a tuple and add it to the counts dictionary\n        if isinstance(element, list):\n            counts[tuple(element)] = counts.get(tuple(element), 0) + 1\n    \n    # Return the final dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts the number of unique sublists within the input list.\n    \"\"\"\n    # Create a dictionary to store the unique sublists\n    unique_sublists = {}\n    \n    # Iterate through the input list\n    for sublist in lst:\n        # Check if the sublist is already in the dictionary\n        if sublist in unique_sublists:\n            # If yes, increment the count of occurrences\n            unique_sublists[sublist] += 1\n        # If not, add the sublist to the dictionary with a count of 1\n        else:\n            unique_sublists[sublist] = 1\n    \n    # Return the dictionary of unique sublists\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the count of each sublist\n    count = {}\n    \n    # Loop through each element in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in count:\n            # Increment the count for the tuple\n            count[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count[tuple(sublist)] = 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, convert it to a tuple and add it to the counts dictionary\n        if isinstance(element, list):\n            element = tuple(element)\n            if element in counts:\n                counts[element] += 1\n            else:\n                counts[element] = 1\n    # return the counts dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through each list in the input list\n    for item in list1:\n        # Convert the list to a tuple and check if it's already in the result dictionary\n        if tuple(item) in result:\n            # If it's already in the result dictionary, increment the value by 1\n            result[tuple(item)] += 1\n        else:\n            # If it's not in the dictionary, add it with a value of 1\n            result[tuple(item)] = 1\n    \n    # Return the result dictionary\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        else:\n            count_dict[sublist_tuple] += 1\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples to store the tuples in the test list\n    test_set = set(test_list)\n\n    # Initialize an empty list to store the combinations of sums with tuples\n    combinations_list = []\n\n    # Iterate through all possible pairs of tuples in the test set\n    for i in range(len(test_set)):\n        for j in range(i+1, len(test_set)):\n            # Calculate the sum of the current pair of tuples\n            current_sum = sum(test_set[i] + test_set[j])\n\n            # Check if the current sum is present in the test set\n            if current_sum in test_set:\n                # Append the current combination of tuples to the list of combinations\n                combinations_list.append((test_set[i], test_set[j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Convert the test_list to set to remove duplicates\n    test_list = set(test_list)\n    # Find all combinations of tuples from test_list\n    comb = combinations(test_list, len(test_list[0]))\n    # Filter out combinations with duplicate sums\n    filtered_comb = set()\n    for comb_tup in comb:\n        if sum(comb_tup) not in filtered_comb:\n            filtered_comb.add(sum(comb_tup))\n    # Convert the filtered_comb to list and return it\n    return list(filtered_comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Find the sum of each tuple in the list\n    sum_list = [sum(t) for t in test_list]\n\n    # Find the unique sums in the list\n    unique_sums = set(sum_list)\n\n    # Find the combinations of sums with tuples in the list\n    combinations_list = [list(c) for c in combinations(unique_sums, r=2) if sum(c) == 0]\n\n    # Print the combinations\n    for combination in combinations_list:\n        print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            current_sum = sum(test_list[i]) + sum(test_list[j])\n            if current_sum in test_list[i] and current_sum in test_list[j]:\n                print(tuple(sorted((test_list[i], test_list[j]))))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1,len(test_list)+1):\n        for comb in combinations(test_list,i):\n            if sum(comb) == 0:\n                combinations_list.append(comb)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            sum1 = sum(test_list[i])\n            sum2 = sum(test_list[j])\n            if sum1 == sum2:\n                print(\"Combination of tuples:\", tuple(sorted(test_list[i] + test_list[j])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_combinations_helper(candidates, target, cur_sum, res, index, temp_list):\n        if cur_sum == target:\n            res.append(tuple(temp_list))\n            return\n        if cur_sum > target:\n            return\n        for i in range(index, len(candidates)):\n            temp_list.append(candidates[i])\n            find_combinations_helper(candidates, target, cur_sum + candidates[i], res, i, temp_list)\n            temp_list.pop()\n\n    def find_combinations_helper_with_repeats(candidates, target, cur_sum, res, index, temp_list):\n        if cur_sum == target:\n            res.append(tuple(temp_list))\n            return\n        if cur_sum > target:\n            return\n        for i in range(index, len(candidates)):\n            for j in range(i+1, len(candidates)):\n                temp_list.append(candidates[i])\n                temp_list.append(candidates[j])\n                find_combinations_helper_with_repeats(candidates, target, cur_sum + candidates[i] + candidates[j], res, i+1, temp_list)\n                temp_list.pop()\n                temp_list.pop()\n\n    candidates = sorted(set([tuple(x) for x in test_list]))\n    target = sum(candidates)\n\n    if len(candidates) == 0:\n        return []\n    elif len(candidates) == 1:\n        return [[candidates[0]]]\n\n    res = []\n    find_combinations_helper(candidates, target, 0, res, 0, [])\n    find_combinations_helper_with_repeats(candidates, target, 0, res, 0, [])\n\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a function to check if a given tuple list contains duplicates\n    def contains_duplicates(lst):\n        return len(lst)!= len(set(lst))\n    \n    # Check if the given tuple list contains duplicates\n    if contains_duplicates(test_list):\n        print(\"The given tuple list contains duplicates. Combinations cannot be found.\")\n        return\n    \n    # Define a function to calculate the sum of a given tuple\n    def tuple_sum(t):\n        return sum(t)\n    \n    # Define a function to find all possible combinations of sums with tuples in the given tuple list\n    def find_combinations_of_sums(lst):\n        result = []\n        for i in range(1, len(lst)+1):\n            for combo in combinations(lst, i):\n                if tuple_sum(combo) == 0:\n                    result.append(combo)\n        return result\n    \n    # Call the find_combinations_of_sums function to get the combinations of sums with tuples in the given tuple list\n    result = find_combinations_of_sums(test_list)\n    \n    # Print the combinations of sums with tuples in the given tuple list\n    print(\"The combinations of sums with tuples in the given tuple list are:\")\n    for combo in result:\n        print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(1, n+1):\n        for j in range(i):\n            if sum(test_list[j]) == sum(test_list[i]) and sorted(test_list[j])!= sorted(test_list[i]):\n                result.append(tuple(sorted(test_list[j])))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                combination = tuple(sorted(test_list[i]+test_list[j]+test_list[k]))\n                if combination not in result:\n                    result.append(combination)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n\n    # Calculate the number of divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n // i:\n                divisors.append(i)\n                divisors.append(n // i)\n    divisors.append(n)\n    divisors = list(set(divisors))\n\n    # Calculate the count of even divisors\n    count = 0\n    for i in divisors:\n        if i % 2 == 0:\n            count += 1\n\n    # Check whether the count of even divisors is even or odd\n    if count % 2 == 0:\n        print(f\"{n} has an even number of divisors.\")\n    else:\n        print(f\"{n} has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def get_divisors(n):\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n//i:\n                    divisors.append(n//i)\n        return divisors\n\n    divisors = get_divisors(n)\n    count = len(divisors)\n    even_count = 0\n\n    for divisor in divisors:\n        if count % divisor == 0:\n            even_count += 1\n\n    if even_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the count of divisors is even, False otherwise.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n            if divisor_count > 2:\n                return False\n    return divisor_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the sum of all numbers from 1 to n\n    total = (n * (n + 1)) // 2\n    \n    # calculate the count of divisors of n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    # check if the count of divisors is even\n    if count % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    def count_divisors_helper(num):\n        '''\n        Helper function to count the number of divisors of a given number.\n        '''\n        count = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                count += 1\n        if num > 1:\n            count += 1\n        return count\n    \n    count_divisors_result = count_divisors_helper(n)\n    \n    if count_divisors_result % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 2 \n    if n > 1: \n        if n % 2 == 0: \n            count += 1 \n    return count "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    count = 0\n    i = 1\n    divisor = 1\n    \n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    \n    if count % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            count += 1\n    if n > 1: \n        count += 1\n    if count % 2 == 0: \n        return True\n    else: \n        return False "
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sub_arr = arr[i:j+1]\n                total_sum += sum(sub_arr)\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    prefix_sum = [0] * (2 * n + 1)\n    prefix_sum[0] = arr[0]\n\n    for i in range(1, 2 * n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    odd_length_sum = 0\n    for i in range(n - 1):\n        left_sum = prefix_sum[i] + prefix_sum[i + 1]\n        right_sum = prefix_sum[2 * n - 1] - prefix_sum[i] - prefix_sum[i + 1]\n        odd_length_sum += max(left_sum, right_sum)\n\n    return odd_length_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j - i + 1 % 2!= 0:\n                sub_arr = arr[i:j+1]\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i == 1:\n                sum_odd += arr[i]+arr[j]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                total_sum += arr[j] - arr[i]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all subarrays of odd length\n    sum_odd = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # Initialize a variable to store the sum of the current subarray\n        subarray_sum = 0\n        # Loop through the array from the current index to the end\n        for j in range(i, len(arr)):\n            # Check if the current subarray has an odd length\n            if (j - i + 1) % 2!= 0:\n                # Add the current element to the sum\n                subarray_sum += arr[j]\n        # Add the current subarray sum to the sum of all subarrays of odd length\n        sum_odd += subarray_sum\n    # Return the sum of all subarrays of odd length\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            if j == n:\n                sum += arr[j-1]\n            else:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        left = 0\n        right = i\n        \n        while left < right:\n            total = 0\n            while left < right and right < n and (right-left+1) % 2 == 1:\n                total += arr[right]\n                right += 1\n            result += total\n            left = right\n    \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Compute the sum of all odd-length subarrays in an array.\n    \"\"\"\n    # Initialize the sum of odd-length subarrays to 0\n    odd_sum = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is odd, add its value to the sum of odd-length subarrays\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    # Return the sum of odd-length subarrays\n    return odd_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \n    Parameters:\n    -----------\n    r : int\n        Red value between 0 and 255\n    g : int\n        Green value between 0 and 255\n    b : int\n        Blue value between 0 and 255\n    \n    Returns:\n    --------\n    h : float\n        Hue value between 0 and 360\n    s : float\n        Saturation value between 0 and 1\n    v : float\n        Value value between 0 and 1\n    \n    \"\"\"\n\n    # Convert RGB to RGBX color space\n    rgbx = [r, g, b, 1]\n    # Convert RGBX to XYZ color space\n    xyz = [[0.412453, 0.357580, 0.180423],\n           [0.212671, 0.715160, 0.072169],\n           [0.019334, 0.119193, 0.950227]]\n    for i in range(3):\n        for j in range(3):\n            xyz[i][j] /= 255.0\n    xyz = [xyz[i][j] for i in range(3) for j in range(3)]\n    xyz = [c**0.416667 for c in xyz]\n    # Convert XYZ to LAB color space\n    lab = [[0.000000, 0.015560, 0.716850],\n           [0.000000, -0.204028, 0.457060],\n           [0.000000, -0.096891, 0.038350]]\n    for i in range(3):\n        for j in range(3):\n            lab[i][j] = xyz[i][j] * (lab[i][j+1] + 16) / 116.0\n    # Convert LAB to LCH color space\n    lch = [[0.000000, 0.000000, 0.000000],\n           [0.000000, 0.000000, 0.000000],\n           [0.000000, 0.000000, 0.000000]]\n    for i in range(3):\n        for j in range(3):\n            lch[i][j] = lab[i][j] + 16\n            if lch[i][j] > 0:\n                lch[i][j] /= 360.0\n            lch[i][j] = lch[i][j] * 360.0\n    # Convert LCH to HSV\n    h = 0\n    s = 0\n    v = 0\n    for i in range(3):\n        for j in range(3):\n            if lch[i][j] < 60.0:\n                h += lch[i][j] * 60.0\n            else:\n                h += (lch[i][j] - 60.0) * 60.0\n            if lch[i][j] > 60.0:\n                h -= 360.0\n    h /= 240.0\n    s = (max(lch[0][1], lch[1][1], lch[2][1]) - min(lch[0][1], lch[1][1], lch[2][1])) / max(lch[0][1], lch[1][1], lch[2][1])\n    if lch[0][1] == max(lch[0][1], lch[1][1], lch[2][1]):\n        v = lch[0][2] - lch[1][2] / 60.0\n    elif lch[1][1] == max(lch[0][1], lch[1][1], lch[2][1]):\n        v = lch[1][2] - lch[2][2] / 60.0 + 1.0\n    else:\n        v = l"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert the input rgb value to float values.\n    r, g, b = float(r), float(g), float(b)\n\n    # Find the maximum value among r, g, and b.\n    max_val = max(r, g, b)\n\n    # Find the minimum value among r, g, and b.\n    min_val = min(r, g, b)\n\n    # Calculate the value difference between the maximum and minimum values.\n    delta = max_val - min_val\n\n    # Calculate the saturation value. If delta is 0, the saturation value is 0.\n    if delta == 0:\n        h = 0\n    else:\n        h = (max_val - r) / delta\n\n    # Calculate the value of the hue.\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # If h < 0, the hue is converted from 6 to 0.\n    if h < 0:\n        h += 6\n\n    # Calculate the value of the saturation.\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Calculate the value of the value.\n    v = max_val\n\n    # Convert the calculated values to the output hsv values.\n    hsv = [int(h * 65536), int(s * 65536), int(v * 65536)]\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        h = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        h = 60 * ((r - g) / (max_val - min_val)) + 240\n    \n    if max_val == 0:\n        s = 0\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n    \n    h = int(h)\n    s = round(s * 255, 2)\n    v = round(v * 255, 2)\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    del_c = cmax - cmin\n    if cmax == 0:\n        h = 0\n        s = 0\n    else:\n        h = del_c/(cmax + cmin)\n        if r == cmax:\n            s = del_c/(cmax - cmin)\n        elif g == cmax:\n            s = del_c/(cmax - cmin) + h*(1/3)\n        else:\n            s = del_c/(cmax - cmin) - h*(1/3)\n        if s > 1:\n            s = 1\n        if s < 0:\n            s = 0\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert r, g, and b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    # calculate the max and min values for r, g, and b\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    # calculate the delta value between max and min values\n    delta = max_value - min_value\n    # calculate the hue value by finding the angle between the r, g, and b values and the x-axis (360 degrees)\n    if max_value == r:\n        hue = ((g-b)/delta) % 6\n    elif max_value == g:\n        hue = (b-r)/delta + 2\n    else:\n        hue = (r-g)/delta + 4\n    # calculate the saturation and value\n    if delta == 0:\n        saturation = 0\n        value = max_value\n    else:\n        saturation = delta/max_value\n        value = max_value\n    # convert the hue value to degrees and return as a tuple\n    hue = round(hue*60)\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an rgb color to hsv color.\n    \"\"\"\n    # Convert r, g, b to floats\n    r, g, b = map(float, (r, g, b))\n\n    # Calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate hue, saturation, and value\n    if max_val == min_val:\n        # achromatic color\n        h = s = v = 0\n    else:\n        if max_val == r:\n            h = (g - b) / diff\n        elif max_val == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n\n        h = round(h * 60)\n        if h < 0:\n            h += 360\n\n        s = round(diff / max_val)\n\n        if max_val == 0:\n            v = 0\n        else:\n            v = round(max_val)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts RGB color to HSV color.\n    The color values should be in the range of 0 to 255.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Convert to RGB to HSV\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    if h < 0:\n        h += 6\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n        \n    v = max_val\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert R, G, and B values to float\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Convert R, G, and B values to Hue and Saturation\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    hue = 0\n    saturation = 0\n    \n    if max_val == min_val:\n        saturation = 0\n    else:\n        if r == max_val:\n            hue = (g - b) / (max_val - min_val)\n        elif g == max_val:\n            hue = 2 + (b - r) / (max_val - min_val)\n        elif b == max_val:\n            hue = 4 + (r - g) / (max_val - min_val)\n        \n        hue = hue / 6\n        \n        if hue < 0:\n            hue += 1\n            \n        saturation = (max_val - min_val) / max_val\n        \n    # Convert Hue and Saturation to H, S, and V values\n    h = hue * 360\n    s = saturation * 100\n    v = max_val * 100\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    \n    # Calculate the maximum and minimum values for R, G, and B\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Calculate the chroma value\n    if max_value == min_value:\n        chroma = 0\n    else:\n        chroma = max_value - min_value\n    \n    # Calculate the hue value\n    if max_value == r:\n        hue = ((g - b) / chroma) % 6\n    elif max_value == g:\n        hue = ((b - r) / chroma) + 2\n    else:\n        hue = ((r - g) / chroma) + 4\n    \n    # Calculate the saturation value\n    if chroma == 0:\n        saturation = 0\n    else:\n        saturation = chroma / max_value\n    \n    # Calculate the value (brightness)\n    value = max_value\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0  # Normalize the values to [0, 1]\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0  # achromatic case\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6 if h < 0 else h / 6  # convert to [0, 1]\n\n        if h < 0:\n            h += 1  # handle negative hues\n\n    if max_val == 0:\n        s = 0  # achromatic case\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    if even_sum == 0:\n        return 0\n    elif odd_sum == 0:\n        return 0\n    else:\n        return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    Find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= list1[0]\n            break\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0:\n        if odd_count == 0:\n            return 1\n        else:\n            return odd_count\n    else:\n        return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return even_sum * odd_sum\n    else:\n        return -1"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    product = even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += num\n        else:\n            count += 2*num\n    return count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    tup_str = test_str.split(',')\n    # Convert each string element to integer and append to a list\n    tup_int = [int(x.strip()) for x in tup_str]\n    # Return the final tuple\n    return tuple(tup_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a list of tuples containing strings and integers\n    tuples_list = [('apple', 1), ('banana', 2), ('cherry', 3), ('grape', 4)]\n\n    # Convert the string to a tuple\n    test_tuple = tuple(test_str)\n\n    # Iterate through the tuples list and check if the string matches any of them\n    for tup in tuples_list:\n        if test_tuple == tup[0]:\n            return tup[1]\n\n    # If the string doesn't match any of the tuples, return -1\n    return -1"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '').replace(')', '').replace(',','').replace(' ', '').split()\n    return tuple(int(i) for i in test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string at the commas and convert each element to integer\n    int_tuple = tuple(int(x) for x in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma and space\n    tuples_str = test_str.split(', ')\n    # Create an empty list to store the converted tuples\n    converted_tuples = []\n    # Loop through each tuple string and convert it to tuple\n    for tuple_str in tuples_str:\n        # Split the tuple string by comma\n        sub_tuples = tuple_str.split(', ')\n        # Convert each sub-tuple to integer\n        converted_sub_tuples = []\n        for sub_tuple in sub_tuples:\n            # Convert the sub-tuple to integer and append to the list\n            converted_sub_tuples.append(int(sub_tuple))\n        # Convert the sub-tuple list to tuple and append to the list\n        converted_tuples.append(tuple(converted_sub_tuples))\n    # Return the converted tuple list\n    return converted_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(x) for x in test_str.split(',')])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string into a tuple\n    t_str = test_str.split(',')\n    \n    # Converting the tuple elements to integers\n    for i in range(len(t_str)):\n        try:\n            t_str[i] = int(t_str[i])\n        except ValueError:\n            return 'Invalid input string. Please provide a valid tuple string.'\n            \n    return tuple(t_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by commas\n    split_str = test_str.split(',')\n    # Create a list of integers\n    int_list = []\n    # Loop through the elements of the split string\n    for elem in split_str:\n        # Try to convert the element to an integer\n        try:\n            int_list.append(int(elem))\n        except ValueError:\n            # If the conversion fails, add the element to the list as a string\n            int_list.append(elem)\n    # Return the resulting integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # convert string to list of strings\n    test_list = list(test_str.split(','))\n\n    # convert each element of the list to integer\n    int_list = [int(i) for i in test_list]\n\n    # convert integer list to tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(i) for i in test_str.split(','))\n    except ValueError:\n        return \"Invalid input\""
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the index of the rightmost element greater than or equal to x\n    index = bisect.bisect_right(a, x)\n    # If the element is greater than the largest element, it will be inserted at the end of the list\n    if index == len(a) or a[index]!= x:\n        return index\n    # Otherwise, it will be inserted at the rightmost element that is greater than or equal to x\n    while index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i += 1  # insert x as a new element\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?:b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a[b]{3}'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}b\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.b{3,}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w*b{3}\\w*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.+b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The pattern '{pattern}' matches the text '{text}' at index {match.start()}\")\n    else:\n        print(f\"The pattern '{pattern}' does not match the text '{text}'\")"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and the string into a single string\n    combined_str = test_str + \" \".join(map(str, test_list))\n    \n    # convert the concatenated string into a tuple\n    new_tuple = tuple(combined_str.split())\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string into a new string\n    combined_str = test_str + \"\".join(test_list)\n    \n    # Split the new string into a list of characters\n    char_list = list(combined_str)\n    \n    # Convert the list of characters into a tuple\n    new_tuple = tuple(char_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str.split()) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    :param test_list: A list.\n    :param test_str: A string.\n    :return: A new tuple with the elements of the original list and the given string.\n    \"\"\"\n\n    # Concatenate the list and string into a single string\n    new_str = str(test_list) + test_str\n\n    # Convert the concatenated string into a list\n    new_list = list(new_str)\n\n    # Convert the list into a tuple\n    new_tuple = tuple(new_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + (test_str,))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists\n    combined_list = test_list + [test_str]\n    # convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string\n    new_tuple_str = test_list + ',' + test_str\n    # Split the concatenated string into a list of strings\n    new_tuple_list = new_tuple_str.split(',')\n    # Convert the list of strings to a tuple\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and checks whether every even index contains\n    even numbers. If yes, it returns True, otherwise, it returns False.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 0:\n                break\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = [i for i in range(len(nums)) if i % 2 == 0]\n    for index in even_indices:\n        count = 0\n        for num in nums[index:]:\n            count += 1\n            if num % 2!= 0:\n                break\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([n for n in nums[i:] if n % 2 == 0]) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if not all(num % 2 == 0 for num in nums[i:i+2]):\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n                if count == 0:\n                    break\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[j] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = [elem for elem in test_tup if isinstance(elem, tuple)]\n    for item in nested_list:\n        test_tup.remove(item)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_tup.extend(remove_nested(item))\n        else:\n            result_tup.append(item)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    nested_tuple = []\n    for element in test_tup:\n        if type(element) == tuple:\n            nested_tuple += remove_nested(element)\n        else:\n            nested_tuple.append(element)\n    return nested_tuple"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = []\n    for tup in test_tup:\n        if type(tup) == tuple:\n            nested_tup += remove_nested(tup)\n        else:\n            nested_tup.append(tup)\n    return nested_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return [elem for elem in test_tup if not isinstance(elem, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the tuple has tuples within it\n    if isinstance(test_tup, tuple):\n        # check if the tuple contains at least one other tuple\n        if any(isinstance(i, tuple) for i in test_tup):\n            # recursively call the function on each tuple within the original tuple\n            return tuple(remove_nested(i) for i in test_tup)\n        else:\n            # if the tuple does not contain any other tuples, return the tuple itself\n            return tuple(i for i in test_tup if not isinstance(i, tuple))\n    else:\n        # if the original tuple is not a tuple, just return it\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup.extend(remove_nested(i))\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(remove_nested(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if type(sublist) is list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # while the left pointer is less than the right pointer\n    while left < right:\n        # calculate the middle index of the current sub-array\n        mid = (left + right) // 2\n\n        # if the middle element is equal to x, return the middle index\n        if arr[mid] == x:\n            return mid\n\n        # if the middle element is greater than x, set the left pointer to mid+1\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # if the middle element is less than x, set the right pointer to mid-1\n        else:\n            right = mid - 1\n\n    # if the while loop completes without finding the last occurrence of x, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            left = mid\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left < len(arr) and arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Given a sorted array `arr` and an element `x`, returns the index of the last occurrence of `x` in `arr`.\n\n    If `x` is not found in `arr`, the function should return `-1`.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments, the sorted array and the element to find the last position of.\n    It returns the last position of the element in the sorted array if it exists, otherwise it returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n\n    Input:\n    arr: List of sorted elements\n    x: Element to search for in the array\n\n    Output:\n    last_position: The last position of the element in the array\n\n    '''\n\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the search element\n        if arr[i] == x:\n            # Update the last position\n            last_position = i\n\n    # Return the last position\n    return last_position\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return None\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: the sorted array and the element to be searched for.\n    The function returns the last position of the element in the array, or -1 if the element is not found.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i >= 0:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1 # element is not present in the array"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    :param arr: the sorted array\n    :type arr: list\n    :param x: the element to search for\n    :type x: any\n    :return: the last position of the element, or -1 if it's not found\n    :rtype: int\n    \"\"\"\n    # Search for the last occurrence of the element\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]+b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments:\n    l: Lower limit of the range\n    r: Upper limit of the range\n\n    This function returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum_odd_nums = 0\n\n    # Loop through the range l to r\n    for i in range(l, r+1):\n\n        # Check if i is odd\n        if i % 2!= 0:\n\n            # Add i to the sum_odd_nums\n            sum_odd_nums += i\n\n    # Return the sum_odd_nums\n    return sum_odd_nums"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Compute the sum of all odd natural numbers within the range l to r.\n\n    Args:\n    - l (int): lower bound of the range\n    - r (int): upper bound of the range (r >= l)\n\n    Returns:\n    - int: sum of all odd natural numbers within the range l to r\n    \"\"\"\n    if l < 1 or r < 1 or r < l:\n        raise ValueError(\"Invalid range: l must be greater than 0 and r must be greater than or equal to l\")\n\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input from the user for the range\n    l = int(input(\"Enter lower range: \"))\n    r = int(input(\"Enter upper range: \"))\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through the range\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # if odd, add it to the sum\n            sum += i\n\n    # print the sum\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # initializing variables\n    sum_odd = 0  # to store the sum of all odd natural numbers\n\n    # iterating from 1 to n\n    for i in range(1, n + 1):\n\n        # checking if i is odd\n        if i % 2!= 0:  # if i is odd\n            sum_odd += i  # adding i to sum_odd\n\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    return sum(x for x in range(1, n+1, 2) if x % 2!= 0)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!=0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Loop through all odd numbers between 1 and n\n    for i in range(1, n+1, 2): \n        sum += i\n\n    # Return the sum of all odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the range of natural numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the sum\n            sum += i\n\n    # return the sum of all odd numbers within the range\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    # initialize the sum variable with the first element of the array\n    sum = arr[0]\n\n    # loop through the array and add each element to the sum\n    for i in range(1, len(arr)):\n        sum += arr[i]\n\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr: #if array is empty\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:]) #add first element of array and recursive call to find sum of remaining elements of array"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each element in the array\n    for i in range(len(arr)):\n        # add the element to the sum variable\n        sum += arr[i]\n    # return the sum of the array\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize a variable to hold the sum\n    total = 0\n    # Loop through each element in the array\n    for num in arr:\n        # Add the number to the total\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d >= 32:\n        return n\n    elif d == 0:\n        return n\n    else:\n        mask = (1 << d) - 1\n        return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the least significant d bits of n\n    mask = (1 << d) - 1\n    result = (n & mask) << d | n >> (32 - d)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xFFFFFFFF  # mask off any extra bits\n    d %= 32  # ensure d is within the range of 0 to 31\n    result = (n << d) | (n >> (32 - d))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n & 0xFFFFFFFF   # mask off extra bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Initialize the carry variable\n    carry = 0\n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # Set the current bit to the carry variable\n        current_bit = carry\n        # Shift the carry to the left by one bit\n        carry = 0 if bit == '0' else 1\n        # Shift the current bit to the right by d bits\n        n = (int(bit) << d) | (int(n) >> (32 - d))\n        # Shift the current bit to the left by one bit\n        n = n << 1\n        # Add the current bit to the carry variable\n        n = n | current_bit\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary representation\n    n_bin = bin(n)[2:]\n    # Pad with 0s to make d number of bits\n    d_bin = bin(d)[2:].zfill(32)[-d:]\n    # Add the d bits to the left of n\n    rotated_bin = d_bin + n_bin\n    # Convert the binary representation back to decimal\n    rotated = int(rotated_bin, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    shift = 32 - d\n    return ((n << shift) | (n >> shift)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a 32-bit unsigned integer\n    n = n & 0xFFFFFFFF  # Mask off any negative bits\n\n    # Shift the bits left by d bits\n    n = (n << d) | (n >> (32 - d))\n\n    # Return the rotated bits\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with an empty string\n    text = re.sub(r'\\s+', '', text)\n    \n    # Return the cleaned string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s\\t\\n\\r]+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespace characters with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(10):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "Here is the Python script for the problem:"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Sort the given list using merge sort algorithm\n    arr = merge_sort(arr)\n    # Count the number of rotations required\n    count = 0\n    i, j = 0, n - 1\n    while i <= j:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            j -= 1\n            count += 1\n    return count\n\ndef merge_sort(arr):\n    \"\"\"\n    Merge sort algorithm to sort the given list.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    \"\"\"\n    Merge two sorted lists.\n    \"\"\"\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    i = 0\n    j = n-1\n\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n\n    return j - i"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    # Calculate the average of the first and last elements of the array\n    average = (arr[0] + arr[-1]) / 2\n    \n    # Initialize the count of rotations\n    count = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is greater than the average, it means the array is sorted\n        if arr[i] > average:\n            break\n        \n        # If the element is less than or equal to the average, it means the array is not sorted\n        else:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # If the array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n\n    # If the array is already sorted in reverse order, return 0 rotations\n    if sorted(arr, reverse=True) == arr:\n        return 0\n\n    # Find the maximum element in the array\n    max_element = arr[0]\n\n    # Traverse the array from right to left\n    for i in range(n-1, -1, -1):\n\n        # If the current element is greater than the maximum element, swap them and update the maximum element\n        if arr[i] > max_element:\n            max_element, arr[i] = arr[i], max_element\n\n            # Check if the maximum element has been swapped to its correct position in the array\n            if arr[i] == max_element:\n                count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # if the array is already sorted, no rotation required\n    if arr == sorted(arr):\n        return 0\n\n    # count number of inversions\n    def count_inversions(arr, low, high):\n        if low >= high:\n            return 0\n        mid = (low + high) // 2\n        inv1 = count_inversions(arr, low, mid)\n        inv2 = count_inversions(arr, mid + 1, high)\n        inv3 = merge_sort(arr, low, mid, high)\n        return inv1 + inv2 + inv3\n\n    def merge_sort(arr, low, mid, high):\n        inv_count = 0\n        i = low\n        j = mid + 1\n        k = low\n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= high:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n        return inv_count\n\n    return count_inversions(arr, 0, n - 1)\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # Find the pivot element\n    pivot = arr[n//2]\n    # Initialize the count of rotations\n    count = 0\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is greater than the pivot, swap it with the pivot\n        if arr[i] > pivot:\n            arr[i], arr[n//2] = arr[n//2], arr[i]\n            # Increment the count of rotations\n            count += 1\n        # If the current element is less than or equal to the pivot, break out of the loop\n        if arr[i] <= pivot:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Check if array is already sorted\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 0\n    # Initialize count of rotations to 0\n    count = 0\n    # Initialize left and right pointers\n    left, right = 0, n-1\n    # Traverse the array from left to right\n    while left < right:\n        # If the left element is greater than the right element, swap them\n        if arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            # Increment count of rotations and decrement left and right pointers\n            count += 1\n            left += 1\n            right -= 1\n        # If the left element is less than or equal to the right element, increment both pointers\n        else:\n            left += 1\n            right -= 1\n    # Check if the left element is greater than the right element\n    if arr[left] > arr[right]:\n        # Swap the left element with the right element\n        arr[left], arr[right] = arr[right], arr[left]\n        # Increment count of rotations and decrement left and right pointers\n        count += 1\n        left += 1\n        right -= 1\n    # Return count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n\n    # Count the number of inversions required to sort the array\n    inversions = 0\n    for i in range(n - 1):\n        inversions += max(0, i) + min(i + 1, n - 1)\n\n    return inversions // 2"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        sqrt_n = int(n ** 0.5)\n        return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n ** 0.5\n    return root == int(root)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False\n    \n    x = n\n    y = n * n\n    \n    while x!= y:\n        x = (x + y) // 2\n        y = n * x * x\n    \n    if x * x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, else False.\n    A perfect square is a square number that is equal to the square root of the given number.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 4 == 3:\n        return is_perfect_square(n-1)\n    else:\n        root = int(n ** 0.5)\n        return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Taking square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # Checking if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to check whether a number is a perfect square or not\n    def check_square(num):\n        # Convert the given number to integer\n        num = int(num)\n        # Calculate the square root of the number using the math module\n        root = math.sqrt(num)\n        # Convert the square root to an integer\n        root = int(root)\n        # Check whether the square root is equal to the original number\n        if root * root == num:\n            return True\n        else:\n            return False\n    \n    # Check if the given number is a perfect square or not\n    if check_square(n):\n        print(f\"{n} is a perfect square\")\n    else:\n        print(f\"{n} is not a perfect square\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is negative or zero\n    if n < 0 or n == 0:\n        return False\n\n    # square root of the number\n    root = int(n**0.5)\n\n    # check if the square of the root is equal to the number\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    :param n: An integer to check whether it is a perfect square or not.\n    :return: True if `n` is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    square = 0\n    temp = n\n    while temp > 1:\n        square = square * 10\n        temp = temp - 1\n    if square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    root = int(n ** 0.5)\n    return root * root == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Finding the product of all elements in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Checking if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the sum of all elements in all lists\n    total_sum = sum(sum(sublist) for sublist in lists)\n    \n    # Initialize a dictionary to store the maximum sum for each sublist\n    max_sums = {}\n    \n    # Loop through each sublist in the lists\n    for sublist in lists:\n        # Calculate the sum of all elements in the sublist\n        sublist_sum = sum(sublist)\n        \n        # If the current sublist sum is greater than the maximum sum for the corresponding sublist, update the maximum sum\n        if sublist_sum > max_sums.get(sublist, float('-inf')):\n            max_sums[sublist] = sublist_sum\n    \n    # Find the sublist with the maximum sum\n    max_sublist = max(max_sums, key=lambda sublist: max_sums[sublist])\n    \n    # Return the sublist with the maximum sum as a list of lists\n    return [[element for sublist in lists for element in sublist if element == sublist_sum]]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize max_sum to the first element of the first list\n    max_sum = lists[0][0]\n    \n    # loop through the lists of lists\n    for lst in lists:\n        # loop through the elements of each list\n        for num in lst:\n            # add the current element to the max_sum\n            max_sum += num\n            \n            # if the sum of all elements is greater than the current max_sum, update max_sum\n            if max_sum > max_sum_in_lists:\n                max_sum_in_lists = max_sum\n    \n    # create a list of lists with the maximum sum\n    max_sum_list = [lst for lst in lists if lst.sum() == max_sum_in_lists]\n    \n    # return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum to the first element of the first list in the list of lists\n    max_sum = lists[0][0]\n\n    # Loop through each sub-list in the list of lists\n    for sub_list in lists:\n        # Initialize current_sum to 0\n        current_sum = 0\n\n        # Loop through each element in the sub-list and add it to current_sum\n        for element in sub_list:\n            current_sum += element\n\n        # If current_sum is greater than max_sum, update max_sum to current_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the list in the list of lists with the highest sum\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            result = i\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n\n    # Initialize the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n\n    # Loop through each list in the list of lists\n    for i, lst in enumerate(lists):\n        # Initialize the sum and the current list with the first element of the list\n        current_sum = lst[0]\n        current_list = [lst[0]]\n\n        # Loop through the remaining elements of the list\n        for j in range(1, len(lst)):\n            # Add the current element to the current sum and to the current list\n            current_sum += lst[j]\n            current_list.append(lst[j])\n\n            # If the current sum is greater than the maximum sum, update the maximum sum and the list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = current_list\n\n    # Return the maximum sum and the list with the maximum sum\n    return max_sum, max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = -1\n    max_list = []\n\n    # Loop through each sublist in the list of lists\n    for sublist in lists:\n        # Initialize variables\n        curr_sum = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the current element to the sum\n            curr_sum += element\n\n        # If the current sum is greater than the max sum, update the max sum and max list\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = sublist\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the max_sum variable with the first element in the first list\n    max_sum = lists[0][0]\n    # Loop through the lists\n    for i in range(len(lists)):\n        # Loop through the lists in the inner list\n        for j in range(len(lists[i])):\n            # Add the current element to the max_sum\n            max_sum = max(max_sum, lists[i][j])\n    # Return the list in a list of lists whose sum of elements is the highest\n    return [lists[i] for i in range(len(lists)) if sum(lists[i]) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in lists:\n        total = 0\n        for j in i:\n            total += j\n        if total > max_sum:\n            max_sum = total\n            max_list = i\n    \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            uppercase = False\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    prev_char = ''\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            if prev_char.isupper():\n                max_run = curr_run\n            curr_run = 0\n        prev_char = char\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                max_run = max(max_run, i-start+1)\n                start = i+1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run = 0\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the run\n        if test_str[i].isupper():\n            run += 1\n        # If the current character is not uppercase or the end of the string is reached, reset the run\n        else:\n            if run > max_run:\n                max_run = run\n            run = 0\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    # iterate over the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            current_run = i - current_run\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            uppercase_count = 0\n        current_run += 1\n    if uppercase_count > max_run:\n        max_run = uppercase_count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables to keep track of the current run of uppercase characters\n    max_run = 0\n    run = 0\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is uppercase, increase the run count\n        if char.isupper():\n            run += 1\n        # if the run count is greater than the current maximum run, update the maximum run\n        elif run > max_run:\n            max_run = run\n        # if the character is lowercase or if the run count is zero, reset the run count\n        else:\n            run = 0\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            upper_count += 1\n        else:\n            current_run = max(current_run, upper_count)\n            upper_count = 0\n            \n    return max(current_run, upper_count)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the character is uppercase and the previous character was lowercase, update the current run length\n        if (test_str[i].isupper() and not test_str[i-1].isupper()) and current_run > max_run:\n            max_run = current_run\n        \n        # If the character is not uppercase, reset the current run length\n        elif not test_str[i].isupper():\n            current_run = 0\n    \n    # Return the maximum run length\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    Parameters:\n    test_str (str): The input string.\n\n    Returns:\n    int: The maximum run of uppercase characters in the input string.\n    \"\"\"\n\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n\n    # Initialize variables to keep track of the maximum run and the current run\n    max_run = 0\n    current_run = 0\n\n    # Iterate over the string, starting from the second character\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase, increment the current run\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            current_run += 1\n        # If the current character is not uppercase, reset the current run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # If the last character was uppercase, add it to the current run\n    if test_str[-1] >= 'A' and test_str[-1] <= 'Z':\n        current_run += 1\n\n    # If the current run is greater than the maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    :param nums: A list of numbers.\n    :return: The first odd number in the list or None if no odd numbers are found.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    return count"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for elem in test_tup:\n        if elem == K:\n            k_count += 1\n    if k_count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Loop through the tuples in the list\n    for tup in test_tup:\n        # Check if the tuple contains the k\n        if K in tup:\n            return True\n    # If the k is not found in any tuple, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    count = 0\n    for tup in test_tup:\n        if tup[0] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuples contain the k or not.\n\n    Args:\n    test_tup: a tuple of tuples (i.e., a nested tuple) containing the elements to check.\n    K: an integer representing the value to search for.\n\n    Returns:\n    True if the K is present in the test_tup, False otherwise.\n    \"\"\"\n    if len(test_tup) == 0:\n        return False\n\n    for elem in test_tup:\n        if elem == K:\n            return True\n        if type(elem) == tuple:\n            if check_K(elem, K):\n                return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    # Check if the length of the tuple is equal to K\n    if len(test_tup) == K:\n        # Check if the tuples contain at least one number in common\n        for i in range(K):\n            if test_tup[i] in test_tup[i+1:]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup).intersection(set(K))) == len(K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must be of the same length.\")\n        return\n    \n    # loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # check if the element in test_tup2 is smaller than the corresponding element in test_tup1\n        if test_tup2[i] < test_tup1[i]:\n            print(\"The second tuple is smaller than the first tuple.\")\n            return\n    \n    # if we make it through the loop without returning, then the second tuple is greater than or equal to the first tuple\n    print(\"The second tuple is greater than or equal to the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"Error: The element in the first tuple must be smaller than its corresponding element in the second tuple.\")\n            return\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"The element in the first tuple is smaller than its corresponding element in the second tuple.\")\n    return"
    }
]